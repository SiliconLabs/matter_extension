from __future__ import print_function
import sys
import datetime
from socket import *
from ssl import *
import ssl

if sys.version_info[0] < 3:
    import thread
else:
    import _thread

BYTES_TO_RECEIVE = 256  # Change this to BYTES_TO_RECEIVE present in app.c
MAX_DATA_BYTES = BYTES_TO_RECEIVE * 1024 * 1024

message = 'starter737487er871234567890123456789012345678901234567890123456789012345678901234567890endend'
data_out = message.encode()


def ssl_tx():
    total_sent_bytes = 0

    while True:
        try:
            connection.send(data_out)
            total_sent_bytes += len(data_out)
        except OSError:
            print("Connection closed by client.")
            break

        if total_sent_bytes >= MAX_DATA_BYTES:
            print("Sent {} bytes of data. Exiting...".format(MAX_DATA_BYTES))
            break


server_socket = socket(AF_INET, SOCK_STREAM)
server_socket.bind(('0.0.0.0', 443))
server_socket.listen(10)

# Choose the appropriate protocol based on the Python version
if sys.version_info < (3, 0):
    ssl_context = SSLContext(PROTOCOL_TLSv1)
else:
    ssl_context = SSLContext(PROTOCOL_TLS_SERVER)

ssl_context.verify_mode = ssl.CERT_NONE
ssl_context.load_cert_chain(
    certfile='server-cert.pem', keyfile='server-key.pem')
tls_server = ssl_context.wrap_socket(server_socket, server_side=True)

print('server started')

connection, client_address = tls_server.accept()
print('connection from', client_address)

connection.send(data_out)
print("start data")
ssl_tx()


connection.close()

server_socket.close()