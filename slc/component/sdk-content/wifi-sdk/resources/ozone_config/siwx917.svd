<?xml version="1.0" encoding="utf-8"?>
<!-- File naming: <vendor>_<part/series name>.svd -->
<!--
  Copyright (C) 2012 ARM Limited. All rights reserved.

  Purpose: System Viewer Description (SVD) Example (Schema Version 1.1)
           This is a description of a none-existent and incomplete device
		   for demonstration purposes only.
		   
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
   - Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
   - Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.
   - Neither the name of ARM nor the names of its contributors may be used 
     to endorse or promote products derived from this software without 
     specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
 -->
<device schemaVersion="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="CMSIS-SVD_Schema_1_1.xsd">
  <vendor>Silicon Lab Inc.</vendor>
  <!-- device vendor name -->
  <vendorID>SILAB</vendorID>
  <!-- device vendor short name -->
  <name>RS1xxxx</name>
  <!-- name of part-->
  <series>ARMCM4</series>
  <!-- device series the device belongs to -->
  <version>1.2</version>
  <!-- version of this description, adding CMSIS-SVD 1.1 tags -->
  <description>ARM 32-bit Cortex-M4 Microcontroller based device, CPU clock up to 80MHz, etc.</description>
  <licenseText>
    <!-- this license text will appear in header file. \n force line breaks -->
    ARM Limited (ARM) is supplying this software for use with Cortex-M\n
    processor based microcontroller, but can be equally used for other\n
    suitable  processor architectures. This file can be freely distributed.\n
    Modifications to this file shall be clearly marked.\n
    \n
    THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED\n
    OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF\n
    MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.\n
    ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR\n
    CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  </licenseText>
  <cpu>
    <!-- details about the cpu embedded in the device -->
    <name>CM4</name>
    <revision>r1p0</revision>
    <endian>little</endian>
    <mpuPresent>true</mpuPresent>
    <fpuPresent>true</fpuPresent>
    <nvicPrioBits>6</nvicPrioBits>
    <vendorSystickConfig>false</vendorSystickConfig>
  </cpu>
  <addressUnitBits>8</addressUnitBits>
  <!-- byte addressable memory -->
  <width>32</width>
  <!-- bus width is 32 bits -->
  <!-- default settings implicitly inherited by subsequent sections -->
  <size>32</size>
  <!-- this is the default size (number of bits) of all peripherals
                                                                       and register that do not define "size" themselves -->
  <access>read-write</access>
  <!-- default access permission for all subsequent registers -->
  <resetValue>0x00000000</resetValue>
  <!-- by default all bits of the registers are initialized to 0 on reset -->
  <resetMask>0xFFFFFFFF</resetMask>
  <!-- by default all 32Bits of the registers are used -->
  <peripherals>
    <!-- I2C0 -->
    <peripheral>
      <name>I2C0</name>
      <version>1.0</version>
      <description>Inter Integrated Circuit(I2C) is programmable control bus that provides support for the communications link between integrated circuits in a system</description>
      <groupName>I2C</groupName>
      <baseAddress>0x44010000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>I2C0</name>
        <value>42</value>
      </interrupt>
      <registers>
        <!-- I2C_CON: I2C Control Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>IC_CON</name>
          <description>This register can be written only when the i2c is disabled, which corresponds to IC_ENABLE[0] being set to 0. Writes at other times have no effect.</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x007F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- Master Mode -->
            <field>
              <name>MASTER_MODE</name>
              <description>This bit controls whether the I2C master is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>master disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>master enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Speed -->
            <field>
              <name>SPEED</name>
              <description>These bits control at which speed the I2C operates. Hardware protects against illegal
			  values being programmed by software.</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Standard_Mode</name>
                  <description>standard mode (0 to 100 kbit/s)</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Fast_Mode</name>
                  <description>fast mode (less than or equal 400 kbit/s)</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>High_Speed_Mode</name>
                  <description>high speed mode (less than or equal 3.4 Mbit/s)</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_10BITADDR_SLAVE -->
            <field>
              <name>IC_10BITADDR_SLAVE</name>
              <description>When acting as a slave, this bit controls whether the I2C responds 
			  to 7- or 10-bit addresses.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>7-bit addressing. The DW_apb_i2c ignores transactions that involve 10-bit addressing; 
							   for 7-bit addressing, only the lower 7 bits of the IC_SAR register are compared
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>10-bit addressing. The DW_apb_i2c responds to only 10-bit addressing transfers that match 
							   the full 10 bits of the IC_SAR register.
				  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_10BITADDR_MASTER -->
            <field>
              <name>IC_10BITADDR_MASTER_RD_ONLY</name>
              <description>the function of this bit is handled by bit 12 of IC_TAR register, and becomes 
			  a read-only copy called IC_10BITADDR_MASTER_rd_only</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>7-bit addressing</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>10-bit addressing</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_RESTART_EN -->
            <field>
              <name>IC_RESTART_EN</name>
              <description>Determines whether RESTART conditions may be sent when acting as a master</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_SLAVE_DISABLE -->
            <field>
              <name>IC_SLAVE_DISABLE</name>
              <description>This bit controls whether I2C has its slave disabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>slave is enabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>slave is disabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- STOP_DET_IFADDRESSED -->
            <field>
              <name>STOP_DET_IFADDRESSED</name>
              <description>The STOP DETECTION interrupt is generated only when the transmitted 
			  address matches the slave address of SAR</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Issues the STOP DETECTION irrespective of whether it is addressed or not.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description> issues the STOP DETECTION interrupt only when it is addressed.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TX_EMPTY_CTRL -->
            <field>
              <name>TX_EMPTY_CTRL</name>
              <description>	This bit controls the generation of the TX EMPTY 
			   interrupt, as described in the IC RAW INTR STAT register.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- STOP_DET_IF_MASTER_ACTIVE -->
            <field>
              <name>STOP_DET_IF_MASTER_ACTIVE</name>
              <description> In Master mode.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description> Issues the STOP_DET irrespective of whether the master is active.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Issues the STOP_DET interrupt only when the master is active</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- BUS_CLEAR_FEATURE_CTRL -->
            <field>
              <name>BUS_CLEAR_FEATURE_CTRL</name>
              <description> In Master mode.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description> Bus Clear Feature is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Bus Clear Feature is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- IC_TAR: I2C Target Address Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>IC_TAR</name>
          <description>I2C Target Address Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x10A0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_TAR -->
            <field>
              <name>IC_TAR</name>
              <description>This is the target address for any master transaction</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GC_OR_START -->
            <field>
              <name>GC_OR_START</name>
              <description> If bit 11 (SPECIAL) is set to 1, then this bit indicates whether a General Call or START byte command 
							is to be performed by the DW_apb_i2c
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>General Call Address</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>START BYTE</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SPECIAL-->
            <field>
              <name>SPECIAL</name>
              <description> This bit indicates whether software performs a General Call or START BYTE command</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>ignore bit 10 GC_OR_START and use IC_TAR normally</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>perform special I2C command as specified in GC_OR_START bit</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_10BITADDR_MASTER-->
            <field>
              <name>IC_10BITADDR_MASTER</name>
              <description> This bit controls whether the i2c starts its transfers in 7-or 10-bit addressing mode when acting as a master</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>7-bit addressing</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>10-bit addressing</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Device_ID-->
            <field>
              <name>DEVICE_ID</name>
              <description> If bit 11 (SPECIAL) is set to 1, then this bit indicates whether a Device-ID of a particular slave mentioned in IC_TAR[6:0] is to be performed by the I2C Master</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Device-ID is not performed and checks ic_tar[10] to perform either general call or START byte command.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>: Device-ID transfer is performed and bytes based on the number of read commands in the Tx-FIFO are received from the targeted slave and put in the Rx-FIFO.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:14]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SAR: I2C Slave Address Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>IC_SAR</name>
          <description>I2C Slave Address Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x55</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_SAR -->
            <field>
              <name>IC_SAR</name>
              <description>The IC_SAR holds the slave address when the I2C is operating as a slave. For 7-bit
							addressing, only IC_SAR[6:0] is used.</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_HS_MADDR: I2C High Speed Master Mode Code Address Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>IC_HS_MADDR</name>
          <description>I2C High Speed Master Mode Code Address Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0001</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- IC_HS_MAR -->
            <field>
              <name>IC_HS_MAR</name>
              <description> This bit field holds the value of the I2C HS mode master code</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_DATA_CMD:I2C Rx/Tx Data Buffer and Command Register -->
        <!-- REGISTER 5 -->
        <register>
          <name>IC_DATA_CMD</name>
          <description>I2C Rx/Tx Data Buffer and Command Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- DAT -->
            <field>
              <name>DAT</name>
              <description>This register contains the data to be transmitted or received on the I2C bus</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CMD -->
            <field>
              <name>CMD</name>
              <description>This bit controls whether a read or a write is performed</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- STOP -->
            <field>
              <name>STOP</name>
              <description>This bit controls whether a STOP is issued after the byte is sent or received</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>STOP is not issued after this byte, regardless of whether or not the Tx FIFO is empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>STOP is issued after this byte, regardless of whether or not the Tx FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESTART -->
            <field>
              <name>RESTART</name>
              <description>This bit controls whether a RESTART is issued before the byte is sent or received</description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued only if the transfer direction is changing from the previous command</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued before the data is sent/received</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIRST_DATA_BYTE -->
            <field>
              <name>FIRST_DATA_BYTE</name>
              <description>Indicates the first data byte received after the address phase for receive
						   transfer in Master receiver or Slave receiver mode</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued only if the transfer direction is changing from the previous command</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued before the data is sent/received</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SS_SCL_HCNT: Standard Speed I2C Clock SCL High Count Register -->
        <!-- REGISTER 6 -->
        <register>
          <name>IC_SS_SCL_HCNT</name>
          <description>Standard Speed I2C Clock SCL High Count Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x01F4</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_SS_SCL_HCNT -->
            <field>
              <name>IC_SS_SCL_HCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SS_SCL_LCNT: Standard Speed I2C Clock SCL Low Count Register -->
        <!-- REGISTER 7 -->
        <register>
          <name>IC_SS_SCL_LCNT</name>
          <description>Standard Speed I2C Clock SCL Low Count Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x024C</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_SS_SCL_LCNT -->
            <field>
              <name>IC_SS_SCL_LCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_FS_SCL_HCNT: Fast Speed I2C Clock SCL High Count Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>IC_FS_SCL_HCNT</name>
          <description>Fast Speed I2C Clock SCL High Count Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x004b</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_FS_SCL_HCNT -->
            <field>
              <name>IC_FS_SCL_HCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_FS_SCL_LCNT: Fast Speed I2C Clock SCL Low Count Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>IC_FS_SCL_LCNT</name>
          <description>Fast Speed I2C Clock SCL Low Count Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00a3</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_FS_SCL_LCNT -->
            <field>
              <name>IC_FS_SCL_LCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_HS_SCL_HCNT: High Speed I2C Clock SCL High Count Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>IC_HS_SCL_HCNT</name>
          <description>High Speed I2C Clock SCL High Count Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000f</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_HS_SCL_HCNT -->
            <field>
              <name>IC_HS_SCL_HCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_HS_SCL_LCNT: High Speed I2C Clock SCL Low Count Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>IC_HS_SCL_LCNT</name>
          <description>High Speed I2C Clock SCL Low Count Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0028</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_HS_SCL_LCNT -->
            <field>
              <name>IC_HS_SCL_LCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_INTR_STAT: I2C Interrupt Status Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>IC_INTR_STAT</name>
          <description>I2C Interrupt Status Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- R_RX_UNDER  -->
            <field>
              <name>R_RX_UNDER</name>
              <description>Set if the processor attempts to read the receive buffer when it is empty by reading from the IC_DATA_CMD register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RX_OVER -->
            <field>
              <name>R_RX_OVER</name>
              <description>Set if the receive buffer is completely filled to IC_RX_BUFFER_DEPTH and an additional byte is received from an external I2C device</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RX_FULL  -->
            <field>
              <name>R_RX_FULL</name>
              <description>Set when the receive buffer reaches or goes above the RX_TL threshold in the IC_RX_TL register.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_TX_OVER   -->
            <field>
              <name>R_TX_OVER</name>
              <description>Set during transmit if the transmit buffer is filled to IC_TX_BUFFER_DEPTH and the processor attempts to issue another I2C command by writing to the
						   IC_DATA_CMD register.
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_TX_EMPTY   -->
            <field>
              <name>R_TX_EMPTY</name>
              <description>This bit is set to 1 when the transmit buffer is at or below the threshold value set in the IC_TX_TL register.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RD_REQ   -->
            <field>
              <name>R_RD_REQ</name>
              <description>This bit is set to 1 when DW_apb_i2c is acting as a slave and another I2C master is attempting to read data from DW_apb_i2c.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_TX_ABRT  -->
            <field>
              <name>R_TX_ABRT</name>
              <description>This bit indicates if DW_apb_i2c, as an I2C transmitter, is unable to complete the intended actions on the contents of the transmit FIFO</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RX_DONE  -->
            <field>
              <name>R_RX_DONE</name>
              <description>When the DW_apb_i2c is acting as a slave-transmitter, this bit is set to 1 if the master does not acknowledge a transmitted byte</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_ACTIVITY  -->
            <field>
              <name>R_ACTIVITY</name>
              <description>This bit captures DW_apb_i2c activity and stays set until it is cleared</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_STOP_DET -->
            <field>
              <name>R_STOP_DET</name>
              <description>Indicates whether a STOP condition has occurred on the I2C interface regardless of whether DW_apb_i2c is operating in slave or master mode.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_START_DET -->
            <field>
              <name>R_START_DET</name>
              <description>Indicates whether a START or RESTART condition has occurred on the I2C interface regardless of 
						   whether DW_apb_i2c is operating in slave or master mode.
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--R_GEN_CALL-->
            <field>
              <name>R_GEN_CALL</name>
              <description>Set only when a General Call address is received and it is acknowledged</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--R_RESTART_DET-->
            <field>
              <name>R_RESTART_DET</name>
              <description>Indicates whether a RESTART condition has occurred on the I2C interface
						   when DW_apb_i2c is operating in slave mode and the slave is the addressed slave</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--MST_ON_HOLD-->
            <field>
              <name>R_MST_ON_HOLD</name>
              <description>Indicates whether a master is holding the bus and the Tx FIFO is empty.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--SCL_STUCK_AT_LOW-->
            <field>
              <name>M_SCL_STUCK_AT_LOW</name>
              <description>Indicates whether the SCL Line is stuck at low for the IC_SCL_STUCK_LOW_TIMOUT number of ic_clk periods</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_INTR_MASK: I2C Interrupt Mask Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>IC_INTR_MASK</name>
          <description>I2C Interrupt Mask Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x08FF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- M_RX_UNDER  -->
            <field>
              <name>M_RX_UNDER</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RX_OVER -->
            <field>
              <name>M_RX_OVER</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RX_FULL  -->
            <field>
              <name>M_RX_FULL</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_TX_OVER   -->
            <field>
              <name>M_TX_OVER</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_TX_EMPTY   -->
            <field>
              <name>M_TX_EMPTY</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RD_REQ   -->
            <field>
              <name>M_RD_REQ</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_TX_ABRT  -->
            <field>
              <name>M_TX_ABRT</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RX_DONE  -->
            <field>
              <name>M_RX_DONE</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_ACTIVITY  -->
            <field>
              <name>M_ACTIVITY</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_STOP_DET -->
            <field>
              <name>M_STOP_DET</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_START_DET -->
            <field>
              <name>M_START_DET</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--M_GEN_CALL-->
            <field>
              <name>M_GEN_CALL</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--M_RESTART_DET-->
            <field>
              <name>M_RESTART_DET</name>
              <description>Indicates whether a RESTART condition has occurred on the I2C interface
						   when DW_apb_i2c is operating in slave mode and the slave is the addressed slave</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--MST_ON_HOLD-->
            <field>
              <name>M_MST_ON_HOLD</name>
              <description>Indicates whether a master is holding the bus and the Tx FIFO is empty.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--SCL_STUCK_AT_LOW-->
            <field>
              <name>M_SCL_STUCK_AT_LOW</name>
              <description>Indicates whether the SCL Line is stuck at low for the IC_SCL_STUCK_LOW_TIMOUT number of ic_clk periods</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_RAW_INTR_STAT: I2C Raw Interrupt Status Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>IC_RAW_INTR_STAT</name>
          <description>I2C Raw Interrupt Status Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- RX_UNDER  -->
            <field>
              <name>RX_UNDER</name>
              <description>Set if the processor attempts to read the receive buffer when it is empty by reading from the IC_DATA_CMD register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RX_OVER -->
            <field>
              <name>RX_OVER</name>
              <description>Set if the receive buffer is completely filled to IC_RX_BUFFER_DEPTH and an additional byte is received from an external I2C device</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RX_FULL  -->
            <field>
              <name>RX_FULL</name>
              <description>Set when the receive buffer reaches or goes above the RX_TL threshold in the IC_RX_TL register.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TX_OVER   -->
            <field>
              <name>TX_OVER</name>
              <description>Set during transmit if the transmit buffer is filled to IC_TX_BUFFER_DEPTH and the processor attempts to issue another I2C command by writing to the
						   IC_DATA_CMD register.
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TX_EMPTY   -->
            <field>
              <name>TX_EMPTY</name>
              <description>This bit is set to 1 when the transmit buffer is at or below the threshold value set in the IC_TX_TL register.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RD_REQ   -->
            <field>
              <name>RD_REQ</name>
              <description>This bit is set to 1 when DW_apb_i2c is acting as a slave and another I2C master is attempting to read data from DW_apb_i2c.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TX_ABRT  -->
            <field>
              <name>TX_ABRT</name>
              <description>This bit indicates if DW_apb_i2c, as an I2C transmitter, is unable to complete the intended actions on the contents of the transmit FIFO</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RX_DONE  -->
            <field>
              <name>RX_DONE</name>
              <description>When the DW_apb_i2c is acting as a slave-transmitter, this bit is set to 1 if the master does not acknowledge a transmitted byte</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ACTIVITY  -->
            <field>
              <name>ACTIVITY</name>
              <description>This bit captures DW_apb_i2c activity and stays set until it is cleared</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- STOP_DET -->
            <field>
              <name>STOP_DET</name>
              <description>Indicates whether a STOP condition has occurred on the I2C interface regardless of whether DW_apb_i2c is operating in slave or master mode.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- START_DET -->
            <field>
              <name>START_DET</name>
              <description>Indicates whether a START or RESTART condition has occurred on the I2C interface regardless of 
						   whether DW_apb_i2c is operating in slave or master mode.
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--GEN_CALL-->
            <field>
              <name>GEN_CALL</name>
              <description>Set only when a General Call address is received and it is acknowledged</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESTART_DET-->
            <field>
              <name>RESTART_DET</name>
              <description>Indicates whether a RESTART condition has occurred on the I2C interface
						   when DW_apb_i2c is operating in slave mode and the slave is the addressed slave</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--MST_ON_HOLD-->
            <field>
              <name>MST_ON_HOLD</name>
              <description>Indicates whether a master is holding the bus and the Tx FIFO is empty.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--SCL_STUCK_AT_LOW-->
            <field>
              <name>SCL_STUCK_AT_LOW</name>
              <description>Indicates whether the SCL Line is stuck at low for the IC_SCL_STUCK_LOW_TIMOUT number of ic_clk periods</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_RX_TL: I2C Receive FIFO Threshold Register -->
        <!-- REGISTER 15 -->
        <register>
          <name>IC_RX_TL</name>
          <description>I2C Receive FIFO Threshold Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0008</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- RX_TL -->
            <field>
              <name>RX_TL</name>
              <description>Receive FIFO Threshold Level</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_TX_TL: I2C Transmit FIFO Threshold Register -->
        <!-- REGISTER 16 -->
        <register>
          <name>IC_TX_TL</name>
          <description>I2C Transmit FIFO Threshold Register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0008</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- TX_TL -->
            <field>
              <name>TX_TL</name>
              <description>Transmit FIFO Threshold Level</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_INTR: Clear Combined and Individual Interrupt Register -->
        <!-- REGISTER 17 -->
        <register>
          <name>IC_CLR_INTR</name>
          <description>Clear Combined and Individual Interrupt Register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_INTR -->
            <field>
              <name>CLR_INTR</name>
              <description>Read this register to clear the combined interrupt, all individual interrupts, and the IC_TXABRT_SOURCE register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RX_UNDER: Clear RX_UNDER Interrupt Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>IC_CLR_RX_UNDER</name>
          <description>Clear RX_UNDER Interrupt Register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RX_UNDER -->
            <field>
              <name>CLR_RX_UNDER</name>
              <description>Read this register to clear the RX_UNDER interrupt (bit 0) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RX_OVER: Clear RX_OVER Interrupt Register -->
        <!-- REGISTER 19 -->
        <register>
          <name>IC_CLR_RX_OVER</name>
          <description>Clear RX_OVER Interrupt Register</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RX_OVER -->
            <field>
              <name>CLR_RX_OVER</name>
              <description>Read this register to clear the RX_OVER interrupt (bit 1) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_TX_OVER: Clear TX_OVER Interrupt Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>IC_CLR_TX_OVER</name>
          <description>Clear TX_OVER Interrupt Register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_TX_OVER -->
            <field>
              <name>CLR_TX_OVER</name>
              <description>Read this register to clear the TX_OVER interrupt (bit 3) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RD_REQ:Clear RD_REQ Interrupt Register -->
        <!-- REGISTER 21 -->
        <register>
          <name>IC_CLR_RD_REQ</name>
          <description>Clear RD_REQ Interrupt Register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RD_REQ -->
            <field>
              <name>CLR_RD_REQ</name>
              <description>Read this register to clear the RD_REQ interrupt (bit 5) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_TX_ABRT:Clear TX_ABRT Interrupt Register -->
        <!-- REGISTER 22 -->
        <register>
          <name>IC_CLR_TX_ABRT</name>
          <description>Clear TX_ABRT Interrupt Register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_TX_ABRT -->
            <field>
              <name>CLR_TX_ABRT</name>
              <description>Read this register to clear the TX_ABRT interrupt (bit 6) of the C_RAW_INTR_STAT register, and the IC_TX_ABRT_SOURCE register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RX_DONE:Clear RX_DONE Interrupt Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>IC_CLR_RX_DONE</name>
          <description>Clear RX_DONE Interrupt Register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RX_DONE -->
            <field>
              <name>CLR_RX_DONE</name>
              <description>Read this register to clear the RX_DONE interrupt (bit 7) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_ACTIVITY:Clear ACTIVITY Interrupt Register -->
        <!-- REGISTER 24 -->
        <register>
          <name>IC_CLR_ACTIVITY</name>
          <description>Clear ACTIVITY Interrupt Register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_ACTIVITY -->
            <field>
              <name>CLR_ACTIVITY</name>
              <description>Reading this register clears the ACTIVITY interrupt if the I2C is not active any more</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_STOP_DET:Clear STOP_DET Interrupt Register -->
        <!-- REGISTER 25 -->
        <register>
          <name>IC_CLR_STOP_DET</name>
          <description>Clear STOP_DET Interrupt Register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_STOP_DET -->
            <field>
              <name>CLR_STOP_DET</name>
              <description>Read this register to clear the STOP_DET interrupt (bit 9) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_START_DET:Clear START_DET Interrupt Register -->
        <!-- REGISTER 26 -->
        <register>
          <name>IC_CLR_START_DET</name>
          <description>Clear START_DET Interrupt Register</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_START_DET -->
            <field>
              <name>CLR_START_DET</name>
              <description>Read this register to clear the START_DET interrupt (bit 10) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_GEN_CALL:Clear GEN_CALL Interrupt Register -->
        <!-- REGISTER 27 -->
        <register>
          <name>IC_CLR_GEN_CALL</name>
          <description>Clear GEN_CALL Interrupt Register</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_GEN_CALL -->
            <field>
              <name>CLR_GEN_CALL</name>
              <description>Read this register to clear the GEN_CALL interrupt (bit 11) of IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_ENABLE:I2C Enable Register -->
        <!-- REGISTER 28 -->
        <register>
          <name>IC_ENABLE</name>
          <description>Clear GEN_CALL Interrupt Register</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- ENABLE -->
            <field>
              <name>EN</name>
              <description>Controls whether the DW_apb_i2c is enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disables DW_apb_i2c (TX and RX FIFOs are held in an erased state)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enables DW_apb_i2c</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ABORT -->
            <field>
              <name>ABORT</name>
              <description>When set, the controller initiates the transfer abort</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>ABORT not initiated or ABORT done</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>ABORT operation in progress</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TX_CMD_BLOCK -->
            <field>
              <name>TX_CMD_BLOCK</name>
              <description>none</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>The transmission of data starts on I2C bus automatically, 
								as soon as the first data is available in the Tx FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Blocks the transmission of data on I2C bus even if Tx FIFO has data to transmit</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SDA_STUCK_RECOVERY_ENABLE -->
            <field>
              <name>SDA_STUCK_RECOVERY_ENABLE</name>
              <description>SDA STUCK RECOVERY ENABLE</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_STATUS:I2C Status Register -->
        <!-- REGISTER 29-->
        <register>
          <name>IC_STATUS</name>
          <description>I2C Status Register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000006</resetValue>
          <resetMask>0x0F</resetMask>
          <fields>
            <!-- ACTIVITY -->
            <field>
              <name>ACTIVITY</name>
              <description>I2C Activity Status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TFNF -->
            <field>
              <name>TFNF</name>
              <description>Transmit FIFO Not Full</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit FIFO is full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit FIFO is not full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFE -->
            <field>
              <name>TFE</name>
              <description>Transmit FIFO Completely Empty</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFNE -->
            <field>
              <name>RFNE</name>
              <description>Receive FIFO Not Empty</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receive FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receive FIFO is not empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFF -->
            <field>
              <name>RFF</name>
              <description>Receive FIFO Completely Full</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receive FIFO is not full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receive FIFO is full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MST_ACTIVITY -->
            <field>
              <name>MST_ACTIVITY</name>
              <description>Master FSM Activity Status</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Master FSM is in IDLE state so the Master part of DW_apb_i2c is not Active</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Master FSM is not in IDLE state so the Master part of DW_apb_i2c is Active</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SLV_ACTIVITY -->
            <field>
              <name>SLV_ACTIVITY</name>
              <description>Slave FSM Activity Status</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Slave FSM is in IDLE state so the Slave part of DW_apb_i2c is not Active</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Slave FSM is not in IDLE state so the Slave part of DW_apb_i2c is Active</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MST_HOLD_TX_FIFO_EMPTY -->
            <field>
              <name>MST_HOLD_TX_FIFO_EMPTY</name>
              <description>The I2C master stalls the write transfer when Tx FIFO is empty, and 
			  the the last byte does not have the Stop bit set.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- MST_HOLD_RX_FIFO_FULL -->
            <field>
              <name>MST_HOLD_RX_FIFO_FULL</name>
              <description>This bit indicates the BUS Hold in Master mode due to Rx FIFO is Full and
 			  additional byte has been received.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SLV_HOLD_TX_FIFO_EMPTY -->
            <field>
              <name>SLV_HOLD_TX_FIFO_EMPTY</name>
              <description>This bit indicates the BUS Hold in Slave mode for the Read request when the 
			   Tx FIFO is empty.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SLV_HOLD_RX_FIFO_FULL -->
            <field>
              <name>SLV_HOLD_RX_FIFO_FULL</name>
              <description>This bit indicates the BUS Hold in Slave mode due to the Rx FIFO being Full and 
			  an additional byte being received.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDA_STUCK_NOT_RECOVERED -->
            <field>
              <name>SDA_STUCK_NOT_RECOVERED</name>
              <description>This bit indicates that an SDA stuck at low is not recovered after the 
			  recovery mechanism.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_TXFLR:I2C Transmit FIFO Level Register -->
        <!-- REGISTER 30 -->
        <register>
          <name>IC_TXFLR</name>
          <description>I2C Transmit FIFO Level Register</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- TXFLR -->
            <field>
              <name>TXFLR</name>
              <description>Contains the number of valid data entries in the transmit FIFO.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_RXFLR:I2C Receive FIFO Level Register -->
        <!-- REGISTER 31 -->
        <register>
          <name>IC_RXFLR</name>
          <description>I2C Receive FIFO Level Register</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- RXFLR -->
            <field>
              <name>RXFLR</name>
              <description>Receive FIFO Level. Contains the number of valid data entries in the receive FIFO</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SDA_HOLD:I2C SDA Hold Time Length Register -->
        <!-- REGISTER 32 -->
        <register>
          <name>IC_SDA_HOLD</name>
          <description>I2C SDA Hold Time Length Register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0001</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--IC_SDA_TX_HOLD -->
            <field>
              <name>IC_SDA_TX_HOLD</name>
              <description>Sets the required SDA hold time in units of ic_clk period,when I2C 
			  acts as a transmitter.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--IC_SDA_RX_HOLD -->
            <field>
              <name>IC_SDA_RX_HOLD</name>
              <description>Sets the required SDA hold time in units of ic_clk period,when 
			  I2C acts as a receiver.</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_TX_ABRT_SOURCE:I2C Transmit Abort Source Register -->
        <!-- REGISTER 33 -->
        <register>
          <name>IC_TX_ABRT_SOURCE</name>
          <description>I2C Transmit Abort Source Register</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--ABRT_7B_ADDR_NOACK -->
            <field>
              <name>ABRT_7B_ADDR_NOACK</name>
              <description>1: Master is in 7-bit addressing mode and the address sent was not acknowledged by any slave</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_10ADDR1_NOACK -->
            <field>
              <name>ABRT_10ADDR1_NOACK</name>
              <description>1: Master is in 10-bit address mode and the first 10-bit address byte was not acknowledged by any slave</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_10ADDR2_NOACK -->
            <field>
              <name>ABRT_10ADDR2_NOACK</name>
              <description>1: Master is in 10-bit address mode and the second address byte of the 10-bit address was not acknowledged by any slave</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_TXDATA_NOACK -->
            <field>
              <name>ABRT_TXDATA_NOACK</name>
              <description>1: This is a master-mode only bit. Master has received an acknowledgement for the address, but when it sent data byte(s)
						   following the address, it did not receive an acknowledge from the remote slave(s)
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_GCALL_NOACK -->
            <field>
              <name>ABRT_GCALL_NOACK</name>
              <description>1: DW_apb_i2c in master mode sent a General Call and no slave on the bus acknowledged the General Call
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_GCALL_READ -->
            <field>
              <name>ABRT_GCALL_READ</name>
              <description>1: DW_apb_i2c in master mode sent a General Call but the user programmed the byte following the 
						   General Call to be a read from the bus (IC_DATA_CMD[9] is set to 1)
			  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_HS_ACKDET -->
            <field>
              <name>ABRT_HS_ACKDET</name>
              <description>1: Master is in High Speed mode and the High Speed Master code was acknowledged</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SBYTE_ACKDET -->
            <field>
              <name>ABRT_SBYTE_ACKDET</name>
              <description>1: Master has sent a START Byte and the START Byte was acknowledged (wrong behavior)</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_HS_NORSTRT -->
            <field>
              <name>ABRT_HS_NORSTRT</name>
              <description>1: The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) = 0) and the user is trying to
						   use the master to transfer data in High Speed mode</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SBYTE_NORSTRT -->
            <field>
              <name>ABRT_SBYTE_NORSTRT</name>
              <description>1: The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) = 0) and the user is trying to
						   send a START Byte</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_10B_RD_NORSTRT -->
            <field>
              <name>ABRT_10B_RD_NORSTRT</name>
              <description>1: The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) = 0) and the master sends a
						   read command in 10-bit addressing mode</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_MASTER_DIS -->
            <field>
              <name>ABRT_MASTER_DIS</name>
              <description>1: User tries to initiate a Master operation with the Master mode disabled</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--ARB_LOST -->
            <field>
              <name>ARB_LOST</name>
              <description>1: Master has lost arbitration, or if IC_TX_ABRT_SOURCE[14] is also set, then
						   the slave transmitter has lost arbitration</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SLVFLUSH_TXFIFO -->
            <field>
              <name>ABRT_SLVFLUSH_TXFIFO</name>
              <description>1: Slave has received a read command and some data exists in the TX FIFO so the slave
						   issues a TX_ABRT interrupt to flush old data in TX FIFO</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SLV_ARBLOST -->
            <field>
              <name>ABRT_SLV_ARBLOST</name>
              <description>1: Slave lost the bus while transmitting data to a remote master. IC_TX_ABRT_SOURCE[12]
						   is set at the same time</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SLVRD_INTX -->
            <field>
              <name>ABRT_SLVRD_INTX</name>
              <description>1: When the processor side responds to a slave mode request for data to be transmitted
						   to a remote master and user writes a 1 in CMD (bit 8) of IC_DATA_CMD register
			  </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_USER_ABRT -->
            <field>
              <name>ABRT_USER_ABRT</name>
              <description>This is a master-mode-only bit. Master has detected the transfer abort (IC_ENABLE[1]).
			  </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SDA_STUCK_AT_LOW -->
            <field>
              <name>ABRT_SDA_STUCK_AT_LOW</name>
              <description>Master detects the SDA is Stuck at low for the IC_SDA_STUCK_AT_LOW_TIMEOUT value of ic_clks
			  </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_DEVICE_NOACK -->
            <field>
              <name>ABRT_DEVICE_NOACK</name>
              <description>Master initiates the DEVICE_ID transfer and the device ID sent is not acknowledged by any slave
			  </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_DEVICE_SLVADDR_NOACK -->
            <field>
              <name>ABRT_DEVICE_SLVADDR_NOACK</name>
              <description>Master is initiating the DEVICE_ID transfer and the slave address 
						   sent was not acknowledged by any slave
			  </description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_DEVICE_WRITE -->
            <field>
              <name>ABRT_DEVICE_WRITE</name>
              <description>Master is initiating the DEVICE_ID transfer and the Tx-
						   FIFO consists of write commands.
			  </description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[22:21]</bitRange>
              <access>read-only</access>
            </field>
            <!--TX_FLUSH_CNT -->
            <field>
              <name>TX_FLUSH_CNT</name>
              <description>This field indicates the number of Tx FIFO data commands that are flushed due to TX_ABRT interrupt
			  </description>
              <bitRange>[31:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SLV_DATA_NACK_ONLY:Generate Slave Data NACK Register -->
        <!-- REGISTER 34 -->
        <register>
          <name>IC_SLV_DATA_NACK_ONLY</name>
          <description>Generate Slave Data NACK Register</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--NACK -->
            <field>
              <name>NACK</name>
              <description>Generate NACK. This NACK generation only occurs when DW_apb_i2c is a slave receiver.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_DMA_CR:DMA Control Register -->
        <!-- REGISTER 35 -->
        <register>
          <name>IC_DMA_CR</name>
          <description>DMA Control Register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--RDMAE -->
            <field>
              <name>RDMAE</name>
              <description>Receive DMA Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receive DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receive DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--TDMAE -->
            <field>
              <name>TDMAE</name>
              <description>Transmit DMA Enable.This bit enables/disables the transmit FIFO DMA channel</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_DMA_TDLR:DMA Transmit Data Level Register -->
        <!-- REGISTER 36 -->
        <register>
          <name>IC_DMA_TDLR</name>
          <description>DMA Transmit Data Level Register</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--DMATDL:Transmit Data Level -->
            <field>
              <name>DMATDL</name>
              <description>This bit field controls the level at which a DMA request is made by the transmit logic</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_DMA_RDLR:I2C Receive Data Level Register -->
        <!-- REGISTER 37 -->
        <register>
          <name>IC_DMA_RDLR</name>
          <description>I2C Receive Data Level Register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <!--DMATDL:Transmit Data Level -->
            <field>
              <name>DMARDL</name>
              <description>This bit field controls the level at which a DMA request is made by the receive logic</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SDA_SETUP:I2C SDA Setup Register -->
        <!-- REGISTER 38 -->
        <register>
          <name>IC_SDA_SETUP</name>
          <description>I2C SDA Setup Register</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--SDA_SETUP-->
            <field>
              <name>SDA_SETUP</name>
              <description>This register controls the amount of time delay (in terms of number of ic_clk clock periods)</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_ACK_GENERAL_CALL:I2C ACK General Call Register -->
        <!-- REGISTER 39 -->
        <register>
          <name>IC_ACK_GENERAL_CALL</name>
          <description>I2C ACK General Call Register</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--ACK_GEN_CALL:ACK General Call -->
            <field>
              <name>ACK_GEN_CALL</name>
              <description>ACK General Call</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c does not generate General Call interrupts</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c responds with a ACK (by asserting ic_data_oe) when it receives a General Call.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_ENABLE_STATUS:I2C Enable Status Register -->
        <!-- REGISTER 40 -->
        <register>
          <name>IC_ENABLE_STATUS</name>
          <description>I2C Enable Status Register</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--IC_EN:ic_en Status -->
            <field>
              <name>IC_EN</name>
              <description>This bit always reflects the value driven on the output port ic_en.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c is deemed completely inactive</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c is deemed to be in an enabled state</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SLV_DISABLED_WHILE_BUSY:Slave Disabled While Busy (Transmit, Receive) -->
            <field>
              <name>SLV_DISABLED_WHILE_BUSY</name>
              <description>This bit indicates if a potential or active Slave operation has been aborted due to the setting of
							the IC_ENABLE register from 1 to 0</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c is deemed to have been disabled when there is master activity, or when the I2C bus is idle.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c is deemed to have forced a NACK during any part of an I2C transfer</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SLV_RX_DATA_LOST: Slave Received Data Lost -->
            <field>
              <name>SLV_RX_DATA_LOST</name>
              <description>Slave Received Data Lost</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c is deemed to have been actively engaged in an aborted I2C transfer (with matching address) and the data phase of the
							   I2C transfer has been entered, even though a data byte has been responded with a NACK</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c is deemed to have been disabled without being actively involved in the data phase of a Slave-Receiver transfer</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_FS_SPKLEN:I2C SS and FS Spike Suppression Limit Register -->
        <!-- REGISTER 41 -->
        <register>
          <name>IC_FS_SPKLEN</name>
          <description>I2C SS and FS Spike Suppression Limit Register</description>
          <alternateRegister>IC_UFM_SPKLEN</alternateRegister>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000006</resetValue>
          <resetMask>0x000000FF</resetMask>
          <fields>
            <!--IC_FS_SPKLEN:ic_en Status -->
            <field>
              <name>IC_FS_SPKLEN</name>
              <description> This register sets the duration, measured in ic_clk cycles, of the longest spike in the SCL or SDA lines that are filtered out by
							the spike suppression logic</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_HS_SPKLEN:I2C HS Spike Suppression Limit Register -->
        <!-- REGISTER 42 -->
        <register>
          <name>IC_HS_SPKLEN</name>
          <description>I2C HS Spike Suppression Limit Register</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000002</resetValue>
          <resetMask>0x000000FF</resetMask>
          <fields>
            <!--IC_HS_SPKLEN:ic_en Status -->
            <field>
              <name>IC_HS_SPKLEN</name>
              <description> This register sets the duration, measured in ic_clk cycles, of the longest spike in the SCL or SDA lines that are filtered out by
							the spike suppression logic</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_CLR_RESTART_DET:Clear RESTART_DET Interrupt Register -->
        <!-- REGISTER 43 -->
        <register>
          <name>IC_CLR_RESTART_DET</name>
          <description>Clear RESTART_DET Interrupt Register</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <fields>
            <!--CLR_RESTART_DET -->
            <field>
              <name>CLR_RESTART_DET</name>
              <description> Read this register to clear the RESTART_DET interrupt (bit 12) of
							the IC_RAW_INTR_STAT registe</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_COMP_PARAM_1:Component Parameter Register 1 -->
        <!-- REGISTER 44 -->
        <register>
          <name>IC_COMP_PARAM_1</name>
          <description>I2C HS Spike Suppression Limit Register</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x000808EC</resetValue>
          <fields>
            <!--CLR_RESTART_DET -->
            <field>
              <name>CLR_RESTART_DET</name>
              <description>Read this register to clear the RESTART_DET interrupt (bit 12) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--MAX_SPEED_MODE -->
            <field>
              <name>MAX_SPEED_MODE</name>
              <description>Maximum Speed Mode</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--HC_COUNT_VALUES -->
            <field>
              <name>HC_COUNT_VALUES</name>
              <description> Hard Code the count values</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--INTR_IO -->
            <field>
              <name>INTR_IO</name>
              <description>Single Interrupt Output port </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--HAS_DMA -->
            <field>
              <name>HAS_DMA</name>
              <description>DMA Handshake Interface signal</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--ADD_ENCODED_PARAMS -->
            <field>
              <name>ADD_ENCODED_PARAMS</name>
              <description>Add Encoded Parameters</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--RX_BUFFER_DEPTH-->
            <field>
              <name>RX_BUFFER_DEPTH</name>
              <description>Depth of receive buffer;the buffer is 8 bits wide;2 to 256</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--TX_BUFFER_DEPTH-->
            <field>
              <name>TX_BUFFER_DEPTH</name>
              <description>Depth of Transmit buffer;the buffer is 8 bits wide;2 to 256</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_COMP_VERSION:I2C Component Version Register -->
        <!-- REGISTER 45 -->
        <register>
          <name>IC_COMP_VERSION</name>
          <description>I2C Component Version Register</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- IC_COMP_VERSION -->
            <field>
              <name>IC_COMP_VERSION</name>
              <description>Signifies the component version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_COMP_TYPE:I2C Component Type Register -->
        <!-- REGISTER 46 -->
        <register>
          <name>IC_COMP_TYPE</name>
          <description>I2C Component Type Register</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- IC_COMP_TYPE -->
            <field>
              <name>IC_COMP_TYPE</name>
              <description>Design ware Component Type number = 0x44_57_01_40</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_SCL_STUCK_AT_LOW_TIMEOUT -->
        <!-- REGISTER 47 -->
        <register>
          <name>IC_SCL_STUCK_AT_LOW_TIMEOUT</name>
          <description>I2C SCL Stuck at Low Timeout</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <fields>
            <!-- IC_SCL_STUCK_LOW_TIMEOUT -->
            <field>
              <name>IC_SCL_STUCK_LOW_TIMEOUT</name>
              <description>Generates the interrupt to indicate SCL stuck at low if it
						   detects the SCL stuck at low for the IC_SCL_STUCK_LOW_TIMEOUT in units of ic_clk period</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SDA_STUCK_AT_LOW_TIMEOUT -->
        <!-- REGISTER 48 -->
        <register>
          <name>IC_SDA_STUCK_AT_LOW_TIMEOUT</name>
          <description>I2C SDA Stuck at Low Timeout</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <fields>
            <!-- IC_SDA_STUCK_LOW_TIMEOUT -->
            <field>
              <name>IC_SDA_STUCK_LOW_TIMEOUT</name>
              <description>Initiates the recovery of SDA line , if it
						   detects the SDA stuck at low for the IC_SDA_STUCK_LOW_TIMEOUT in units of ic_clk period.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_CLR_SCL_STUCK_DET -->
        <!-- REGISTER 49 -->
        <register>
          <name>IC_CLR_SCL_STUCK_DET</name>
          <description>Clear SCL Stuck at Low Detect Interrupt Register</description>
          <addressOffset>0xB4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!-- CLR_SCL_STUCK -->
            <field>
              <name>CLR_SCL_STUCK</name>
              <description>Read this register to clear the SCL_STUCK_DET interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_DEVICE_ID -->
        <!-- REGISTER 50 -->
        <register>
          <name>IC_DEVICE_ID</name>
          <description>I2C Device ID</description>
          <addressOffset>0xB8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!-- DEVICE_ID -->
            <field>
              <name>DEVICE_ID</name>
              <description>Contains the Device-ID of the component assigned through the
						   configuration parameter</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_CLOCK_LOW_SEXT -->
        <!-- REGISTER 51 -->
        <register>
          <name>IC_SMBUS_CLOCK_LOW_SEXT</name>
          <description> SMBUS Slave Clock Extend Timeout Register</description>
          <addressOffset>0xBC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- SMBUS_CLK_LOW_SEXT_TIMEOUT -->
            <field>
              <name>SMBUS_CLK_LOW_SEXT_TIMEOUT</name>
              <description>The values in this register are in units of ic_clk period.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_CLOCK_LOW_MEXT -->
        <!-- REGISTER 51 -->
        <register>
          <name>IC_SMBUS_CLOCK_LOW_MEXT</name>
          <description>SMBUS Master extend clock Timeout Register</description>
          <addressOffset>0xC0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- SMBUS_CLK_LOW_MEXT_TIMEOUT -->
            <field>
              <name>SMBUS_CLK_LOW_MEXT_TIMEOUT</name>
              <description>The values in this register are in units of ic_clk period..</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_THIGH_MAX_IDLE_COUNT -->
        <!-- REGISTER 53 -->
        <register>
          <name>IC_SMBUS_THIGH_MAX_IDLE_COUNT</name>
          <description> SMBus Thigh MAX Bus-Idle count Register</description>
          <addressOffset>0xC4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0XFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- SMBUS_THIGH_MAX_BUS_IDLE_CNT -->
            <field>
              <name>SMBUS_THIGH_MAX_BUS_IDLE_CNT</name>
              <description>The values in this register are in units of ic_clk period.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_INTR_STAT -->
        <!-- REGISTER 54 -->
        <register>
          <name>IC_SMBUS_INTR_STAT</name>
          <description> SMBUS Interrupt Status Register</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_INTR_MASK-->
        <!-- REGISTER 55 -->
        <register>
          <name>IC_SMBUS_INTR_MASK</name>
          <description> Interrupt Mask Register</description>
          <addressOffset>0xCC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_INTR_RAW_STATUS-->
        <!-- REGISTER 56 -->
        <register>
          <name>IC_SMBUS_INTR_RAW_STATUS</name>
          <description> SMBUS Raw Interrupt Status Register</description>
          <addressOffset>0xD0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_CLR_SMBUS_INTR-->
        <!-- REGISTER 57 -->
        <register>
          <name>IC_CLR_SMBUS_INTR</name>
          <description>Clear SMBUS Interrupt Register</description>
          <addressOffset>0xD4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>RESERVED1</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_OPTIONAL_SAR-->
        <!-- REGISTER 58 -->
        <register>
          <name>IC_OPTIONAL_SAR</name>
          <description> Optional Slave Address Register</description>
          <addressOffset>0xD8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_UDID_LSB-->
        <!-- REGISTER 59 -->
        <register>
          <name>IC_SMBUS_UDID_LSB</name>
          <description>SMBUS ARP UDID LSB Register</description>
          <addressOffset>0xDC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- IC_SMBUS_ARP_UDID_LSB -->
            <field>
              <name>IC_SMBUS_ARP_UDID_LSB</name>
              <description>This field is used to store the LSB 32 bit value of slave unique device identifier used in Address Resolution Protocol.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- I2C1 -->
    <peripheral>
      <name>I2C1</name>
      <version>1.0</version>
      <description>Inter Integrated Circuit(I2C) is programmable control bus that provides support for the communications 
           link between integrated circuits in a system
      </description>
      <groupName>I2C</groupName>
      <baseAddress>0x47040000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>I2C1</name>
        <value>61</value>
      </interrupt>
      <registers>
        <!-- I2C_CON: I2C Control Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>IC_CON</name>
          <description>This register can be written only when the i2c is disabled, which corresponds to IC_ENABLE[0] being set to 0. Writes at other times have no effect.</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x007F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- Master Mode -->
            <field>
              <name>MASTER_MODE</name>
              <description>This bit controls whether the I2C master is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>master disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>master enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Speed -->
            <field>
              <name>SPEED</name>
              <description>These bits control at which speed the I2C operates. Hardware protects against illegal
			  values being programmed by software.</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Standard_Mode</name>
                  <description>standard mode (0 to 100 kbit/s)</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Fast_Mode</name>
                  <description>fast mode (less than or equal 400 kbit/s)</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>High_Speed_Mode</name>
                  <description>high speed mode (less than or equal 3.4 Mbit/s)</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_10BITADDR_SLAVE -->
            <field>
              <name>IC_10BITADDR_SLAVE</name>
              <description>When acting as a slave, this bit controls whether the I2C responds 
			  to 7- or 10-bit addresses.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>7-bit addressing. The DW_apb_i2c ignores transactions that involve 10-bit addressing; 
							   for 7-bit addressing, only the lower 7 bits of the IC_SAR register are compared
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>10-bit addressing. The DW_apb_i2c responds to only 10-bit addressing transfers that match 
							   the full 10 bits of the IC_SAR register.
				  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_10BITADDR_MASTER -->
            <field>
              <name>IC_10BITADDR_MASTER_RD_ONLY</name>
              <description>the function of this bit is handled by bit 12 of IC_TAR register, and becomes 
			  a read-only copy called IC_10BITADDR_MASTER_rd_only</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>7-bit addressing</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>10-bit addressing</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_RESTART_EN -->
            <field>
              <name>IC_RESTART_EN</name>
              <description>Determines whether RESTART conditions may be sent when acting as a master</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_SLAVE_DISABLE -->
            <field>
              <name>IC_SLAVE_DISABLE</name>
              <description>This bit controls whether I2C has its slave disabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>slave is enabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>slave is disabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- STOP_DET_IFADDRESSED -->
            <field>
              <name>STOP_DET_IFADDRESSED</name>
              <description>The STOP DETECTION interrupt is generated only when the transmitted 
			  address matches the slave address of SAR</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Issues the STOP DETECTION irrespective of whether it is addressed or not.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description> issues the STOP DETECTION interrupt only when it is addressed.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TX_EMPTY_CTRL -->
            <field>
              <name>TX_EMPTY_CTRL</name>
              <description>	This bit controls the generation of the TX EMPTY 
			   interrupt, as described in the IC RAW INTR STAT register.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- STOP_DET_IF_MASTER_ACTIVE -->
            <field>
              <name>STOP_DET_IF_MASTER_ACTIVE</name>
              <description> In Master mode.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description> Issues the STOP_DET irrespective of whether the master is active.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Issues the STOP_DET interrupt only when the master is active</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- BUS_CLEAR_FEATURE_CTRL -->
            <field>
              <name>BUS_CLEAR_FEATURE_CTRL</name>
              <description> In Master mode.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description> Bus Clear Feature is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Bus Clear Feature is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- IC_TAR: I2C Target Address Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>IC_TAR</name>
          <description>I2C Target Address Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x10A0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_TAR -->
            <field>
              <name>IC_TAR</name>
              <description>This is the target address for any master transaction</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GC_OR_START -->
            <field>
              <name>GC_OR_START</name>
              <description> If bit 11 (SPECIAL) is set to 1, then this bit indicates whether a General Call or START byte command 
							is to be performed by the DW_apb_i2c
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>General Call Address</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>START BYTE</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SPECIAL-->
            <field>
              <name>SPECIAL</name>
              <description> This bit indicates whether software performs a General Call or START BYTE command</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>ignore bit 10 GC_OR_START and use IC_TAR normally</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>perform special I2C command as specified in GC_OR_START bit</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_10BITADDR_MASTER-->
            <field>
              <name>IC_10BITADDR_MASTER</name>
              <description> This bit controls whether the i2c starts its transfers in 7-or 10-bit addressing mode when acting as a master</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>7-bit addressing</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>10-bit addressing</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Device_ID-->
            <field>
              <name>DEVICE_ID</name>
              <description> If bit 11 (SPECIAL) is set to 1, then this bit indicates whether a Device-ID of a particular slave mentioned in IC_TAR[6:0] is to be performed by the I2C Master</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Device-ID is not performed and checks ic_tar[10] to perform either general call or START byte command.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>: Device-ID transfer is performed and bytes based on the number of read commands in the Tx-FIFO are received from the targeted slave and put in the Rx-FIFO.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:14]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SAR: I2C Slave Address Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>IC_SAR</name>
          <description>I2C Slave Address Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x55</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_SAR -->
            <field>
              <name>IC_SAR</name>
              <description>The IC_SAR holds the slave address when the I2C is operating as a slave. For 7-bit
							addressing, only IC_SAR[6:0] is used.</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_HS_MADDR: I2C High Speed Master Mode Code Address Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>IC_HS_MADDR</name>
          <description>I2C High Speed Master Mode Code Address Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0001</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- IC_HS_MAR -->
            <field>
              <name>IC_HS_MAR</name>
              <description> This bit field holds the value of the I2C HS mode master code</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_DATA_CMD:I2C Rx/Tx Data Buffer and Command Register -->
        <!-- REGISTER 5 -->
        <register>
          <name>IC_DATA_CMD</name>
          <description>I2C Rx/Tx Data Buffer and Command Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- DAT -->
            <field>
              <name>DAT</name>
              <description>This register contains the data to be transmitted or received on the I2C bus</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CMD -->
            <field>
              <name>CMD</name>
              <description>This bit controls whether a read or a write is performed</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- STOP -->
            <field>
              <name>STOP</name>
              <description>This bit controls whether a STOP is issued after the byte is sent or received</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>STOP is not issued after this byte, regardless of whether or not the Tx FIFO is empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>STOP is issued after this byte, regardless of whether or not the Tx FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESTART -->
            <field>
              <name>RESTART</name>
              <description>This bit controls whether a RESTART is issued before the byte is sent or received</description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued only if the transfer direction is changing from the previous command</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued before the data is sent/received</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIRST_DATA_BYTE -->
            <field>
              <name>FIRST_DATA_BYTE</name>
              <description>Indicates the first data byte received after the address phase for receive
						   transfer in Master receiver or Slave receiver mode</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued only if the transfer direction is changing from the previous command</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued before the data is sent/received</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SS_SCL_HCNT: Standard Speed I2C Clock SCL High Count Register -->
        <!-- REGISTER 6 -->
        <register>
          <name>IC_SS_SCL_HCNT</name>
          <description>Standard Speed I2C Clock SCL High Count Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x01F4</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_SS_SCL_HCNT -->
            <field>
              <name>IC_SS_SCL_HCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SS_SCL_LCNT: Standard Speed I2C Clock SCL Low Count Register -->
        <!-- REGISTER 7 -->
        <register>
          <name>IC_SS_SCL_LCNT</name>
          <description>Standard Speed I2C Clock SCL Low Count Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x024C</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_SS_SCL_LCNT -->
            <field>
              <name>IC_SS_SCL_LCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_FS_SCL_HCNT: Fast Speed I2C Clock SCL High Count Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>IC_FS_SCL_HCNT</name>
          <description>Fast Speed I2C Clock SCL High Count Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x004b</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_FS_SCL_HCNT -->
            <field>
              <name>IC_FS_SCL_HCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_FS_SCL_LCNT: Fast Speed I2C Clock SCL Low Count Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>IC_FS_SCL_LCNT</name>
          <description>Fast Speed I2C Clock SCL Low Count Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00a3</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_FS_SCL_LCNT -->
            <field>
              <name>IC_FS_SCL_LCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_HS_SCL_HCNT: High Speed I2C Clock SCL High Count Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>IC_HS_SCL_HCNT</name>
          <description>High Speed I2C Clock SCL High Count Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000f</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_HS_SCL_HCNT -->
            <field>
              <name>IC_HS_SCL_HCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_HS_SCL_LCNT: High Speed I2C Clock SCL Low Count Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>IC_HS_SCL_LCNT</name>
          <description>High Speed I2C Clock SCL Low Count Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0028</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_HS_SCL_LCNT -->
            <field>
              <name>IC_HS_SCL_LCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_INTR_STAT: I2C Interrupt Status Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>IC_INTR_STAT</name>
          <description>I2C Interrupt Status Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- R_RX_UNDER  -->
            <field>
              <name>R_RX_UNDER</name>
              <description>Set if the processor attempts to read the receive buffer when it is empty by reading from the IC_DATA_CMD register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RX_OVER -->
            <field>
              <name>R_RX_OVER</name>
              <description>Set if the receive buffer is completely filled to IC_RX_BUFFER_DEPTH and an additional byte is received from an external I2C device</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RX_FULL  -->
            <field>
              <name>R_RX_FULL</name>
              <description>Set when the receive buffer reaches or goes above the RX_TL threshold in the IC_RX_TL register.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_TX_OVER   -->
            <field>
              <name>R_TX_OVER</name>
              <description>Set during transmit if the transmit buffer is filled to IC_TX_BUFFER_DEPTH and the processor attempts to issue another I2C command by writing to the
						   IC_DATA_CMD register.
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_TX_EMPTY   -->
            <field>
              <name>R_TX_EMPTY</name>
              <description>This bit is set to 1 when the transmit buffer is at or below the threshold value set in the IC_TX_TL register.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RD_REQ   -->
            <field>
              <name>R_RD_REQ</name>
              <description>This bit is set to 1 when DW_apb_i2c is acting as a slave and another I2C master is attempting to read data from DW_apb_i2c.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_TX_ABRT  -->
            <field>
              <name>R_TX_ABRT</name>
              <description>This bit indicates if DW_apb_i2c, as an I2C transmitter, is unable to complete the intended actions on the contents of the transmit FIFO</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RX_DONE  -->
            <field>
              <name>R_RX_DONE</name>
              <description>When the DW_apb_i2c is acting as a slave-transmitter, this bit is set to 1 if the master does not acknowledge a transmitted byte</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_ACTIVITY  -->
            <field>
              <name>R_ACTIVITY</name>
              <description>This bit captures DW_apb_i2c activity and stays set until it is cleared</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_STOP_DET -->
            <field>
              <name>R_STOP_DET</name>
              <description>Indicates whether a STOP condition has occurred on the I2C interface regardless of whether DW_apb_i2c is operating in slave or master mode.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_START_DET -->
            <field>
              <name>R_START_DET</name>
              <description>Indicates whether a START or RESTART condition has occurred on the I2C interface regardless of 
						   whether DW_apb_i2c is operating in slave or master mode.
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--R_GEN_CALL-->
            <field>
              <name>R_GEN_CALL</name>
              <description>Set only when a General Call address is received and it is acknowledged</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--R_RESTART_DET-->
            <field>
              <name>R_RESTART_DET</name>
              <description>Indicates whether a RESTART condition has occurred on the I2C interface
						   when DW_apb_i2c is operating in slave mode and the slave is the addressed slave</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--MST_ON_HOLD-->
            <field>
              <name>R_MST_ON_HOLD</name>
              <description>Indicates whether a master is holding the bus and the Tx FIFO is empty.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--SCL_STUCK_AT_LOW-->
            <field>
              <name>M_SCL_STUCK_AT_LOW</name>
              <description>Indicates whether the SCL Line is stuck at low for the IC_SCL_STUCK_LOW_TIMOUT number of ic_clk periods</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_INTR_MASK: I2C Interrupt Mask Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>IC_INTR_MASK</name>
          <description>I2C Interrupt Mask Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x08FF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- M_RX_UNDER  -->
            <field>
              <name>M_RX_UNDER</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RX_OVER -->
            <field>
              <name>M_RX_OVER</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RX_FULL  -->
            <field>
              <name>M_RX_FULL</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_TX_OVER   -->
            <field>
              <name>M_TX_OVER</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_TX_EMPTY   -->
            <field>
              <name>M_TX_EMPTY</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RD_REQ   -->
            <field>
              <name>M_RD_REQ</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_TX_ABRT  -->
            <field>
              <name>M_TX_ABRT</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RX_DONE  -->
            <field>
              <name>M_RX_DONE</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_ACTIVITY  -->
            <field>
              <name>M_ACTIVITY</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_STOP_DET -->
            <field>
              <name>M_STOP_DET</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_START_DET -->
            <field>
              <name>M_START_DET</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--M_GEN_CALL-->
            <field>
              <name>M_GEN_CALL</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--M_RESTART_DET-->
            <field>
              <name>M_RESTART_DET</name>
              <description>Indicates whether a RESTART condition has occurred on the I2C interface
						   when DW_apb_i2c is operating in slave mode and the slave is the addressed slave</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--MST_ON_HOLD-->
            <field>
              <name>M_MST_ON_HOLD</name>
              <description>Indicates whether a master is holding the bus and the Tx FIFO is empty.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--SCL_STUCK_AT_LOW-->
            <field>
              <name>M_SCL_STUCK_AT_LOW</name>
              <description>Indicates whether the SCL Line is stuck at low for the IC_SCL_STUCK_LOW_TIMOUT number of ic_clk periods</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_RAW_INTR_STAT: I2C Raw Interrupt Status Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>IC_RAW_INTR_STAT</name>
          <description>I2C Raw Interrupt Status Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- RX_UNDER  -->
            <field>
              <name>RX_UNDER</name>
              <description>Set if the processor attempts to read the receive buffer when it is empty by reading from the IC_DATA_CMD register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RX_OVER -->
            <field>
              <name>RX_OVER</name>
              <description>Set if the receive buffer is completely filled to IC_RX_BUFFER_DEPTH and an additional byte is received from an external I2C device</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RX_FULL  -->
            <field>
              <name>RX_FULL</name>
              <description>Set when the receive buffer reaches or goes above the RX_TL threshold in the IC_RX_TL register.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TX_OVER   -->
            <field>
              <name>TX_OVER</name>
              <description>Set during transmit if the transmit buffer is filled to IC_TX_BUFFER_DEPTH and the processor attempts to issue another I2C command by writing to the
						   IC_DATA_CMD register.
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TX_EMPTY   -->
            <field>
              <name>TX_EMPTY</name>
              <description>This bit is set to 1 when the transmit buffer is at or below the threshold value set in the IC_TX_TL register.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RD_REQ   -->
            <field>
              <name>RD_REQ</name>
              <description>This bit is set to 1 when DW_apb_i2c is acting as a slave and another I2C master is attempting to read data from DW_apb_i2c.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TX_ABRT  -->
            <field>
              <name>TX_ABRT</name>
              <description>This bit indicates if DW_apb_i2c, as an I2C transmitter, is unable to complete the intended actions on the contents of the transmit FIFO</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RX_DONE  -->
            <field>
              <name>RX_DONE</name>
              <description>When the DW_apb_i2c is acting as a slave-transmitter, this bit is set to 1 if the master does not acknowledge a transmitted byte</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ACTIVITY  -->
            <field>
              <name>ACTIVITY</name>
              <description>This bit captures DW_apb_i2c activity and stays set until it is cleared</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- STOP_DET -->
            <field>
              <name>STOP_DET</name>
              <description>Indicates whether a STOP condition has occurred on the I2C interface regardless of whether DW_apb_i2c is operating in slave or master mode.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- START_DET -->
            <field>
              <name>START_DET</name>
              <description>Indicates whether a START or RESTART condition has occurred on the I2C interface regardless of 
						   whether DW_apb_i2c is operating in slave or master mode.
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--GEN_CALL-->
            <field>
              <name>GEN_CALL</name>
              <description>Set only when a General Call address is received and it is acknowledged</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESTART_DET-->
            <field>
              <name>RESTART_DET</name>
              <description>Indicates whether a RESTART condition has occurred on the I2C interface
						   when DW_apb_i2c is operating in slave mode and the slave is the addressed slave</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--MST_ON_HOLD-->
            <field>
              <name>MST_ON_HOLD</name>
              <description>Indicates whether a master is holding the bus and the Tx FIFO is empty.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--SCL_STUCK_AT_LOW-->
            <field>
              <name>SCL_STUCK_AT_LOW</name>
              <description>Indicates whether the SCL Line is stuck at low for the IC_SCL_STUCK_LOW_TIMOUT number of ic_clk periods</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_RX_TL: I2C Receive FIFO Threshold Register -->
        <!-- REGISTER 15 -->
        <register>
          <name>IC_RX_TL</name>
          <description>I2C Receive FIFO Threshold Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0008</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- RX_TL -->
            <field>
              <name>RX_TL</name>
              <description>Receive FIFO Threshold Level</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_TX_TL: I2C Transmit FIFO Threshold Register -->
        <!-- REGISTER 16 -->
        <register>
          <name>IC_TX_TL</name>
          <description>I2C Transmit FIFO Threshold Register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0008</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- TX_TL -->
            <field>
              <name>TX_TL</name>
              <description>Transmit FIFO Threshold Level</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_INTR: Clear Combined and Individual Interrupt Register -->
        <!-- REGISTER 17 -->
        <register>
          <name>IC_CLR_INTR</name>
          <description>Clear Combined and Individual Interrupt Register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_INTR -->
            <field>
              <name>CLR_INTR</name>
              <description>Read this register to clear the combined interrupt, all individual interrupts, and the IC_TXABRT_SOURCE register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RX_UNDER: Clear RX_UNDER Interrupt Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>IC_CLR_RX_UNDER</name>
          <description>Clear RX_UNDER Interrupt Register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RX_UNDER -->
            <field>
              <name>CLR_RX_UNDER</name>
              <description>Read this register to clear the RX_UNDER interrupt (bit 0) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RX_OVER: Clear RX_OVER Interrupt Register -->
        <!-- REGISTER 19 -->
        <register>
          <name>IC_CLR_RX_OVER</name>
          <description>Clear RX_OVER Interrupt Register</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RX_OVER -->
            <field>
              <name>CLR_RX_OVER</name>
              <description>Read this register to clear the RX_OVER interrupt (bit 1) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_TX_OVER: Clear TX_OVER Interrupt Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>IC_CLR_TX_OVER</name>
          <description>Clear TX_OVER Interrupt Register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_TX_OVER -->
            <field>
              <name>CLR_TX_OVER</name>
              <description>Read this register to clear the TX_OVER interrupt (bit 3) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RD_REQ:Clear RD_REQ Interrupt Register -->
        <!-- REGISTER 21 -->
        <register>
          <name>IC_CLR_RD_REQ</name>
          <description>Clear RD_REQ Interrupt Register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RD_REQ -->
            <field>
              <name>CLR_RD_REQ</name>
              <description>Read this register to clear the RD_REQ interrupt (bit 5) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_TX_ABRT:Clear TX_ABRT Interrupt Register -->
        <!-- REGISTER 22 -->
        <register>
          <name>IC_CLR_TX_ABRT</name>
          <description>Clear TX_ABRT Interrupt Register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_TX_ABRT -->
            <field>
              <name>CLR_TX_ABRT</name>
              <description>Read this register to clear the TX_ABRT interrupt (bit 6) of the C_RAW_INTR_STAT register, and the IC_TX_ABRT_SOURCE register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RX_DONE:Clear RX_DONE Interrupt Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>IC_CLR_RX_DONE</name>
          <description>Clear RX_DONE Interrupt Register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RX_DONE -->
            <field>
              <name>CLR_RX_DONE</name>
              <description>Read this register to clear the RX_DONE interrupt (bit 7) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_ACTIVITY:Clear ACTIVITY Interrupt Register -->
        <!-- REGISTER 24 -->
        <register>
          <name>IC_CLR_ACTIVITY</name>
          <description>Clear ACTIVITY Interrupt Register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_ACTIVITY -->
            <field>
              <name>CLR_ACTIVITY</name>
              <description>Reading this register clears the ACTIVITY interrupt if the I2C is not active any more</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_STOP_DET:Clear STOP_DET Interrupt Register -->
        <!-- REGISTER 25 -->
        <register>
          <name>IC_CLR_STOP_DET</name>
          <description>Clear STOP_DET Interrupt Register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_STOP_DET -->
            <field>
              <name>CLR_STOP_DET</name>
              <description>Read this register to clear the STOP_DET interrupt (bit 9) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_START_DET:Clear START_DET Interrupt Register -->
        <!-- REGISTER 26 -->
        <register>
          <name>IC_CLR_START_DET</name>
          <description>Clear START_DET Interrupt Register</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_START_DET -->
            <field>
              <name>CLR_START_DET</name>
              <description>Read this register to clear the START_DET interrupt (bit 10) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_GEN_CALL:Clear GEN_CALL Interrupt Register -->
        <!-- REGISTER 27 -->
        <register>
          <name>IC_CLR_GEN_CALL</name>
          <description>Clear GEN_CALL Interrupt Register</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_GEN_CALL -->
            <field>
              <name>CLR_GEN_CALL</name>
              <description>Read this register to clear the GEN_CALL interrupt (bit 11) of IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_ENABLE:I2C Enable Register -->
        <!-- REGISTER 28 -->
        <register>
          <name>IC_ENABLE</name>
          <description>Clear GEN_CALL Interrupt Register</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- ENABLE -->
            <field>
              <name>EN</name>
              <description>Controls whether the DW_apb_i2c is enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disables DW_apb_i2c (TX and RX FIFOs are held in an erased state)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enables DW_apb_i2c</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ABORT -->
            <field>
              <name>ABORT</name>
              <description>When set, the controller initiates the transfer abort</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>ABORT not initiated or ABORT done</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>ABORT operation in progress</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TX_CMD_BLOCK -->
            <field>
              <name>TX_CMD_BLOCK</name>
              <description>none</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>The transmission of data starts on I2C bus automatically, 
								as soon as the first data is available in the Tx FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Blocks the transmission of data on I2C bus even if Tx FIFO has data to transmit</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SDA_STUCK_RECOVERY_ENABLE -->
            <field>
              <name>SDA_STUCK_RECOVERY_ENABLE</name>
              <description>SDA STUCK RECOVERY ENABLE</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_STATUS:I2C Status Register -->
        <!-- REGISTER 29-->
        <register>
          <name>IC_STATUS</name>
          <description>I2C Status Register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000006</resetValue>
          <resetMask>0x0F</resetMask>
          <fields>
            <!-- ACTIVITY -->
            <field>
              <name>ACTIVITY</name>
              <description>I2C Activity Status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TFNF -->
            <field>
              <name>TFNF</name>
              <description>Transmit FIFO Not Full</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit FIFO is full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit FIFO is not full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFE -->
            <field>
              <name>TFE</name>
              <description>Transmit FIFO Completely Empty</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFNE -->
            <field>
              <name>RFNE</name>
              <description>Receive FIFO Not Empty</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receive FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receive FIFO is not empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFF -->
            <field>
              <name>RFF</name>
              <description>Receive FIFO Completely Full</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receive FIFO is not full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receive FIFO is full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MST_ACTIVITY -->
            <field>
              <name>MST_ACTIVITY</name>
              <description>Master FSM Activity Status</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Master FSM is in IDLE state so the Master part of DW_apb_i2c is not Active</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Master FSM is not in IDLE state so the Master part of DW_apb_i2c is Active</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SLV_ACTIVITY -->
            <field>
              <name>SLV_ACTIVITY</name>
              <description>Slave FSM Activity Status</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Slave FSM is in IDLE state so the Slave part of DW_apb_i2c is not Active</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Slave FSM is not in IDLE state so the Slave part of DW_apb_i2c is Active</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MST_HOLD_TX_FIFO_EMPTY -->
            <field>
              <name>MST_HOLD_TX_FIFO_EMPTY</name>
              <description>The I2C master stalls the write transfer when Tx FIFO is empty, and 
			  the the last byte does not have the Stop bit set.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- MST_HOLD_RX_FIFO_FULL -->
            <field>
              <name>MST_HOLD_RX_FIFO_FULL</name>
              <description>This bit indicates the BUS Hold in Master mode due to Rx FIFO is Full and
 			  additional byte has been received.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SLV_HOLD_TX_FIFO_EMPTY -->
            <field>
              <name>SLV_HOLD_TX_FIFO_EMPTY</name>
              <description>This bit indicates the BUS Hold in Slave mode for the Read request when the 
			   Tx FIFO is empty.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SLV_HOLD_RX_FIFO_FULL -->
            <field>
              <name>SLV_HOLD_RX_FIFO_FULL</name>
              <description>This bit indicates the BUS Hold in Slave mode due to the Rx FIFO being Full and 
			  an additional byte being received.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDA_STUCK_NOT_RECOVERED -->
            <field>
              <name>SDA_STUCK_NOT_RECOVERED</name>
              <description>This bit indicates that an SDA stuck at low is not recovered after the 
			  recovery mechanism.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_TXFLR:I2C Transmit FIFO Level Register -->
        <!-- REGISTER 30 -->
        <register>
          <name>IC_TXFLR</name>
          <description>I2C Transmit FIFO Level Register</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- TXFLR -->
            <field>
              <name>TXFLR</name>
              <description>Contains the number of valid data entries in the transmit FIFO.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_RXFLR:I2C Receive FIFO Level Register -->
        <!-- REGISTER 31 -->
        <register>
          <name>IC_RXFLR</name>
          <description>I2C Receive FIFO Level Register</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- RXFLR -->
            <field>
              <name>RXFLR</name>
              <description>Receive FIFO Level. Contains the number of valid data entries in the receive FIFO</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SDA_HOLD:I2C SDA Hold Time Length Register -->
        <!-- REGISTER 32 -->
        <register>
          <name>IC_SDA_HOLD</name>
          <description>I2C SDA Hold Time Length Register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0001</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--IC_SDA_TX_HOLD -->
            <field>
              <name>IC_SDA_TX_HOLD</name>
              <description>Sets the required SDA hold time in units of ic_clk period,when I2C 
			  acts as a transmitter.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--IC_SDA_RX_HOLD -->
            <field>
              <name>IC_SDA_RX_HOLD</name>
              <description>Sets the required SDA hold time in units of ic_clk period,when 
			  I2C acts as a receiver.</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_TX_ABRT_SOURCE:I2C Transmit Abort Source Register -->
        <!-- REGISTER 33 -->
        <register>
          <name>IC_TX_ABRT_SOURCE</name>
          <description>I2C Transmit Abort Source Register</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--ABRT_7B_ADDR_NOACK -->
            <field>
              <name>ABRT_7B_ADDR_NOACK</name>
              <description>1: Master is in 7-bit addressing mode and the address sent was not acknowledged by any slave</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_10ADDR1_NOACK -->
            <field>
              <name>ABRT_10ADDR1_NOACK</name>
              <description>1: Master is in 10-bit address mode and the first 10-bit address byte was not acknowledged by any slave</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_10ADDR2_NOACK -->
            <field>
              <name>ABRT_10ADDR2_NOACK</name>
              <description>1: Master is in 10-bit address mode and the second address byte of the 10-bit address was not acknowledged by any slave</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_TXDATA_NOACK -->
            <field>
              <name>ABRT_TXDATA_NOACK</name>
              <description>1: This is a master-mode only bit. Master has received an acknowledgement for the address, but when it sent data byte(s)
						   following the address, it did not receive an acknowledge from the remote slave(s)
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_GCALL_NOACK -->
            <field>
              <name>ABRT_GCALL_NOACK</name>
              <description>1: DW_apb_i2c in master mode sent a General Call and no slave on the bus acknowledged the General Call
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_GCALL_READ -->
            <field>
              <name>ABRT_GCALL_READ</name>
              <description>1: DW_apb_i2c in master mode sent a General Call but the user programmed the byte following the 
						   General Call to be a read from the bus (IC_DATA_CMD[9] is set to 1)
			  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_HS_ACKDET -->
            <field>
              <name>ABRT_HS_ACKDET</name>
              <description>1: Master is in High Speed mode and the High Speed Master code was acknowledged</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SBYTE_ACKDET -->
            <field>
              <name>ABRT_SBYTE_ACKDET</name>
              <description>1: Master has sent a START Byte and the START Byte was acknowledged (wrong behavior)</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_HS_NORSTRT -->
            <field>
              <name>ABRT_HS_NORSTRT</name>
              <description>1: The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) = 0) and the user is trying to
						   use the master to transfer data in High Speed mode</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SBYTE_NORSTRT -->
            <field>
              <name>ABRT_SBYTE_NORSTRT</name>
              <description>1: The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) = 0) and the user is trying to
						   send a START Byte</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_10B_RD_NORSTRT -->
            <field>
              <name>ABRT_10B_RD_NORSTRT</name>
              <description>1: The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) = 0) and the master sends a
						   read command in 10-bit addressing mode</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_MASTER_DIS -->
            <field>
              <name>ABRT_MASTER_DIS</name>
              <description>1: User tries to initiate a Master operation with the Master mode disabled</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--ARB_LOST -->
            <field>
              <name>ARB_LOST</name>
              <description>1: Master has lost arbitration, or if IC_TX_ABRT_SOURCE[14] is also set, then
						   the slave transmitter has lost arbitration</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SLVFLUSH_TXFIFO -->
            <field>
              <name>ABRT_SLVFLUSH_TXFIFO</name>
              <description>1: Slave has received a read command and some data exists in the TX FIFO so the slave
						   issues a TX_ABRT interrupt to flush old data in TX FIFO</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SLV_ARBLOST -->
            <field>
              <name>ABRT_SLV_ARBLOST</name>
              <description>1: Slave lost the bus while transmitting data to a remote master. IC_TX_ABRT_SOURCE[12]
						   is set at the same time</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SLVRD_INTX -->
            <field>
              <name>ABRT_SLVRD_INTX</name>
              <description>1: When the processor side responds to a slave mode request for data to be transmitted
						   to a remote master and user writes a 1 in CMD (bit 8) of IC_DATA_CMD register
			  </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_USER_ABRT -->
            <field>
              <name>ABRT_USER_ABRT</name>
              <description>This is a master-mode-only bit. Master has detected the transfer abort (IC_ENABLE[1]).
			  </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SDA_STUCK_AT_LOW -->
            <field>
              <name>ABRT_SDA_STUCK_AT_LOW</name>
              <description>Master detects the SDA is Stuck at low for the IC_SDA_STUCK_AT_LOW_TIMEOUT value of ic_clks
			  </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_DEVICE_NOACK -->
            <field>
              <name>ABRT_DEVICE_NOACK</name>
              <description>Master initiates the DEVICE_ID transfer and the device ID sent is not acknowledged by any slave
			  </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_DEVICE_SLVADDR_NOACK -->
            <field>
              <name>ABRT_DEVICE_SLVADDR_NOACK</name>
              <description>Master is initiating the DEVICE_ID transfer and the slave address 
						   sent was not acknowledged by any slave
			  </description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_DEVICE_WRITE -->
            <field>
              <name>ABRT_DEVICE_WRITE</name>
              <description>Master is initiating the DEVICE_ID transfer and the Tx-
						   FIFO consists of write commands.
			  </description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[22:21]</bitRange>
              <access>read-only</access>
            </field>
            <!--TX_FLUSH_CNT -->
            <field>
              <name>TX_FLUSH_CNT</name>
              <description>This field indicates the number of Tx FIFO data commands that are flushed due to TX_ABRT interrupt
			  </description>
              <bitRange>[31:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SLV_DATA_NACK_ONLY:Generate Slave Data NACK Register -->
        <!-- REGISTER 34 -->
        <register>
          <name>IC_SLV_DATA_NACK_ONLY</name>
          <description>Generate Slave Data NACK Register</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--NACK -->
            <field>
              <name>NACK</name>
              <description>Generate NACK. This NACK generation only occurs when DW_apb_i2c is a slave receiver.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_DMA_CR:DMA Control Register -->
        <!-- REGISTER 35 -->
        <register>
          <name>IC_DMA_CR</name>
          <description>DMA Control Register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--RDMAE -->
            <field>
              <name>RDMAE</name>
              <description>Receive DMA Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receive DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receive DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--TDMAE -->
            <field>
              <name>TDMAE</name>
              <description>Transmit DMA Enable.This bit enables/disables the transmit FIFO DMA channel</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_DMA_TDLR:DMA Transmit Data Level Register -->
        <!-- REGISTER 36 -->
        <register>
          <name>IC_DMA_TDLR</name>
          <description>DMA Transmit Data Level Register</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--DMATDL:Transmit Data Level -->
            <field>
              <name>DMATDL</name>
              <description>This bit field controls the level at which a DMA request is made by the transmit logic</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_DMA_RDLR:I2C Receive Data Level Register -->
        <!-- REGISTER 37 -->
        <register>
          <name>IC_DMA_RDLR</name>
          <description>I2C Receive Data Level Register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <!--DMATDL:Transmit Data Level -->
            <field>
              <name>DMARDL</name>
              <description>This bit field controls the level at which a DMA request is made by the receive logic</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SDA_SETUP:I2C SDA Setup Register -->
        <!-- REGISTER 38 -->
        <register>
          <name>IC_SDA_SETUP</name>
          <description>I2C SDA Setup Register</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--SDA_SETUP-->
            <field>
              <name>SDA_SETUP</name>
              <description>This register controls the amount of time delay (in terms of number of ic_clk clock periods)</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_ACK_GENERAL_CALL:I2C ACK General Call Register -->
        <!-- REGISTER 39 -->
        <register>
          <name>IC_ACK_GENERAL_CALL</name>
          <description>I2C ACK General Call Register</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--ACK_GEN_CALL:ACK General Call -->
            <field>
              <name>ACK_GEN_CALL</name>
              <description>ACK General Call</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c does not generate General Call interrupts</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c responds with a ACK (by asserting ic_data_oe) when it receives a General Call.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_ENABLE_STATUS:I2C Enable Status Register -->
        <!-- REGISTER 40 -->
        <register>
          <name>IC_ENABLE_STATUS</name>
          <description>I2C Enable Status Register</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--IC_EN:ic_en Status -->
            <field>
              <name>IC_EN</name>
              <description>This bit always reflects the value driven on the output port ic_en.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c is deemed completely inactive</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c is deemed to be in an enabled state</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SLV_DISABLED_WHILE_BUSY:Slave Disabled While Busy (Transmit, Receive) -->
            <field>
              <name>SLV_DISABLED_WHILE_BUSY</name>
              <description>This bit indicates if a potential or active Slave operation has been aborted due to the setting of
							the IC_ENABLE register from 1 to 0</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c is deemed to have been disabled when there is master activity, or when the I2C bus is idle.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c is deemed to have forced a NACK during any part of an I2C transfer</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SLV_RX_DATA_LOST: Slave Received Data Lost -->
            <field>
              <name>SLV_RX_DATA_LOST</name>
              <description>Slave Received Data Lost</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c is deemed to have been actively engaged in an aborted I2C transfer (with matching address) and the data phase of the
							   I2C transfer has been entered, even though a data byte has been responded with a NACK</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c is deemed to have been disabled without being actively involved in the data phase of a Slave-Receiver transfer</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_FS_SPKLEN:I2C SS and FS Spike Suppression Limit Register -->
        <!-- REGISTER 41 -->
        <register>
          <name>IC_FS_SPKLEN</name>
          <description>I2C SS and FS Spike Suppression Limit Register</description>
          <alternateRegister>IC_UFM_SPKLEN</alternateRegister>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000006</resetValue>
          <resetMask>0x000000FF</resetMask>
          <fields>
            <!--IC_FS_SPKLEN:ic_en Status -->
            <field>
              <name>IC_FS_SPKLEN</name>
              <description> This register sets the duration, measured in ic_clk cycles, of the longest spike in the SCL or SDA lines that are filtered out by
							the spike suppression logic</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_HS_SPKLEN:I2C HS Spike Suppression Limit Register -->
        <!-- REGISTER 42 -->
        <register>
          <name>IC_HS_SPKLEN</name>
          <description>I2C HS Spike Suppression Limit Register</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000002</resetValue>
          <resetMask>0x000000FF</resetMask>
          <fields>
            <!--IC_HS_SPKLEN:ic_en Status -->
            <field>
              <name>IC_HS_SPKLEN</name>
              <description> This register sets the duration, measured in ic_clk cycles, of the longest spike in the SCL or SDA lines that are filtered out by
							the spike suppression logic</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_CLR_RESTART_DET:Clear RESTART_DET Interrupt Register -->
        <!-- REGISTER 43 -->
        <register>
          <name>IC_CLR_RESTART_DET</name>
          <description>Clear RESTART_DET Interrupt Register</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <fields>
            <!--CLR_RESTART_DET -->
            <field>
              <name>CLR_RESTART_DET</name>
              <description> Read this register to clear the RESTART_DET interrupt (bit 12) of
							the IC_RAW_INTR_STAT registe</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_COMP_PARAM_1:Component Parameter Register 1 -->
        <!-- REGISTER 44 -->
        <register>
          <name>IC_COMP_PARAM_1</name>
          <description>I2C HS Spike Suppression Limit Register</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x000808EC</resetValue>
          <fields>
            <!--CLR_RESTART_DET -->
            <field>
              <name>CLR_RESTART_DET</name>
              <description>Read this register to clear the RESTART_DET interrupt (bit 12) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--MAX_SPEED_MODE -->
            <field>
              <name>MAX_SPEED_MODE</name>
              <description>Maximum Speed Mode</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--HC_COUNT_VALUES -->
            <field>
              <name>HC_COUNT_VALUES</name>
              <description> Hard Code the count values</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--INTR_IO -->
            <field>
              <name>INTR_IO</name>
              <description>Single Interrupt Output port </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--HAS_DMA -->
            <field>
              <name>HAS_DMA</name>
              <description>DMA Handshake Interface signal</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--ADD_ENCODED_PARAMS -->
            <field>
              <name>ADD_ENCODED_PARAMS</name>
              <description>Add Encoded Parameters</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--RX_BUFFER_DEPTH-->
            <field>
              <name>RX_BUFFER_DEPTH</name>
              <description>Depth of receive buffer;the buffer is 8 bits wide;2 to 256</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--TX_BUFFER_DEPTH-->
            <field>
              <name>TX_BUFFER_DEPTH</name>
              <description>Depth of Transmit buffer;the buffer is 8 bits wide;2 to 256</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_COMP_VERSION:I2C Component Version Register -->
        <!-- REGISTER 45 -->
        <register>
          <name>IC_COMP_VERSION</name>
          <description>I2C Component Version Register</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- IC_COMP_VERSION -->
            <field>
              <name>IC_COMP_VERSION</name>
              <description>Signifies the component version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_COMP_TYPE:I2C Component Type Register -->
        <!-- REGISTER 46 -->
        <register>
          <name>IC_COMP_TYPE</name>
          <description>I2C Component Type Register</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- IC_COMP_TYPE -->
            <field>
              <name>IC_COMP_TYPE</name>
              <description>Design ware Component Type number = 0x44_57_01_40</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_SCL_STUCK_AT_LOW_TIMEOUT -->
        <!-- REGISTER 47 -->
        <register>
          <name>IC_SCL_STUCK_AT_LOW_TIMEOUT</name>
          <description>I2C SCL Stuck at Low Timeout</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <fields>
            <!-- IC_SCL_STUCK_LOW_TIMEOUT -->
            <field>
              <name>IC_SCL_STUCK_LOW_TIMEOUT</name>
              <description>Generates the interrupt to indicate SCL stuck at low if it
						   detects the SCL stuck at low for the IC_SCL_STUCK_LOW_TIMEOUT in units of ic_clk period</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SDA_STUCK_AT_LOW_TIMEOUT -->
        <!-- REGISTER 48 -->
        <register>
          <name>IC_SDA_STUCK_AT_LOW_TIMEOUT</name>
          <description>I2C SDA Stuck at Low Timeout</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <fields>
            <!-- IC_SDA_STUCK_LOW_TIMEOUT -->
            <field>
              <name>IC_SDA_STUCK_LOW_TIMEOUT</name>
              <description>Initiates the recovery of SDA line , if it
						   detects the SDA stuck at low for the IC_SDA_STUCK_LOW_TIMEOUT in units of ic_clk period.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_CLR_SCL_STUCK_DET -->
        <!-- REGISTER 49 -->
        <register>
          <name>IC_CLR_SCL_STUCK_DET</name>
          <description>Clear SCL Stuck at Low Detect Interrupt Register</description>
          <addressOffset>0xB4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!-- CLR_SCL_STUCK -->
            <field>
              <name>CLR_SCL_STUCK</name>
              <description>Read this register to clear the SCL_STUCK_DET interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_DEVICE_ID -->
        <!-- REGISTER 50 -->
        <register>
          <name>IC_DEVICE_ID</name>
          <description>I2C Device ID</description>
          <addressOffset>0xB8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!-- DEVICE_ID -->
            <field>
              <name>DEVICE_ID</name>
              <description>Contains the Device-ID of the component assigned through the
						   configuration parameter</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_CLOCK_LOW_SEXT -->
        <!-- REGISTER 51 -->
        <register>
          <name>IC_SMBUS_CLOCK_LOW_SEXT</name>
          <description> SMBUS Slave Clock Extend Timeout Register</description>
          <addressOffset>0xBC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- SMBUS_CLK_LOW_SEXT_TIMEOUT -->
            <field>
              <name>SMBUS_CLK_LOW_SEXT_TIMEOUT</name>
              <description>The values in this register are in units of ic_clk period.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_CLOCK_LOW_MEXT -->
        <!-- REGISTER 51 -->
        <register>
          <name>IC_SMBUS_CLOCK_LOW_MEXT</name>
          <description>SMBUS Master extend clock Timeout Register</description>
          <addressOffset>0xC0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- SMBUS_CLK_LOW_MEXT_TIMEOUT -->
            <field>
              <name>SMBUS_CLK_LOW_MEXT_TIMEOUT</name>
              <description>The values in this register are in units of ic_clk period..</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_THIGH_MAX_IDLE_COUNT -->
        <!-- REGISTER 53 -->
        <register>
          <name>IC_SMBUS_THIGH_MAX_IDLE_COUNT</name>
          <description> SMBus Thigh MAX Bus-Idle count Register</description>
          <addressOffset>0xC4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0XFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- SMBUS_THIGH_MAX_BUS_IDLE_CNT -->
            <field>
              <name>SMBUS_THIGH_MAX_BUS_IDLE_CNT</name>
              <description>The values in this register are in units of ic_clk period.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_INTR_STAT -->
        <!-- REGISTER 54 -->
        <register>
          <name>IC_SMBUS_INTR_STAT</name>
          <description> SMBUS Interrupt Status Register</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_INTR_MASK-->
        <!-- REGISTER 55 -->
        <register>
          <name>IC_SMBUS_INTR_MASK</name>
          <description> Interrupt Mask Register</description>
          <addressOffset>0xCC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_INTR_RAW_STATUS-->
        <!-- REGISTER 56 -->
        <register>
          <name>IC_SMBUS_INTR_RAW_STATUS</name>
          <description> SMBUS Raw Interrupt Status Register</description>
          <addressOffset>0xD0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_CLR_SMBUS_INTR-->
        <!-- REGISTER 57 -->
        <register>
          <name>IC_CLR_SMBUS_INTR</name>
          <description>Clear SMBUS Interrupt Register</description>
          <addressOffset>0xD4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>RESERVED1</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_OPTIONAL_SAR-->
        <!-- REGISTER 58 -->
        <register>
          <name>IC_OPTIONAL_SAR</name>
          <description> Optional Slave Address Register</description>
          <addressOffset>0xD8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_UDID_LSB-->
        <!-- REGISTER 59 -->
        <register>
          <name>IC_SMBUS_UDID_LSB</name>
          <description>SMBUS ARP UDID LSB Register</description>
          <addressOffset>0xDC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- IC_SMBUS_ARP_UDID_LSB -->
            <field>
              <name>IC_SMBUS_ARP_UDID_LSB</name>
              <description>This field is used to store the LSB 32 bit value of slave unique device identifier used in Address Resolution Protocol.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- I2C2 / ULP_I2C-->
    <peripheral>
      <name>ULP_I2C</name>
      <version>1.0</version>
      <description>Inter Integrated Circuit(I2C) is programmable control bus that provides support for the communications 
           link between integrated circuits in a system
      </description>
      <groupName>I2C</groupName>
      <baseAddress>0x24040000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>I2C2</name>
        <value>13</value>
      </interrupt>
      <registers>
        <!-- I2C_CON: I2C Control Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>IC_CON</name>
          <description>This register can be written only when the i2c is disabled, which corresponds to IC_ENABLE[0] being set to 0. Writes at other times have no effect.</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x007F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- Master Mode -->
            <field>
              <name>MASTER_MODE</name>
              <description>This bit controls whether the I2C master is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>master disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>master enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Speed -->
            <field>
              <name>SPEED</name>
              <description>These bits control at which speed the I2C operates. Hardware protects against illegal
			  values being programmed by software.</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Standard_Mode</name>
                  <description>standard mode (0 to 100 kbit/s)</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Fast_Mode</name>
                  <description>fast mode (less than or equal 400 kbit/s)</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>High_Speed_Mode</name>
                  <description>high speed mode (less than or equal 3.4 Mbit/s)</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_10BITADDR_SLAVE -->
            <field>
              <name>IC_10BITADDR_SLAVE</name>
              <description>When acting as a slave, this bit controls whether the I2C responds 
			  to 7- or 10-bit addresses.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>7-bit addressing. The DW_apb_i2c ignores transactions that involve 10-bit addressing; 
							   for 7-bit addressing, only the lower 7 bits of the IC_SAR register are compared
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>10-bit addressing. The DW_apb_i2c responds to only 10-bit addressing transfers that match 
							   the full 10 bits of the IC_SAR register.
				  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_10BITADDR_MASTER -->
            <field>
              <name>IC_10BITADDR_MASTER_RD_ONLY</name>
              <description>the function of this bit is handled by bit 12 of IC_TAR register, and becomes 
			  a read-only copy called IC_10BITADDR_MASTER_rd_only</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>7-bit addressing</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>10-bit addressing</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_RESTART_EN -->
            <field>
              <name>IC_RESTART_EN</name>
              <description>Determines whether RESTART conditions may be sent when acting as a master</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_SLAVE_DISABLE -->
            <field>
              <name>IC_SLAVE_DISABLE</name>
              <description>This bit controls whether I2C has its slave disabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>slave is enabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>slave is disabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- STOP_DET_IFADDRESSED -->
            <field>
              <name>STOP_DET_IFADDRESSED</name>
              <description>The STOP DETECTION interrupt is generated only when the transmitted 
			  address matches the slave address of SAR</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Issues the STOP DETECTION irrespective of whether it is addressed or not.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description> issues the STOP DETECTION interrupt only when it is addressed.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TX_EMPTY_CTRL -->
            <field>
              <name>TX_EMPTY_CTRL</name>
              <description>	This bit controls the generation of the TX EMPTY 
			   interrupt, as described in the IC RAW INTR STAT register.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- STOP_DET_IF_MASTER_ACTIVE -->
            <field>
              <name>STOP_DET_IF_MASTER_ACTIVE</name>
              <description> In Master mode.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description> Issues the STOP_DET irrespective of whether the master is active.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Issues the STOP_DET interrupt only when the master is active</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- BUS_CLEAR_FEATURE_CTRL -->
            <field>
              <name>BUS_CLEAR_FEATURE_CTRL</name>
              <description> In Master mode.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description> Bus Clear Feature is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Bus Clear Feature is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- IC_TAR: I2C Target Address Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>IC_TAR</name>
          <description>I2C Target Address Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x10A0</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_TAR -->
            <field>
              <name>IC_TAR</name>
              <description>This is the target address for any master transaction</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GC_OR_START -->
            <field>
              <name>GC_OR_START</name>
              <description> If bit 11 (SPECIAL) is set to 1, then this bit indicates whether a General Call or START byte command 
							is to be performed by the DW_apb_i2c
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>General Call Address</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>START BYTE</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SPECIAL-->
            <field>
              <name>SPECIAL</name>
              <description> This bit indicates whether software performs a General Call or START BYTE command</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>ignore bit 10 GC_OR_START and use IC_TAR normally</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>perform special I2C command as specified in GC_OR_START bit</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- IC_10BITADDR_MASTER-->
            <field>
              <name>IC_10BITADDR_MASTER</name>
              <description> This bit controls whether the i2c starts its transfers in 7-or 10-bit addressing mode when acting as a master</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>7-bit addressing</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>10-bit addressing</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Device_ID-->
            <field>
              <name>DEVICE_ID</name>
              <description> If bit 11 (SPECIAL) is set to 1, then this bit indicates whether a Device-ID of a particular slave mentioned in IC_TAR[6:0] is to be performed by the I2C Master</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Device-ID is not performed and checks ic_tar[10] to perform either general call or START byte command.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>: Device-ID transfer is performed and bytes based on the number of read commands in the Tx-FIFO are received from the targeted slave and put in the Rx-FIFO.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:14]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SAR: I2C Slave Address Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>IC_SAR</name>
          <description>I2C Slave Address Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x55</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_SAR -->
            <field>
              <name>IC_SAR</name>
              <description>The IC_SAR holds the slave address when the I2C is operating as a slave. For 7-bit
							addressing, only IC_SAR[6:0] is used.</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_HS_MADDR: I2C High Speed Master Mode Code Address Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>IC_HS_MADDR</name>
          <description>I2C High Speed Master Mode Code Address Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0001</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- IC_HS_MAR -->
            <field>
              <name>IC_HS_MAR</name>
              <description> This bit field holds the value of the I2C HS mode master code</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_DATA_CMD:I2C Rx/Tx Data Buffer and Command Register -->
        <!-- REGISTER 5 -->
        <register>
          <name>IC_DATA_CMD</name>
          <description>I2C Rx/Tx Data Buffer and Command Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- DAT -->
            <field>
              <name>DAT</name>
              <description>This register contains the data to be transmitted or received on the I2C bus</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CMD -->
            <field>
              <name>CMD</name>
              <description>This bit controls whether a read or a write is performed</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- STOP -->
            <field>
              <name>STOP</name>
              <description>This bit controls whether a STOP is issued after the byte is sent or received</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>STOP is not issued after this byte, regardless of whether or not the Tx FIFO is empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>STOP is issued after this byte, regardless of whether or not the Tx FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESTART -->
            <field>
              <name>RESTART</name>
              <description>This bit controls whether a RESTART is issued before the byte is sent or received</description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued only if the transfer direction is changing from the previous command</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued before the data is sent/received</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIRST_DATA_BYTE -->
            <field>
              <name>FIRST_DATA_BYTE</name>
              <description>Indicates the first data byte received after the address phase for receive
						   transfer in Master receiver or Slave receiver mode</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued only if the transfer direction is changing from the previous command</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If IC_RESTART_EN is 1, a RESTART is issued before the data is sent/received</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SS_SCL_HCNT: Standard Speed I2C Clock SCL High Count Register -->
        <!-- REGISTER 6 -->
        <register>
          <name>IC_SS_SCL_HCNT</name>
          <description>Standard Speed I2C Clock SCL High Count Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x01F4</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_SS_SCL_HCNT -->
            <field>
              <name>IC_SS_SCL_HCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SS_SCL_LCNT: Standard Speed I2C Clock SCL Low Count Register -->
        <!-- REGISTER 7 -->
        <register>
          <name>IC_SS_SCL_LCNT</name>
          <description>Standard Speed I2C Clock SCL Low Count Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x024C</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_SS_SCL_LCNT -->
            <field>
              <name>IC_SS_SCL_LCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_FS_SCL_HCNT: Fast Speed I2C Clock SCL High Count Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>IC_FS_SCL_HCNT</name>
          <description>Fast Speed I2C Clock SCL High Count Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x004b</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_FS_SCL_HCNT -->
            <field>
              <name>IC_FS_SCL_HCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_FS_SCL_LCNT: Fast Speed I2C Clock SCL Low Count Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>IC_FS_SCL_LCNT</name>
          <description>Fast Speed I2C Clock SCL Low Count Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00a3</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_FS_SCL_LCNT -->
            <field>
              <name>IC_FS_SCL_LCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_HS_SCL_HCNT: High Speed I2C Clock SCL High Count Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>IC_HS_SCL_HCNT</name>
          <description>High Speed I2C Clock SCL High Count Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000f</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_HS_SCL_HCNT -->
            <field>
              <name>IC_HS_SCL_HCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_HS_SCL_LCNT: High Speed I2C Clock SCL Low Count Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>IC_HS_SCL_LCNT</name>
          <description>High Speed I2C Clock SCL Low Count Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0028</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- IC_HS_SCL_LCNT -->
            <field>
              <name>IC_HS_SCL_LCNT</name>
              <description>This register must be set before any I2C bus transaction can take place to ensure proper I/O timing</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_INTR_STAT: I2C Interrupt Status Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>IC_INTR_STAT</name>
          <description>I2C Interrupt Status Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- R_RX_UNDER  -->
            <field>
              <name>R_RX_UNDER</name>
              <description>Set if the processor attempts to read the receive buffer when it is empty by reading from the IC_DATA_CMD register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RX_OVER -->
            <field>
              <name>R_RX_OVER</name>
              <description>Set if the receive buffer is completely filled to IC_RX_BUFFER_DEPTH and an additional byte is received from an external I2C device</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RX_FULL  -->
            <field>
              <name>R_RX_FULL</name>
              <description>Set when the receive buffer reaches or goes above the RX_TL threshold in the IC_RX_TL register.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_TX_OVER   -->
            <field>
              <name>R_TX_OVER</name>
              <description>Set during transmit if the transmit buffer is filled to IC_TX_BUFFER_DEPTH and the processor attempts to issue another I2C command by writing to the
						   IC_DATA_CMD register.
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_TX_EMPTY   -->
            <field>
              <name>R_TX_EMPTY</name>
              <description>This bit is set to 1 when the transmit buffer is at or below the threshold value set in the IC_TX_TL register.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RD_REQ   -->
            <field>
              <name>R_RD_REQ</name>
              <description>This bit is set to 1 when DW_apb_i2c is acting as a slave and another I2C master is attempting to read data from DW_apb_i2c.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_TX_ABRT  -->
            <field>
              <name>R_TX_ABRT</name>
              <description>This bit indicates if DW_apb_i2c, as an I2C transmitter, is unable to complete the intended actions on the contents of the transmit FIFO</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_RX_DONE  -->
            <field>
              <name>R_RX_DONE</name>
              <description>When the DW_apb_i2c is acting as a slave-transmitter, this bit is set to 1 if the master does not acknowledge a transmitted byte</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_ACTIVITY  -->
            <field>
              <name>R_ACTIVITY</name>
              <description>This bit captures DW_apb_i2c activity and stays set until it is cleared</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_STOP_DET -->
            <field>
              <name>R_STOP_DET</name>
              <description>Indicates whether a STOP condition has occurred on the I2C interface regardless of whether DW_apb_i2c is operating in slave or master mode.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- R_START_DET -->
            <field>
              <name>R_START_DET</name>
              <description>Indicates whether a START or RESTART condition has occurred on the I2C interface regardless of 
						   whether DW_apb_i2c is operating in slave or master mode.
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--R_GEN_CALL-->
            <field>
              <name>R_GEN_CALL</name>
              <description>Set only when a General Call address is received and it is acknowledged</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--R_RESTART_DET-->
            <field>
              <name>R_RESTART_DET</name>
              <description>Indicates whether a RESTART condition has occurred on the I2C interface
						   when DW_apb_i2c is operating in slave mode and the slave is the addressed slave</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--MST_ON_HOLD-->
            <field>
              <name>R_MST_ON_HOLD</name>
              <description>Indicates whether a master is holding the bus and the Tx FIFO is empty.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--SCL_STUCK_AT_LOW-->
            <field>
              <name>M_SCL_STUCK_AT_LOW</name>
              <description>Indicates whether the SCL Line is stuck at low for the IC_SCL_STUCK_LOW_TIMOUT number of ic_clk periods</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_INTR_MASK: I2C Interrupt Mask Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>IC_INTR_MASK</name>
          <description>I2C Interrupt Mask Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x08FF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- M_RX_UNDER  -->
            <field>
              <name>M_RX_UNDER</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RX_OVER -->
            <field>
              <name>M_RX_OVER</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RX_FULL  -->
            <field>
              <name>M_RX_FULL</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_TX_OVER   -->
            <field>
              <name>M_TX_OVER</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_TX_EMPTY   -->
            <field>
              <name>M_TX_EMPTY</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RD_REQ   -->
            <field>
              <name>M_RD_REQ</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_TX_ABRT  -->
            <field>
              <name>M_TX_ABRT</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_RX_DONE  -->
            <field>
              <name>M_RX_DONE</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_ACTIVITY  -->
            <field>
              <name>M_ACTIVITY</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_STOP_DET -->
            <field>
              <name>M_STOP_DET</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M_START_DET -->
            <field>
              <name>M_START_DET</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--M_GEN_CALL-->
            <field>
              <name>M_GEN_CALL</name>
              <description>This bit mask their corresponding interrupt status bits in the IC_INTR_STAT register.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--M_RESTART_DET-->
            <field>
              <name>M_RESTART_DET</name>
              <description>Indicates whether a RESTART condition has occurred on the I2C interface
						   when DW_apb_i2c is operating in slave mode and the slave is the addressed slave</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--MST_ON_HOLD-->
            <field>
              <name>M_MST_ON_HOLD</name>
              <description>Indicates whether a master is holding the bus and the Tx FIFO is empty.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--SCL_STUCK_AT_LOW-->
            <field>
              <name>M_SCL_STUCK_AT_LOW</name>
              <description>Indicates whether the SCL Line is stuck at low for the IC_SCL_STUCK_LOW_TIMOUT number of ic_clk periods</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_RAW_INTR_STAT: I2C Raw Interrupt Status Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>IC_RAW_INTR_STAT</name>
          <description>I2C Raw Interrupt Status Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- RX_UNDER  -->
            <field>
              <name>RX_UNDER</name>
              <description>Set if the processor attempts to read the receive buffer when it is empty by reading from the IC_DATA_CMD register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RX_OVER -->
            <field>
              <name>RX_OVER</name>
              <description>Set if the receive buffer is completely filled to IC_RX_BUFFER_DEPTH and an additional byte is received from an external I2C device</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RX_FULL  -->
            <field>
              <name>RX_FULL</name>
              <description>Set when the receive buffer reaches or goes above the RX_TL threshold in the IC_RX_TL register.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TX_OVER   -->
            <field>
              <name>TX_OVER</name>
              <description>Set during transmit if the transmit buffer is filled to IC_TX_BUFFER_DEPTH and the processor attempts to issue another I2C command by writing to the
						   IC_DATA_CMD register.
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TX_EMPTY   -->
            <field>
              <name>TX_EMPTY</name>
              <description>This bit is set to 1 when the transmit buffer is at or below the threshold value set in the IC_TX_TL register.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RD_REQ   -->
            <field>
              <name>RD_REQ</name>
              <description>This bit is set to 1 when DW_apb_i2c is acting as a slave and another I2C master is attempting to read data from DW_apb_i2c.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TX_ABRT  -->
            <field>
              <name>TX_ABRT</name>
              <description>This bit indicates if DW_apb_i2c, as an I2C transmitter, is unable to complete the intended actions on the contents of the transmit FIFO</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RX_DONE  -->
            <field>
              <name>RX_DONE</name>
              <description>When the DW_apb_i2c is acting as a slave-transmitter, this bit is set to 1 if the master does not acknowledge a transmitted byte</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ACTIVITY  -->
            <field>
              <name>ACTIVITY</name>
              <description>This bit captures DW_apb_i2c activity and stays set until it is cleared</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- STOP_DET -->
            <field>
              <name>STOP_DET</name>
              <description>Indicates whether a STOP condition has occurred on the I2C interface regardless of whether DW_apb_i2c is operating in slave or master mode.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- START_DET -->
            <field>
              <name>START_DET</name>
              <description>Indicates whether a START or RESTART condition has occurred on the I2C interface regardless of 
						   whether DW_apb_i2c is operating in slave or master mode.
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--GEN_CALL-->
            <field>
              <name>GEN_CALL</name>
              <description>Set only when a General Call address is received and it is acknowledged</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESTART_DET-->
            <field>
              <name>RESTART_DET</name>
              <description>Indicates whether a RESTART condition has occurred on the I2C interface
						   when DW_apb_i2c is operating in slave mode and the slave is the addressed slave</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--MST_ON_HOLD-->
            <field>
              <name>MST_ON_HOLD</name>
              <description>Indicates whether a master is holding the bus and the Tx FIFO is empty.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--SCL_STUCK_AT_LOW-->
            <field>
              <name>SCL_STUCK_AT_LOW</name>
              <description>Indicates whether the SCL Line is stuck at low for the IC_SCL_STUCK_LOW_TIMOUT number of ic_clk periods</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_RX_TL: I2C Receive FIFO Threshold Register -->
        <!-- REGISTER 15 -->
        <register>
          <name>IC_RX_TL</name>
          <description>I2C Receive FIFO Threshold Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0008</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- RX_TL -->
            <field>
              <name>RX_TL</name>
              <description>Receive FIFO Threshold Level</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_TX_TL: I2C Transmit FIFO Threshold Register -->
        <!-- REGISTER 16 -->
        <register>
          <name>IC_TX_TL</name>
          <description>I2C Transmit FIFO Threshold Register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0008</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- TX_TL -->
            <field>
              <name>TX_TL</name>
              <description>Transmit FIFO Threshold Level</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_INTR: Clear Combined and Individual Interrupt Register -->
        <!-- REGISTER 17 -->
        <register>
          <name>IC_CLR_INTR</name>
          <description>Clear Combined and Individual Interrupt Register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_INTR -->
            <field>
              <name>CLR_INTR</name>
              <description>Read this register to clear the combined interrupt, all individual interrupts, and the IC_TXABRT_SOURCE register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RX_UNDER: Clear RX_UNDER Interrupt Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>IC_CLR_RX_UNDER</name>
          <description>Clear RX_UNDER Interrupt Register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RX_UNDER -->
            <field>
              <name>CLR_RX_UNDER</name>
              <description>Read this register to clear the RX_UNDER interrupt (bit 0) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RX_OVER: Clear RX_OVER Interrupt Register -->
        <!-- REGISTER 19 -->
        <register>
          <name>IC_CLR_RX_OVER</name>
          <description>Clear RX_OVER Interrupt Register</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RX_OVER -->
            <field>
              <name>CLR_RX_OVER</name>
              <description>Read this register to clear the RX_OVER interrupt (bit 1) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_TX_OVER: Clear TX_OVER Interrupt Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>IC_CLR_TX_OVER</name>
          <description>Clear TX_OVER Interrupt Register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_TX_OVER -->
            <field>
              <name>CLR_TX_OVER</name>
              <description>Read this register to clear the TX_OVER interrupt (bit 3) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RD_REQ:Clear RD_REQ Interrupt Register -->
        <!-- REGISTER 21 -->
        <register>
          <name>IC_CLR_RD_REQ</name>
          <description>Clear RD_REQ Interrupt Register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RD_REQ -->
            <field>
              <name>CLR_RD_REQ</name>
              <description>Read this register to clear the RD_REQ interrupt (bit 5) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_TX_ABRT:Clear TX_ABRT Interrupt Register -->
        <!-- REGISTER 22 -->
        <register>
          <name>IC_CLR_TX_ABRT</name>
          <description>Clear TX_ABRT Interrupt Register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_TX_ABRT -->
            <field>
              <name>CLR_TX_ABRT</name>
              <description>Read this register to clear the TX_ABRT interrupt (bit 6) of the C_RAW_INTR_STAT register, and the IC_TX_ABRT_SOURCE register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_RX_DONE:Clear RX_DONE Interrupt Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>IC_CLR_RX_DONE</name>
          <description>Clear RX_DONE Interrupt Register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_RX_DONE -->
            <field>
              <name>CLR_RX_DONE</name>
              <description>Read this register to clear the RX_DONE interrupt (bit 7) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_ACTIVITY:Clear ACTIVITY Interrupt Register -->
        <!-- REGISTER 24 -->
        <register>
          <name>IC_CLR_ACTIVITY</name>
          <description>Clear ACTIVITY Interrupt Register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_ACTIVITY -->
            <field>
              <name>CLR_ACTIVITY</name>
              <description>Reading this register clears the ACTIVITY interrupt if the I2C is not active any more</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_STOP_DET:Clear STOP_DET Interrupt Register -->
        <!-- REGISTER 25 -->
        <register>
          <name>IC_CLR_STOP_DET</name>
          <description>Clear STOP_DET Interrupt Register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_STOP_DET -->
            <field>
              <name>CLR_STOP_DET</name>
              <description>Read this register to clear the STOP_DET interrupt (bit 9) of the IC_RAW_INTR_STAT register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_START_DET:Clear START_DET Interrupt Register -->
        <!-- REGISTER 26 -->
        <register>
          <name>IC_CLR_START_DET</name>
          <description>Clear START_DET Interrupt Register</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_START_DET -->
            <field>
              <name>CLR_START_DET</name>
              <description>Read this register to clear the START_DET interrupt (bit 10) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_CLR_GEN_CALL:Clear GEN_CALL Interrupt Register -->
        <!-- REGISTER 27 -->
        <register>
          <name>IC_CLR_GEN_CALL</name>
          <description>Clear GEN_CALL Interrupt Register</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- CLR_GEN_CALL -->
            <field>
              <name>CLR_GEN_CALL</name>
              <description>Read this register to clear the GEN_CALL interrupt (bit 11) of IC_RAW_INTR_STAT register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_ENABLE:I2C Enable Register -->
        <!-- REGISTER 28 -->
        <register>
          <name>IC_ENABLE</name>
          <description>Clear GEN_CALL Interrupt Register</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!-- ENABLE -->
            <field>
              <name>EN</name>
              <description>Controls whether the DW_apb_i2c is enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disables DW_apb_i2c (TX and RX FIFOs are held in an erased state)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enables DW_apb_i2c</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ABORT -->
            <field>
              <name>ABORT</name>
              <description>When set, the controller initiates the transfer abort</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>ABORT not initiated or ABORT done</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>ABORT operation in progress</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TX_CMD_BLOCK -->
            <field>
              <name>TX_CMD_BLOCK</name>
              <description>none</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>The transmission of data starts on I2C bus automatically, 
								as soon as the first data is available in the Tx FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Blocks the transmission of data on I2C bus even if Tx FIFO has data to transmit</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SDA_STUCK_RECOVERY_ENABLE -->
            <field>
              <name>SDA_STUCK_RECOVERY_ENABLE</name>
              <description>SDA STUCK RECOVERY ENABLE</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_STATUS:I2C Status Register -->
        <!-- REGISTER 29-->
        <register>
          <name>IC_STATUS</name>
          <description>I2C Status Register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000006</resetValue>
          <resetMask>0x0F</resetMask>
          <fields>
            <!-- ACTIVITY -->
            <field>
              <name>ACTIVITY</name>
              <description>I2C Activity Status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TFNF -->
            <field>
              <name>TFNF</name>
              <description>Transmit FIFO Not Full</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit FIFO is full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit FIFO is not full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFE -->
            <field>
              <name>TFE</name>
              <description>Transmit FIFO Completely Empty</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFNE -->
            <field>
              <name>RFNE</name>
              <description>Receive FIFO Not Empty</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receive FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receive FIFO is not empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFF -->
            <field>
              <name>RFF</name>
              <description>Receive FIFO Completely Full</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receive FIFO is not full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receive FIFO is full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MST_ACTIVITY -->
            <field>
              <name>MST_ACTIVITY</name>
              <description>Master FSM Activity Status</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Master FSM is in IDLE state so the Master part of DW_apb_i2c is not Active</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Master FSM is not in IDLE state so the Master part of DW_apb_i2c is Active</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SLV_ACTIVITY -->
            <field>
              <name>SLV_ACTIVITY</name>
              <description>Slave FSM Activity Status</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Slave FSM is in IDLE state so the Slave part of DW_apb_i2c is not Active</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Slave FSM is not in IDLE state so the Slave part of DW_apb_i2c is Active</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MST_HOLD_TX_FIFO_EMPTY -->
            <field>
              <name>MST_HOLD_TX_FIFO_EMPTY</name>
              <description>The I2C master stalls the write transfer when Tx FIFO is empty, and 
			  the the last byte does not have the Stop bit set.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- MST_HOLD_RX_FIFO_FULL -->
            <field>
              <name>MST_HOLD_RX_FIFO_FULL</name>
              <description>This bit indicates the BUS Hold in Master mode due to Rx FIFO is Full and
 			  additional byte has been received.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SLV_HOLD_TX_FIFO_EMPTY -->
            <field>
              <name>SLV_HOLD_TX_FIFO_EMPTY</name>
              <description>This bit indicates the BUS Hold in Slave mode for the Read request when the 
			   Tx FIFO is empty.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SLV_HOLD_RX_FIFO_FULL -->
            <field>
              <name>SLV_HOLD_RX_FIFO_FULL</name>
              <description>This bit indicates the BUS Hold in Slave mode due to the Rx FIFO being Full and 
			  an additional byte being received.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDA_STUCK_NOT_RECOVERED -->
            <field>
              <name>SDA_STUCK_NOT_RECOVERED</name>
              <description>This bit indicates that an SDA stuck at low is not recovered after the 
			  recovery mechanism.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_TXFLR:I2C Transmit FIFO Level Register -->
        <!-- REGISTER 30 -->
        <register>
          <name>IC_TXFLR</name>
          <description>I2C Transmit FIFO Level Register</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- TXFLR -->
            <field>
              <name>TXFLR</name>
              <description>Contains the number of valid data entries in the transmit FIFO.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_RXFLR:I2C Receive FIFO Level Register -->
        <!-- REGISTER 31 -->
        <register>
          <name>IC_RXFLR</name>
          <description>I2C Receive FIFO Level Register</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- RXFLR -->
            <field>
              <name>RXFLR</name>
              <description>Receive FIFO Level. Contains the number of valid data entries in the receive FIFO</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SDA_HOLD:I2C SDA Hold Time Length Register -->
        <!-- REGISTER 32 -->
        <register>
          <name>IC_SDA_HOLD</name>
          <description>I2C SDA Hold Time Length Register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0001</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--IC_SDA_TX_HOLD -->
            <field>
              <name>IC_SDA_TX_HOLD</name>
              <description>Sets the required SDA hold time in units of ic_clk period,when I2C 
			  acts as a transmitter.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--IC_SDA_RX_HOLD -->
            <field>
              <name>IC_SDA_RX_HOLD</name>
              <description>Sets the required SDA hold time in units of ic_clk period,when 
			  I2C acts as a receiver.</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_TX_ABRT_SOURCE:I2C Transmit Abort Source Register -->
        <!-- REGISTER 33 -->
        <register>
          <name>IC_TX_ABRT_SOURCE</name>
          <description>I2C Transmit Abort Source Register</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--ABRT_7B_ADDR_NOACK -->
            <field>
              <name>ABRT_7B_ADDR_NOACK</name>
              <description>1: Master is in 7-bit addressing mode and the address sent was not acknowledged by any slave</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_10ADDR1_NOACK -->
            <field>
              <name>ABRT_10ADDR1_NOACK</name>
              <description>1: Master is in 10-bit address mode and the first 10-bit address byte was not acknowledged by any slave</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_10ADDR2_NOACK -->
            <field>
              <name>ABRT_10ADDR2_NOACK</name>
              <description>1: Master is in 10-bit address mode and the second address byte of the 10-bit address was not acknowledged by any slave</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_TXDATA_NOACK -->
            <field>
              <name>ABRT_TXDATA_NOACK</name>
              <description>1: This is a master-mode only bit. Master has received an acknowledgement for the address, but when it sent data byte(s)
						   following the address, it did not receive an acknowledge from the remote slave(s)
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_GCALL_NOACK -->
            <field>
              <name>ABRT_GCALL_NOACK</name>
              <description>1: DW_apb_i2c in master mode sent a General Call and no slave on the bus acknowledged the General Call
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_GCALL_READ -->
            <field>
              <name>ABRT_GCALL_READ</name>
              <description>1: DW_apb_i2c in master mode sent a General Call but the user programmed the byte following the 
						   General Call to be a read from the bus (IC_DATA_CMD[9] is set to 1)
			  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_HS_ACKDET -->
            <field>
              <name>ABRT_HS_ACKDET</name>
              <description>1: Master is in High Speed mode and the High Speed Master code was acknowledged</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SBYTE_ACKDET -->
            <field>
              <name>ABRT_SBYTE_ACKDET</name>
              <description>1: Master has sent a START Byte and the START Byte was acknowledged (wrong behavior)</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_HS_NORSTRT -->
            <field>
              <name>ABRT_HS_NORSTRT</name>
              <description>1: The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) = 0) and the user is trying to
						   use the master to transfer data in High Speed mode</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SBYTE_NORSTRT -->
            <field>
              <name>ABRT_SBYTE_NORSTRT</name>
              <description>1: The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) = 0) and the user is trying to
						   send a START Byte</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_10B_RD_NORSTRT -->
            <field>
              <name>ABRT_10B_RD_NORSTRT</name>
              <description>1: The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) = 0) and the master sends a
						   read command in 10-bit addressing mode</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_MASTER_DIS -->
            <field>
              <name>ABRT_MASTER_DIS</name>
              <description>1: User tries to initiate a Master operation with the Master mode disabled</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--ARB_LOST -->
            <field>
              <name>ARB_LOST</name>
              <description>1: Master has lost arbitration, or if IC_TX_ABRT_SOURCE[14] is also set, then
						   the slave transmitter has lost arbitration</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SLVFLUSH_TXFIFO -->
            <field>
              <name>ABRT_SLVFLUSH_TXFIFO</name>
              <description>1: Slave has received a read command and some data exists in the TX FIFO so the slave
						   issues a TX_ABRT interrupt to flush old data in TX FIFO</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SLV_ARBLOST -->
            <field>
              <name>ABRT_SLV_ARBLOST</name>
              <description>1: Slave lost the bus while transmitting data to a remote master. IC_TX_ABRT_SOURCE[12]
						   is set at the same time</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SLVRD_INTX -->
            <field>
              <name>ABRT_SLVRD_INTX</name>
              <description>1: When the processor side responds to a slave mode request for data to be transmitted
						   to a remote master and user writes a 1 in CMD (bit 8) of IC_DATA_CMD register
			  </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_USER_ABRT -->
            <field>
              <name>ABRT_USER_ABRT</name>
              <description>This is a master-mode-only bit. Master has detected the transfer abort (IC_ENABLE[1]).
			  </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_SDA_STUCK_AT_LOW -->
            <field>
              <name>ABRT_SDA_STUCK_AT_LOW</name>
              <description>Master detects the SDA is Stuck at low for the IC_SDA_STUCK_AT_LOW_TIMEOUT value of ic_clks
			  </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_DEVICE_NOACK -->
            <field>
              <name>ABRT_DEVICE_NOACK</name>
              <description>Master initiates the DEVICE_ID transfer and the device ID sent is not acknowledged by any slave
			  </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_DEVICE_SLVADDR_NOACK -->
            <field>
              <name>ABRT_DEVICE_SLVADDR_NOACK</name>
              <description>Master is initiating the DEVICE_ID transfer and the slave address 
						   sent was not acknowledged by any slave
			  </description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!--ABRT_DEVICE_WRITE -->
            <field>
              <name>ABRT_DEVICE_WRITE</name>
              <description>Master is initiating the DEVICE_ID transfer and the Tx-
						   FIFO consists of write commands.
			  </description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[22:21]</bitRange>
              <access>read-only</access>
            </field>
            <!--TX_FLUSH_CNT -->
            <field>
              <name>TX_FLUSH_CNT</name>
              <description>This field indicates the number of Tx FIFO data commands that are flushed due to TX_ABRT interrupt
			  </description>
              <bitRange>[31:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SLV_DATA_NACK_ONLY:Generate Slave Data NACK Register -->
        <!-- REGISTER 34 -->
        <register>
          <name>IC_SLV_DATA_NACK_ONLY</name>
          <description>Generate Slave Data NACK Register</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--NACK -->
            <field>
              <name>NACK</name>
              <description>Generate NACK. This NACK generation only occurs when DW_apb_i2c is a slave receiver.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_DMA_CR:DMA Control Register -->
        <!-- REGISTER 35 -->
        <register>
          <name>IC_DMA_CR</name>
          <description>DMA Control Register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--RDMAE -->
            <field>
              <name>RDMAE</name>
              <description>Receive DMA Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receive DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receive DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--TDMAE -->
            <field>
              <name>TDMAE</name>
              <description>Transmit DMA Enable.This bit enables/disables the transmit FIFO DMA channel</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_DMA_TDLR:DMA Transmit Data Level Register -->
        <!-- REGISTER 36 -->
        <register>
          <name>IC_DMA_TDLR</name>
          <description>DMA Transmit Data Level Register</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--DMATDL:Transmit Data Level -->
            <field>
              <name>DMATDL</name>
              <description>This bit field controls the level at which a DMA request is made by the transmit logic</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_DMA_RDLR:I2C Receive Data Level Register -->
        <!-- REGISTER 37 -->
        <register>
          <name>IC_DMA_RDLR</name>
          <description>I2C Receive Data Level Register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <!--DMATDL:Transmit Data Level -->
            <field>
              <name>DMARDL</name>
              <description>This bit field controls the level at which a DMA request is made by the receive logic</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IC_SDA_SETUP:I2C SDA Setup Register -->
        <!-- REGISTER 38 -->
        <register>
          <name>IC_SDA_SETUP</name>
          <description>I2C SDA Setup Register</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--SDA_SETUP-->
            <field>
              <name>SDA_SETUP</name>
              <description>This register controls the amount of time delay (in terms of number of ic_clk clock periods)</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_ACK_GENERAL_CALL:I2C ACK General Call Register -->
        <!-- REGISTER 39 -->
        <register>
          <name>IC_ACK_GENERAL_CALL</name>
          <description>I2C ACK General Call Register</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--ACK_GEN_CALL:ACK General Call -->
            <field>
              <name>ACK_GEN_CALL</name>
              <description>ACK General Call</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c does not generate General Call interrupts</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c responds with a ACK (by asserting ic_data_oe) when it receives a General Call.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_ENABLE_STATUS:I2C Enable Status Register -->
        <!-- REGISTER 40 -->
        <register>
          <name>IC_ENABLE_STATUS</name>
          <description>I2C Enable Status Register</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--IC_EN:ic_en Status -->
            <field>
              <name>IC_EN</name>
              <description>This bit always reflects the value driven on the output port ic_en.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c is deemed completely inactive</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c is deemed to be in an enabled state</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SLV_DISABLED_WHILE_BUSY:Slave Disabled While Busy (Transmit, Receive) -->
            <field>
              <name>SLV_DISABLED_WHILE_BUSY</name>
              <description>This bit indicates if a potential or active Slave operation has been aborted due to the setting of
							the IC_ENABLE register from 1 to 0</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c is deemed to have been disabled when there is master activity, or when the I2C bus is idle.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c is deemed to have forced a NACK during any part of an I2C transfer</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SLV_RX_DATA_LOST: Slave Received Data Lost -->
            <field>
              <name>SLV_RX_DATA_LOST</name>
              <description>Slave Received Data Lost</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DW_apb_i2c is deemed to have been actively engaged in an aborted I2C transfer (with matching address) and the data phase of the
							   I2C transfer has been entered, even though a data byte has been responded with a NACK</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DW_apb_i2c is deemed to have been disabled without being actively involved in the data phase of a Slave-Receiver transfer</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_FS_SPKLEN:I2C SS and FS Spike Suppression Limit Register -->
        <!-- REGISTER 41 -->
        <register>
          <name>IC_FS_SPKLEN</name>
          <description>I2C SS and FS Spike Suppression Limit Register</description>
          <alternateRegister>IC_UFM_SPKLEN</alternateRegister>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000006</resetValue>
          <resetMask>0x000000FF</resetMask>
          <fields>
            <!--IC_FS_SPKLEN:ic_en Status -->
            <field>
              <name>IC_FS_SPKLEN</name>
              <description> This register sets the duration, measured in ic_clk cycles, of the longest spike in the SCL or SDA lines that are filtered out by
							the spike suppression logic</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_HS_SPKLEN:I2C HS Spike Suppression Limit Register -->
        <!-- REGISTER 42 -->
        <register>
          <name>IC_HS_SPKLEN</name>
          <description>I2C HS Spike Suppression Limit Register</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000002</resetValue>
          <resetMask>0x000000FF</resetMask>
          <fields>
            <!--IC_HS_SPKLEN:ic_en Status -->
            <field>
              <name>IC_HS_SPKLEN</name>
              <description> This register sets the duration, measured in ic_clk cycles, of the longest spike in the SCL or SDA lines that are filtered out by
							the spike suppression logic</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_CLR_RESTART_DET:Clear RESTART_DET Interrupt Register -->
        <!-- REGISTER 43 -->
        <register>
          <name>IC_CLR_RESTART_DET</name>
          <description>Clear RESTART_DET Interrupt Register</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <fields>
            <!--CLR_RESTART_DET -->
            <field>
              <name>CLR_RESTART_DET</name>
              <description> Read this register to clear the RESTART_DET interrupt (bit 12) of
							the IC_RAW_INTR_STAT registe</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_COMP_PARAM_1:Component Parameter Register 1 -->
        <!-- REGISTER 44 -->
        <register>
          <name>IC_COMP_PARAM_1</name>
          <description>I2C HS Spike Suppression Limit Register</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x000808EC</resetValue>
          <fields>
            <!--CLR_RESTART_DET -->
            <field>
              <name>CLR_RESTART_DET</name>
              <description>Read this register to clear the RESTART_DET interrupt (bit 12) of the IC_RAW_INTR_STAT register</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--MAX_SPEED_MODE -->
            <field>
              <name>MAX_SPEED_MODE</name>
              <description>Maximum Speed Mode</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--HC_COUNT_VALUES -->
            <field>
              <name>HC_COUNT_VALUES</name>
              <description> Hard Code the count values</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--INTR_IO -->
            <field>
              <name>INTR_IO</name>
              <description>Single Interrupt Output port </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--HAS_DMA -->
            <field>
              <name>HAS_DMA</name>
              <description>DMA Handshake Interface signal</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--ADD_ENCODED_PARAMS -->
            <field>
              <name>ADD_ENCODED_PARAMS</name>
              <description>Add Encoded Parameters</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--RX_BUFFER_DEPTH-->
            <field>
              <name>RX_BUFFER_DEPTH</name>
              <description>Depth of receive buffer;the buffer is 8 bits wide;2 to 256</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--TX_BUFFER_DEPTH-->
            <field>
              <name>TX_BUFFER_DEPTH</name>
              <description>Depth of Transmit buffer;the buffer is 8 bits wide;2 to 256</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_COMP_VERSION:I2C Component Version Register -->
        <!-- REGISTER 45 -->
        <register>
          <name>IC_COMP_VERSION</name>
          <description>I2C Component Version Register</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- IC_COMP_VERSION -->
            <field>
              <name>IC_COMP_VERSION</name>
              <description>Signifies the component version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_COMP_TYPE:I2C Component Type Register -->
        <!-- REGISTER 46 -->
        <register>
          <name>IC_COMP_TYPE</name>
          <description>I2C Component Type Register</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- IC_COMP_TYPE -->
            <field>
              <name>IC_COMP_TYPE</name>
              <description>Design ware Component Type number = 0x44_57_01_40</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_SCL_STUCK_AT_LOW_TIMEOUT -->
        <!-- REGISTER 47 -->
        <register>
          <name>IC_SCL_STUCK_AT_LOW_TIMEOUT</name>
          <description>I2C SCL Stuck at Low Timeout</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <fields>
            <!-- IC_SCL_STUCK_LOW_TIMEOUT -->
            <field>
              <name>IC_SCL_STUCK_LOW_TIMEOUT</name>
              <description>Generates the interrupt to indicate SCL stuck at low if it
						   detects the SCL stuck at low for the IC_SCL_STUCK_LOW_TIMEOUT in units of ic_clk period</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SDA_STUCK_AT_LOW_TIMEOUT -->
        <!-- REGISTER 48 -->
        <register>
          <name>IC_SDA_STUCK_AT_LOW_TIMEOUT</name>
          <description>I2C SDA Stuck at Low Timeout</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <fields>
            <!-- IC_SDA_STUCK_LOW_TIMEOUT -->
            <field>
              <name>IC_SDA_STUCK_LOW_TIMEOUT</name>
              <description>Initiates the recovery of SDA line , if it
						   detects the SDA stuck at low for the IC_SDA_STUCK_LOW_TIMEOUT in units of ic_clk period.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_CLR_SCL_STUCK_DET -->
        <!-- REGISTER 49 -->
        <register>
          <name>IC_CLR_SCL_STUCK_DET</name>
          <description>Clear SCL Stuck at Low Detect Interrupt Register</description>
          <addressOffset>0xB4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!-- CLR_SCL_STUCK -->
            <field>
              <name>CLR_SCL_STUCK</name>
              <description>Read this register to clear the SCL_STUCK_DET interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_DEVICE_ID -->
        <!-- REGISTER 50 -->
        <register>
          <name>IC_DEVICE_ID</name>
          <description>I2C Device ID</description>
          <addressOffset>0xB8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!-- DEVICE_ID -->
            <field>
              <name>DEVICE_ID</name>
              <description>Contains the Device-ID of the component assigned through the
						   configuration parameter</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_CLOCK_LOW_SEXT -->
        <!-- REGISTER 51 -->
        <register>
          <name>IC_SMBUS_CLOCK_LOW_SEXT</name>
          <description> SMBUS Slave Clock Extend Timeout Register</description>
          <addressOffset>0xBC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- SMBUS_CLK_LOW_SEXT_TIMEOUT -->
            <field>
              <name>SMBUS_CLK_LOW_SEXT_TIMEOUT</name>
              <description>The values in this register are in units of ic_clk period.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_CLOCK_LOW_MEXT -->
        <!-- REGISTER 51 -->
        <register>
          <name>IC_SMBUS_CLOCK_LOW_MEXT</name>
          <description>SMBUS Master extend clock Timeout Register</description>
          <addressOffset>0xC0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- SMBUS_CLK_LOW_MEXT_TIMEOUT -->
            <field>
              <name>SMBUS_CLK_LOW_MEXT_TIMEOUT</name>
              <description>The values in this register are in units of ic_clk period..</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_THIGH_MAX_IDLE_COUNT -->
        <!-- REGISTER 53 -->
        <register>
          <name>IC_SMBUS_THIGH_MAX_IDLE_COUNT</name>
          <description> SMBus Thigh MAX Bus-Idle count Register</description>
          <addressOffset>0xC4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0XFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- SMBUS_THIGH_MAX_BUS_IDLE_CNT -->
            <field>
              <name>SMBUS_THIGH_MAX_BUS_IDLE_CNT</name>
              <description>The values in this register are in units of ic_clk period.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_INTR_STAT -->
        <!-- REGISTER 54 -->
        <register>
          <name>IC_SMBUS_INTR_STAT</name>
          <description> SMBUS Interrupt Status Register</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_INTR_MASK-->
        <!-- REGISTER 55 -->
        <register>
          <name>IC_SMBUS_INTR_MASK</name>
          <description> Interrupt Mask Register</description>
          <addressOffset>0xCC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_INTR_RAW_STATUS-->
        <!-- REGISTER 56 -->
        <register>
          <name>IC_SMBUS_INTR_RAW_STATUS</name>
          <description> SMBUS Raw Interrupt Status Register</description>
          <addressOffset>0xD0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_CLR_SMBUS_INTR-->
        <!-- REGISTER 57 -->
        <register>
          <name>IC_CLR_SMBUS_INTR</name>
          <description>Clear SMBUS Interrupt Register</description>
          <addressOffset>0xD4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>RESERVED1</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_OPTIONAL_SAR-->
        <!-- REGISTER 58 -->
        <register>
          <name>IC_OPTIONAL_SAR</name>
          <description> Optional Slave Address Register</description>
          <addressOffset>0xD8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0x00</resetMask>
          <fields>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IC_SMBUS_UDID_LSB-->
        <!-- REGISTER 59 -->
        <register>
          <name>IC_SMBUS_UDID_LSB</name>
          <description>SMBUS ARP UDID LSB Register</description>
          <addressOffset>0xDC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- IC_SMBUS_ARP_UDID_LSB -->
            <field>
              <name>IC_SMBUS_ARP_UDID_LSB</name>
              <description>This field is used to store the LSB 32 bit value of slave unique device identifier used in Address Resolution Protocol.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- Motor Control PWM -->
    <peripheral>
      <name>MCPWM</name>
      <version>1.0</version>
      <description>The Motor Control PWM (MCPWM) controller is used to generate a periodic pulse waveform, 
				   which is useful in motor control and power control applications</description>
      <groupName>MCPWM</groupName>
      <baseAddress>0x47070000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x14C</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>MCPWM</name>
        <value>48</value>
      </interrupt>
      <registers>
        <!-- PWM_INTR_STS: PWM Interrupt Status Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>PWM_INTR_STS</name>
          <description>PWM Interrupt Status Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- rise_pwm_time_period_match_intr_ch0 -->
            <field>
              <name>RISE_PWM_TIME_PERIOD_MATCH_INTR_CH0</name>
              <description>This time base interrupt for 0th channel without considering postscaler</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- pwm_time_prd_match_intr_ch0 -->
            <field>
              <name>PWM_TIME_PRD_MATCH_INTR_CH0</name>
              <description>This time base interrupt for 0th channel, which considers postscaler value</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- flt_A_intr -->
            <field>
              <name>FLT_A_INTR</name>
              <description>When the fault A pin is driven low, this interrupt is raised.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- flt_B_intr -->
            <field>
              <name>FLT_B_INTR</name>
              <description>When the fault B pin is driven low, this interrupt is raised.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- rise_pwm_time_period_match_intr_ch1 -->
            <field>
              <name>RISE_PWM_TIME_PERIOD_MATCH_INTR_CH1</name>
              <description>This time base interrupt for 1st channel without considering postscaler value</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- pwm_time_prd_match_intr_ch1 -->
            <field>
              <name>PWM_TIME_PRD_MATCH_INTR_CH1</name>
              <description>This time base interrupt for 1st channel, which considers postscaler value.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- rise_pwm_time_period_match_intr_ch2 -->
            <field>
              <name>RISE_PWM_TIME_PERIOD_MATCH_INTR_CH2</name>
              <description>This time base interrupt for 2nd channel without considering postscaler value.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- pwm_time_prd_match_intr_ch2 -->
            <field>
              <name>PWM_TIME_PRD_MATCH_INTR_CH2</name>
              <description>This time base interrupt for 2nd channel, which considers postscaler value</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- rise_pwm_time_period_match_intr_ch3 -->
            <field>
              <name>RISE_PWM_TIME_PERIOD_MATCH_INTR_CH3</name>
              <description>This time base interrupt for 3rd channel without considering postscaler value.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- pwm_time_prd_match_intr_ch3 -->
            <field>
              <name>PWM_TIME_PRD_MATCH_INTR_CH3</name>
              <description>This time base interrupt for 3rd channel, which considers postscaler value.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_INTR_UNMASK : PWM Interrupt Unmask Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>PWM_INTR_UNMASK</name>
          <description> PWM Interrupt Unmask Register </description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- pwm_intr_unmask-->
            <field>
              <name>PWM_INTR_UNMASK</name>
              <description>Interrupt Unmask</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_INTR_MASK : PWM Interrupt mask Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>PWM_INTR_MASK</name>
          <description> PWM Interrupt mask Register </description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- pwm_intr_unmask-->
            <field>
              <name>PWM_INTR_MASK</name>
              <description>Interrupt Mask</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_INTR_ACK : PWM Interrupt Acknowledgement Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>PWM_INTR_ACK</name>
          <description> PWM Interrupt Acknowledgement Register </description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- rise_pwm_time_period_match_ch0_ack-->
            <field>
              <name>RISE_PWM_TIME_PERIOD_MATCH_CH0_ACK</name>
              <description>pwm time period match interrupt for 0th channel will be cleared.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>PWM time period match interrupt for 0th channel will be cleared.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- pwm_time_prd_match_intr_ch0_ack-->
            <field>
              <name>PWM_TIME_PRD_MATCH_INTR_CH0_ACK</name>
              <description>pwm time period match interrupt for 0th channel will be cleared</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>pwm time period match interrupt for 0th channel will be cleared</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- flt_A_intr_ack-->
            <field>
              <name>FLT_A_INTR_ACK</name>
              <description> pwm fault A interrupt will be cleared.</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>pwm faultA interrupt will be cleared</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- flt_B_intr_ack-->
            <field>
              <name>FLT_B_INTR_ACK</name>
              <description>pwm fault B interrupt will be cleared.</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>pwm faultB interrupt will be cleared.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- rise_pwm_time_period_match_ch1_ack-->
            <field>
              <name>RISE_PWM_TIME_PERIOD_MATCH_CH1_ACK</name>
              <description>pwm time period match interrupt for 1st channel will be cleared</description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>pwm time period match interrupt for 1st channel will be cleared</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- pwm_time_prd_match_intr_ch1_ack-->
            <field>
              <name>PWM_TIME_PRD_MATCH_INTR_CH1_ACK</name>
              <description>pwm time period match interrupt for 1st channel will be cleared.</description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>pwm time period match interrupt for 1st channel will be cleared.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- rise_pwm_time_period_match_ch2_ack-->
            <field>
              <name>RISE_PWM_TIME_PERIOD_MATCH_CH2_ACK</name>
              <description>pwm time period match interrupt for 2nd channel will be cleared.</description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>pwm time period match interrupt for 2nd channel will be cleared</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- pwm_time_prd_match_intr_ch2_ack-->
            <field>
              <name>PWM_TIME_PRD_MATCH_INTR_CH2_ACK</name>
              <description>pwm time period match interrupt for 2nd channel will be cleared.</description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>pwm time period match interrupt for 2nd channel will be cleared.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- rise_pwm_time_period_match_ch3_ack-->
            <field>
              <name>RISE_PWM_TIME_PERIOD_MATCH_CH3_ACK</name>
              <description>pwm time period match interrupt for 3rd channel will be cleared.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>pwm time period match interrupt for 3rd channel will be cleared</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--pwm_time_prd_match_intr_ch3_ack-->
            <field>
              <name>PWM_TIME_PRD_MATCH_INTR_CH3_ACK</name>
              <description>pwm time period match interrupt for 3rd channel will be cleared.</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>pwm time period match interrupt for 3rd channel will be cleared</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_WR_REG_CH0  -->
        <!-- REGISTER 5 -->
        <register>
          <name>PWM_TIME_PRD_WR_REG_CH0</name>
          <description>Base timer period register of channel 0</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- pwm_time_prd_reg_wr_value_ch0-->
            <field>
              <name>PWM_TIME_PRD_REG_WR_VALUE_CH0</name>
              <description>Value to update the base timer period register of channel 0</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_CNTR_WR_REG_ch0  -->
        <!-- REGISTER 6 -->
        <register>
          <name>PWM_TIME_PRD_CNTR_WR_REG_CH0</name>
          <description>Base time counter initial value register for channel 0</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--pwm_time_prd_cntr_wr_reg_ch0-->
            <field>
              <name>PWM_TIME_PRD_CNTR_WR_REG_CH0</name>
              <description>To update the base time counter initial value for channel 0</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_PARAM_REG_ch0 -->
        <!-- REGISTER 7 -->
        <register>
          <name>PWM_TIME_PRD_PARAM_REG_CH0</name>
          <description>Base time period config parameter's register for channel0</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- tmr_opearating_mode_ch0-->
            <field>
              <name>TMR_OPEARATING_MODE_CH0</name>
              <description>Base timer operating mode for channel0</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FREE_RUNNING_MODE</name>
                  <description>free running mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SINGLE_EVENT_MODE</name>
                  <description>single event mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DOWN_COUNT_MODE</name>
                  <description>down count mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE1</name>
                  <description>none1</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UP_DOWN_MODE</name>
                  <description>up/down mode</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UP_DOWN_DOUBLER_MODE</name>
                  <description>up/down mode with interrupts for double PWM updates</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE2</name>
                  <description>none2</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE3</name>
                  <description>none3</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Pwm_time_prd_pre_scalar_value_ch0-->
            <field>
              <name>PWM_TIME_PRD_PRE_SCALAR_VALUE_CH0</name>
              <description>Base timer input clock pre scale select value for channel0.</description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1X_CLOCK_PERIOD</name>
                  <description>1x input clock period</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2X_CLOCK_PERIOD</name>
                  <description>2x input clock period</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>4X_CLOCK_PERIOD</name>
                  <description>4x input clock period</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16X_CLOCK_PERIOD</name>
                  <description>16x input clock period</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>32X_CLOCK_PERIOD</name>
                  <description>32x input clock period</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE1</name>
                  <description>none1</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>64X_CLOCK_PERIOD</name>
                  <description>64x input clock period</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE2</name>
                  <description>none2</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_time_prd_post_scalar_value_ch0-->
            <field>
              <name>PWM_TIME_PRD_POST_SCALAR_VALUE_CH0</name>
              <description>Time base output post scale bits for channel0</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>[1:1]_POST_SCALE</name>
                  <!-- #DD-->
                  <description>0000  1 to 1 post scale</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:2]_POST_SCALE</name>
                  <description>0001  1 to 2</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:3]_POST_SCALE</name>
                  <description>0010  1 to 3</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:4]_POST_SCALE</name>
                  <description>0011  1 to 4</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:5]_POST_SCALE</name>
                  <description>0100  1 to 5</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:6]_POST_SCALE</name>
                  <description>0101  1 to 6</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:7]_POST_SCALE</name>
                  <description>0110  1 to 7</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:8]_POST_SCALE</name>
                  <description>0111  1 to 8</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:9]_POST_SCALE</name>
                  <description>1000  1 to 9</description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:10]_POST_SCALE</name>
                  <description>1001  1 to 10</description>
                  <value>9</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:11]_POST_SCALE</name>
                  <description>1010  1 to 11</description>
                  <value>10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:12]_POST_SCALE</name>
                  <description>1011  [1:12]</description>
                  <value>11</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:13]_POST_SCALE</name>
                  <description>1100  [1:13]</description>
                  <value>12</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:14]_POST_SCALE</name>
                  <description>1101  1 to 14</description>
                  <value>13</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:15]_POST_SCALE</name>
                  <description>1110  1 to 15</description>
                  <value>14</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:16]_POST_SCALE</name>
                  <description>1111  1 to 16</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_CTRL_REG_ch0-->
        <!-- REGISTER 8 -->
        <register>
          <name>PWM_TIME_PRD_CTRL_REG_CH0</name>
          <description>Base time counter initial value register for channel 0</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <!--pwm_time_prd_cntr_rst_frm_reg-->
            <field>
              <name>PWM_TIME_PRD_CNTR_RST_FRM_REG</name>
              <description>Time period counter soft reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--pwm_time_base_en_frm_reg_ch0-->
            <field>
              <name>PWM_TIME_BASE_EN_FRM_REG_CH0</name>
              <description>Base timer enable for channnel0</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>timer is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>timer is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--pwm_sft_rst-->
            <field>
              <name>PWM_SFT_RST</name>
              <description>MC PWM soft reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_STS_REG_ch0-->
        <!-- REGISTER 9 -->
        <register>
          <name>PWM_TIME_PRD_STS_REG_CH0</name>
          <description>Base time period status register for channel0</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!--pwm_time_prd_dir_sts_ch0-->
            <field>
              <name>PWM_TIME_PRD_DIR_STS_CH0</name>
              <description>Time period counter direction status for channel0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Downward</name>
                  <description>Time period counter direction is downward</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Upward</name>
                  <description>Time period counter direction is upward</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_CNTR_VALUE_ch0-->
        <!-- REGISTER 10 -->
        <register>
          <name>PWM_TIME_PRD_CNTR_VALUE_CH0</name>
          <description> Base Time period counter current value register for channel0</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--pwm_time_prd_cntr_value_ch0-->
            <field>
              <name>PWM_TIME_PRD_CNTR_VALUE_CH0</name>
              <description>Time period counter current value for channel0</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_DUTYCYCLE_CTRL_SET_REG-->
        <!-- REGISTER 11 -->
        <register>
          <name>PWM_DUTYCYCLE_CTRL_SET_REG</name>
          <description>Duty cycle Control Set Register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--imdt_dutycycle_update_en-->
            <field>
              <name>IMDT_DUTYCYCLE_UPDATE_EN</name>
              <description>Enable to update the duty cycle immediately</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--dutycycle_update_disable-->
            <field>
              <name>DUTYCYCLE_UPDATE_DISABLE</name>
              <description>Duty cycle register updation disable. There is a separate bit for each channel</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_DUTYCYCLE_CTRL_RESET_REG-->
        <!-- REGISTER 12 -->
        <register>
          <name>PWM_DUTYCYCLE_CTRL_RESET_REG</name>
          <description>Duty cycle Control Reset Register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000F</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--imdt_dutycycle_update_en-->
            <field>
              <name>IMDT_DUTYCYCLE_UPDATE_EN</name>
              <description>Enable to update the duty cycle immediately</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--dutycycle_update_disable-->
            <field>
              <name>DUTYCYCLE_UPDATE_DISABLE</name>
              <description>Duty cycle register updation disable. There is a separate bit for each channel.</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_DUTYCYCLE_REG_WIRE_VALUE_0-->
        <!-- REGISTER 13 -->
        <cluster>
          <dim>4</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>PWM_DUTYCYCLE_REG_WR_VALUEn</name>
          <description>Duty cycle Value Register for Channel 0 to channel 3 </description>
          <addressOffset>0x58</addressOffset>
          <register>
            <name>PWM_DUTYCYCLE_REG_WR_VALUE__n_</name>
            <description>Duty cycle Value Register for Channel </description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--pwm_dutycycle_reg_wr_value_ch-->
              <field>
                <name>PWM_DUTYCYCLE_REG_WR_VALUE_CH_n_</name>
                <description>Duty cycle value for channel0 to channel3</description>
                <bitRange>[15:0]</bitRange>
                <access>read-write</access>
              </field>
              <!-- RESERVED -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- PWM_DEADTIME_CTRL_SET_REG-->
        <!-- REGISTER 17 -->
        <register>
          <name>PWM_DEADTIME_CTRL_SET_REG</name>
          <description>Dead time Control Set Register</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFF</resetMask>
          <fields>
            <!--deadtime_select_active-->
            <field>
              <name>DEADTIME_SELECT_ACTIVE</name>
              <description>Dead time select bits for PWM going active</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>means use counter A</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>means use counter B</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--deadtime_select_inactive-->
            <field>
              <name>DEADTIME_SELECT_INACTIVE</name>
              <description>Dead time select bits for PWM going inactive</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>means use counter A</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>means use counter B</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--deadtime_disable_frm_reg-->
            <field>
              <name>DEADTIME_DISABLE_FRM_REG</name>
              <description>Dead time counter soft reset for each channel.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_DEADTIME_CTRL_RESET_REG-->
        <!-- REGISTER 18 -->
        <register>
          <name>PWM_DEADTIME_CTRL_RESET_REG</name>
          <description>Dead time Control Reset Register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFF</resetMask>
          <fields>
            <!--deadtime_select_active-->
            <field>
              <name>DEADTIME_SELECT_ACTIVE</name>
              <description>Dead time select bits for PWM going active</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>means use counter A</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>means use counter B</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--deadtime_select_inactive-->
            <field>
              <name>DEADTIME_SELECT_INACTIVE</name>
              <description>Dead time select bits for PWM going inactive</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>means use counter A</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>means use counter B</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--deadtime_disable_frm_reg-->
            <field>
              <name>DEADTIME_DISABLE_FRM_REG</name>
              <description>Dead time counter soft reset for each channel.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_DEADTIME_PRESCALE_SELECT_A-->
        <!-- REGISTER 19 -->
        <register>
          <name>PWM_DEADTIME_PRESCALE_SELECT_A</name>
          <description>Dead time Prescale Select Register for A</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--deadtime_prescale_select_A-->
            <field>
              <name>DEADTIME_PRESCALE_SELECT_A</name>
              <description>Dead time prescale selection bits for unit A.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_DEADTIME_PRESCALE_SELECT_B-->
        <!-- REGISTER 20-->
        <register>
          <name>PWM_DEADTIME_PRESCALE_SELECT_B</name>
          <description>Dead time Prescale Select Register for B</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--deadtime_prescale_select_B-->
            <field>
              <name>DEADTIME_PRESCALE_SELECT_B</name>
              <description>Dead time prescale selection bits for unit B</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_DEADTIME_X_Y here X is A or B and Y is channel number -->
        <!--#SSneed to check-->
        <!-- REGISTER 21 -->
        <cluster>
          <dim>4</dim>
          <dimIncrement>0x08</dimIncrement>
          <name>PWM_DEADTIMEn</name>
          <description>PWM_DEADTIME_A (0-3) and PWM_DEADTIME_B (0-3)</description>
          <addressOffset>0x88</addressOffset>
          <register>
            <name>PWM_DEADTIME_A__n_</name>
            <description>PWM deadtime for A and channel varies from 0 to 3</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x3F</resetMask>
            <fields>
              <!--deadtime_A_ch-->
              <field>
                <name>DEADTIME_A_CH_n_</name>
                <description>Dead time A value to load into dead time counter A of channel0 to channel3</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <!-- RESERVED -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:6]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- PWM_DEADTIME_B-->
          <!-- REGISTER 22 -->
          <register>
            <name>PWM_DEADTIME_B__n_</name>
            <description>PWM deadtime for B and channel varies from 0 to 3</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x3F</resetMask>
            <fields>
              <!--deadtime_B_ch-->
              <field>
                <name>DEADTIME_B_CH_n_</name>
                <description>Dead time B value to load into deadtime counter B of channel0 to channel3</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <!-- RESERVED -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:6]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- PWM_OP_OVERRIDE_CTRL_SET_REG-->
        <!-- REGISTER 29 -->
        <register>
          <name>PWM_OP_OVERRIDE_CTRL_SET_REG</name>
          <description>output override control set register</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!--op_override_sync-->
            <field>
              <name>OP_OVERRIDE_SYNC</name>
              <description>Output override is synced with pwm time period depending on operating mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_OP_OVERRIDE_CTRL_RESET_REG-->
        <!-- REGISTER 30 -->
        <register>
          <name>PWM_OP_OVERRIDE_CTRL_RESET_REG</name>
          <description>output override control reset register</description>
          <addressOffset>0xCC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--op_override_sync-->
            <field>
              <name>OP_OVERRIDE_SYNC</name>
              <description>Output override is synced with pwm time period depending on operating mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_OP_OVERRIDE_ENABLE_SET_REG-->
        <!-- REGISTER 31 -->
        <register>
          <name>PWM_OP_OVERRIDE_ENABLE_SET_REG</name>
          <description>output override enable set register</description>
          <addressOffset>0xD0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--pwm_op_override_enable_reg-->
            <field>
              <name>PWM_OP_OVERRIDE_ENABLE_REG</name>
              <description>Pwm output over ride enable</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_OP_OVERRIDE_ENABLE_RESET_REG-->
        <!-- REGISTER 32 -->
        <register>
          <name>PWM_OP_OVERRIDE_ENABLE_RESET_REG</name>
          <description>output override enable reset register</description>
          <addressOffset>0xD4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--pwm_op_override_enable_reg-->
            <field>
              <name>PWM_OP_OVERRIDE_ENABLE_REG</name>
              <description>Pwm output over ride enable</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_OP_OVERRIDE_VALUE_SET_REG-->
        <!-- REGISTER 33 -->
        <register>
          <name>PWM_OP_OVERRIDE_VALUE_SET_REG</name>
          <description>output override value set register</description>
          <addressOffset>0xD8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--op_override_value-->
            <field>
              <name>OP_OVERRIDE_VALUE</name>
              <description>Pwm output over ride value.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_OP_OVERRIDE_VALUE_RESET_REG-->
        <!-- REGISTER 34 -->
        <register>
          <name>PWM_OP_OVERRIDE_VALUE_RESET_REG</name>
          <description>output override enable reset register</description>
          <addressOffset>0xDC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--op_override_value-->
            <field>
              <name>OP_OVERRIDE_VALUE</name>
              <description>Pwm output over ride value.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_FLT_OVERRIDE_CTRL_SET_REG -->
        <!-- REGISTER 35 -->
        <register>
          <name>PWM_FLT_OVERRIDE_CTRL_SET_REG</name>
          <description>fault override control set register</description>
          <addressOffset>0xE0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--flt_A_mode-->
            <field>
              <name>FLT_A_MODE</name>
              <description>Fault A mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>latched mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>cycle by cycle by mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FLT_B_MODE</name>
              <description>Fault B mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>latched mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>cycle by cycle by mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OP_POLARITY_H</name>
              <description>Ouput polarity for high (H3, H2, H1, H0) side signals</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>means active low mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>means active high mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OP_POLARITY_L</name>
              <description>Ouput polarity for low (L3, L2, L1, L0) side signals.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>means active low mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>means active high mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FLT_A_ENABLE</name>
              <description>Fault A enable. Separate enable bit is present for channel</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FLT_B_ENABLE</name>
              <description>Fault B enable. Separate enable bit is present for channel</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>COMPLEMENTARY_MODE</name>
              <description>PWM I/O pair mode</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>PWM I/O pin pair is in the independent output mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>PWM I/O pin pair is in the complementary output mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_FLT_OVERRIDE_CTRL_RESET_REG-->
        <!-- REGISTER 36 -->
        <register>
          <name>PWM_FLT_OVERRIDE_CTRL_RESET_REG</name>
          <description>fault override control reset register</description>
          <addressOffset>0xE4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--flt_A_mode-->
            <field>
              <name>FLT_A_MODE</name>
              <description>Fault B mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>latched mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>cycle by cycle by mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FLT_B_MODE</name>
              <description>Fault B mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>latched mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>cycle by cycle by mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OP_POLARITY_H</name>
              <description>Ouput polarity for high (H3, H2, H1, H0) side signals</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>means active low mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>means active high mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OP_POLARITY_L</name>
              <description>Ouput polarity for low (L3, L2, L1, L0) side signals.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>means active low mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>means active high mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FLT_A_ENABLE</name>
              <description>Fault A enable. Separate enable bit is present for channel</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FLT_B_ENABLE</name>
              <description>Fault B enable. Separate enable bit is present for channel</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>COMPLEMENTARY_MODE</name>
              <description>PWM I/O pair mode</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>PWM I/O pin pair is in the independent output mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>PWM I/O pin pair is in the complementary output mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_FLT_A_OVERRIDE_VALUE_REG-->
        <!-- REGISTER 37 -->
        <register>
          <name>PWM_FLT_A_OVERRIDE_VALUE_REG</name>
          <description>Fault input A PWM override value</description>
          <addressOffset>0xE8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--pwm_flt_A_override_value_reg-->
            <field>
              <name>PWM_FLT_A_OVERRIDE_VALUE_reg</name>
              <description>0 bit for L0,1-L1,2-L2,3-L3,4-L4,5-L5,6-L6,7-L7</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Inactive</name>
                  <description>0 means PWM output pin is driven inactive on an external fault input A event</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>1 means PWM output pin is driven active on an external fault input A event.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_FLT_B_OVERRIDE_VALUE_REG-->
        <!-- REGISTER 38 -->
        <register>
          <name>PWM_FLT_B_OVERRIDE_VALUE_REG</name>
          <description>Fault input B PWM override value</description>
          <addressOffset>0xEC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--pwm_flt_B_override_value_reg-->
            <field>
              <name>PWM_FLT_B_OVERRIDE_VALUE_reg</name>
              <description>0 bit for L0, 1-L1,2-L2,3-L3,4-L4,5-L5,6-L6,7-L7 </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Inactive</name>
                  <description>0 means PWM output pin is driven inactive on an external fault input A event</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>1 means PWM output pin is driven active on an external fault input A event.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_SVT_CTRL_SET_REG-->
        <!-- REGISTER 39 -->
        <register>
          <name>PWM_SVT_CTRL_SET_REG</name>
          <description>NONE</description>
          <addressOffset>0xF0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <!--svt_enable_frm_reg-->
            <field>
              <name>SVT_ENABLE_FRM</name>
              <description>Special event trigger enable. This is used to enable generation special event trigger</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--svt_direction_frm_reg-->
            <field>
              <name>SVT_DIRECTION_FRM</name>
              <description>Special event trigger for time base direction</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>COUNT_UP</name>
                  <description>A special event trigger will occur when PWM time base is counting up</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>COUNT_DOWN</name>
                  <description>A special event trigger will occur when PWM time base is counting down</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_SVT_CTRL_RESET_REG-->
        <!-- REGISTER 40-->
        <register>
          <name>PWM_SVT_CTRL_RESET_REG</name>
          <description>Special event control reset register</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <!--svt_enable_frm_reg-->
            <field>
              <name>SVT_ENABLE_FRM</name>
              <description>Special event trigger enable. This is used to enable generation special event trigger</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--svt_direction_frm_reg-->
            <field>
              <name>SVT_DIRECTION_FRM</name>
              <description>Special event trigger for time base direction</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>COUNT_UP</name>
                  <description>A special event trigger will occur when PWM time base is counting up</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>COUNT_DOWN</name>
                  <description>A special event trigger will occur when PWM time base is counting down</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_SVT_PARAM_REG-->
        <!--REGISTER 41 -->
        <register>
          <name>PWM_SVT_PARAM_REG</name>
          <description>Special event parameter register</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--svt_postscaler_select-->
            <field>
              <name>SVT_POSTSCALER_SELECT</name>
              <description>PWM special event trigger output postscale select bits</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_SVT_COMPARE_VALUE_REG-->
        <!-- REGISTER 42 -->
        <register>
          <name>PWM_SVT_COMPARE_VALUE_REG</name>
          <description>Special event compare value register</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--pwm_svt_compare_value-->
            <field>
              <name>PWM_SVT_COMPARE_VALUE</name>
              <description>Special event compare value. This is used to compare with pwm time period counter to generate special event trigger</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_WR_REG_ch1-->
        <!-- REGISTER 43 -->
        <register>
          <name>PWM_TIME_PRD_WR_REG_CH1</name>
          <description>Base timer period register of channel1</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--pwm_time_prd_reg_wr_value_ch1-->
            <field>
              <name>PWM_TIME_PRD_REG_WR_VALUE_CH1</name>
              <description>Value to update the base timer period register of channel 1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_CNTR_WR_REG_ch1-->
        <!-- REGISTER 44 -->
        <register>
          <name>PWM_TIME_PRD_CNTR_WR_REG_CH1</name>
          <description>Base time counter initial value register for channel1</description>
          <addressOffset>0x104</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--pwm_time_prd_cntr_wr_reg_ch1-->
            <field>
              <name>PWM_TIME_PRD_CNTR_WR_REG_CH1</name>
              <description>To update the base time counter initial value for channel 1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_PARAM_REG_ch1 -->
        <!-- REGISTER 45 -->
        <register>
          <name>PWM_TIME_PRD_PARAM_REG_CH1</name>
          <description>NONE</description>
          <addressOffset>0x108</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- tmr_opearating_mode_ch1-->
            <field>
              <name>TMR_OPEARATING_MODE_CH1</name>
              <description>Base timer operating mode for channel1</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FREE_RUNNING_MODE</name>
                  <description>free running mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SINGLE_EVENT_MODE</name>
                  <description>single event mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DOWN_COUNT_MODE</name>
                  <description>down count mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE1</name>
                  <description>none1</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UP_DOWN_MODE</name>
                  <description>up/down mode</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UP_DOWN_DOUBLER_MODE</name>
                  <description>up/dowm mode with interrupts for double PWM updates</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE2</name>
                  <description>none2</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE3</name>
                  <description>none3</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Pwm_time_prd_pre_scalar_value_ch1-->
            <field>
              <name>PWM_TIME_PRD_PRE_SCALAR_VALUE_CH1</name>
              <description>Base timer input clock prescale select value for channel1.</description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1x_clock_period</name>
                  <description>1x input clock period</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2x_clock_period</name>
                  <description>2x input clock period</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>4x_clock_period</name>
                  <description>4x input clock period</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16x_clock_period</name>
                  <description>16x input clock period</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>32x_clock_period</name>
                  <description>32x input clock period</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE1</name>
                  <description>none2</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>64x_clock_period</name>
                  <description>64x input clock period</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE2</name>
                  <description>none1</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_time_prd_post_scalar_value_ch1-->
            <field>
              <name>PWM_TIME_PRD_POST_SCALAR_VALUE_CH1</name>
              <description>Time base output post scale bits for channel1</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>[1:1]_post_scale</name>
                  <description>0000  [1:1] post scale</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:2]_post_scale</name>
                  <description>0001  [1:2]</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:3]_post_scale</name>
                  <description>0010  [1:3]</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:4]_post_scale</name>
                  <description>0011  [1:4]</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:5]_post_scale</name>
                  <description>0100  [1:5]</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:6]_post_scale</name>
                  <description>0101  [1:6]</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:7]_post_scale</name>
                  <description>0110  [1:7]</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:8]_post_scale</name>
                  <description>0111  [1:8]</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:9]_post_scale</name>
                  <description>1000  [1:9]</description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:10]_post_scale</name>
                  <description>1001  [1:10]</description>
                  <value>9</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:11]_post_scale</name>
                  <description>1010  [1:11]</description>
                  <value>10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:12]_post_scale</name>
                  <description>1011  [1:12]</description>
                  <value>11</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:13]_post_scale</name>
                  <description>1100  [1:13]</description>
                  <value>12</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:14]_post_scale</name>
                  <description>1101  [1:14]</description>
                  <value>13</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:15]_post_scale</name>
                  <description>1110  [1:15]</description>
                  <value>14</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:16]_post_scale</name>
                  <description>1111  [1:16]</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_CTRL_REG_ch1 -->
        <!-- REGISTER 46 -->
        <register>
          <name>PWM_TIME_PRD_CTRL_REG_CH1</name>
          <description> Base time period control register for channel1</description>
          <addressOffset>0x10C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <!--pwm_time_prd_cntr_rst_frm_reg-->
            <field>
              <name>PWM_TIME_PRD_CNTR_RST_FRM_REG</name>
              <description>Time period counter soft reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--pwm_time_base_en_frm_reg_ch1-->
            <field>
              <name>PWM_TIME_BASE_EN_FRM_REG_CH1</name>
              <description>Base timer enable for channnel1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>timer is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>timer is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--pwm_sft_rst-->
            <field>
              <name>PWM_SFT_RST</name>
              <description>MC PWM soft reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_STS_REG_ch1 -->
        <!--REGISTER 47-->
        <register>
          <name>PWM_TIME_PRD_STS_REG_CH1</name>
          <description>Base time period status register for channel1</description>
          <addressOffset>0x110</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!--pwm_time_prd_dir_sts_ch1-->
            <field>
              <name>PWM_TIME_PRD_DIR_STS_CH1</name>
              <description>Time period counter direction status for channel1.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Downward</name>
                  <description>downward</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Upward</name>
                  <description>upward</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_CNTR_VALUE_ch1 -->
        <!--REGISTER 48-->
        <register>
          <name>PWM_TIME_PRD_CNTR_VALUE_CH1</name>
          <description>Time period counter current value for channel1</description>
          <addressOffset>0x114</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000FFFF</resetMask>
          <fields>
            <!--pwm_time_prd_cntr_value_ch1-->
            <field>
              <name>PWM_TIME_PRD_CNTR_VALUE_CH1</name>
              <description>Time period counter current value for channel1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_WR_REG_ch2 -->
        <!--REGISTER 49-->
        <register>
          <name>PWM_TIME_PRD_WR_REG_CH2</name>
          <description>Base timer period register of channel2</description>
          <addressOffset>0x118</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--pwm_time_prd_reg_wr_value_ch2-->
            <field>
              <name>PWM_TIME_PRD_REG_WR_VALUE_CH2</name>
              <description>Value to update the base timer period register of channel 2</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_CNTR_WR_REG_CH2 -->
        <!--REGISTER 50-->
        <register>
          <name>PWM_TIME_PRD_CNTR_WR_REG_CH2</name>
          <description>Base time counter initial value register for channal2</description>
          <addressOffset>0x11C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--pwm_time_prd_cntr_wr_reg_ch2-->
            <field>
              <name>PWM_TIME_PRD_CNTR_WR_REG_CH2</name>
              <description>To update the base time counter initial value for channel 2</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_PARAM_REG_ch2 -->
        <!--REGISTER 51-->
        <register>
          <name>PWM_TIME_PRD_PARAM_REG_CH2</name>
          <description>Base time period config parameter's register for channel2</description>
          <addressOffset>0x120</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- tmr_opearating_mode_ch2-->
            <field>
              <name>TMR_OPEARATING_MODE_CH2</name>
              <description>Base timer operating mode for channel2</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FREE_RUNNING_MODE</name>
                  <description>free running mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SINGLE_EVENT_MODE</name>
                  <description>single event mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DOWN_COUNT_MODE</name>
                  <description>down count mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE1</name>
                  <description>none1</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UP_DOWN_MODE</name>
                  <description>up/down mode</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UP_DOWN_DOUBLER_MODE</name>
                  <description>up/down mode with interrupts for double PWM updates</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE2</name>
                  <description>none2</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE3</name>
                  <description>none3</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Pwm_time_prd_pre_scalar_value_ch2-->
            <field>
              <name>PWM_TIME_PRD_PRE_SCALAR_VALUE_CH2</name>
              <description>Base timer input clock pre scale select value for channel2.</description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1X_CLOCK_PERIOD</name>
                  <description>1x input clock period</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2X_CLOCK_PERIOD</name>
                  <description>2x input clock period</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>4X_CLOCK_PERIOD</name>
                  <description>4x input clock period</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16X_CLOCK_PERIOD</name>
                  <description>16x input clock period</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>32X_CLOCK_PERIOD</name>
                  <description>32x input clock period</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE1</name>
                  <description>none1</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>64X_CLOCK_PERIOD</name>
                  <description>64x input clock period</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE2</name>
                  <description>none2</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_time_prd_post_scalar_value_ch2-->
            <field>
              <name>PWM_TIME_PRD_POST_SCALAR_VALUE_CH2</name>
              <description>Time base output post scale bits for channel2</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>[1:1]_POST_SCALE</name>
                  <description>0000  [1:1] post scale</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:2]_POST_SCALE</name>
                  <description>0001  [1:2]</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:3]_POST_SCALE</name>
                  <description>0010  [1:3]</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:4]_POST_SCALE</name>
                  <description>0011  [1:4]</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:5]_POST_SCALE</name>
                  <description>0100  [1:5]</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:6]_POST_SCALE</name>
                  <description>0101  [1:6]</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:7]_POST_SCALE</name>
                  <description>0110  [1:7]</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:8]_POST_SCALE</name>
                  <description>0111  [1:8]</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:9]_POST_SCALE</name>
                  <description>1000  [1:9]</description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:10]_POST_SCALE</name>
                  <description>1001  [1:10]</description>
                  <value>9</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:11]_POST_SCALE</name>
                  <description>1010  [1:11]</description>
                  <value>10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:12]_POST_SCALE</name>
                  <description>1011  [1:12]</description>
                  <value>11</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:13]_POST_SCALE</name>
                  <description>1100  [1:13]</description>
                  <value>12</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:14]_POST_SCALE</name>
                  <description>1101  [1:14]</description>
                  <value>13</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:15]_POST_SCALE</name>
                  <description>1110  [1:15]</description>
                  <value>14</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:16]_POST_SCALE</name>
                  <description>1111  [1:16]</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_CTRL_REG_ch2 -->
        <!--REGISTER 52-->
        <register>
          <name>PWM_TIME_PRD_CTRL_REG_CH2</name>
          <description>Base time period control register for channel2</description>
          <addressOffset>0x124</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <!--pwm_time_prd_cntr_rst_frm_reg-->
            <field>
              <name>PWM_TIME_PRD_CNTR_RST_FRM_REG</name>
              <description>Time period counter soft reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--pwm_time_base_en_frm_reg_ch2-->
            <field>
              <name>PWM_TIME_BASE_EN_FRM_REG_CH2</name>
              <description>Base timer enable for channnel2</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>timer is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>timer is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--pwm_sft_rst-->
            <field>
              <name>PWM_SFT_RST</name>
              <description>MC PWM soft reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_STS_REG_ch2 -->
        <!--REGISTER 53-->
        <register>
          <name>PWM_TIME_PRD_STS_REG_CH2</name>
          <description>Base time period status register for channel2</description>
          <addressOffset>0x128</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!--pwm_time_prd_dir_sts_ch2-->
            <field>
              <name>PWM_TIME_PRD_DIR_STS_CH2</name>
              <description>Time period counter direction status for channel2.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Downward</name>
                  <description>downward</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Upward</name>
                  <description>upward</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--PWM_TIME_PRD_CNTR_VALUE_ch2 -->
        <!--REGISTER 54-->
        <register>
          <name>PWM_TIME_PRD_CNTR_VALUE_CH2</name>
          <description>Time period counter current value register for channel2</description>
          <addressOffset>0x12C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!--pwm_time_prd_cntr_value_ch2-->
            <field>
              <name>PWM_TIME_PRD_CNTR_VALUE_CH2</name>
              <description>Time period counter current value for channel2</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--PWM_TIME_PRD_WR_REG_ch3 -->
        <!--REGISTER 55-->
        <register>
          <name>PWM_TIME_PRD_WR_REG_CH3</name>
          <description>Base timer period register of channel3</description>
          <addressOffset>0x130</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--pwm_time_prd_reg_wr_value_ch3-->
            <field>
              <name>PWM_TIME_PRD_REG_WR_VALUE_CH3</name>
              <description>To update the base time counter initial value for channel 3</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--PWM_TIME_PRD_CNTR_WR_REG_ch3-->
        <!--REGISTER 56-->
        <register>
          <name>PWM_TIME_PRD_CNTR_WR_REG_CH3</name>
          <description>Base time counter initial value register for channel3</description>
          <addressOffset>0x134</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--PWM_TIME_PRD_CNTR_WR_REG_CH3-->
            <field>
              <name>PWM_TIME_PRD_CNTR_WR_REG_CH3</name>
              <description>Value to update the base timer period register of channel 3</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_PARAM_REG_ch3 -->
        <!--REGISTER 57-->
        <register>
          <name>PWM_TIME_PRD_PARAM_REG_CH3</name>
          <description>Base time period config parameter's register for channel3</description>
          <addressOffset>0x138</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- tmr_opearating_mode_ch3-->
            <field>
              <name>TMR_OPEARATING_MODE_CH3</name>
              <description>Base timer operating mode for channel3</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FREE_RUNNING_MODE</name>
                  <description>free running mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SINGLE_EVENT_MODE</name>
                  <description>single event mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DOWN_COUNT_MODE</name>
                  <description>down count mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE1</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UP_DOWN_MODE</name>
                  <description>up/down mode</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DOUBLE_PWM_UPDATES</name>
                  <description>up/down mode with interrupts for double PWM updates</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE2</name>
                  <description>none2</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE3</name>
                  <description>none3</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Pwm_time_prd_pre_scalar_value_ch3-->
            <field>
              <name>PWM_TIME_PRD_PRE_SCALAR_VALUE_CH3</name>
              <description>Base timer input clock pre scale select value for channel2.</description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1X_CLOCK_PERIOD</name>
                  <description>1x input clock period</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2X_CLOCK_PERIOD</name>
                  <description>2x input clock period</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>4X_CLOCK_PERIOD</name>
                  <description>4x input clock period</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16X_CLOCK_PERIOD</name>
                  <description>16x input clock period</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>32X_CLOCK_PERIOD</name>
                  <description>32x input clock period</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE1</name>
                  <description>none</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>64X_CLOCK_PERIOD</name>
                  <description>64x input clock period</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NONE2</name>
                  <description>none2</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_time_prd_post_scalar_value_ch3-->
            <field>
              <name>PWM_TIME_PRD_POST_SCALAR_VALUE_CH3</name>
              <description>Time base output post scale bits for channel3</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>[1:1]_POST_SCALE</name>
                  <description>0000  [1:1] post scale</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:2]_POST_SCALE</name>
                  <description>0001  [1:2]</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:3]_POST_SCALE</name>
                  <description>0010  [1:3]</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:4]_POST_SCALE</name>
                  <description>0011  [1:4]</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:5]_POST_SCALE</name>
                  <description>0100  [1:5]</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:6]_POST_SCALE</name>
                  <description>0101  [1:6]</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:7]_POST_SCALE</name>
                  <description>0110  [1:7]</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:8]_POST_SCALE</name>
                  <description>0111  [1:8]</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:9]_POST_SCALE</name>
                  <description>1000  [1:9]</description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:10]_POST_SCALE</name>
                  <description>1001  [1:10]</description>
                  <value>9</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:11]_POST_SCALE</name>
                  <description>1010  [1:11]</description>
                  <value>10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:12]_POST_SCALE</name>
                  <description>1011  [1:12]</description>
                  <value>11</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:13]_POST_SCALE</name>
                  <description>1100  [1:13]</description>
                  <value>12</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:14]_POST_SCALE</name>
                  <description>1101  [1:14]</description>
                  <value>13</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:15]_POST_SCALE</name>
                  <description>1110  [1:15]</description>
                  <value>14</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>[1:16]_POST_SCALE</name>
                  <description>1111  [1:16]</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_CTRL_REG_ch3 -->
        <!--REGISTER 58-->
        <register>
          <name>PWM_TIME_PRD_CTRL_REG_CH3</name>
          <description> Base time period control register for channel3</description>
          <addressOffset>0x13C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <!--pwm_time_prd_cntr_rst_frm_reg-->
            <field>
              <name>PWM_TIME_PRD_CNTR_RST_FRM_REG</name>
              <description>Time period counter soft reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--pwm_time_base_en_frm_reg_ch3-->
            <field>
              <name>PWM_TIME_BASE_EN_FRM_REG_CH3</name>
              <description>Base timer enable for channnel3</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>timer is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>timer is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--pwm_sft_rst-->
            <field>
              <name>PWM_SFT_RST</name>
              <description>MC PWM soft reset</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_STS_REG_ch3 -->
        <!--REGISTER 59-->
        <register>
          <name>PWM_TIME_PRD_STS_REG_CH3</name>
          <description>Base time period status register for channel3</description>
          <addressOffset>0x140</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!--pwm_time_prd_dir_sts_ch3-->
            <field>
              <name>PWM_TIME_PRD_DIR_STS_CH3</name>
              <description>Time period counter direction status for channel3.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>downward</name>
                  <description>downward</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>upward</name>
                  <description>upward</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_CNTR_VALUE_ch3 -->
        <!--REGISTER 60-->
        <register>
          <name>PWM_TIME_PRD_CNTR_VALUE_CH3</name>
          <description>Time period counter current value register for channel3</description>
          <addressOffset>0x144</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!--pwm_time_prd_cntr_value_ch3-->
            <field>
              <name>PWM_TIME_PRD_CNTR_VALUE_CH3</name>
              <description>Time period counter current value for channe3</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PWM_TIME_PRD_COMMON_REG -->
        <!--REGISTER 61-->
        <register>
          <name>PWM_TIME_PRD_COMMON_REG</name>
          <description>Time period common register</description>
          <addressOffset>0x148</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0x00000001</resetMask>
          <fields>
            <!--pwm_time_prd_use_0th_timer_only-->
            <field>
              <name>PWM_TIME_PRD_USE_0TH_TIMER_ONLY</name>
              <description>Instead of use four base timers for four channels, use only one base timer for all channels.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ONE_TIMER_ONE_CHANNEL</name>
                  <description>one base timer for each channel</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ONE_TIMER_ALL_CHANNEL</name>
                  <description>only one base timer for all channels</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--pwm_time_prd_common_timer_value-->
            <field>
              <name>PWM_TIME_PRD_COMMON_TIMER_VALUE</name>
              <description>Base timers select to generate special event trigger</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--use_ext_timer_trig_frm_reg-->
            <field>
              <name>USE_EXT_TIMER_TRIG_FRM_REG</name>
              <description>Enable to use external trigger for base time counter increment or decrement.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- MICRO_DMA  -->
    <peripheral>
      <name>UDMA0</name>
      <version>1.0</version>
      <description>DMA Performs data transfers along with Addresses and control information</description>
      <groupName>UDMA</groupName>
      <baseAddress>0x44030000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x830</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>UDMA0</name>
        <value>33</value>
      </interrupt>
      <registers>
        <!--Dma_status: UDMA Status Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>DMA_STATUS</name>
          <description>UDMA Status Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- master_enable -->
            <field>
              <name>MASTER_ENABLE</name>
              <description>Enable status of controller</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>controller is disable</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>controller is enable</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[3:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- state -->
            <field>
              <name>STATE</name>
              <description>Current state of the control state machine</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
              <writeConstraint>
                <range>
                  <minimum>0</minimum>
                  <maximum>15</maximum>
                </range>
              </writeConstraint>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- chnls_minus1 -->
            <field>
              <name>CHNLS_MINUS1</name>
              <description>Number of available DMA channels minus one</description>
              <bitRange>[20:16]</bitRange>
              <access>read-only</access>
              <writeConstraint>
                <range>
                  <minimum>0</minimum>
                  <maximum>31</maximum>
                </range>
              </writeConstraint>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[27:21]</bitRange>
              <access>read-only</access>
            </field>
            <!-- test_status -->
            <field>
              <name>TEST_STATUS</name>
              <description>To reduce the gate count you can configure the controller</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0x0</name>
                  <description>Controller does not includes integration test logic</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x1</name>
                  <description>Controller does not includes integration test logic</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <!-- Dma_cfg: DMA Configuration -->
        <!-- REGISTER 2 -->
        <register>
          <name>DMA_CFG</name>
          <description>DMA Configuration</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- master_enable -->
            <field>
              <name>MASTER_ENABLE</name>
              <description> Enable for the controller</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>controller is disable</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>controller is enable</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[4:1]</bitRange>
              <access>write-only</access>
            </field>
            <!-- chnl_prot_ctrl  -->
            <field>
              <name>CHNL_PROT_CTRL</name>
              <description>Sets the AHB-Lite protection  by controlling the HPROT[3:1]] signal levels as follows
			               Bit[7]-Controls HPROT[3] to indicate if cacheable access is occurring
                           Bit[6]-Controls HPROT[2] to indicate if cacheable access is occurring
                           Bit[5]-Controls HPROT[1] to indicate if cacheable access is occurring						   
			  </description>
              <bitRange>[7:5]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:8]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- ctrl_base_ptr: Channel Control Data Base Pointer -->
        <!-- REGISTER 3 -->
        <register>
          <name>CTRL_BASE_PTR</name>
          <description>Channel Control Data Base Pointer</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFC00</resetMask>
          <fields>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[9:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--ctrl_base_ptr-->
            <field>
              <name>CTRL_BASE_PTR</name>
              <description> Pointer to the base address of the primary data structure</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Alt_ctrl_base_ptr: Channel Alternate Control Data Base Pointer-->
        <!-- REGISTER 4 -->
        <register>
          <name>ALT_CTRL_BASE_PTR</name>
          <description>Channel Alternate Control Data Base Pointer</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--Alt_ctrl_base_ptr -->
            <field>
              <name>ALT_CTRL_BASE_PTR</name>
              <description> Base address of the alternative data structure</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Dma_waitonrequest_status: Channel Wait on request status register -->
        <!-- REGISTER 5 -->
        <register>
          <name>DMA_WAITONREQUEST_STATUS</name>
          <description>Channel Wait on request status register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- dma_waitonreq_status -->
            <field>
              <name>DMA_WAITONREQ_STATUS</name>
              <description>Per Channel wait on request status</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_sw_request: Channel Software Request -->
        <!-- REGISTER 6 -->
        <register>
          <name>CHNL_SW_REQUEST</name>
          <description>Channel Software Request</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- chnl_sw_request -->
            <field>
              <name>CHNL_SW_REQUEST</name>
              <description>Set the appropriate bit to generate a software DMA request on the corresponding DMA channel</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_useburst_set: UDMA Channel use burst set -->
        <!-- REGISTER 7 -->
        <register>
          <name>CHNL_USEBURST_SET</name>
          <description> UDMA Channel use burst set</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Chnl_useburst_set -->
            <field>
              <name>CHNL_USEBURST_SET</name>
              <description>The use burst status, or disables dma_sreq[C] from generating DMA requests.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_useburst_clr: UDMA Channel use burst clear -->
        <!-- REGISTER 8 -->
        <register>
          <name>CHNL_USEBURST_CLR</name>
          <description>UDMA Channel use burst clear</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- chnl_useburst_clr -->
            <field>
              <name>CHNL_USEBURST_CLR</name>
              <description>Set the appropriate bit to enable dma_sreq[] to generate requests</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_req_mask_set: UDMA Channel request mask set Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>CHNL_REQ_MASK_SET</name>
          <description>UDMA Channel request mask set Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Chnl_req_mask_set -->
            <field>
              <name>CHNL_REQ_MASK_SET</name>
              <description>Returns the request mask status of dma_req[] and dma_sreq[], or disables the
                           corresponding channel from generating DMA requests</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_req_mask_clr: UDMA Channel request mask clear -->
        <!-- REGISTER 10 -->
        <register>
          <name>CHNL_REQ_MASK_CLR</name>
          <description>UDMA Channel request mask clear</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- Chnl_req_mask_clr -->
            <field>
              <name>CHNL_REQ_MASK_CLR</name>
              <description>Set the appropriate bit to enable DMA requests for the channel corresponding to
                           dma_req[] and dma_sreq[]
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_enable_set: UDMA Channel enable register -->
        <!-- REGISTER 11 -->
        <register>
          <name>CHNL_ENABLE_SET</name>
          <description>UDMA Channel enable register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Chnl_enable_set-->
            <field>
              <name>CHNL_ENABLE_SET</name>
              <description> This Bits are Used to Load the 16bits of Source address
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_enable_clr:UDMA Channel enable clear register -->
        <!-- REGISTER 12 -->
        <register>
          <name>CHNL_ENABLE_CLR</name>
          <description>UDMA Channel enable clear register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!--Chnl_enable_clr-->
            <field>
              <name>CHNL_ENABLE_CLR</name>
              <description>Set the appropriate bit to disable the corresponding DMA channel</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_pri_alt_set: UDMA Channel primary –alternate set -->
        <!-- REGISTER 13 -->
        <register>
          <name>CHNL_PRI_ALT_SET</name>
          <description>UDMA Channel primary or alternate set</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Chnl_pri_alt_set-->
            <field>
              <name>CHNL_PRI_ALT_SET</name>
              <description> Returns the channel control data structure status or selects the 
			                alternate data structure for the corresponding DMA channel
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_pri_alt_clr:  UDMA Channel primary –alternate clear -->
        <!-- REGISTER 14 -->
        <register>
          <name>CHNL_PRI_ALT_CLR</name>
          <description>UDMA Channel primary alternate clear</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!--Chnl_pri_alt_clr-->
            <field>
              <name>CHNL_PRI_ALT_CLR</name>
              <description>Set the appropriate bit to select the primary data structure for the corresponding DMA
                           channel
		      </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_priority_set: UDMA Channel Priority Set -->
        <!-- REGISTER 15 -->
        <register>
          <name>CHNL_PRIORITY_SET</name>
          <description>UDMA Channel Priority Set</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Chnl_priority_set -->
            <field>
              <name>CHNL_PRIORITY_SET</name>
              <description>Set the appropriate bit to select the primary data structure for 
			               the corresponding DMA channel
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_priority_clr: UDMA Channel Priority Clear -->
        <!-- REGISTER 16 -->
        <register>
          <name>CHNL_PRIORITY_CLR</name>
          <description>UDMA Channel Priority Clear</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- Chnl_priority_clr -->
            <field>
              <name>CHNL_PRIORITY_CLR</name>
              <description>Set the appropriate bit to select the default priority level for the specified DMA channel</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Err_clr: UDMA Bus Error Clear Register -->
        <!-- REGISTER 17 -->
        <register>
          <name>ERR_CLR</name>
          <description> UDMA Bus Error Clear Register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!--Err_clr-->
            <field>
              <name>ERR_CLR</name>
              <description> Returns the status of dma_err</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Read as:0 = dma_err is LOW
				               Write as:0 = No effect, status of dma_err is unchanged
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 = dma_err is HIGH
							    Write as:1 = Sets dma_err LOW
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- UDMA_SKIP_DESC_FETCH_REG : UDMA skip descriptor fetch Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>UDMA_SKIP_DESC_FETCH_REG</name>
          <description>UDMA skip descriptor fetch Register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!--skip_desc_fetch-->
            <field>
              <name>SKIP_DESC_FETCH</name>
              <description>improving the performance of transfer and saves bus cycles.
			               This features has to be enabled always.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- UDMA_DONE_STATUS register: UDMA Done status Register -->
        <!-- REGISTER 19 -->
        <register>
          <name>UDMA_DONE_STATUS_REG</name>
          <description>UDMA Done status Register</description>
          <addressOffset>0x800</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Done_status_channel_0 -->
            <field>
              <name>DONE_STATUS_CHANNEL_0</name>
              <description>UDMA done Status of the channel 0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 0th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_1 -->
            <field>
              <name>DONE_STATUS_CHANNEL_1</name>
              <description>UDMA done Status of the channel 1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 1st
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_2 -->
            <field>
              <name>DONE_STATUS_CHANNEL_2</name>
              <description>UDMA done Status of the channel 2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 2nd
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_3 -->
            <field>
              <name>DONE_STATUS_CHANNEL_3</name>
              <description>UDMA done Status of the channel 3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 3rd
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_4 -->
            <field>
              <name>DONE_STATUS_CHANNEL_4</name>
              <description>UDMA done Status of the channel 4</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 4th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_5 -->
            <field>
              <name>DONE_STATUS_CHANNEL_5</name>
              <description>UDMA done Status of the channel 5</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 5th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_6 -->
            <field>
              <name>DONE_STATUS_CHANNEL_6</name>
              <description>UDMA done Status of the channel 6</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 6th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_7 -->
            <field>
              <name>DONE_STATUS_CHANNEL_7</name>
              <description>UDMA done Status of the channel 7</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 7th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_8 -->
            <field>
              <name>DONE_STATUS_CHANNEL_8</name>
              <description>UDMA done Status of the channel 8</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 8th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_9 -->
            <field>
              <name>DONE_STATUS_CHANNEL_9</name>
              <description>UDMA done Status of the channel 9</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 9th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_10 -->
            <field>
              <name>DONE_STATUS_CHANNEL_10</name>
              <description>UDMA done Status of the channel 10</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 10th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_11 -->
            <field>
              <name>DONE_STATUS_CHANNEL_11</name>
              <description>UDMA done Status of the channel 3</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 11th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_12 -->
            <field>
              <name>DONE_STATUS_CHANNEL_12</name>
              <description>UDMA done Status of the channel 12</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 12th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_13 -->
            <field>
              <name>DONE_STATUS_CHANNEL_13</name>
              <description>UDMA done Status of the channel 13</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 13th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_14 -->
            <field>
              <name>DONE_STATUS_CHANNEL_14</name>
              <description>UDMA done Status of the channel 14</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 14th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_15 -->
            <field>
              <name>DONE_STATUS_CHANNEL_15</name>
              <description>UDMA done Status of the channel 15</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 15th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_16 -->
            <field>
              <name>DONE_STATUS_CHANNEL_16</name>
              <description>UDMA done Status of the channel 16</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 16th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_17 -->
            <field>
              <name>DONE_STATUS_CHANNEL_17</name>
              <description>UDMA done Status of the channel 17</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 17th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_18 -->
            <field>
              <name>DONE_STATUS_CHANNEL_18</name>
              <description>UDMA done Status of the channel 18</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 18th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_19 -->
            <field>
              <name>DONE_STATUS_CHANNEL_19</name>
              <description>UDMA done Status of the channel 19</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 19th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_20 -->
            <field>
              <name>DONE_STATUS_CHANNEL_20</name>
              <description>UDMA done Status of the channel 3</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 20th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_21 -->
            <field>
              <name>DONE_STATUS_CHANNEL_21</name>
              <description>UDMA done Status of the channel 21</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 21th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_22 -->
            <field>
              <name>DONE_STATUS_CHANNEL_22</name>
              <description>UDMA done Status of the channel 22</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 22th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_23 -->
            <field>
              <name>DONE_STATUS_CHANNEL_23</name>
              <description>UDMA done Status of the channel 23</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 23rd
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_24-->
            <field>
              <name>DONE_STATUS_CHANNEL_24</name>
              <description>UDMA done Status of the channel 24</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 24th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_25 -->
            <field>
              <name>DONE_STATUS_CHANNEL_25</name>
              <description>UDMA done Status of the channel 25</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 25th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_26 -->
            <field>
              <name>DONE_STATUS_CHANNEL_26</name>
              <description>UDMA done Status of the channel 26</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 26th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_27-->
            <field>
              <name>DONE_STATUS_CHANNEL_27</name>
              <description>UDMA done Status of the channel 27</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 27th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_28 -->
            <field>
              <name>DONE_STATUS_CHANNEL_28</name>
              <description>UDMA done Status of the channel 28</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 28th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_29 -->
            <field>
              <name>DONE_STATUS_CHANNEL_29</name>
              <description>UDMA done Status of the channel 29</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 29th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_30 -->
            <field>
              <name>DONE_STATUS_CHANNEL_30</name>
              <description>UDMA done Status of the channel 30</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 30th
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_31 -->
            <field>
              <name>DONE_STATUS_CHANNEL_31</name>
              <description>UDMA done Status of the channel 31</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
				  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 31st
							    Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <!-- CHANNEL_STATUS register: Channel status Register -->
        <!-- REGISTER 20 -->
        <!--#SS peripheral channel select not present-->
        <register>
          <name>CHANNEL_STATUS_REG</name>
          <description>Channel status Register</description>
          <addressOffset>0x804</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Busy or ideal status_channel_0 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_0</name>
              <description> Reading 1 indicates that the channel 0  is busy</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channel_1 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_1</name>
              <description>Reading 1 indicates that the channel 1  is busy</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_2 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_2</name>
              <description> Reading 1 indicates that the channel 2 is busy</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_3 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_3</name>
              <description>Reading 1 indicates that the channel 3  is busy</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_4 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_4</name>
              <description>Reading 1 indicates that the channel 4  is busy</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_5 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_5</name>
              <description> Reading 1 indicates that the channel 5  is busy</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_6 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_6</name>
              <description> Reading 1 indicates that the channel 6  is busy</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_7 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_7</name>
              <description>Reading 1 indicates that the channel 7  is busy</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_8 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_8</name>
              <description>Reading 1 indicates that the channel 8  is busy</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_9 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_9</name>
              <description> Reading 1 indicates that the channel 9  is busy</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_10 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_10</name>
              <description> Reading 1 indicates that the channel 10  is busy</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_11 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_11</name>
              <description> Reading 1 indicates that the channel 11  is busy</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_12 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_12</name>
              <description>Reading 1 indicates that the channel 12 is busy</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_13 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_13</name>
              <description> Reading 1 indicates that the channel 13 is busy</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_14 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_14</name>
              <description> Reading 1 indicates that the channel 14  is busy</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_15 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_15</name>
              <description>Reading 1 indicates that the channel 15 is busy</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_16-->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_16</name>
              <description>Reading 1 indicates that the channel 16 is busy</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_17 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_17</name>
              <description> Reading 1 indicates that the channel 17  is busy</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_18 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_18</name>
              <description> Reading 1 indicates that the channel 18 is busy</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_19 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_19</name>
              <description> Reading 1 indicates that the channel 19  is busy</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_20 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_20</name>
              <description> Reading 1 indicates that the channel 20  is busy</description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_21-->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_21</name>
              <description> Reading 1 indicates that the channel 21  is busy</description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_22 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_22</name>
              <description> Reading 1 indicates that the channel 22  is busy</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_23 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_23</name>
              <description>Reading 1 indicates that the channel 23  is busy</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_24 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_24</name>
              <description> Reading 1 indicates that the channel 24  is busy</description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_25 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_25</name>
              <description> Reading 1 indicates that the channel 25  is busy</description>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_26 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_26</name>
              <description>Reading 1 indicates that the channel 26  is busy</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_27 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_27</name>
              <description>Reading 1 indicates that the channel 27  is busy</description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_28 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_28</name>
              <description> Reading 1 indicates that the channel 28  is busy</description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_29 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_29</name>
              <description> Reading 1 indicates that the channel 29  is busy</description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_30 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_30</name>
              <description> Reading 1 indicates that the channel 30  is busy</description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_31 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_31</name>
              <description> Reading 1 indicates that the channel 31  is busy</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- UDMA_config_ctrl_register: DMA Controller Transfer Length Register -->
        <!-- REGISTER 28 -->
        <register>
          <name>UDMA_CONFIG_CTRL_REG</name>
          <description>DMA Controller Transfer Length Register</description>
          <addressOffset>0x828</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- Single_request_enable -->
            <field>
              <name>SINGLE_REQUEST_ENABLE</name>
              <description>Enabled signal for single request</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>	Single request will be disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Single request will be enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- UDMA Interrupt Mask Register -->
        <!-- REGISTER 29 -->
        <cluster>
          <dim>8</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>UDMA_PERIPHERAL_SEL_CHn_REG</name>
          <description>Peripheral select channel register channels 0 - 7</description>
          <addressOffset>0x808</addressOffset>
          <register>
            <name>Peripheral_Select_CH__n_</name>
            <description>peripheral select for channel _n_</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x0000000F</resetMask>
            <fields>
              <field>
                <name>peripheral_select_channel_n_</name>
                <description>peripheral select channel _n_</description>
                <bitRange>[4:0]</bitRange>
                <access>read-write</access>
              </field>
              <!-- RESERVED -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:5]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
      </registers>
    </peripheral>
    <!-- ULP_UDMA  -->
    <peripheral>
      <name>UDMA1</name>
      <version>1.0</version>
      <description>DMA Performs data transfers along with Addresses and control information</description>
      <groupName>UDMA</groupName>
      <baseAddress>0x24078000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x830</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>UDMA1</name>
        <value>10</value>
      </interrupt>
      <registers>
        <!--Dma_status: UDMA Status Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>DMA_STATUS</name>
          <description>UDMA Status Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- master_enable -->
            <field>
              <name>MASTER_ENABLE</name>
              <description>Enable status of controller</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>controller is disable</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>controller is enable</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[3:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- state -->
            <field>
              <name>STATE</name>
              <description>Current state of the control state machine</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
              <writeConstraint>
                <range>
                  <minimum>0</minimum>
                  <maximum>15</maximum>
                </range>
              </writeConstraint>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- chnls_minus1 -->
            <field>
              <name>CHNLS_MINUS1</name>
              <description>Number of available DMA channels minus one</description>
              <bitRange>[20:16]</bitRange>
              <access>read-only</access>
              <writeConstraint>
                <range>
                  <minimum>0</minimum>
                  <maximum>31</maximum>
                </range>
              </writeConstraint>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[27:21]</bitRange>
              <access>read-only</access>
            </field>
            <!-- test_status -->
            <field>
              <name>TEST_STATUS</name>
              <description>To reduce the gate count you can configure the controller</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0x0</name>
                  <description>Controller does not includes integration test logic</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x1</name>
                  <description>Controller does not includes integration test logic</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <!-- Dma_cfg: DMA Configuration -->
        <!-- REGISTER 2 -->
        <register>
          <name>DMA_CFG</name>
          <description>DMA Configuration</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- master_enable -->
            <field>
              <name>MASTER_ENABLE</name>
              <description> Enable for the controller</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>controller is disable</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>controller is enable</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[4:1]</bitRange>
              <access>write-only</access>
            </field>
            <!-- chnl_prot_ctrl  -->
            <field>
              <name>CHNL_PROT_CTRL</name>
              <description>Sets the AHB-Lite protection  by controlling the HPROT[3:1]] signal levels as follows
                     Bit[7]-Controls HPROT[3] to indicate if cacheable access is occurring
                           Bit[6]-Controls HPROT[2] to indicate if cacheable access is occurring
                           Bit[5]-Controls HPROT[1] to indicate if cacheable access is occurring               
        </description>
              <bitRange>[7:5]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:8]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- ctrl_base_ptr: Channel Control Data Base Pointer -->
        <!-- REGISTER 3 -->
        <register>
          <name>CTRL_BASE_PTR</name>
          <description>Channel Control Data Base Pointer</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFC00</resetMask>
          <fields>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[9:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--ctrl_base_ptr-->
            <field>
              <name>CTRL_BASE_PTR</name>
              <description> Pointer to the base address of the primary data structure</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Alt_ctrl_base_ptr: Channel Alternate Control Data Base Pointer-->
        <!-- REGISTER 4 -->
        <register>
          <name>ALT_CTRL_BASE_PTR</name>
          <description>Channel Alternate Control Data Base Pointer</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--Alt_ctrl_base_ptr -->
            <field>
              <name>ALT_CTRL_BASE_PTR</name>
              <description> Base address of the alternative data structure</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Dma_waitonrequest_status: Channel Wait on request status register -->
        <!-- REGISTER 5 -->
        <register>
          <name>DMA_WAITONREQUEST_STATUS</name>
          <description>Channel Wait on request status register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- dma_waitonreq_status -->
            <field>
              <name>DMA_WAITONREQ_STATUS</name>
              <description>Per Channel wait on request status</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_sw_request: Channel Software Request -->
        <!-- REGISTER 6 -->
        <register>
          <name>CHNL_SW_REQUEST</name>
          <description>Channel Software Request</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- chnl_sw_request -->
            <field>
              <name>CHNL_SW_REQUEST</name>
              <description>Set the appropriate bit to generate a software DMA request on the corresponding DMA channel</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_useburst_set: UDMA Channel use burst set -->
        <!-- REGISTER 7 -->
        <register>
          <name>CHNL_USEBURST_SET</name>
          <description> UDMA Channel use burst set</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Chnl_useburst_set -->
            <field>
              <name>CHNL_USEBURST_SET</name>
              <description>The use burst status, or disables dma_sreq[C] from generating DMA requests.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_useburst_clr: UDMA Channel use burst clear -->
        <!-- REGISTER 8 -->
        <register>
          <name>CHNL_USEBURST_CLR</name>
          <description>UDMA Channel use burst clear</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- chnl_useburst_clr -->
            <field>
              <name>CHNL_USEBURST_CLR</name>
              <description>Set the appropriate bit to enable dma_sreq[] to generate requests</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_req_mask_set: UDMA Channel request mask set Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>CHNL_REQ_MASK_SET</name>
          <description>UDMA Channel request mask set Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Chnl_req_mask_set -->
            <field>
              <name>CHNL_REQ_MASK_SET</name>
              <description>Returns the request mask status of dma_req[] and dma_sreq[], or disables the
                           corresponding channel from generating DMA requests</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_req_mask_clr: UDMA Channel request mask clear -->
        <!-- REGISTER 10 -->
        <register>
          <name>CHNL_REQ_MASK_CLR</name>
          <description>UDMA Channel request mask clear</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- Chnl_req_mask_clr -->
            <field>
              <name>CHNL_REQ_MASK_CLR</name>
              <description>Set the appropriate bit to enable DMA requests for the channel corresponding to
                           dma_req[] and dma_sreq[]
        </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_enable_set: UDMA Channel enable register -->
        <!-- REGISTER 11 -->
        <register>
          <name>CHNL_ENABLE_SET</name>
          <description>UDMA Channel enable register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Chnl_enable_set-->
            <field>
              <name>CHNL_ENABLE_SET</name>
              <description> This Bits are Used to Load the 16bits of Source address
        </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_enable_clr:UDMA Channel enable clear register -->
        <!-- REGISTER 12 -->
        <register>
          <name>CHNL_ENABLE_CLR</name>
          <description>UDMA Channel enable clear register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!--Chnl_enable_clr-->
            <field>
              <name>CHNL_ENABLE_CLR</name>
              <description>Set the appropriate bit to disable the corresponding DMA channel</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_pri_alt_set: UDMA Channel primary –alternate set -->
        <!-- REGISTER 13 -->
        <register>
          <name>CHNL_PRI_ALT_SET</name>
          <description>UDMA Channel primary or alternate set</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Chnl_pri_alt_set-->
            <field>
              <name>CHNL_PRI_ALT_SET</name>
              <description> Returns the channel control data structure status or selects the 
                      alternate data structure for the corresponding DMA channel
        </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_pri_alt_clr:  UDMA Channel primary –alternate clear -->
        <!-- REGISTER 14 -->
        <register>
          <name>CHNL_PRI_ALT_CLR</name>
          <description>UDMA Channel primary alternate clear</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!--Chnl_pri_alt_clr-->
            <field>
              <name>CHNL_PRI_ALT_CLR</name>
              <description>Set the appropriate bit to select the primary data structure for the corresponding DMA
                           channel
          </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_priority_set: UDMA Channel Priority Set -->
        <!-- REGISTER 15 -->
        <register>
          <name>CHNL_PRIORITY_SET</name>
          <description>UDMA Channel Priority Set</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Chnl_priority_set -->
            <field>
              <name>CHNL_PRIORITY_SET</name>
              <description>Set the appropriate bit to select the primary data structure for 
                     the corresponding DMA channel
        </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Chnl_priority_clr: UDMA Channel Priority Clear -->
        <!-- REGISTER 16 -->
        <register>
          <name>CHNL_PRIORITY_CLR</name>
          <description>UDMA Channel Priority Clear</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- Chnl_priority_clr -->
            <field>
              <name>CHNL_PRIORITY_CLR</name>
              <description>Set the appropriate bit to select the default priority level for the specified DMA channel</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- Err_clr: UDMA Bus Error Clear Register -->
        <!-- REGISTER 17 -->
        <register>
          <name>ERR_CLR</name>
          <description> UDMA Bus Error Clear Register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!--Err_clr-->
            <field>
              <name>ERR_CLR</name>
              <description> Returns the status of dma_err</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Read as:0 = dma_err is LOW
                       Write as:0 = No effect, status of dma_err is unchanged
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 = dma_err is HIGH
                  Write as:1 = Sets dma_err LOW
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- UDMA_SKIP_DESC_FETCH_REG : UDMA skip descriptor fetch Register -->
        <!-- REGISTER 17 -->
        <register>
          <name>UDMA_SKIP_DESC_FETCH_REG</name>
          <description>UDMA skip descriptor fetch Register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!--skip_desc_fetch-->
            <field>
              <name>SKIP_DESC_FETCH</name>
              <description>improving the performance of transfer and saves bus cycles.
                     This features has to be enabled always.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- UDMA_DONE_STATUS register: UDMA Done status Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>UDMA_DONE_STATUS_REG</name>
          <description>UDMA Done status Register</description>
          <addressOffset>0x800</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Done_status_channel_0 -->
            <field>
              <name>DONE_STATUS_CHANNEL_0</name>
              <description>UDMA done Status of the channel 0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 0th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_1 -->
            <field>
              <name>DONE_STATUS_CHANNEL_1</name>
              <description>UDMA done Status of the channel 1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 1st
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_2 -->
            <field>
              <name>DONE_STATUS_CHANNEL_2</name>
              <description>UDMA done Status of the channel 2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 2nd
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_3 -->
            <field>
              <name>DONE_STATUS_CHANNEL_3</name>
              <description>UDMA done Status of the channel 3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 3rd
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_4 -->
            <field>
              <name>DONE_STATUS_CHANNEL_4</name>
              <description>UDMA done Status of the channel 4</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 4th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_5 -->
            <field>
              <name>DONE_STATUS_CHANNEL_5</name>
              <description>UDMA done Status of the channel 5</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 5th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_6 -->
            <field>
              <name>DONE_STATUS_CHANNEL_6</name>
              <description>UDMA done Status of the channel 6</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 6th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_7 -->
            <field>
              <name>DONE_STATUS_CHANNEL_7</name>
              <description>UDMA done Status of the channel 7</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 7th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_8 -->
            <field>
              <name>DONE_STATUS_CHANNEL_8</name>
              <description>UDMA done Status of the channel 8</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 8th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_9 -->
            <field>
              <name>DONE_STATUS_CHANNEL_9</name>
              <description>UDMA done Status of the channel 9</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 9th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_10 -->
            <field>
              <name>DONE_STATUS_CHANNEL_10</name>
              <description>UDMA done Status of the channel 10</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 10th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_11 -->
            <field>
              <name>DONE_STATUS_CHANNEL_11</name>
              <description>UDMA done Status of the channel 3</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 11th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_12 -->
            <field>
              <name>DONE_STATUS_CHANNEL_12</name>
              <description>UDMA done Status of the channel 12</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 12th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_13 -->
            <field>
              <name>DONE_STATUS_CHANNEL_13</name>
              <description>UDMA done Status of the channel 13</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 13th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_14 -->
            <field>
              <name>DONE_STATUS_CHANNEL_14</name>
              <description>UDMA done Status of the channel 14</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 14th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_15 -->
            <field>
              <name>DONE_STATUS_CHANNEL_15</name>
              <description>UDMA done Status of the channel 15</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 15th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_16 -->
            <field>
              <name>DONE_STATUS_CHANNEL_16</name>
              <description>UDMA done Status of the channel 16</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 16th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_17 -->
            <field>
              <name>DONE_STATUS_CHANNEL_17</name>
              <description>UDMA done Status of the channel 17</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 17th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_18 -->
            <field>
              <name>DONE_STATUS_CHANNEL_18</name>
              <description>UDMA done Status of the channel 18</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 18th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_19 -->
            <field>
              <name>DONE_STATUS_CHANNEL_19</name>
              <description>UDMA done Status of the channel 19</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 19th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_20 -->
            <field>
              <name>DONE_STATUS_CHANNEL_20</name>
              <description>UDMA done Status of the channel 3</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 20th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_21 -->
            <field>
              <name>DONE_STATUS_CHANNEL_21</name>
              <description>UDMA done Status of the channel 21</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 21th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_22 -->
            <field>
              <name>DONE_STATUS_CHANNEL_22</name>
              <description>UDMA done Status of the channel 22</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 22th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_23 -->
            <field>
              <name>DONE_STATUS_CHANNEL_23</name>
              <description>UDMA done Status of the channel 23</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 23rd
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_24-->
            <field>
              <name>DONE_STATUS_CHANNEL_24</name>
              <description>UDMA done Status of the channel 24</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 24th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_25 -->
            <field>
              <name>DONE_STATUS_CHANNEL_25</name>
              <description>UDMA done Status of the channel 25</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 25th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_26 -->
            <field>
              <name>DONE_STATUS_CHANNEL_26</name>
              <description>UDMA done Status of the channel 26</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 26th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_27-->
            <field>
              <name>DONE_STATUS_CHANNEL_27</name>
              <description>UDMA done Status of the channel 27</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 27th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_28 -->
            <field>
              <name>DONE_STATUS_CHANNEL_28</name>
              <description>UDMA done Status of the channel 28</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 28th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_29 -->
            <field>
              <name>DONE_STATUS_CHANNEL_29</name>
              <description>UDMA done Status of the channel 29</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 29th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_30 -->
            <field>
              <name>DONE_STATUS_CHANNEL_30</name>
              <description>UDMA done Status of the channel 30</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 30th
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Done_status_channel_31 -->
            <field>
              <name>DONE_STATUS_CHANNEL_31</name>
              <description>UDMA done Status of the channel 31</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>Write as:0 will have no effect
          </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Read as:1 indicates the transfer is completed for channel 31st
                  Write as:1 will clear the bit 
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <!-- CHANNEL_STATUS register: Channel status Register -->
        <!-- REGISTER 19 -->
        <register>
          <name>CHANNEL_STATUS_REG</name>
          <description>Channel status Register</description>
          <addressOffset>0x804</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Busy or ideal status_channel_0 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_0</name>
              <description> Reading 1 indicates that the channel 0  is busy</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channel_1 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_1</name>
              <description>Reading 1 indicates that the channel 1  is busy</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_2 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_2</name>
              <description> Reading 1 indicates that the channel 2 is busy</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_3 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_3</name>
              <description>Reading 1 indicates that the channel 3  is busy</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_4 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_4</name>
              <description>Reading 1 indicates that the channel 4  is busy</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_5 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_5</name>
              <description> Reading 1 indicates that the channel 5  is busy</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_6 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_6</name>
              <description> Reading 1 indicates that the channel 6  is busy</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_7 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_7</name>
              <description>Reading 1 indicates that the channel 7  is busy</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_8 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_8</name>
              <description>Reading 1 indicates that the channel 8  is busy</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_9 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_9</name>
              <description> Reading 1 indicates that the channel 9  is busy</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_10 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_10</name>
              <description> Reading 1 indicates that the channel 10  is busy</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_11 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_11</name>
              <description> Reading 1 indicates that the channel 11  is busy</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_12 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_12</name>
              <description>Reading 1 indicates that the channel 12 is busy</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_13 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_13</name>
              <description> Reading 1 indicates that the channel 13 is busy</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_14 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_14</name>
              <description> Reading 1 indicates that the channel 14  is busy</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_15 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_15</name>
              <description>Reading 1 indicates that the channel 15 is busy</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_16-->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_16</name>
              <description>Reading 1 indicates that the channel 16 is busy</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_17 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_17</name>
              <description> Reading 1 indicates that the channel 17  is busy</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_18 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_18</name>
              <description> Reading 1 indicates that the channel 18 is busy</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_19 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_19</name>
              <description> Reading 1 indicates that the channel 19  is busy</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_20 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_20</name>
              <description> Reading 1 indicates that the channel 20  is busy</description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_21-->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_21</name>
              <description> Reading 1 indicates that the channel 21  is busy</description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_22 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_22</name>
              <description> Reading 1 indicates that the channel 22  is busy</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_23 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_23</name>
              <description>Reading 1 indicates that the channel 23  is busy</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_24 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_24</name>
              <description> Reading 1 indicates that the channel 24  is busy</description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_25 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_25</name>
              <description> Reading 1 indicates that the channel 25  is busy</description>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_26 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_26</name>
              <description>Reading 1 indicates that the channel 26  is busy</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_27 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_27</name>
              <description>Reading 1 indicates that the channel 27  is busy</description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_28 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_28</name>
              <description> Reading 1 indicates that the channel 28  is busy</description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_29 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_29</name>
              <description> Reading 1 indicates that the channel 29  is busy</description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_30 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_30</name>
              <description> Reading 1 indicates that the channel 30  is busy</description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
            </field>
            <!--Busy or ideal status_channe_31 -->
            <field>
              <name>BUSY_OR_IDEAL_STATUS_CHANNEL_31</name>
              <description> Reading 1 indicates that the channel 31  is busy</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- UDMA_config_ctrl_register: DMA Controller Transfer Length Register -->
        <!-- REGISTER 28 -->
        <register>
          <name>UDMA_CONFIG_CTRL_REG</name>
          <description>DMA Controller Transfer Length Register</description>
          <addressOffset>0x828</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- Single_request_enable -->
            <field>
              <name>SINGLE_REQUEST_ENABLE</name>
              <description>Enabled signal for single request</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description> Single request will be disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Single request will be enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- UDMA Interrupt Mask Register -->
        <!-- REGISTER 29 -->
        <register>
          <name>UDMA_INTR_MASK_REG</name>
          <description>Mask the uDMA interrupt register</description>
          <addressOffset>0x82C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- UDMA_INTR_MASK -->
            <field>
              <name>UDMA_INTR_MASK</name>
              <description>Mask the uDMA interrupt register</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED-->
            <field>
              <name>RESERVED1</name>
              <description>RESERVED1</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- GPDMA GLOBAL REGISTERS -->
    <peripheral>
      <name>GPDMA</name>
      <version>1.0</version>
      <description>GPDMA is an AMBA complaint peripheral unit supports 8-channels</description>
      <groupName>GPDMA</groupName>
      <baseAddress>0x21080000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x734</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>GPDMA</name>
        <value>31</value>
      </interrupt>
      <registers>
        <!-- INTR_REG: Interrupt Register -->
        <!--- Register 1 -->
        <register>
          <name>INTERRUPT_REG</name>
          <description>Interrupt Register</description>
          <addressOffset>0x1084</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- GPDMAC_INT_STAT for Channel 0-->
            <field>
              <name>GPDMAC_INT_STAT</name>
              <description>Interrupt Status</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- INTERRUPT_MASK_REG: Interrupt Mask Register -->
        <!--- Register 2 -->
        <register>
          <name>INTERRUPT_MASK_REG</name>
          <description>Interrupt Mask Register</description>
          <addressOffset>0x1088</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LINK_LIST_FETCH_MASK for channel-->
            <field>
              <name>LINK_LIST_FETCH_MASK</name>
              <description>Linked list fetch done interrupt bit mask control.
  			               By default, descriptor fetch done interrupt is masked.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TFR_DONE_MASK for Channel -->
            <field>
              <name>TFR_DONE_MASK</name>
              <description>Transfer done interrupt bit mask control.</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--INTERRUPT_STAT_REG :Interrupt Status register -->
        <!--- Register 3 -->
        <register>
          <name>INTERRUPT_STAT_REG</name>
          <description>Interrupt status register</description>
          <addressOffset>0x108C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- HRESP_ERR0-->
            <field>
              <name>HRESP_ERR0</name>
              <description>DMA error bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LINK LIST FETCH DONE0-->
            <field>
              <name>LINK_LIST_FETCH_DONE0</name>
              <description>This bit indicates the status of linked list descriptor fetch done for channel 0</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TFR_DONE0-->
            <field>
              <name>TFR_DONE0</name>
              <description>This bit indicates the status of DMA transfer done interrupt for channel 0</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GPDMAC_ERR0-->
            <field>
              <name>GPDMAC_ERR0</name>
              <description>transfer size or burst size or h size mismatch error</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- HRESP_ERR1-->
            <field>
              <name>HRESP_ERR1</name>
              <description>HRESP error bit</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LINK_LIST_FETCH_DONE1-->
            <field>
              <name>LINK_LIST_FETCH_DONE1</name>
              <description>This bit indicates the status of linked list descriptor fetch done for channel 1</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TFR_DONE1-->
            <field>
              <name>TFR_DONE1</name>
              <description>This bit indicates the status of DMA transfer done interrupt for channel 1.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GPDMAC_ERR1-->
            <field>
              <name>GPDMAC_ERR1</name>
              <description>transfer size or burst size or h size mismatch error</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- HRESP_ERR2-->
            <field>
              <name>HRESP_ERR2</name>
              <description>HRESP error bit</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LINK_LIST_FETCH_DONE2-->
            <field>
              <name>LINK_LIST_FETCH_DONE2</name>
              <description>This bit indicates the status of linked list descriptor fetch done for channel 2.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TFR_DONE2-->
            <field>
              <name>TFR_DONE2</name>
              <description>This bit indicates the status of DMA transfer done interrupt for channel 2.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GPDMAC_ERR2-->
            <field>
              <name>GPDMAC_ERR2</name>
              <description>transfer size or burst size or h size mismatch error</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- HRESP_ERR3-->
            <field>
              <name>HRESP_ERR3</name>
              <description>HRESP error bit</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LINK_LIST_FETCH_DONE3-->
            <field>
              <name>LINK_LIST_FETCH_DONE3</name>
              <description>This bit indicates the status of linked list descriptor fetch done for channel 3.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TFR_DONE3-->
            <field>
              <name>TFR_DONE3</name>
              <description>This bit indicates the status of DMA transfer done interrupt for channel 3.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GPDMAC_ERR3-->
            <field>
              <name>GPDMAC_ERR3</name>
              <description>transfer size or burst size or h size mismatch error</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- HRESP_ERR4-->
            <field>
              <name>HRESP_ERR4</name>
              <description>HRESP error bit</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LINK_LIST_FETCH_DONE4-->
            <field>
              <name>LINK_LIST_FETCH_DONE4</name>
              <description>This bit indicates the status of linked list descriptor fetch done for channel 4.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TFR_DONE4-->
            <field>
              <name>TFR_DONE4</name>
              <description>This bit indicates the status of DMA transfer done interrupt for channel 4.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GPDMAC_ERR4-->
            <field>
              <name>GPDMAC_ERR4</name>
              <description>transfer size or burst size or h size mismatch error</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- HRESP_ERR5-->
            <field>
              <name>HRESP_ERR5</name>
              <description>HRESP error bit</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LINK_LIST_FETCH_DONE5-->
            <field>
              <name>LINK_LIST_FETCH_DONE5</name>
              <description>This bit indicates the status of linked list descriptor fetch done for channel 5.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TFR_DONE5-->
            <field>
              <name>TFR_DONE5</name>
              <description>This bit indicates the status of DMA transfer done interrupt for channel 5.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GPDMAC_ERR5-->
            <field>
              <name>GPDMAC_ERR5</name>
              <description>transfer size or burst size or h size mismatch error</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- HRESP_ERR6-->
            <field>
              <name>HRESP_ERR6</name>
              <description>HRESP error bit</description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <!-- LINK_LIST_FETCH_DONE6-->
            <field>
              <name>LINK_LIST_FETCH_DONE6</name>
              <description>This bit indicates the status of linked list descriptor fetch done for channel 6.</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TFR_DONE6-->
            <field>
              <name>TFR_DONE6</name>
              <description>This bit indicates the status of DMA transfer done interrupt for channel 6.</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GPDMAC_ERR6-->
            <field>
              <name>GPDMAC_ERR6</name>
              <description>transfer size or burst size or h size mismatch error</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!-- HRESP_ERR7-->
            <field>
              <name>HRESP_ERR7</name>
              <description>HRESP error bit</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LINK_LIST_FETCH_DONE7-->
            <field>
              <name>LINK_LIST_FETCH_DONE7</name>
              <description>This bit indicates the status of linked list descriptor fetch done for channel 7.</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TFR_DONE7-->
            <field>
              <name>TFR_DONE7</name>
              <description>This bit indicates the status of DMA transfer done interrupt for channel 7.</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GPDMAC_ERR7-->
            <field>
              <name>GPDMAC_ERR7</name>
              <description>transfer size or burst size or h size mismatch error</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--DMA_CHNL_ENABLE_REG :Enable DMA channel -->
        <!--- Register 4 -->
        <register>
          <name>DMA_CHNL_ENABLE_REG</name>
          <description>This register used for enable DMA channel</description>
          <addressOffset>0X1090</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- CH_ENB-->
            <field>
              <name>CH_ENB</name>
              <description>CWhen a bit is set to one, it indicates, corresponding channel is enabled for dma operation</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--DMA CHNL SQUASH_REG-->
        <!--- Register 5 -->
        <register>
          <name>DMA_CHNL_SQUASH_REG</name>
          <description>This register used for enable DMA channel squash</description>
          <addressOffset>0x1094</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- CH_DIS-->
            <field>
              <name>CH_DIS</name>
              <description>CPU Will be masked to write zeros, CPU is allowed write 1 only</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--DMA CHNL LOCK REG-->
        <!--- Register 6 -->
        <register>
          <name>DMA_CHNL_LOCK_REG</name>
          <description>This register used for enable DMA channel squash</description>
          <addressOffset>0x1098</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- CHNL_LOCK-->
            <field>
              <name>CHNL_LOCK</name>
              <description>When set entire DMA block transfer is done, before other DMA request is serviced</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- GPDMA CHANNEL REGISTERS -->
        <!-- LINK_LIST_PTR_REG_CHNL_0-->
        <!-- Register 7 -->
        <cluster>
          <dim>8</dim>
          <dimIncrement>0x100</dimIncrement>
          <name>CHANNEL_CONFIGn</name>
          <description>channel configuration registers (0-7)</description>
          <addressOffset>0x1004</addressOffset>
          <register>
            <name>LINK_LIST_PTR_REGS_CHNL__n_</name>
            <description>Link List Register for channel _n_</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00</resetValue>
            <resetMask>0xFF</resetMask>
            <fields>
              <!-- LINK_LIST_POINTER for Channel 0 to 7-->
              <field>
                <name>LINK_LIST_PTR_REG_CHNL</name>
                <description>This is the address of the memory location from which we get our next descriptor</description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- SRC_ADDR_REG_CHNL-->
          <!-- Register 15 -->
          <register>
            <name>SRC_ADDR_REG_CHNL__n_</name>
            <description>Source Address Register for channel _n_</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <!-- SRC_ADDR_REG_CHNL_0 for Channel 0 to 7-->
              <field>
                <name>SRC_ADDR</name>
                <description>This is the address of the memory location from which we get our next descriptor</description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- DEST_ADDR_REG_CHNL_0-->
          <!-- Register 23 -->
          <register>
            <name>DEST_ADDR_REG_CHNL__n_</name>
            <description>Source Address Register for channel _n_</description>
            <addressOffset>0x08</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <!-- DEST_ADDR_0 for Channel 0 to 7-->
              <field>
                <name>DEST_ADDR</name>
                <description>This is the destination address to whih the data is sent</description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- CHANNEL_CTRL_REG_CHNL-->
          <!-- Register 39 -->
          <register>
            <name>CHANNEL_CTRL_REG_CHNL__n_</name>
            <description>Channel Control Register for channel _n_</description>
            <addressOffset>0x0C</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <!-- DMA_BLK_SIZE for Channel 0-->
              <field>
                <name>DMA_BLK_SIZE</name>
                <description>This is data to be transmitted.
						   Loaded at the beginning of the DMA transfer and decremented at every dma transaction.</description>
                <bitRange>[11:0]</bitRange>
                <access>read-write</access>
              </field>
              <!-- TRNS_TYPE for Channel 0-->
              <field>
                <name>TRNS_TYPE</name>
                <description>DMA transfer type</description>
                <bitRange>[13:12]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>00</name>
                    <description>Memory to Memory</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>01</name>
                    <description>memory to peripheral</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>10</name>
                    <description>peripheral to memory</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>11</name>
                    <description>peripheral to peripheral</description>
                    <value>3</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- DMA_FLOW_CTRL for Channel 0-->
              <field>
                <name>DMA_FLOW_CTRL</name>
                <description>DMA flow control</description>
                <bitRange>[15:14]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>00</name>
                    <description>RPDMAC :can be set for any type of transfers</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>01</name>
                    <description>source peripheral : typically set for peripheral to memory</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>10</name>
                    <description>peripheral to memory destination peripheral : typically set for memory to peripheral</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>11</name>
                    <description>src_and_dest peripheral : Typically set for peripheral to peripheral</description>
                    <value>3</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- MSTR_IF_FETCH_SEL for Channel 0-->
              <field>
                <name>MSTR_IF_FETCH_SEL</name>
                <description>This selects the MASTER IF from which data to be fetched</description>
                <bitRange>[16:16]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>0:MSTR-0 for fetch (from src)</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>1:MSTR-1 for fetch (from src)</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- MSTR_IF_SEND_SEL for Channel 0-->
              <field>
                <name>MSTR_IF_SEND_SEL</name>
                <description>This selects the MASTER IF from which data to be sent</description>
                <bitRange>[17:17]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>0:MSTR-0 for send (to destination)</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>1:MSTR-1 for send (to destination)</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- DEST_DATA_WIDTH for Channel 0-->
              <field>
                <name>DEST_DATA_WIDTH</name>
                <description>Data transfer to destination.</description>
                <bitRange>[19:18]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>8_Bits_Data_On_Bus</name>
                    <description>08 bits of data on the bus</description>
                    <value>00</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>16_Bits_Data_On_Bus</name>
                    <description>16 bits of data on the bus</description>
                    <value>01</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>32_Bits_Data_On_Bus</name>
                    <description>32 bits of data on the bus</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Reserved</name>
                    <description>Reserved</description>
                    <value>3</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--SRC_DATA_WIDTH for Channel 0-->
              <field>
                <name>SRC_DATA_WIDTH</name>
                <description>Data transfer from source.</description>
                <bitRange>[21:20]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>00</name>
                    <description>08 bits of data on the bus</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>01</name>
                    <description>16 bits of data on the bus</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>10</name>
                    <description>32 bits of data on the bus</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>11</name>
                    <description>reserved2</description>
                    <value>3</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- SRC_ALIGN for Channel 0-->
              <field>
                <name>SRC_ALIGN</name>
                <description>Reserved.Value set to 0 We do not do any singles. 
							We just do burst, save first 3 bytes in to residue buffer in one cycle, 
							In the next cycle send 4 bytes to fifo, save 3 bytes in to residue. This continues on.</description>
                <bitRange>[22:22]</bitRange>
                <access>read-write</access>
              </field>
              <!-- LINK_LIST_ON for Channel 0-->
              <field>
                <name>LINK_LIST_ON</name>
                <description>This mode is set, when we do link listed operation</description>
                <bitRange>[23:23]</bitRange>
                <access>read-write</access>
              </field>
              <!-- LINK_LIST_MSTR_SEL for Channel 0-->
              <field>
                <name>LINK_LIST_MSTR_SEL</name>
                <description>This mode is set, when we do link listed operation</description>
                <bitRange>[24:24]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>0:M0 will be used to fetch desc</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>1:M1 will be used to fetch desc</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- SRC_ADDR_CONTIGUOUS for Channel 0-->
              <field>
                <name>SRC_ADDR_CONTIGUOUS</name>
                <description>Indicates Address is contiguous from previous</description>
                <bitRange>[25:25]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>None</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>1:Indicates Address is contiguous from previous</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- DEST_ADDR_CONTIGUOUS for Channel 0-->
              <field>
                <name>DEST_ADDR_CONTIGUOUS</name>
                <description>Indicates Address is contiguous from previous</description>
                <bitRange>[26:26]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>None</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>1:Indicates Address is contiguous from previous</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- RETRY_ON_ERROR for Channel 0-->
              <field>
                <name>RETRY_ON_ERROR</name>
                <description>When this bit is set, if we recieve HRESPERR, We will retry the DMA for that channel.</description>
                <bitRange>[27:27]</bitRange>
                <access>read-write</access>
              </field>
              <!-- LINK_INTERRUPT for Channel 0-->
              <field>
                <name>LINK_INTERRUPT</name>
                <description>This bit is set in link list descriptor.Hard ware will send an interrupt when the DMA transfer is done for the corresponding link list address</description>
                <bitRange>[28:28]</bitRange>
                <access>read-write</access>
              </field>
              <!-- SRC_FIFO_MODE for Channel 0-->
              <field>
                <name>SRC_FIFO_MODE</name>
                <description>If set to 1; source address will not be incremented(means fifo mode for source)</description>
                <bitRange>[29:29]</bitRange>
                <access>read-write</access>
              </field>
              <!-- DEST_FIFO_MODE for Channel 0-->
              <field>
                <name>DEST_FIFO_MODE</name>
                <description>If set to 1; destination address will not be incremented(means fifo mode for destination)</description>
                <bitRange>[30:30]</bitRange>
                <access>read-write</access>
              </field>
              <!-- Reserved1-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:31]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- MISC_CHNL_CTRL_REG_CHNL 0 TO 7-->
          <!-- Register 47 -->
          <register>
            <name>MISC_CHANNEL_CTRL_REG_CHNL__n_</name>
            <description>Misc Channel Control Register for channel _n_</description>
            <addressOffset>0x10</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <!-- AHB_BURST_SIZE for Channel 0 to 7-->
              <field>
                <name>AHB_BURST_SIZE</name>
                <description>Burst size</description>
                <bitRange>[2:0]</bitRange>
                <access>read-write</access>
                <writeConstraint>
                  <range>
                    <minimum>0</minimum>
                    <maximum>7</maximum>
                  </range>
                </writeConstraint>
              </field>
              <!-- DEST_DATA_BURST for Channel 0 to 7-->
              <field>
                <name>DEST_DATA_BURST</name>
                <description>Burst writes in beats to destination.(000000-64 beats .....111111-63 beats)</description>
                <bitRange>[8:3]</bitRange>
                <access>read-write</access>
                <modifiedWriteValues>oneToSet</modifiedWriteValues>
                <writeConstraint>
                  <range>
                    <minimum>0</minimum>
                    <maximum>63</maximum>
                  </range>
                </writeConstraint>
              </field>
              <!-- SRC_DATA_BURST for Channel 0 to 7-->
              <field>
                <name>SRC_DATA_BURST</name>
                <description>Burst writes in beats from source(000000-64 beats .....111111-63 beats)</description>
                <bitRange>[14:9]</bitRange>
                <access>read-write</access>
                <modifiedWriteValues>oneToSet</modifiedWriteValues>
                <writeConstraint>
                  <range>
                    <minimum>0</minimum>
                    <maximum>63</maximum>
                  </range>
                </writeConstraint>
              </field>
              <!-- DEST_CHNL_ID for Channel 0 to 7-->
              <field>
                <name>DEST_CHNL_ID</name>
                <description>This is the destination channel Id to which the data is sent. Must be set up prior to DMA_CHANNEL_ENABLE</description>
                <bitRange>[20:15]</bitRange>
                <access>read-write</access>
              </field>
              <!-- SRC_CHNL_ID for Channel 0 to 7-->
              <field>
                <name>SRC_CHNL_ID</name>
                <description>This is the source channel Id, from which the data is fetched. must be set up prior to DMA_CHANNEL_ENABLE</description>
                <bitRange>[26:21]</bitRange>
                <access>read-write</access>
              </field>
              <!-- DMA_PROT for Channel 0 to 7-->
              <field>
                <name>DMA_PROT</name>
                <description>Protection level to go with the data. It will be concatenated with 1 b1 as there will be no opcode fetching and directly assign to hprot in AHB interface</description>
                <bitRange>[29:27]</bitRange>
                <access>read-write</access>
              </field>
              <!-- Mem_fill_enable for Channel 0 to 7-->
              <field>
                <name>MEM_FILL_ENABLE</name>
                <description>Enable for memory filling with either 1s or 0s.</description>
                <bitRange>[30:30]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Disabled</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Enabled the memory filling</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- Mem_one_fill for Channel 0 to 7-->
              <field>
                <name>MEM_ONE_FILL</name>
                <description>Select for memory filling with either 1s or 0s.</description>
                <bitRange>[31:31]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Memory fill with 0s.</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Memory fill with 1s.</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
            </fields>
          </register>
          <!-- FIFO_CONFIG_REG_CHNL-->
          <!-- Register 32 -->
          <register>
            <name>FIFO_CONFIG_REG_CHNL__n_</name>
            <description>FIFO Configuration Register for channel _n_</description>
            <addressOffset>0x14</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!-- FIFO_STRT_ADDR for Channel 0 tO 7-->
              <field>
                <name>FIFO_STRT_ADDR</name>
                <description>Starting row address of channel</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <!-- FIFO_SIZE for Channel 1-->
              <field>
                <name>FIFO_SIZE</name>
                <description>Channel size</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <!-- Reserved1-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:12]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- PRIORITY_CHNL_REG-->
          <!-- Register 54 -->
          <register>
            <name>PRIORITY_LEVEL_REG_CHNL__n_</name>
            <description>Priority Register for channel _n_</description>
            <addressOffset>0x18</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0</resetValue>
            <resetMask>0xF</resetMask>
            <fields>
              <!-- RPDMAC_PRI_CH for Channel 0 to 7-->
              <field>
                <name>PRIORITY_CH</name>
                <description>Set a value between 2 b00 to 2 b11. The channel having highest number is the highest priority channel.</description>
                <bitRange>[1:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>00</name>
                    <description>priority level 0</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>01</name>
                    <description>priority level 1</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>10</name>
                    <description>priority level 2</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>11</name>
                    <description>priority level 3</description>
                    <value>3</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- Reserved1-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:2]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
      </registers>
    </peripheral>
    <!-- HARDWARE RANDOM NUMBER GENERATOR-->
    <peripheral>
      <name>HWRNG</name>
      <version>1.0</version>
      <description>Random numbers generated are 16-bit random numbers and are generated using either 
					the True random number generator or the Pseudo random number generator.</description>
      <groupName>HWRNG</groupName>
      <baseAddress>0x45090000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x8</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- HWRNG_CTRL_REG  Register -->
        <!--- Register 1 -->
        <register>
          <name>HWRNG_CTRL_REG</name>
          <description>Random Number Generator Control Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- HWRNG_RNG_ST-->
            <field>
              <name>HWRNG_RNG_ST</name>
              <description>This bit is used to start the true number generation.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enables true random number generation</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disables true random number generation</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- HWRNG_PRBS_ST-->
            <field>
              <name>HWRNG_PRBS_ST</name>
              <description>This bit is used to start the pseudo random number generation</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description> Enables pseudo random number generation</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description> Disables pseudo random number generation</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- soft reset-->
            <field>
              <name>SOFT_RESET</name>
              <description>This bit is used to start the pseudo random number generation</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Reset the scrambled data</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Not resetted</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED-->
            <field>
              <name>RESERVED1</name>
              <description>RESERVED1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- HWRNG_RAND_NUM  Register -->
        <!--- Register 2 -->
        <!--#SS HRNG_LFSR_INPUT_LATCH_REG	not there-->
        <register>
          <name>HWRNG_RAND_NUM_REG</name>
          <description>Hardware Random Number Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- HWRNG_RAND_NUM-->
            <field>
              <name>HWRNG_RAND_NUM</name>
              <description>Generated random number can be read from this register.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--ULP TIMERS-->
    <peripheral>
      <name>ULP_TIMERS</name>
      <version>1.0</version>
      <description>TIMER can be used to generate various timing events for the software</description>
      <groupName>ULP_TIMERS</groupName>
      <baseAddress>0x24042000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0xA0</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>TIMER0</name>
        <value>2</value>
      </interrupt>
      <interrupt>
        <name>TIMER1</name>
        <value>3</value>
      </interrupt>
      <interrupt>
        <name>TIMER2</name>
        <value>4</value>
      </interrupt>
      <interrupt>
        <name>TIMER3</name>
        <value>5</value>
      </interrupt>
      <registers>
        <!-- TMR_MATCH: Timer(0-3) Match Register -->
        <!-- REGISTER 1 -->
        <cluster>
          <dim>4</dim>
          <dimIncrement>0x8</dimIncrement>
          <name>MATCH_CTRLn</name>
          <description>MATCH Control registers (0-3)</description>
          <addressOffset>0x0000</addressOffset>
          <register>
            <name>MCUULP_TMR_n__MATCH</name>
            <description>Timer Match Register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0xFFFF</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!-- TMR_MATCH -->
              <field>
                <name>TMR_MATCH</name>
                <description> This bits are used to program the lower significant 16-bits of 
			                timer time out value in millisecond or number of system clocks
			  </description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- TMR_CNTRL: Timer Control Register -->
          <!-- REGISTER 3 -->
          <register>
            <name>MCUULP_TMR_n__CNTRL</name>
            <description>Timer Control Register</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0000</resetValue>
            <resetMask>0xFF</resetMask>
            <fields>
              <!-- TMR_START : Timer start -->
              <field>
                <name>TMR_START</name>
                <description> This Bit are Used to start the timer timer gets reset upon setting this bit
			  </description>
                <bitRange>[0:0]</bitRange>
                <access>write-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>None</name>
                    <description>Timer start</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- TMR_INTR_CLR : Timer interrupt clear -->
              <field>
                <name>TMR_INTR_CLR</name>
                <description> This Bit are Used to clear the timer</description>
                <bitRange>[1:1]</bitRange>
                <access>write-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Clear_Interrupt</name>
                    <description>Clear interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- TMR_INTR_ENABLE : Timer interrupt enable -->
              <field>
                <name>TMR_INTR_ENABLE</name>
                <description> This Bit are Used to enable the time out interrupt</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Interrupt enable</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Interrupt disable</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- TMR_TYPE : Timer type -->
              <field>
                <name>TMR_TYPE</name>
                <description>This Bit are Used to select the type of timer</description>
                <bitRange>[4:3]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>256_MICRO_SECOND</name>
                    <description>256 Micro second mode</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>ONE_MICRO_SECOND</name>
                    <description>1 Micro second mode</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>COUNT_DOWN_TIMER</name>
                    <description>Count down timer</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- TMR_MODE : Timer mode -->
              <field>
                <name>TMR_MODE</name>
                <description> This Bit are Used to select the mode working of timer</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Periodic timer</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>One shot timer</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- TMR_STOP : Timer stop -->
              <field>
                <name>TMR_STOP</name>
                <description> This Bit are Used to stop the timer</description>
                <bitRange>[6:6]</bitRange>
                <access>write-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>None</name>
                    <description>Stops the timer</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- COUNTER_UP -->
              <field>
                <name>COUNTER_UP</name>
                <description>For reading/tracking counter in up counting this bit has to be set
			  </description>
                <bitRange>[7:7]</bitRange>
                <access>read-write</access>
              </field>
              <!-- RESERVED -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1  		           
			  </description>
                <bitRange>[31:8]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- MCUULP_TMR_INTR_STAT: Timer Status Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>MCUULP_TMR_INTR_STAT</name>
          <description>Timer Status Register</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- TMR0_INTR_STATUS: Timer 0 Interrupt Status -->
            <field>
              <name>TMR0_INTR_STATUS</name>
              <description>This bit indicates status of the interrupt generated by timer 0
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Interrupt_Present</name>
                  <description>Interrupt present</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Interrupt_Absent</name>
                  <description>No Interrupt present</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TMR1_INTR_STATUS: Timer 1 Interrupt Status -->
            <field>
              <name>TMR1_INTR_STATUS</name>
              <description>This bit indicates status of the interrupt generated by timer 1
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Interrupt_Present</name>
                  <description>Interrupt present</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Interrupt_Absent</name>
                  <description>No Interrupt present</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TMR2_INTR_STATUS: Timer 2 Interrupt Status -->
            <field>
              <name>TMR2_INTR_STATUS</name>
              <description>This bit indicates status of the interrupt generated by timer 2
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Interrupt_Present</name>
                  <description>Interrupt present</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Interrupt_Absent</name>
                  <description>No Interrupt present</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TMR3_INTR_STATUS: Timer 3 Interrupt Status -->
            <field>
              <name>TMR3_INTR_STATUS</name>
              <description>This bit indicates status of the interrupt generated by timer 3
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Interrupt_Present</name>
                  <description>Interrupt present</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Interrupt_Absent</name>
                  <description>No Interrupt present</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  		           
			  </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCUULP_TMR_US_PERIOD_INT: Timer micro second period Integral Part Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>MCUULP_TMR_US_PERIOD_INT</name>
          <description>Timer micro second period Integral Part Register</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- TMR_US_PERIOD_INT -->
            <field>
              <name>TMR_US_PERIOD_INT</name>
              <description> This bits are used to program the integer part of number of clock cycles
                            per microseconds of the system clock used			  
			           
			  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  		           
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCUULP_TMR_US_PERIOD_FRAC: Timer microsecond period Fractional Part Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>MCUULP_TMR_US_PERIOD_FRAC</name>
          <description>Timer microsecond period Fractional Part Register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFF</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- TMR_US_PERIOD_FRAC -->
            <field>
              <name>TMR_US_PERIOD_FRAC</name>
              <description> This bits are used to program the fractional part of number of clock cycles
                            per microseconds of the system clock used		  
			           
			  </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  		           
			  </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCUULP_TMR_MS_PERIOD_INT: Timer 256 microsecond period Integral Part Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>MCUULP_TMR_MS_PERIOD_INT</name>
          <description>Timer 256 microsecond period Integral Part Register</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- TMR_MS_PERIOD_INT -->
            <field>
              <name>TMR_MS_PERIOD_INT</name>
              <description> This bits are used to program the integer part of number of clock cycles
                            per 256 microseconds of the system clock used			  
			           
			  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  		           
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCUULP_TMR_MS_PERIOD_FRAC: Timer 256 microsecond period Fractional Part Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>MCUULP_TMR_MS_PERIOD_FRAC</name>
          <description>Timer 256 microsecond period Fractional Part Register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFF</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- TMR_MS_PERIOD_FRAC -->
            <field>
              <name>TMR_MS_PERIOD_FRAC</name>
              <description> This bits are used to program the fractional part of number of clock cycles
                            per 256 microseconds of the system clock used		  		           
			  </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  		           
			  </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCUULP_TMR_ACTIVE_STATUS: Timer active status -->
        <!-- REGISTER 14 -->
        <register>
          <name>MCUULP_TMR_ACTIVE_STATUS</name>
          <description>Timer Active Status Register</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000000</resetMask>
          <fields>
            <!-- Timer_active -->
            <field>
              <name>TIMER_ACTIVE</name>
              <description>Timer active status for each timer.
 			               LSB bit specifies the status for 0th timer and so on.		  		           
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Timer_Active</name>
                  <description>Interrupt present</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Timer_Inative</name>
                  <description>No Interrupt present</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  		           
			  </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- Quadrature Encoder Interface -->
    <peripheral>
      <name>QEI</name>
      <version>1.0</version>
      <description>The Quadrature Encoder Interface (QEI) module provides the interface to incremental encoders
				   for obtaining mechanical position data</description>
      <groupName>QEI</groupName>
      <baseAddress>0x47060000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x50</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>QEI</name>
        <value>49</value>
      </interrupt>
      <registers>
        <!-- QEI_STATUS_REG: QEI Status Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>QEI_STATUS_REG</name>
          <description>Quadrature Encoder status register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- Qei_index -->
            <field>
              <name>QEI_INDEX</name>
              <description>This is a direct value from the position signal generator</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Qei_position_B -->
            <field>
              <name>QEI_POSITION_B</name>
              <description>This is a direct value from the position signal generator.Value refers to the signal Position_B from the generator.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Qei_position_A -->
            <field>
              <name>QEI_POSITION_A</name>
              <description>This is a direct value from the position signal generator.Value refers to the signal Position_A from the generator.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Position_cntr_err -->
            <field>
              <name>POSITION_CNTR_ERR</name>
              <description>Count Error Status Flag bit</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Position_cntr_direction-->
            <field>
              <name>POSITION_CNTR_DIRECTION</name>
              <description>Position Counter Direction Status bit</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Position counter direction is negative (-)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Position counter direction is positive (+)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QEI_CTRL_REG_SET Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>QEI_CTRL_REG_SET</name>
          <description> Quadrature Encoder control set register </description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- Qei_sft_rst-->
            <field>
              <name>QEI_SFT_RST</name>
              <description>Quadrature encoder soft reset. It is self reset signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Qei_swap_phase_AB-->
            <field>
              <name>QEI_SWAP_PHASE_AB</name>
              <description>Phase A and Phase B Input Swap Select bit</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Phase A and Phase B inputs are not swapped</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Phase A and Phase B inputs are swapped</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Pos_cnt_rst_with_index_en-->
            <field>
              <name>POS_CNT_RST_WITH_INDEX_EN</name>
              <description>Phase A and Phase B Input Swap Select bit</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>position counter is getting reset after reaching max count, which is mentioned in position_max_cnt</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>position counter is getting reset for every index pulse</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Pos_cnt_direction_ctrl-->
            <field>
              <name>POS_CNT_DIRECTION_CTRL</name>
              <description>NONE</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>position B pin defines the direction of position counter</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>pos_cnt_dir_frm_reg defines the position counter direction</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Pos_cnt_dir_frm_reg-->
            <field>
              <name>POS_CNT_DIR_FRM_REG</name>
              <description>Position Counter Direction indication from user</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Position counter direction is negative (-)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Position counter direction is positive (+)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Index_cnt_rst_en-->
            <field>
              <name>INDEX_CNT_RST_EN</name>
              <description>Index count reset enable</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>NONE</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>index counter is going to reset after reaching max count, which is mentioned in qei_index_max_cnt register.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Digital_filter_bypass-->
            <field>
              <name>DIGITAL_FILTER_BYPASS</name>
              <description>NONE</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>digital filter is in-path for all input signals</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>digital filter is bypassed for all input signals (position A, position B and Index)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Timer_mode-->
            <field>
              <name>TIMER_MODE</name>
              <description>NONE</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Quadrature encoder mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>timer mode. In this mode, decoded timer pulse and direction are taken from position A and position B pins respectively.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Start_velocity_cntr -->
            <field>
              <name>START_VELOCITY_CNTR</name>
              <description>Starting the velocity counter. It is self reset bit.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--Qei_stop_in_idle-->
            <field>
              <name>QEI_STOP_IN_IDLE</name>
              <description>NONE</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>QEI position status counter is working as 32 bit counter.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>QEI position status counter is working as 16 bit counter</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Qei_pos_cnt_16_bit_mode-->
            <field>
              <name>QEI_POS_CNT_16_BIT_MODE</name>
              <description>Qei position counter 16 bit mode enable</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>QEI position status counter will be working as a 16 bit counter</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Pos_cnt_rst-->
            <field>
              <name>POS_CNT_RST</name>
              <description>1=position counter is going to reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--Index_cnt_rst-->
            <field>
              <name>INDEX_CNT_RST</name>
              <description>1= index counter is going to reset.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QEI_CTRL_REG_RESET Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>QEI_CTRL_REG_RESET</name>
          <description>Quadrature Encoder control reset register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- Qei_sft_rst-->
            <field>
              <name>QEI_SFT_RST</name>
              <description>Quadrature encoder soft reset. It is self reset signal</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Qei_swap_phase_AB-->
            <field>
              <name>QEI_SWAP_PHASE_AB</name>
              <description>Phase A and Phase B Input Swap Select bit</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Phase A and Phase B inputs are not swapped</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Phase A and Phase B inputs are swapped</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Pos_cnt_rst_with_index_en-->
            <field>
              <name>POS_CNT_RST_WITH_INDEX_EN</name>
              <description>Phase A and Phase B Input Swap Select bit</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>position counter is getting reset after reaching max count, which is mentioned in position_max_cnt</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>position counter is getting reset for every index pulse</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Pos_cnt_direction_ctrl-->
            <field>
              <name>POS_CNT_DIRECTION_CTRL</name>
              <description>NONE</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>position B pin defines the direction of position counter</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>pos_cnt_dir_frm_reg defines the position counter direction</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Pos_cnt_dir_frm_reg-->
            <field>
              <name>POS_CNT_DIR_FRM_REG</name>
              <description>Position Counter Direction indication from user</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Position counter direction is negative (-)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Position counter direction is positive (+)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Index_cnt_rst_en-->
            <field>
              <name>INDEX_CNT_RST_EN</name>
              <description>NONE</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>NONE</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>index counter is going to reset after reaching max count, which is mentioned in qei_index_max_cnt register.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Digital_filter_bypass-->
            <field>
              <name>DIGITAL_FILTER_BYPASS</name>
              <description>NONE</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>digital filter is in-path for all input signals</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>digital filter is bypassed for all input signals (position A, position B and Index)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Timer_mode-->
            <field>
              <name>TIMER_MODE</name>
              <description>NONE</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Quadrature encoder mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>timer mode. In this mode, decoded timer pulse and direction are taken from position A and position B pins respectively</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Start_velocity_cntr -->
            <field>
              <name>START_VELOCITY_CNTR</name>
              <description>Starting the velocity counter. It is self reset bit.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--Qei_stop_in_idle-->
            <field>
              <name>QEI_STOP_IN_IDLE</name>
              <description>NONE</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>QEI position status counter is working as 32 bit counter.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>QEI position status counter is working as 16 bit counter</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Qei_pos_cnt_16_bit_mode-->
            <field>
              <name>QEI_POS_CNT_16_BIT_MODE</name>
              <description>Qei position counter 16 bit mode enable</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>QEI position status counter will be working as a 16 bit counter</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Pos_cnt_rst-->
            <field>
              <name>POS_CNT_RST</name>
              <description>1=position counter is going to reset</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--Index_cnt_rst-->
            <field>
              <name>INDEX_CNT_RST</name>
              <description>1= index counter is going to reset.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QEI_CNTLR_INIT Register  -->
        <!-- REGISTER 4 -->
        <register>
          <name>QEI_CNTLR_INIT_REG</name>
          <description>Quadrature Encoder initialization register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- Qei_encoding_mode-->
            <field>
              <name>QEI_ENCODING_MODE</name>
              <description>NONE</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>1x mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>2x mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>4x mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>NONE</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--Index_match_value-->
            <field>
              <name>INDEX_MATCH_VALUE</name>
              <description>These bits allow user to specify the state of position A and B during index pulse generation.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Df_clk_divide_slt-->
            <field>
              <name>DF_CLK_DIVIDE_SLT</name>
              <description>Digital Filter Clock Divide Select bits</description>
              <bitRange>[9:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0000</name>
                  <description>0000 = [1:1] Clock divide for Index, position A and B</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0001</name>
                  <description>0001 = [1:2] Clock divide for Index, position A and B</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0010</name>
                  <description>0010 = [1:4] Clock divide for Index, position A and B</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0011</name>
                  <description>0011 = [1:8] Clock divide for Index, position A and B</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0100</name>
                  <description>0100 = [1:16] Clock divide for Index, position A and B</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0101</name>
                  <description>0101 = [1:32] Clock divide for Index, position A and B</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0110</name>
                  <description>0110 = [1:6]4 Clock divide for Index, position A and B</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0111</name>
                  <description>0111 = [1:12]8 Clock divide for Index, position A and B</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1000</name>
                  <description>1000 = [1:25]6 Clock divide for Index, position A and B</description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1001</name>
                  <description>1001 = [1:5]12 Clock divide for Index, position A and B</description>
                  <value>9</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1010</name>
                  <description>1010 = [1:10]24 Clock divide for Index, position A and B</description>
                  <value>10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Unidirectional_velocity-->
            <field>
              <name>UNIDIRECTIONAL_VELOCITY</name>
              <description>Uni directional velocity enable.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>NONE</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>1 means direction change in position counter resets velocity counter</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Unidirectional_Index-->
            <field>
              <name>UNIDIRECTIONAL_INDEX</name>
              <description>Uni directional index enable.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>NONE</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>1 means direction change in position counter resets index counter</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Index_cnt_init-->
            <field>
              <name>INDEX_CNT_INIT</name>
              <description>Index counter initial value in unidirectional index enable mode.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QEI_INDEX_CNT_REG Register  -->
        <!-- REGISTER 5 -->
        <register>
          <name>QEI_INDEX_CNT_REG</name>
          <description>Quadrature Encoder index counter register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--Qei_index_cnt-->
            <field>
              <name>QEI_INDEX_CNT</name>
              <description>Index counter value.User can initialize/change the index counter using this register</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--QEI_INDEX_CNT_WR_VALUE-->
            <field>
              <name>QEI_INDEX_CNT_WR_VALUE</name>
              <description>User can initialize/change the index counter using this register.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QEI_INDEX_MAX_CNT Register -->
        <!-- REGISTER 6 -->
        <register>
          <name>QEI_INDEX_MAX_CNT_REG</name>
          <description>Quadrature Encoder maximum index counter value register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- Qei_index_max_cnt-->
            <field>
              <name>QEI_INDEX_MAX_CNT</name>
              <description>This is a maximum count value that is allowed to increment in the index counter.
    			           If index counter reaches this value, will get reset to zero</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QEI_POSITION_CNT_REG Register-->
        <!-- REGISTER 7 -->
        <register>
          <name>QEI_POSITION_CNT_REG</name>
          <description>Quadrature Encoder maximum position counter value register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000FFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QEI_POSITION_CNT_WR_VALUE_L-->
            <field>
              <name>QEI_POSITION_CNT_WR_VALUE_L</name>
              <description>This is a maximum count value that is allowed to increment in the position counter.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--QEI_POSITION_CNT_WR_VALUE_H-->
            <field>
              <name>QEI_POSITION_CNT_WR_VALUE_H</name>
              <description>This is a maximum count value that is allowed to increment in the position counter.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QEI_POSITION_MAX_CNT_LSW_REG Register-->
        <!-- REGISTER 8 -->
        <register>
          <name>QEI_POSITION_MAX_CNT_LSW_REG</name>
          <description>Quadrature Encoder maximum position counter value register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000FFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QEI_POSITION_MAX_CNT_L-->
            <field>
              <name>QEI_POSITION_MAX_CNT_L</name>
              <description>This is a maximum count value that is allowed to increment in the position counter.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--QEI_POSITION_MAX_CNT_H-->
            <field>
              <name>QEI_POSITION_MAX_CNT_H</name>
              <description>This is a maximum count value that is allowed to increment in the position counter.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QEI_INTR_STS Register-->
        <!-- REGISTER 9 -->
        <register>
          <name>QEI_INTR_STS_REG</name>
          <description>Quadrature Encoder interrupt status register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000FFFF</resetValue>
          <resetMask>0x1F</resetMask>
          <fields>
            <!--Qei_position_cnt_reset_intr_lev-->
            <field>
              <name>QEI_POSITION_CNT_RESET_INTR_LEV</name>
              <description>This is raised when the position counter reaches it's extremes</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--Qei_index_cnt_match_intr_lev-->
            <field>
              <name>QEI_INDEX_CNT_MATCH_INTR_LEV</name>
              <description>This is raised when index counter reaches max value loaded in to index_max_cnt register.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--Position_cntr_err_intr_lev-->
            <field>
              <name>POSITION_CNTR_ERR_INTR_LEV</name>
              <description>Whenever number of possible positions are mismatched with actual positions are received 
						   between two index pulses this will raised</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--Velocity_less_than_intr_lev-->
            <field>
              <name>VELOCITY_LESS_THAN_INTR_LEV</name>
              <description>When velocity count is less than the value given in velocity_value_to_compare register, interrupt is raised</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--Qei_position_cnt_match_intr_lev-->
            <field>
              <name>QEI_POSITION_CNT_MATCH_INTR_LEV</name>
              <description>This is raised when the position counter reaches position match value, which is programmable.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--QEI_VELOCITY_COMPUTATION_OVER_INTR_LEV-->
            <field>
              <name>QEI_VELOCITY_COMPUTATION_OVER_INTR_LEV</name>
              <description>When velocity count is computed for given delta time, than interrupt is raised.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--QEI_INTR_ACK Register-->
        <!-- REGISTER 10 -->
        <register>
          <name>QEI_INTR_ACK_REG</name>
          <description>Quadrature Encoder interrupt acknowledge register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1F</resetMask>
          <fields>
            <!--Qei_position_cnt_reset_intr_lev-->
            <field>
              <name>QEI_POSITION_CNT_RESET_INTR_LEV</name>
              <description>Qei_position_cnt_reset_intr_ack</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Qei position cnt reset intr will be cleared.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Qei_index_cnt_match_intr_lev-->
            <field>
              <name>QEI_INDEX_CNT_MATCH_INTR_LEV</name>
              <description>NONE</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Qei index cnt match intr will be cleared.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Position_cntr_err_intr_lev-->
            <field>
              <name>POSITION_CNTR_ERR_INTR_LEV</name>
              <description>Position_cntr_err_intr_ack</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Position cntr err intr will be cleared.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Velocity_less_than_intr_lev-->
            <field>
              <name>VELOCITY_LESS_THAN_INTR_LEV</name>
              <description>Velocity_less_than_intr_ack</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Velocity less than intr will be cleared</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Qei_position_cnt_match_intr_lev-->
            <field>
              <name>QEI_POSITION_CNT_MATCH_INTR_LEV</name>
              <description>Qei_position_cnt_match_intr_ack</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Qei position cnt match intr will be cleared.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Velocity_computation_over_intr_lev-->
            <field>
              <name>VELOCITY_COMPUTATION_OVER_INTR_LEV</name>
              <description>Velocity_computation_over_intr_ack</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Velocity computation is over intr will be cleared.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QEI_INTR_MASK Register-->
        <!-- REGISTER 11 -->
        <register>
          <name>QEI_INTR_MASK_REG</name>
          <description>Quadrature Encoder interrupt mask register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1F</resetMask>
          <fields>
            <!--Qei_position_cnt_reset_intr_mask-->
            <field>
              <name>QEI_POSITION_CNT_RESET_INTR_MASK</name>
              <description>Qei_position_cnt_reset_intr_mask</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If read : Qei position cnt reset intr is not given on qei_intr pin.
							   If write: No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If read : Qei position cnt reset intr is given on qei_intr pin
							   If write: Qei position cnt reset intr will not be given on qei_intr pin</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Qei_index_cnt_match_intr_mask-->
            <field>
              <name>QEI_INDEX_CNT_MATCH_INTR_MASK</name>
              <description>Qei_index_cnt_match_intr_mask</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If read : Qei index cnt match intr is not given on qei_intr pin
							   If write: No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If read : Qei index cnt match intr is given on qei_intr pin.
							   If write: Qei index cnt match intr will not be given on qei_intr pin.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Position_cntr_err_intr_mask-->
            <field>
              <name>POSITION_CNTR_ERR_INTR_MASK</name>
              <description>Position_cntr_err_intr_mask</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If read : Position cntr err intr is not given on qei_intr pin.
							   If write: No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If read : Position cntr err intr is given on qei_intr pin.
							   If write: Position cntr err intr will not be given on qei_intr pin</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Velocity_less_than_intr_mask-->
            <field>
              <name>VELOCITY_LESS_THAN_INTR_MASK</name>
              <description>Velocity_less_than_intr_mask</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If read : Velocity less than intr is not given on qei_intr pin.
							   If write: No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If read :Velocity less than intr is given on qei_intr pin.
							   If write: Velocity less than intr will not be given on qei_intr pin.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Qei_position_cnt_match_intr_mask-->
            <field>
              <name>QEI_POSITION_CNT_MATCH_INTR_MASK</name>
              <description>Qei_position_cnt_match_intr_mask</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If read :Qei position cnt match intr is given on qei_intr pin
							   If write: No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If read :Qei position cnt match intr is given on qei_intr pin.
							   If write:Qei position cnt match intr will not be given on qei_intr pin</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Velocity_computation_over_intr_mask-->
            <field>
              <name>VELOCITY_COMPUTATION_OVER_INTR_MASK</name>
              <description>Velocity_computation_over_intr_mask</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If read :Qei position cnt match intr is given on qei_intr pin
							   If write: No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If read :Qei position cnt match intr is given on qei_intr pin.
							   If write:Qei position cnt match intr will not be given on qei_intr pin</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QEI_INTR_UNMASK Register-->
        <!--REGISTER 12 -->
        <register>
          <name>QEI_INTR_UNMASK_REg</name>
          <description>Quadrature Encoder interrupt unmask register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1F</resetMask>
          <fields>
            <!--Qei_position_cnt_reset_intr_unmask-->
            <field>
              <name>QEI_POSITION_CNT_RESET_INTR_UNMASK</name>
              <description>Qei_position_cnt_reset_intr_unmask</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If read : Qei position cnt reset intr is not given on qei_intr pin.
							   If write: No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If read : Qei position cnt reset intr is given on qei_intr pin
							   If write: Qei position cnt reset intr will not be given on qei_intr pin</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Qei_index_cnt_match_intr_unmask-->
            <field>
              <name>QEI_INDEX_CNT_MATCH_INTR_UNMASK</name>
              <description>Qei_index_cnt_match_intr_unmask</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If read : Qei index cnt match intr is not given on qei_intr pin
							   If write: No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If read : Qei index cnt match intr is given on qei_intr pin.
							   If write: Qei index cnt match intr will not be given on qei_intr pin.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Position_cntr_err_intr_unmask-->
            <field>
              <name>POSITION_CNTR_ERR_INTR_UNMASK</name>
              <description>Position_cntr_err_intr_unmask</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If read : Position cntr err intr is not given on qei_intr pin.
							   If write: No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If read : Position cntr err intr is given on qei_intr pin.
							   If write: Position cntr err intr will not be given on qei_intr pin</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Velocity_less_than_intr_unmask-->
            <field>
              <name>VELOCITY_LESS_THAN_INTR_UNMASK</name>
              <description>Velocity_less_than_intr_unmask</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If read : Velocity less than intr is not given on qei_intr pin.
							   If write: No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If read :Velocity less than intr is given on qei_intr pin.
							   If write: Velocity less than intr will not be given on qei_intr pin.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Qei_position_cnt_match_intr_unmask-->
            <field>
              <name>QEI_POSITION_CNT_MATCH_INTR_UNMASK</name>
              <description>Qei_position_cnt_match_intr_unmask</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If read :Qei position cnt match intr is given on qei_intr pin
							   If write: No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If read :Qei position cnt match intr is given on qei_intr pin.
							   If write:Qei position cnt match intr will not be given on qei_intr pin</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QEI_CLK_FREQ Register-->
        <!-- REGISTER 13 -->
        <register>
          <name>QEI_CLK_FREQ_REG</name>
          <description>Quadrature Encoder clock frequency register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000027</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--Qei_clk_freq-->
            <field>
              <name>QEI_CLK_FREQ</name>
              <description>Indication of clock frequency on which QEI controller is running.</description>
              <bitRange>[8:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QEI_DELTA_TIME Register-->
        <!-- REGISTER 14 -->
        <register>
          <name>QEI_DELTA_TIME_REG</name>
          <description>Quadrature Delta time register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000003E7</resetValue>
          <resetMask>0xFFFFF</resetMask>
          <fields>
            <!--Delta_time_for_velocity-->
            <field>
              <name>DELTA_TIME_FOR_VELOCITY</name>
              <description>Delta time LSW to compute velocity</description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QEI_VELOCITY Register-->
        <!-- REGISTER 15 -->
        <register>
          <name>QEI_VELOCITY_REG</name>
          <description>Quadrature velocity register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--VELOCITY_VALUE_TO_COMPARE_L-->
            <field>
              <name>VELOCITY_VALUE_TO_COMPARE_L</name>
              <description>For read operation  :It is the velocity count to compare using TA firmware
						   For write operation :It is the velocity value to compare with velocity count</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--VELOCITY_VALUE_TO_COMPARE_H-->
            <field>
              <name>VELOCITY_VALUE_TO_COMPARE_H</name>
              <description>For read operation  :It is the velocity count to compare using TA firmware
						   For write operation :It is the velocity value to compare with velocity count</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QEI_POSITION_MATCH Register-->
        <!-- REGISTER 16 -->
        <register>
          <name>QEI_POSITION_MATCH_REG</name>
          <description>Quadrature position match register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--POSTION_MATCH_VALUE_L-->
            <field>
              <name>POSTION_MATCH_VALUE_L</name>
              <description>Position match value to compare the position counter.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--POSTION_MATCH_VALUE_H-->
            <field>
              <name>POSTION_MATCH_VALUE_H</name>
              <description>Position match value to compare the position counter.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- UART  -->
    <peripheral>
      <name>USART0</name>
      <version>1.0</version>
      <description>Universal Asynchronous Receiver/Transmitter is for serial communication with peripherals,
					modems and datasets</description>
      <groupName>UART_USRT</groupName>
      <baseAddress>0x44000100</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>USART0</name>
        <value>38</value>
      </interrupt>
      <registers>
        <!-- DLL: Divisor Latch Low Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>USART_DLL</name>
          <description>Divisor Latch Low</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DL(H): Divisor Latch(Low) -->
            <field>
              <name>DLL</name>
              <description> Lower 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate
							divisor for the UART.
			  </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- THR: Transmit Holding Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>USART_THR</name>
          <description>Transmit Holding Register</description>
          <alternateRegister>DLL</alternateRegister>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- THR: Data to be transmitted on serial output port -->
            <field>
              <name>THR</name>
              <description>Data to be transmitted on serial output port </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RBR: Receive Buffer Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>USART_RBR</name>
          <description>Receive Buffer Register</description>
          <alternateRegister>DLL</alternateRegister>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- RBR: Receive Buffer -->
            <field>
              <name>RBR</name>
              <description>Receive Buffer Field</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IER: Interrupt Enable Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>USART_IER</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x8F</resetMask>
          <fields>
            <!-- ERBFI: Enable Received Data Available Interrupt -->
            <field>
              <name>ERBFI</name>
              <description>Enable Received Data Available Interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Received Data Available Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Received Data Available Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ETBEI: Enable Transmit Holding Register Empty Interrupt -->
            <field>
              <name>ETBEI</name>
              <description>Enable Transmit Holding Register Empty Interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit Holding Register Empty Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit Holding Register Empty Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ELSI: Enable Receiver Line Status Interrupt -->
            <field>
              <name>ELSI</name>
              <description>Enable Receiver Line Status Interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receiver Line Status Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receiver Line Status Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- EDSSI: Enable Modem Status Interrupt -->
            <field>
              <name>EDSSI</name>
              <description>Enable Modem Status Interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Modem Status Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Modem Status Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[6:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- PTIME: Programmable THRE Interrupt Mode Enable -->
            <field>
              <name>PTIME</name>
              <description>Programmable THRE Interrupt Mode Enable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>generation of THRE Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>generation of THRE Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DLH: Divisor Latch High Register -->
        <!-- REGISTER 5 -->
        <register>
          <name>USART_DLH</name>
          <description>Divisor Latch High</description>
          <alternateRegister>IER</alternateRegister>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DL(H): Divisor Latch(High) -->
            <field>
              <name>DLH</name>
              <description> Upper 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate
							divisor for the UART
			  </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- FCR: FIFO Control Register -->
        <!-- REGISTER 6 -->
        <register>
          <name>USART_FCR</name>
          <description>FIFO Control Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- FIFOE: FIFO Enable -->
            <field>
              <name>FIFOE</name>
              <description>This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFIFOR: RCVR FIFO Reset -->
            <field>
              <name>RFIFOR</name>
              <description>RCVR FIFO Reset</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <!-- XFIFOR: XMIT FIFO Reset-->
            <field>
              <name>XFIFOR</name>
              <description>XMIT FIFO Reset</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <!-- DMAM: DMA Mode -->
            <field>
              <name>DMAM</name>
              <description>DMA signalling mode</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mode0</name>
                  <description> DMA Signalling mode0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode1</name>
                  <description>DMA Signalling mode1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TET: TX Empty Trigger -->
            <field>
              <name>TET</name>
              <description>TX Empty Trigger</description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_EMPTY</name>
                  <description> FIFO Empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_2_CHARACTER</name>
                  <description>2 characters in the FIFO</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_4_CHARACTER</name>
                  <description>FIFO 1/4 full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_2_CHARACTER</name>
                  <description>FIFO 1/2 full</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RT: RCVR Trigger -->
            <field>
              <name>RT</name>
              <description>This is used to select the trigger level in the receiver FIFO at which
						   the Received Data Available Interrupt is generated
			  </description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_1_CHARACTER</name>
                  <description> 1 character in the FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_4_CHARACTER</name>
                  <description>FIFO 1/4 full</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_2_CHARACTER</name>
                  <description>FIFO 1/2 full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_LESS_THAN_2_CHARACTER</name>
                  <description>FIFO 2 less than full</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- IIR: Interrupt Identity Register -->
        <!-- REGISTER 7 -->
        <register>
          <name>USART_IIR</name>
          <description>Interrupt Identity Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!-- IID: Interrupt ID -->
            <field>
              <name>IID</name>
              <description>Interrupt ID</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0000</name>
                  <description>modem status pending pending interrupt</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0001</name>
                  <description>This field indicates no interrupt pending status</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0010</name>
                  <description>Transmit Holding Register Empty pending interrupt</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0100</name>
                  <description>Received Data Available pending interrupt</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0110</name>
                  <description>Receive line status pending interrupt</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0111</name>
                  <description>Busy detect pending interrupt</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1100</name>
                  <description>Character Timeout pending interrupt</description>
                  <value>12</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserve1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[5:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFOSE: FIFOs Enabled -->
            <field>
              <name>FIFOSE</name>
              <description>This is used to indicate whether the FIFOs are enabled or
						   disabled.
			  </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>FIFO is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>FIFO is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserve2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- LCR: Line Control Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>USART_LCR</name>
          <description>Line Control Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DLS: Data Length Select -->
            <field>
              <name>DLS</name>
              <description>Data Length Select,This is used to select the number of data bits per character that the peripheral transmits
						   and receives
			  </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>5_BITS_PER_CHARACTER</name>
                  <description> 5 bits per character </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>6_BITS_PER_CHARACTER</name>
                  <description>6 bits per character</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>7_BITS_PER_CHARACTER</name>
                  <description>7 bits per character</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>8_BITS_PER_CHARACTER</name>
                  <description>8 bits per character</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- STOP: Number of stop bits -->
            <field>
              <name>STOP</name>
              <description>This is used to select the number of stop bits per character that the peripheral transmits and receives</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1_STOP_BIT_PER_CHARACTER</name>
                  <description> 1 stop bit per character </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1_5_OR_2_STOPS_BIT_PER_CHARACTER</name>
                  <!-- #DD Need to see if writing 1.5 as 1_5 acceptable-->
                  <description>1.5 or 2 stop bits per character</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- PEN: Parity Enable -->
            <field>
              <name>PEN</name>
              <description>This bit is used to enable and disable parity generation and detection in transmitted and received serial character</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description> Parity disabled </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description> Parity Enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- EPS:Even Parity Select -->
            <field>
              <name>EPS</name>
              <description>This is used to select between even and odd parity</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Set_to_0</name>
                  <description> An odd number of logic 1s is transmitted or checked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Set_to_1</name>
                  <description> An even number of logic 1s is transmitted or checked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Stick Parity  -->
            <field>
              <name>STICK_PARITY</name>
              <description>This bit is used to force parity value</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOGIC0</name>
                  <description> When PEN, EPS, and Stick Parity are set to 1, the parity bit is transmitted and checked as logic 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LOGIC1</name>
                  <description> If PEN and Stick Parity are set to 1 and EPS is a logic 0,then parity bit is transmitted and checked as a logic 1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- BC : Break Control-->
            <field>
              <name>BC</name>
              <description>This is used to cause a break condition to be transmitted to the receiving device</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SERIAL_OUTPUT_SPACING_STATE</name>
                  <description>If set to 1, the serial output is forced to the spacing (logic 0) state</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DLAB : Divisor Latch Access Bit-->
            <field>
              <name>DLAB</name>
              <description>This bit is used to enable reading and writing of the Divisor Latch register to set the baud rate of the UART</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <usage>write</usage>
                <enumeratedValue>
                  <name>UNSET</name>
                  <description> This bit must be cleared after initial baud rate set up </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCR: Modem Control Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>USART_MCR</name>
          <description>Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- DTR: Data Terminal Ready -->
            <field>
              <name>DTR</name>
              <description>This is used to directly control the Data Terminal Ready (dtr_n) output</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DTR_LOGIC1</name>
                  <description> dtr_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DTR_LOGIC0</name>
                  <description>dtr_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RTS: Request to Send -->
            <field>
              <name>RTS</name>
              <description>This is used to directly control the Request to Send (rts_n) output</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- OUT1:  -->
            <field>
              <name>OUT1</name>
              <description>This is used to directly control the user-designated Output1 (out1_n) output</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OUT1_LOGIC1</name>
                  <description> out1_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OUT1_LOGIC0</name>
                  <description>out1_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OUT2:   -->
            <field>
              <name>OUT2</name>
              <description>This is used to directly control the user-designated Output2 (out2_n) output</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OUT2_LOGIC1</name>
                  <description> out2_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OUT2_LOGIC0</name>
                  <description>out2_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- LB: Loop Back   -->
            <field>
              <name>LB</name>
              <description>This is used to put the UART into a diagnostic mode for test purposes</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AFCE: Auto Flow Control Enable  -->
            <field>
              <name>AFCE</name>
              <description>This is used to directly control the user-designated Output2 (out2_n) output</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description> Auto Flow Control Mode disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Auto Flow Control Mode enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SIRE: Serial Mode Enable  -->
            <field>
              <name>SIRE</name>
              <description>This is used to enable/disable the IrDA SIR Mode features</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description> IrDA SIR Mode disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>IrDA SIR Mode enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- LSR: Line Status Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>USART_LSR</name>
          <description>Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000060</resetValue>
          <fields>
            <!-- DR: Data Ready -->
            <field>
              <name>DR</name>
              <description>This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>No data Ready</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Data Ready</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OE: Overrun Error  -->
            <field>
              <name>OE</name>
              <description>This is used to indicate the occurrence of an overrun error</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>no overrun error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>overrun error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- PE: Parity Error  -->
            <field>
              <name>PE</name>
              <description>This is used to indicate the occurrence of a parity error in the receiver 
						   if the Parity Enable (PEN) bit (LCR[3]) is set
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>no parity error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>parity error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FE: Framing Error  -->
            <field>
              <name>FE</name>
              <description>This is used to indicate the occurrence of a framing error in the receiver</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>no framing error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>framing error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- BI: Break Interrupt  -->
            <field>
              <name>BI</name>
              <description>This is used to indicate the detection of a break sequence on the serial input data</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- THRE: Transmit Holding Register Empty  -->
            <field>
              <name>THRE</name>
              <description>Transmit Holding Register Empty bit</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TEMT: Transmitter Empty -->
            <field>
              <name>TEMT</name>
              <description>Transmitter Empty bit</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RFE: Receiver FIFO Error  -->
            <field>
              <name>RFE</name>
              <description>This is used to indicate if there is at least one parity error,framing error, or break indication in the FIFO
			  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>no error in RX FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>error in RX FIFO</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MSR: Modem Status Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>USART_MSR</name>
          <description>Modem Status Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DCTS: Delta Clear to Send -->
            <field>
              <name>DCTS</name>
              <description>This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>change_on_cts_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on cts_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on cts_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DDSR: Delta Data Set Ready-->
            <field>
              <name>DDSR</name>
              <description>This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_dsr_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on dsr_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on dsr_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TERI: Trailing Edge of Ring Indicator-->
            <field>
              <name>TERI</name>
              <description>This is used to indicate that a change on the input ri_n(from an active-low to an inactive-high state)has occurred since the last time the MSR was read
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_ri_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on ri_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on ri_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DDCD: Delta Data Carrier Detect-->
            <field>
              <name>DDCD</name>
              <description>This is used to indicate that the modem control line dcd_n has 
			               changed since the last time the MSR was read
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_dcd_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on dcd_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on dcd_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- CTS: Clear to Send -->
            <field>
              <name>CTS</name>
              <description>This is used to indicate the current state of the modem control line cts_n</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>cts_n_Input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>cts_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>cts_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DSR: Data Set Ready -->
            <field>
              <name>DSR</name>
              <description>This is used to indicate the current state of the modem control line dsr_n</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>dsr_n_Input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>dsr_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>dsr_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RI: Ring Indicator -->
            <field>
              <name>RI</name>
              <description>This is used to indicate the current state of the modem control line ri_n</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ri_n_input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>ri_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>ri_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DCD: Data Carrier Detect -->
            <field>
              <name>DCD</name>
              <description>This is used to indicate the current state of the modem control line dcd_n</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>dcd_n_input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>dcd_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>dcd_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SCR: Scratch pad Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>USART_SCR</name>
          <description>Scratch pad Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- Scratch pad -->
            <field>
              <name>SCRATCH_PAD</name>
              <description>This register is for programmers to use as a temporary storage space. It has no defined purpose</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- HDEN -->
        <!-- REGISTER 13 -->
        <register>
          <name>USART_HDEN</name>
          <description>Hardware Enable register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- full_duplex_mode -->
            <field>
              <name>FULL_DUPLEX_MODE</name>
              <description>none
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Full_Duplex_Mode</name>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>Full duplex mode enable</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>Full duplex mode disable</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- tx_mode/rx_mode  -->
            <field>
              <name>TX_MODE_RX_MODE</name>
              <description>This signal is valid when full_duplex_mode is disabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>tx_mode</name>
                  <description>tx_mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>rx_mode</name>
                  <description>rx_mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SMCR -->
        <!-- REGISTER 14 -->
        <register>
          <name>USART_SMCR</name>
          <description>Control register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- sync_mode -->
            <field>
              <name>SYNC_MODE</name>
              <description>Sync Mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SYNC_MODE</name>
                  <description>Sync mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NON_SYNC_MODE</name>
                  <description>Non-Sync mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- mst_mode -->
            <field>
              <name>MST_MODE</name>
              <description>Master Mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MST_MODE</name>
                  <description>MST mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NON_MST_MODE</name>
                  <description>Non-MST mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- conti_clk_mode -->
            <field>
              <name>CONTI_CLK_MODE</name>
              <description>none
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CONTINUOUS_CLK_MODE</name>
                  <description>Continuous clock mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NON_CONTINUOUS_CLK_MODE</name>
                  <description>Non-continuous clock mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- start_stop_en -->
            <field>
              <name>START_STOP_EN</name>
              <description>start stop enable</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE_START_STOP</name>
                  <description>Enable start stop</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE_START_STOP</name>
                  <description>Disable start stop</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- FIFO Access Register-->
        <!-- REGISTER 15 -->
        <register>
          <name>USART_FAR</name>
          <description>FIFO Access Register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- FIFO Access Register -->
            <field>
              <name>FIFO_Access</name>
              <description>Enable fifo access mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Transmit FIFO Read -->
        <!-- REGISTER 16 -->
        <register>
          <name>USART_TFR</name>
          <description>Transmit FIFO Read Register</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Transmit FIFO Read -->
            <field>
              <name>TX_FIFO_RD</name>
              <description>Transmit FIFO Read
			  </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Receive FIFO Write -->
        <!-- REGISTER 17 -->
        <register>
          <name>USART_RFW</name>
          <description>Receive FIFO Write Register</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RFWD -->
            <field>
              <name>RFWD</name>
              <description>Receive FIFO Write Data
			  </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFPE -->
            <field>
              <name>RFPE</name>
              <description>Receive FIFO Parity Error
			  </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFFE -->
            <field>
              <name>RFFE</name>
              <description>Receive FIFO Framing Error
			  </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- USR: UART Status Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>USART_USR</name>
          <description>UART Status Register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000006</resetValue>
          <fields>
            <!-- BUSY : UART Busy -->
            <field>
              <name>BUSY</name>
              <description>Indicates that a serial transfer is in progress</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>UART is idle or inactive</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>UART is busy (actively transferring data)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFNF : Transmit FIFO Not Full -->
            <field>
              <name>TFNF</name>
              <description>To Indicate that the transmit FIFO is not full</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>Transmit FIFO is full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Transmit FIFO is not full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFE : Transmit FIFO Empty -->
            <field>
              <name>TFE</name>
              <description>To Indicate that the transmit FIFO is completely empty</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Transmit FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFNE : Receive FIFO Not Empty -->
            <field>
              <name>RFNE</name>
              <description>To Indicate that the receive FIFO contains one or more entries</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>Receive FIFO is empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Receive FIFO is not empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFE : Receive FIFO Full -->
            <field>
              <name>RFF</name>
              <description>To Indicate that the receive FIFO is completely full</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>Receive FIFO not full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Receive FIFO Full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- TFL: Transmit FIFO Level -->
        <!-- REGISTER 19 -->
        <register>
          <name>USART_TFL</name>
          <description>Transmit FIFO Level</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- FIFO_ADDR_WIDTH -->
            <field>
              <name>Transmit_FIFO_Level</name>
              <description>This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[29:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RFL: Receive FIFO Level -->
        <!-- REGISTER 20 -->
        <register>
          <name>USART_RFL</name>
          <description>Receive FIFO Level</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- FIFO ADDR WIDTH -->
            <field>
              <name>Recieve_FIFO_Level</name>
              <description>This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[29:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRR: Software Reset Register -->
        <!-- REGISTER 21 -->
        <register>
          <name>USART_SRR</name>
          <description>Software Reset Register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- UR -->
            <field>
              <name>UR</name>
              <description>UART Reset</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFR -->
            <field>
              <name>RFR</name>
              <description>RCVR FIFO Reset</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <!-- XFR -->
            <field>
              <name>XFR</name>
              <description>XMIT FIFO Reset</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRTS: Shadow Request to Send -->
        <!-- REGISTER 22 -->
        <register>
          <name>USART_SRTS</name>
          <description>Shadow Request to Send</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow Request to Send -->
            <field>
              <name>SRTS</name>
              <description>Shadow Request to Send.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SBCR: Shadow Break Control Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>USART_SBCR</name>
          <description>Shadow Break Control Register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow Break Control Register -->
            <field>
              <name>SBCR</name>
              <description>Shadow Break Control Bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SDMAM:Shadow DMA Mode -->
        <!-- REGISTER 24 -->
        <register>
          <name>USART_SDMAM</name>
          <description>Shadow DMA Mode</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow DMA Mode -->
            <field>
              <name>SDMAM</name>
              <description>Shadow DMA Mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MODE0</name>
                  <description>mode 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MODE1</name>
                  <description>mode 1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SFE:Shadow FIFO Enable -->
        <!-- REGISTER 25 -->
        <register>
          <name>USART_SFE</name>
          <description>Shadow FIFO Enable</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow FIFO Enable -->
            <field>
              <name>SFE</name>
              <description>Shadow FIFO Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRT:Shadow RCVR Trigger -->
        <!-- REGISTER 26 -->
        <register>
          <name>USART_SRT</name>
          <description>Shadow RCVR Trigger</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow RCVR Trigger -->
            <field>
              <name>SRT</name>
              <description>Shadow RCVR Trigger</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- STET:Shadow TX Empty Trigger-->
        <!-- REGISTER 27 -->
        <register>
          <name>USART_STET</name>
          <description>Shadow TX Empty Trigger</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow TX Empty Trigger -->
            <field>
              <name>STET</name>
              <description>Shadow TX Empty Trigger</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- HTX: Halt transmit -->
        <!-- REGISTER 28 -->
        <register>
          <name>USART_HTX</name>
          <description>Halt Transmit</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!--  Halt TX -->
            <field>
              <name>HALT_TX</name>
              <description>This register is use to halt transmissions for testing</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>HALT_TX</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>Halt TX disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Halt TX enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMASA: DMA Software Acknowledge -->
        <!-- REGISTER 29 -->
        <register>
          <name>USART_DMASA</name>
          <description>DMA Software Acknowledge</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!--  DMA Software Acknowledge -->
            <field>
              <name>DMA_SOFTWARE_ACK</name>
              <description>This register is use to perform a DMA software acknowledge if a transfer needs
						   to be terminated due to an error condition
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CPR:Component Parameter Register-->
        <!-- REGISTER 30 -->
        <register>
          <name>USART_CPR</name>
          <description>Component Parameter Register</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x000125F2</resetValue>
          <fields>
            <!--  APB DATA WIDTH -->
            <field>
              <name>APB_DATA_WIDTH</name>
              <description>APB data width register.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>APB_DATA_WIDTH</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>8_BIT</name>
                  <description>APB Data Width 8 BIT</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16_BIT</name>
                  <description>APB Data Width 16 BIT</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>32_BIT</name>
                  <description>APB Data Width 32 BIT</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RESERVED</name>
                  <description>Reserved</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--AFCE MODE-->
            <field>
              <name>AFCE_MODE</name>
              <description>none</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>AFCE_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--THRE MODE-->
            <field>
              <name>THRE_MODE</name>
              <description>none</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>THRE_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SIR MODE-->
            <field>
              <name>SIR_MODE</name>
              <description>none</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SIR_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SIR LP MODE-->
            <field>
              <name>SIR_LP_MODE</name>
              <description>none</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SIR_LP_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--ADDITIONAL FEAT-->
            <field>
              <name>ADDITIONAL_FEAT</name>
              <description>none</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ADDITIONAL_FEAT</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO ACCESS-->
            <field>
              <name>FIFO_ACCESS</name>
              <description>none</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>FIFO_ACCESS</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO STAT-->
            <field>
              <name>FIFO_STAT</name>
              <description>none</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>FIFO_STAT</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SHADOW-->
            <field>
              <name>SHADOW</name>
              <description>none</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SHADOW</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--UART ADD ENCODED PARAMS-->
            <field>
              <name>UART_ADD_ENCODED_PARAMS</name>
              <description>none</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>UART_ADD_ENCODED_PARAMS</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--DMA EXTRA-->
            <field>
              <name>DMA_EXTRA</name>
              <description>none</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>DMA_EXTRA</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved1-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
            </field>
            <!--FIFO MODE-->
            <field>
              <name>FIFO_MODE</name>
              <description>none</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>FIFO_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved3-->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- UCV: UART Component Version -->
        <!-- REGISTER 31 -->
        <register>
          <name>UCV</name>
          <description>UART Component Version</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x3430302A</resetValue>
          <fields>
            <!--  UART Component Version -->
            <field>
              <name>UART_COMP_VER</name>
              <description>ASCII value for each number in the version, followed by *</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CTR: Component Type Register -->
        <!-- REGISTER 32 -->
        <register>
          <name>USART_CTR</name>
          <description>Component Type Register</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x44570110</resetValue>
          <fields>
            <!--  UART Component Version -->
            <field>
              <name>UART_COMP_VER</name>
              <description>This register contains the peripherals identification code.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- USRT 0 -->
    <peripheral>
      <name>UART0</name>
      <version>1.0</version>
      <description>Universal Asynchronous Receiver/Transmitter is for serial communication with peripherals,
          modems and datasets</description>
      <groupName>UART_USRT</groupName>
      <baseAddress>0x44000000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>UART0</name>
        <value>38</value>
      </interrupt>
      <registers>
        <!-- DLL: Divisor Latch Low Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>DLL</name>
          <description>Divisor Latch Low</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DL(H): Divisor Latch(Low) -->
            <field>
              <name>DLL</name>
              <description> Lower 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate
              divisor for the UART.
        </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- THR: Transmit Holding Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>THR</name>
          <description>Transmit Holding Register</description>
          <alternateRegister>DLL</alternateRegister>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- THR: Data to be transmitted on serial output port -->
            <field>
              <name>THR_LSB_8_Bits</name>
              <description>Data to be transmitted on serial output port </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--#change-->
            <field>
              <name>THR_MSB_9th_Bit</name>
              <description>Data to be transmitted on the serial output port(sout) in UART mode for the MSB 9th bit.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- RBR: Receive Buffer Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>RBR</name>
          <description>Receive Buffer Register</description>
          <alternateRegister>DLL</alternateRegister>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- RBR: Receive Buffer -->
            <field>
              <name>RBR_LSB_8_Bits</name>
              <description>Receive Buffer Field</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--#change-->
            <field>
              <name>RBR_MSB_9th_Bit</name>
              <description>Data byte received on the serial input port (sin) in UART mode for the MSB 9th bit.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IER: Interrupt Enable Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>IER</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x8F</resetMask>
          <fields>
            <!-- ERBFI: Enable Received Data Available Interrupt -->
            <field>
              <name>ERBFI</name>
              <description>Enable Received Data Available Interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Received Data Available Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Received Data Available Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ETBEI: Enable Transmit Holding Register Empty Interrupt -->
            <field>
              <name>ETBEI</name>
              <description>Enable Transmit Holding Register Empty Interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit Holding Register Empty Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit Holding Register Empty Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ELSI: Enable Receiver Line Status Interrupt -->
            <field>
              <name>ELSI</name>
              <description>Enable Receiver Line Status Interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receiver Line Status Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receiver Line Status Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- EDSSI: Enable Modem Status Interrupt -->
            <field>
              <name>EDSSI</name>
              <description>Enable Modem Status Interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Modem Status Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Modem Status Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[6:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- PTIME: Programmable THRE Interrupt Mode Enable -->
            <field>
              <name>PTIME</name>
              <description>Programmable THRE Interrupt Mode Enable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>generation of THRE Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>generation of THRE Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DLH: Divisor Latch High Register -->
        <!-- REGISTER 5 -->
        <register>
          <name>DLH</name>
          <description>Divisor Latch High</description>
          <alternateRegister>DLL</alternateRegister>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DL(H): Divisor Latch(High) -->
            <field>
              <name>DLH</name>
              <description> Upper 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate
              divisor for the UART
        </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- FCR: FIFO Control Register -->
        <!-- REGISTER 6 -->
        <register>
          <name>FCR</name>
          <description>FIFO Control Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- FIFOE: FIFO Enable -->
            <field>
              <name>FIFOE</name>
              <description>This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFIFOR: RCVR FIFO Reset -->
            <field>
              <name>RFIFOR</name>
              <description>RCVR FIFO Reset</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <!-- XFIFOR: XMIT FIFO Reset-->
            <field>
              <name>XFIFOR</name>
              <description>XMIT FIFO Reset</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <!-- DMAM: DMA Mode -->
            <field>
              <name>DMAM</name>
              <description>DMA signalling mode</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mode0</name>
                  <description> DMA Signalling mode0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode1</name>
                  <description>DMA Signalling mode1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TET: TX Empty Trigger -->
            <field>
              <name>TET</name>
              <description>TX Empty Trigger</description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_EMPTY</name>
                  <description> FIFO Empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_2_CHARACTER</name>
                  <description>2 characters in the FIFO</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_4_CHARACTER</name>
                  <description>FIFO 1/4 full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_2_CHARACTER</name>
                  <description>FIFO 1/2 full</description>
                  <value>3</value>
                </enumeratedValue>
                <usage>write</usage>
              </enumeratedValues>
            </field>
            <!-- RT: RCVR Trigger -->
            <field>
              <name>RT</name>
              <description>This is used to select the trigger level in the receiver FIFO at which
               the Received Data Available Interrupt is generated
        </description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <usage>write</usage>
                <enumeratedValue>
                  <name>FIFO_1_CHARACTER</name>
                  <description> 1 character in the FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_4_CHARACTER</name>
                  <description>FIFO 1/4 full</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_2_CHARACTER</name>
                  <description>FIFO 1/2 full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_LESS_THAN_2_CHARACTER</name>
                  <description>FIFO 2 less than full</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IIR: Interrupt Identity Register -->
        <!-- REGISTER 7 -->
        <register>
          <name>IIR</name>
          <description>Interrupt Identity Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!-- IID: Interrupt ID -->
            <field>
              <name>IID</name>
              <description>Interrupt ID</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Modem_Status</name>
                  <description>modem status pending pending interrupt</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>No_Interrupt_Pending</name>
                  <description>This field indicates no interrupt pending status</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>THR_Empty</name>
                  <description>Transmit Holding Register Empty pending interrupt</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_Data_Available</name>
                  <description>Received Data Available pending interrupt</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receiver_Line_Status</name>
                  <description>Receive line status pending interrupt</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy_Detect</name>
                  <description>Busy detect pending interrupt</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Character_Timeout</name>
                  <description>Character Timeout pending interrupt</description>
                  <value>12</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserve1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[5:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFOSE: FIFOs Enabled -->
            <field>
              <name>FIFOSE</name>
              <description>This is used to indicate whether the FIFOs are enabled or
               disabled.
        </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>FIFO is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>FIFO is enabled</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserve2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- LCR: Line Control Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>LCR</name>
          <description>Line Control Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DLS: Data Length Select -->
            <field>
              <name>DLS</name>
              <description>Data Length Select,This is used to select the number of data bits per character that the peripheral transmits and receives
        </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>5_BITS_PER_CHARACTER</name>
                  <description> 5 bits per character </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>6_BITS_PER_CHARACTER</name>
                  <description>6 bits per character</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>7_BITS_PER_CHARACTER</name>
                  <description>7 bits per character</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>8_BITS_PER_CHARACTER</name>
                  <description>8 bits per character</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- STOP: Number of stop bits -->
            <field>
              <name>STOP</name>
              <description>This is used to select the number of stop bits per character that the peripheral transmits and receives</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1_STOP_BIT_PER_CHARACTER</name>
                  <description> 1 stop bit per character </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1_5_OR_2_STOPS_BIT_PER_CHARACTER</name>
                  <description>1.5 or 2 stop bits per character</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- PEN: Parity Enable -->
            <field>
              <name>PEN</name>
              <description>This bit is used to enable and disable parity generation and detection in transmitted and received serial character</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Parity_Disable</name>
                  <description> Parity disabled </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Parity_Enable</name>
                  <description> Parity Enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- EPS:Even Parity Select -->
            <field>
              <name>EPS</name>
              <description>This is used to select between even and odd parity</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Set_to_0</name>
                  <description> An odd number of logic 1s is transmitted or checked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Set_to_1</name>
                  <description> An even number of logic 1s is transmitted or checked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Stick Parity  -->
            <field>
              <name>STICK_PARITY</name>
              <description>This bit is used to force parity value</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOGIC0</name>
                  <description> When PEN, EPS, and Stick Parity are set to 1, the parity bit is transmitted and checked as logic 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LOGIC1</name>
                  <description> If PEN and Stick Parity are set to 1 and EPS is a logic 0,then parity bit is transmitted and checked as a logic 1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- BC : Break Control-->
            <field>
              <name>BC</name>
              <description>This is used to cause a break condition to be transmitted to the receiving device</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SERIAL_OUTPUT_SPACING_STATE</name>
                  <description> If set to 1, the serial output is forced to the spacing (logic 0) state</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DLAB : Divisor Latch Access Bit-->
            <field>
              <name>DLAB</name>
              <description>enable reading and writing of the Divisor Latch register, This bit must be cleared after initial baud rate set up </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCR: Modem Control Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>MCR</name>
          <description>Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- DTR: Data Terminal Ready -->
            <field>
              <name>DTR</name>
              <description>This is used to directly control the Data Terminal Ready (dtr_n) output</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DTR_LOGIC1</name>
                  <description> dtr_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DTR_LOGIC0</name>
                  <description>dtr_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RTS: Request to Send -->
            <field>
              <name>RTS</name>
              <description>This is used to directly control the Request to Send (rts_n) output</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- OUT1:  -->
            <field>
              <name>OUT1</name>
              <description>This is used to directly control the user-designated Output1 (out1_n) output</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OUT1_LOGIC1</name>
                  <description> out1_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OUT1_LOGIC0</name>
                  <description>out1_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OUT2:   -->
            <field>
              <name>OUT2</name>
              <description>This is used to directly control the user-designated Output2 (out2_n) output</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OUT2_LOGIC1</name>
                  <description> out2_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OUT2_LOGIC0</name>
                  <description>out2_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- LB: Loop Back   -->
            <field>
              <name>LB</name>
              <description>This is used to put the UART into a diagnostic mode for test purposes</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AFCE: Auto Flow Control Enable  -->
            <field>
              <name>AFCE</name>
              <description>This is used to directly control the user-designated Output2 (out2_n) output</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Auto_Flow_Control</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description> Auto Flow Control Mode disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Auto Flow Control Mode enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SIRE: Serial Mode Enable  -->
            <field>
              <name>SIRE</name>
              <description>This is used to enable/disable the IrDA SIR Mode features</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>IrDA_SIR_Mode</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description> IrDA SIR Mode disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>IrDA SIR Mode enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- LSR: Line Status Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>LSR</name>
          <description>Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000060</resetValue>
          <fields>
            <!-- DR: Data Ready -->
            <field>
              <name>DR</name>
              <description>This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Data_Ready</name>
                  <description>No data Ready</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Data_Ready</name>
                  <description>Data Ready</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OE: Overrun Error  -->
            <field>
              <name>OE</name>
              <description>This is used to indicate the occurrence of an overrun error</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_OverRun_Error</name>
                  <description>no overrun error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OverRun_Error</name>
                  <description>overrun error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- PE: Parity Error  -->
            <field>
              <name>PE</name>
              <description>This is used to indicate the occurrence of a parity error in the receiver 
               if the Parity Enable (PEN) bit (LCR[3]) is set
        </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Parity_Error</name>
                  <description>no parity error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Parity_Error</name>
                  <description>parity error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FE: Framing Error  -->
            <field>
              <name>FE</name>
              <description>This is used to indicate the occurrence of a framing error in the receiver</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Framing_Error</name>
                  <description>no framing error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Framing_Error</name>
                  <description>framing error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- BI: Break Interrupt  -->
            <field>
              <name>BI</name>
              <description>his is used to indicate the detection of a break sequence on the serial input data</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- THRE: Transmit Holding Register Empty  -->
            <field>
              <name>THRE</name>
              <description>Transmit Holding Register Empty bit</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TEMT: Transmitter Empty -->
            <field>
              <name>TEMT</name>
              <description>Transmitter Empty bit</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RFE: Receiver FIFO Error  -->
            <field>
              <name>RFE</name>
              <description>This is used to indicate if there is at least one parity error,framing error, or break indication in the FIFO
        </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Error_in_RX_FIFO</name>
                  <description>no error in RX FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Error_in_RX_FIFO</name>
                  <description>error in RX FIFO</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--ADDR_RCVD-->
            <field>
              <name>ADDR_RCVD</name>
              <description>Address Received bit,If 9-bit data mode (LCR_EXT[0]=1) is enabled, this bit is used to indicate that the 9th bit of the receive data is set to 1.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Character_is_Address</name>
                  <description>Indicates that the character is an address.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Character_is_Data</name>
                  <description>Indicates that the character is data.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MSR: Modem Status Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>MSR</name>
          <description>Modem Status Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DCTS: Delta Clear to Send -->
            <field>
              <name>DCTS</name>
              <description>This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>change_on_cts_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on cts_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on cts_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DDSR: Delta Data Set Ready-->
            <field>
              <name>DDSR</name>
              <description>This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_dsr_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on dsr_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on dsr_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TERI: Trailing Edge of Ring Indicator-->
            <field>
              <name>TERI</name>
              <description>This is used to indicate that a change on the input ri_n(from an active-low to an inactive-high state)has occurred since the last time the MSR was read
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_ri_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on ri_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on ri_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DDCD: Delta Data Carrier Detect-->
            <field>
              <name>DDCD</name>
              <description>This is used to indicate that the modem control line dcd_n has 
			               changed since the last time the MSR was read
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_dcd_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on dcd_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on dcd_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- CTS: Clear to Send -->
            <field>
              <name>CTS</name>
              <description>This is used to indicate the current state of the modem control line cts_n</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>cts_n_Input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>cts_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>cts_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DSR: Data Set Ready -->
            <field>
              <name>DSR</name>
              <description>This is used to indicate the current state of the modem control line dsr_n</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>dsr_n_Input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>dsr_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>dsr_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RI: Ring Indicator -->
            <field>
              <name>RI</name>
              <description>This is used to indicate the current state of the modem control line ri_n</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ri_n_input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>ri_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>ri_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DCD: Data Carrier Detect -->
            <field>
              <name>DCD</name>
              <description>This is used to indicate the current state of the modem control line dcd_n</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>dcd_n_input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>dcd_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>dcd_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SCR: Scratch pad Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>SCR</name>
          <description>Scratch pad Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- Scratch pad -->
            <field>
              <name>SCRATCH_PAD</name>
              <description>This register is for programmers to use as a temporary storage space. It has no defined purpose</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- LPDLL : Low Power Divisor Latch Low Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>LPDLL</name>
          <description>Low Power Divisor Latch Low Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- LOW POWER DLL -->
            <field>
              <name>LPDLL</name>
              <description>This register makes up the lower 8-bits of a 16-bit, read/write,
                           Low Power Divisor Latch register that contains the baud rate
                           divisor for the UART, which must give a baud rate of 115.2K
       </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- LPDLH : Low Power Divisor Latch High Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>LPDLH</name>
          <description>Low Power Divisor Latch High Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- LOW_POWER_DLH -->
            <field>
              <name>LPDLH</name>
              <description>This register makes up the upper 8-bits of a 16-bit, read/write,
                           Low Power Divisor Latch register that contains the baud rate
                           divisor for the UART, which must give a baud rate of 115200
       </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--Shadow RBR-->
        <!--REGISTER 15-->
        <register>
          <name>SRBR</name>
          <description>Shadow Receive Buffer Register</description>
          <alternateRegister>STHR</alternateRegister>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--SRBR: Receive Buffer -->
            <field>
              <name>SRBR_LSB_8_Bits</name>
              <description>This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--#change, added-->
            <field>
              <name>SRBR_MSB_9th_Bit</name>
              <description>This is a shadow register for the RBR[8] bit.It is applicable only when UART_9BIT_DATA_EN=1.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--Shadow THR-->
        <!--REGISTER 16-->
        <register>
          <name>STHR</name>
          <description>Transmit Holding Register</description>
          <alternateRegister>SRBR</alternateRegister>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- THR: Data to be transmitted on serial output port -->
            <field>
              <name>STHR_LSB_8_Bits</name>
              <description>Data to be transmitted on serial output port </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--#change-->
            <field>
              <name>STHR_MSB_9th_Bit</name>
              <description>This is a shadow register for the THR[8] bit.It is applicable only when UART_9BIT_DATA_EN=1</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- FIFO Access Register-->
        <!-- REGISTER 17 -->
        <register>
          <name>FAR</name>
          <description>This register is use to enable a FIFO access mode for testing,</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- FIFO Access Register -->
            <field>
              <name>FIFO_Access</name>
              <description>This register is use to enable a FIFO access mode for testing,</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Transmit FIFO Read -->
        <!-- REGISTER 18 -->
        <register>
          <name>TFR</name>
          <description>Reading this register gives the data at the top of the transmit FIFO.Each consecutive read pops the transmit FIFO and gives next data in FIFO</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Transmit FIFO Read -->
            <field>
              <name>TX_FIFO_RD</name>
              <description>Transmit FIFO Read
        </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Receive FIFO Write -->
        <!-- REGISTER 19 -->
        <register>
          <name>RFW</name>
          <description>none</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RFWD -->
            <field>
              <name>RFWD</name>
              <description>Receive FIFO Write Data
        </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFPE -->
            <field>
              <name>RFPE</name>
              <description>Receive FIFO Parity Error
        </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFFE -->
            <field>
              <name>RFFE</name>
              <description>Receive FIFO Framing Error
        </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- USR: UART Status Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>USR</name>
          <description>UART Status Register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- BUSY : UART Busy -->
            <field>
              <name>BUSY</name>
              <description>Indicates that a serial transfer is in progress</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>UART_IDLE</name>
                  <description>UART is idle or inactive</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART_BUSY</name>
                  <description>UART is busy (actively transferring data)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFNF : Transmit FIFO Not Full -->
            <field>
              <name>TFNF</name>
              <description>To Indicate that the transmit FIFO is not full</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Transmit_FIFO_Full</name>
                  <description>Transmit FIFO is full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit_FIFO_Not_Full</name>
                  <description>Transmit FIFO is not full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFE : Transmit FIFO Empty -->
            <field>
              <name>TFE</name>
              <description>To Indicate that the transmit FIFO is completely empty</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Transmit_FIFO_Empty</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit_FIFO_Empty</name>
                  <description>Transmit FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFNE : Receive FIFO Not Empty -->
            <field>
              <name>RFNE</name>
              <description>To Indicate that the receive FIFO contains one or more entries</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Receive_FIFO_Empty</name>
                  <description>Receive FIFO is empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive FIFO_Not_Empty</name>
                  <description>Receive FIFO is not empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFE : Receive FIFO Full -->
            <field>
              <name>RFE</name>
              <description>To Indicate that the receive FIFO is completely full</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Receive_FIFO_Not_Full</name>
                  <description>Receive FIFO not full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_FIFO_Full</name>
                  <description>Receive FIFO Full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- TFL: Transmit FIFO Level -->
        <!-- REGISTER 21 -->
        <register>
          <name>TFL</name>
          <description>Transmit FIFO Level</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- FIFO_ADDR_WIDTH -->
            <field>
              <name>Transmit_FIFO_Level</name>
              <description>Transmit FIFO Level. This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[29:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RFL: Receive FIFO Level -->
        <!-- REGISTER 22 -->
        <register>
          <name>RFL</name>
          <description>Receive FIFO Level</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- FIFO ADDR WIDTH -->
            <field>
              <name>Receive_FIFO_Level</name>
              <description>Receive FIFO Level. This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[29:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRR: Software Reset Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>SRR</name>
          <description>Software Reset Register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- UR -->
            <field>
              <name>UR</name>
              <description>UART Reset</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFR -->
            <field>
              <name>RFR</name>
              <description>RCVR FIFO Reset</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <!-- XFR -->
            <field>
              <name>XFR</name>
              <description>XMIT FIFO Reset</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRTS: Shadow Request to Send -->
        <!-- REGISTER 24 -->
        <register>
          <name>SRTS</name>
          <description>Shadow Request to Send</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow Request to Send -->
            <field>
              <name>SRTS</name>
              <description>Shadow Request to Send.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SBCR: Shadow Break Control Register -->
        <!-- REGISTER 25 -->
        <register>
          <name>SBCR</name>
          <description>Shadow Break Control Register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow Break Control Register -->
            <field>
              <name>SBCR</name>
              <description>Shadow Break Control Bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SDMAM:Shadow DMA Mode -->
        <!-- REGISTER 26 -->
        <register>
          <name>SDMAM</name>
          <description>Shadow DMA Mode</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow DMA Mode -->
            <field>
              <name>SDMAM</name>
              <description>Shadow DMA Mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MODE0</name>
                  <description>mode 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MODE1</name>
                  <description>mode 1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SFE:Shadow FIFO Enable -->
        <!-- REGISTER 27 -->
        <register>
          <name>SFE</name>
          <description>Shadow FIFO Enable</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow FIFO Enable -->
            <field>
              <name>Shadow_FIFO_En</name>
              <description>Shadow FIFO Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRT:Shadow RCVR Trigger -->
        <!-- REGISTER 28 -->
        <register>
          <name>SRT</name>
          <description>Shadow RCVR Trigger</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow RCVR Trigger -->
            <field>
              <name>SRCVRT</name>
              <description>Shadow RCVR Trigger</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1_Character_in_FIFO</name>
                  <description>1 Character in FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_4th_Full</name>
                  <description>FIFO 1/4th Full</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_Half_Full</name>
                  <description>FIFO 1/2 Full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_2_Less_than_Full</name>
                  <description>FIFO 2 Less than Full</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- STET:Shadow TX Empty Trigger-->
        <!-- REGISTER 29 -->
        <register>
          <name>STET</name>
          <description>Shadow TX Empty Trigger</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow TX Empty Trigger -->
            <field>
              <name>STXET</name>
              <description>Shadow TX Empty Trigger</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_Empty</name>
                  <description>FIFO Empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2_Characters_in_FIFO</name>
                  <description>2 Characters in FIFO</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_4th_Full</name>
                  <description>FIFO 1/4th Full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_Half_Full</name>
                  <description>FIFO 1/2 Full</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- HTX: Halt transmit -->
        <!-- REGISTER 30 -->
        <register>
          <name>HTX</name>
          <description>Halt Transmit</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!--  Halt TX -->
            <field>
              <name>HALT_TX</name>
              <description>This register is use to halt transmissions for testing</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Halt_TX</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>Halt TX disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Halt TX enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMASA: DMA Software Acknowledge -->
        <!-- REGISTER 31 -->
        <register>
          <name>DMASA</name>
          <description>DMA Software Acknowledge</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!--  DMA Software Acknowledge -->
            <field>
              <name>DMA_SOFTWARE_ACK</name>
              <description>This register is use to perform a DMA software acknowledge if a transfer needs to be terminated due to an error condition
        </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- TCR:Transceiver Control Register-->
        <!-- REGISTER 32 -->
        <register>
          <name>TCR</name>
          <description>Transceiver Control Register.</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000006</resetValue>
          <fields>
            <!--RS485 EN-->
            <field>
              <name>RS485_EN</name>
              <description>RS485 Transfer Enable.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RE POL-->
            <field>
              <name>RE_POL</name>
              <description>Receiver Enable Polarity.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>RE_Signal</name>
                <enumeratedValue>
                  <name>Active_Low</name>
                  <description>RE signal is active low</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active_High</name>
                  <description>RE signal is active high</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--DE POL-->
            <field>
              <name>DE_POL</name>
              <description>Driver Enable Polarity.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>DE_Signal</name>
                <enumeratedValue>
                  <name>Active_Low</name>
                  <description>DE signal is active low</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active_High</name>
                  <description>DE signal is active high</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--XFER MODE-->
            <field>
              <name>XFER_MODE</name>
              <description>Transfer Mode.</description>
              <bitRange>[4:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--DE_EN-->
        <!-- REGISTER 33-->
        <register>
          <name>DE_EN</name>
          <description>Driver Output Enable Register.</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DE EN -->
            <field>
              <name>DE_EN</name>
              <description>DE Enable control.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>DE_Signal</name>
                <enumeratedValue>
                  <name>Deassert</name>
                  <description>De-assert 'de' signal</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert 'de' signal</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--RE_EN-->
        <!-- REGISTER 34-->
        <register>
          <name>RE_EN</name>
          <description>Receiver Output Enable Register.</description>
          <addressOffset>0xB4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RE EN-->
            <field>
              <name>RE_EN</name>
              <description>RE Enable control.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>RE_Signal</name>
                <enumeratedValue>
                  <name>Deassert</name>
                  <description>De-assert 're' signal</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert 're' signal</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--DET-->
        <!-- REGISTER 35-->
        <register>
          <name>DET</name>
          <description>Driver Output Enable Timing Register.</description>
          <addressOffset>0xB8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DE ASSERT TIME-->
            <field>
              <name>DE_ASSERT_TIME</name>
              <description>Driver enable assertion time.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED0</name>
              <description>reserved.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--DE DE ASSERT TIME-->
            <field>
              <name>DE_DE_ASSERT_TIME</name>
              <description>Driver enable de-assertion time.</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--TAT-->
        <!-- REGISTER 36-->
        <register>
          <name>TAT</name>
          <description>TurnAround Timing Register</description>
          <addressOffset>0xBC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DE RE-->
            <field>
              <name>DE_RE</name>
              <description>Driver Enable to Receiver Enable TurnAround time.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RE DE-->
            <field>
              <name>RE_DE</name>
              <description>Receiver Enable to Driver Enable TurnAround time.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--DLF-->
        <!-- REGISTER 37-->
        <register>
          <name>DLF</name>
          <description>Divisor Latch Fraction Register.</description>
          <addressOffset>0xC0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DLF-->
            <field>
              <name>DLF_Val</name>
              <description>Fractional part of divisor.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--RAR-->
        <!-- REGISTER 38-->
        <register>
          <name>RAR</name>
          <description>Receive Address Register.</description>
          <addressOffset>0xC4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RAR-->
            <field>
              <name>RAR</name>
              <description>This is an address matching register during receive mode.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--TAR-->
        <!-- REGISTER 39-->
        <register>
          <name>TAR</name>
          <description>Transmit Address Register.</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--TAR-->
            <field>
              <name>TAR</name>
              <description>This is an address matching register during transmit mode.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--LCR EXT-->
        <!-- REGISTER 40-->
        <register>
          <name>LCR_EXT</name>
          <description>Line Extended Control Register</description>
          <addressOffset>0xCC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DLS E-->
            <field>
              <name>DLS_E</name>
              <description>Extension for DLS.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ADDR MATCH-->
            <field>
              <name>ADDR_MATCH</name>
              <description>Address Match Mode.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--SEND ADDR-->
            <field>
              <name>SEND_ADDR</name>
              <description>Send address control bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--TRANSMIT MODE-->
            <field>
              <name>TRANSMIT_MODE</name>
              <description>Transmit mode control bit.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CPR:Component Parameter Register-->
        <!-- REGISTER 41 -->
        <register>
          <name>CPR</name>
          <description>Component Parameter Register</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0X000125F2</resetValue>
          <fields>
            <!--  APB DATA WIDTH -->
            <field>
              <name>APB_DATA_WIDTH</name>
              <description>APB data width register.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>APB_DATA_WIDTH</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>8_BIT</name>
                  <description>APB Data Width 8 BIT</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16_BIT</name>
                  <description>APB Data Width 16 BIT</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>32_BIT</name>
                  <description>APB Data Width 32 BIT</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RESERVED</name>
                  <description>Reserved</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--AFCE MODE-->
            <field>
              <name>AFCE_MODE</name>
              <description>none</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>AFCE_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--THRE MODE-->
            <field>
              <name>THRE_MODE</name>
              <description>none</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>THRE_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SIR MODE-->
            <field>
              <name>SIR_MODE</name>
              <description>none</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SIR_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SIR LP MODE-->
            <field>
              <name>SIR_LP_MODE</name>
              <description>none</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SIR_LP_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--ADDITIONAL FEAT-->
            <field>
              <name>ADDITIONAL_FEAT</name>
              <description>none</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ADDITIONAL_FEAT</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO ACCESS-->
            <field>
              <name>FIFO_ACCESS</name>
              <description>none</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>FIFO_ACCESS</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO STAT-->
            <field>
              <name>FIFO_STAT</name>
              <description>none</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>FIFO_STAT</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SHADOW-->
            <field>
              <name>SHADOW</name>
              <description>none</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SHADOW</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--UART ADD ENCODED PARAMS-->
            <field>
              <name>UART_ADD_ENCODED_PARAMS</name>
              <description>none</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>UART_ADD_ENCODED_PARAMS</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--DMA EXTRA-->
            <field>
              <name>DMA_EXTRA</name>
              <description>none</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>DMA_EXTRA</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved1-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
            </field>
            <!--FIFO MODE-->
            <field>
              <name>FIFO_MODE</name>
              <description>none</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved3-->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- UCV: UART Component Version -->
        <!-- REGISTER 42 -->
        <register>
          <name>UCV</name>
          <description>UART Component Version</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x3430302A</resetValue>
          <fields>
            <!--  UART Component Version -->
            <field>
              <name>UART_COMP_VER</name>
              <description>This register contains UART Component Version.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CTR: Component Type Register -->
        <!-- REGISTER 43 -->
        <register>
          <name>CTR</name>
          <description>Component Type Register,This register contains the peripherals identification code
</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x44570110</resetValue>
          <fields>
            <!--  UART Component Version -->
            <field>
              <name>UART_COMP_VER</name>
              <description>This register contains the peripherals identification code.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- UART 1 -->
    <peripheral>
      <name>UART1</name>
      <version>1.0</version>
      <description>Universal Asynchronous Receiver/Transmitter is for serial communication with peripherals,
          modems and datasets</description>
      <groupName>UART_USRT</groupName>
      <baseAddress>0x45020000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>UART1</name>
        <value>39</value>
      </interrupt>
      <registers>
        <!-- DLL: Divisor Latch Low Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>DLL</name>
          <description>Divisor Latch Low</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DL(H): Divisor Latch(Low) -->
            <field>
              <name>DLL</name>
              <description> Lower 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate
              divisor for the UART.
        </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- THR: Transmit Holding Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>THR</name>
          <description>Transmit Holding Register</description>
          <alternateRegister>DLL</alternateRegister>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- THR: Data to be transmitted on serial output port -->
            <field>
              <name>THR_LSB_8_Bits</name>
              <description>Data to be transmitted on serial output port </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--#change-->
            <field>
              <name>THR_MSB_9th_Bit</name>
              <description>Data to be transmitted on the serial output port(sout) in UART mode for the MSB 9th bit.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- RBR: Receive Buffer Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>RBR</name>
          <description>Receive Buffer Register</description>
          <alternateRegister>DLL</alternateRegister>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- RBR: Receive Buffer -->
            <field>
              <name>RBR_LSB_8_Bits</name>
              <description>Receive Buffer Field</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--#change-->
            <field>
              <name>RBR_MSB_9th_Bit</name>
              <description>Data byte received on the serial input port (sin) in UART mode for the MSB 9th bit.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IER: Interrupt Enable Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>IER</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x8F</resetMask>
          <fields>
            <!-- ERBFI: Enable Received Data Available Interrupt -->
            <field>
              <name>ERBFI</name>
              <description>Enable Received Data Available Interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Received Data Available Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Received Data Available Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ETBEI: Enable Transmit Holding Register Empty Interrupt -->
            <field>
              <name>ETBEI</name>
              <description>Enable Transmit Holding Register Empty Interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit Holding Register Empty Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit Holding Register Empty Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ELSI: Enable Receiver Line Status Interrupt -->
            <field>
              <name>ELSI</name>
              <description>Enable Receiver Line Status Interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receiver Line Status Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receiver Line Status Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- EDSSI: Enable Modem Status Interrupt -->
            <field>
              <name>EDSSI</name>
              <description>Enable Modem Status Interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Modem Status Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Modem Status Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[6:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- PTIME: Programmable THRE Interrupt Mode Enable -->
            <field>
              <name>PTIME</name>
              <description>Programmable THRE Interrupt Mode Enable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>generation of THRE Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>generation of THRE Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DLH: Divisor Latch High Register -->
        <!-- REGISTER 5 -->
        <register>
          <name>DLH</name>
          <description>Divisor Latch High</description>
          <alternateRegister>DLL</alternateRegister>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DL(H): Divisor Latch(High) -->
            <field>
              <name>DLH</name>
              <description> Upper 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate
              divisor for the UART
        </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- FCR: FIFO Control Register -->
        <!-- REGISTER 6 -->
        <register>
          <name>FCR</name>
          <description>FIFO Control Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- FIFOE: FIFO Enable -->
            <field>
              <name>FIFOE</name>
              <description>This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFIFOR: RCVR FIFO Reset -->
            <field>
              <name>RFIFOR</name>
              <description>RCVR FIFO Reset</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <!-- XFIFOR: XMIT FIFO Reset-->
            <field>
              <name>XFIFOR</name>
              <description>XMIT FIFO Reset</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <!-- DMAM: DMA Mode -->
            <field>
              <name>DMAM</name>
              <description>DMA signalling mode</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mode0</name>
                  <description> DMA Signalling mode0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode1</name>
                  <description>DMA Signalling mode1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TET: TX Empty Trigger -->
            <field>
              <name>TET</name>
              <description>TX Empty Trigger</description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_EMPTY</name>
                  <description> FIFO Empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_2_CHARACTER</name>
                  <description>2 characters in the FIFO</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_4_CHARACTER</name>
                  <description>FIFO 1/4 full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_2_CHARACTER</name>
                  <description>FIFO 1/2 full</description>
                  <value>3</value>
                </enumeratedValue>
                <usage>write</usage>
              </enumeratedValues>
            </field>
            <!-- RT: RCVR Trigger -->
            <field>
              <name>RT</name>
              <description>This is used to select the trigger level in the receiver FIFO at which
               the Received Data Available Interrupt is generated
        </description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <usage>write</usage>
                <enumeratedValue>
                  <name>FIFO_1_CHARACTER</name>
                  <description> 1 character in the FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_4_CHARACTER</name>
                  <description>FIFO 1/4 full</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_2_CHARACTER</name>
                  <description>FIFO 1/2 full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_LESS_THAN_2_CHARACTER</name>
                  <description>FIFO 2 less than full</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IIR: Interrupt Identity Register -->
        <!-- REGISTER 7 -->
        <register>
          <name>IIR</name>
          <description>Interrupt Identity Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!-- IID: Interrupt ID -->
            <field>
              <name>IID</name>
              <description>Interrupt ID</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Modem_Status</name>
                  <description>modem status pending pending interrupt</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>No_Interrupt_Pending</name>
                  <description>This field indicates no interrupt pending status</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>THR_Empty</name>
                  <description>Transmit Holding Register Empty pending interrupt</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_Data_Available</name>
                  <description>Received Data Available pending interrupt</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receiver_Line_Status</name>
                  <description>Receive line status pending interrupt</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy_Detect</name>
                  <description>Busy detect pending interrupt</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Character_Timeout</name>
                  <description>Character Timeout pending interrupt</description>
                  <value>12</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserve1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[5:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFOSE: FIFOs Enabled -->
            <field>
              <name>FIFOSE</name>
              <description>This is used to indicate whether the FIFOs are enabled or
               disabled.
        </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>FIFO is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>FIFO is enabled</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserve2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- LCR: Line Control Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>LCR</name>
          <description>Line Control Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DLS: Data Length Select -->
            <field>
              <name>DLS</name>
              <description>Data Length Select,This is used to select the number of data bits per character that the peripheral transmits and receives
        </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>5_BITS_PER_CHARACTER</name>
                  <description> 5 bits per character </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>6_BITS_PER_CHARACTER</name>
                  <description>6 bits per character</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>7_BITS_PER_CHARACTER</name>
                  <description>7 bits per character</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>8_BITS_PER_CHARACTER</name>
                  <description>8 bits per character</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- STOP: Number of stop bits -->
            <field>
              <name>STOP</name>
              <description>This is used to select the number of stop bits per character that the peripheral transmits and receives</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1_STOP_BIT_PER_CHARACTER</name>
                  <description> 1 stop bit per character </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1_5_OR_2_STOPS_BIT_PER_CHARACTER</name>
                  <description>1.5 or 2 stop bits per character</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- PEN: Parity Enable -->
            <field>
              <name>PEN</name>
              <description>This bit is used to enable and disable parity generation and detection in transmitted and received serial character</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Parity_Disable</name>
                  <description> Parity disabled </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Parity_Enable</name>
                  <description> Parity Enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- EPS:Even Parity Select -->
            <field>
              <name>EPS</name>
              <description>This is used to select between even and odd parity</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Set_to_0</name>
                  <description> An odd number of logic 1s is transmitted or checked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Set_to_1</name>
                  <description> An even number of logic 1s is transmitted or checked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Stick Parity  -->
            <field>
              <name>STICK_PARITY</name>
              <description>This bit is used to force parity value</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOGIC0</name>
                  <description> When PEN, EPS, and Stick Parity are set to 1, the parity bit is transmitted and checked as logic 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LOGIC1</name>
                  <description> If PEN and Stick Parity are set to 1 and EPS is a logic 0,then parity bit is transmitted and checked as a logic 1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- BC : Break Control-->
            <field>
              <name>BC</name>
              <description>This is used to cause a break condition to be transmitted to the receiving device</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SERIAL_OUTPUT_SPACING_STATE</name>
                  <description> If set to 1, the serial output is forced to the spacing (logic 0) state</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DLAB : Divisor Latch Access Bit-->
            <field>
              <name>DLAB</name>
              <description>enable reading and writing of the Divisor Latch register, This bit must be cleared after initial baud rate set up </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCR: Modem Control Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>MCR</name>
          <description>Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- DTR: Data Terminal Ready -->
            <field>
              <name>DTR</name>
              <description>This is used to directly control the Data Terminal Ready (dtr_n) output</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DTR_LOGIC1</name>
                  <description> dtr_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DTR_LOGIC0</name>
                  <description>dtr_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RTS: Request to Send -->
            <field>
              <name>RTS</name>
              <description>This is used to directly control the Request to Send (rts_n) output</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- OUT1:  -->
            <field>
              <name>OUT1</name>
              <description>This is used to directly control the user-designated Output1 (out1_n) output</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OUT1_LOGIC1</name>
                  <description> out1_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OUT1_LOGIC0</name>
                  <description>out1_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OUT2:   -->
            <field>
              <name>OUT2</name>
              <description>This is used to directly control the user-designated Output2 (out2_n) output</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OUT2_LOGIC1</name>
                  <description> out2_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OUT2_LOGIC0</name>
                  <description>out2_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- LB: Loop Back   -->
            <field>
              <name>LB</name>
              <description>This is used to put the UART into a diagnostic mode for test purposes</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AFCE: Auto Flow Control Enable  -->
            <field>
              <name>AFCE</name>
              <description>This is used to directly control the user-designated Output2 (out2_n) output</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Auto_Flow_Control</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description> Auto Flow Control Mode disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Auto Flow Control Mode enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SIRE: Serial Mode Enable  -->
            <field>
              <name>SIRE</name>
              <description>This is used to enable/disable the IrDA SIR Mode features</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>IrDA_SIR_Mode</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description> IrDA SIR Mode disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>IrDA SIR Mode enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- LSR: Line Status Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>LSR</name>
          <description>Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000060</resetValue>
          <fields>
            <!-- DR: Data Ready -->
            <field>
              <name>DR</name>
              <description>This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Data_Ready</name>
                  <description>No data Ready</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Data_Ready</name>
                  <description>Data Ready</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OE: Overrun Error  -->
            <field>
              <name>OE</name>
              <description>This is used to indicate the occurrence of an overrun error</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_OverRun_Error</name>
                  <description>no overrun error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OverRun_Error</name>
                  <description>overrun error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- PE: Parity Error  -->
            <field>
              <name>PE</name>
              <description>This is used to indicate the occurrence of a parity error in the receiver 
               if the Parity Enable (PEN) bit (LCR[3]) is set
        </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Parity_Error</name>
                  <description>no parity error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Parity_Error</name>
                  <description>parity error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FE: Framing Error  -->
            <field>
              <name>FE</name>
              <description>This is used to indicate the occurrence of a framing error in the receiver</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Framing_Error</name>
                  <description>no framing error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Framing_Error</name>
                  <description>framing error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- BI: Break Interrupt  -->
            <field>
              <name>BI</name>
              <description>his is used to indicate the detection of a break sequence on the serial input data</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- THRE: Transmit Holding Register Empty  -->
            <field>
              <name>THRE</name>
              <description>Transmit Holding Register Empty bit</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TEMT: Transmitter Empty -->
            <field>
              <name>TEMT</name>
              <description>Transmitter Empty bit</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RFE: Receiver FIFO Error  -->
            <field>
              <name>RFE</name>
              <description>This is used to indicate if there is at least one parity error,framing error, or break indication in the FIFO
        </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Error_in_RX_FIFO</name>
                  <description>no error in RX FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Error_in_RX_FIFO</name>
                  <description>error in RX FIFO</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--ADDR_RCVD-->
            <field>
              <name>ADDR_RCVD</name>
              <description>Address Received bit,If 9-bit data mode (LCR_EXT[0]=1) is enabled, this bit is used to indicate that the 9th bit of the receive data is set to 1.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Character_is_Address</name>
                  <description>Indicates that the character is an address.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Character_is_Data</name>
                  <description>Indicates that the character is data.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MSR: Modem Status Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>MSR</name>
          <description>Modem Status Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DCTS: Delta Clear to Send -->
            <field>
              <name>DCTS</name>
              <description>This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>change_on_cts_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on cts_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on cts_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DDSR: Delta Data Set Ready-->
            <field>
              <name>DDSR</name>
              <description>This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_dsr_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on dsr_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on dsr_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TERI: Trailing Edge of Ring Indicator-->
            <field>
              <name>TERI</name>
              <description>This is used to indicate that a change on the input ri_n(from an active-low to an inactive-high state)has occurred since the last time the MSR was read
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_ri_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on ri_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on ri_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DDCD: Delta Data Carrier Detect-->
            <field>
              <name>DDCD</name>
              <description>This is used to indicate that the modem control line dcd_n has 
			               changed since the last time the MSR was read
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_dcd_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on dcd_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on dcd_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- CTS: Clear to Send -->
            <field>
              <name>CTS</name>
              <description>This is used to indicate the current state of the modem control line cts_n</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>cts_n_Input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>cts_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>cts_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DSR: Data Set Ready -->
            <field>
              <name>DSR</name>
              <description>This is used to indicate the current state of the modem control line dsr_n</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>dsr_n_Input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>dsr_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>dsr_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RI: Ring Indicator -->
            <field>
              <name>RI</name>
              <description>This is used to indicate the current state of the modem control line ri_n</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ri_n_input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>ri_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>ri_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DCD: Data Carrier Detect -->
            <field>
              <name>DCD</name>
              <description>This is used to indicate the current state of the modem control line dcd_n</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>dcd_n_input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>dcd_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>dcd_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SCR: Scratch pad Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>SCR</name>
          <description>Scratch pad Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- Scratch pad -->
            <field>
              <name>SCRATCH_PAD</name>
              <description>This register is for programmers to use as a temporary storage space. It has no defined purpose</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- LPDLL : Low Power Divisor Latch Low Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>LPDLL</name>
          <description>Low Power Divisor Latch Low Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- LOW POWER DLL -->
            <field>
              <name>LPDLL</name>
              <description>This register makes up the lower 8-bits of a 16-bit, read/write,
                           Low Power Divisor Latch register that contains the baud rate
                           divisor for the UART, which must give a baud rate of 115.2K
       </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- LPDLH : Low Power Divisor Latch High Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>LPDLH</name>
          <description>Low Power Divisor Latch High Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- LOW_POWER_DLH -->
            <field>
              <name>LPDLH</name>
              <description>This register makes up the upper 8-bits of a 16-bit, read/write,
                           Low Power Divisor Latch register that contains the baud rate
                           divisor for the UART, which must give a baud rate of 115200
       </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--Shadow RBR-->
        <!--REGISTER 15-->
        <register>
          <name>SRBR</name>
          <description>Shadow Receive Buffer Register</description>
          <alternateRegister>STHR</alternateRegister>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--SRBR: Receive Buffer -->
            <field>
              <name>SRBR_LSB_8_Bits</name>
              <description>This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--#change, added-->
            <field>
              <name>SRBR_MSB_9th_Bit</name>
              <description>This is a shadow register for the RBR[8] bit.It is applicable only when UART_9BIT_DATA_EN=1.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--Shadow THR-->
        <!--REGISTER 16-->
        <register>
          <name>STHR</name>
          <description>Transmit Holding Register</description>
          <alternateRegister>SRBR</alternateRegister>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- THR: Data to be transmitted on serial output port -->
            <field>
              <name>STHR_LSB_8_Bits</name>
              <description>Data to be transmitted on serial output port </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--#change-->
            <field>
              <name>STHR_MSB_9th_Bit</name>
              <description>This is a shadow register for the THR[8] bit.It is applicable only when UART_9BIT_DATA_EN=1</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- FIFO Access Register-->
        <!-- REGISTER 17 -->
        <register>
          <name>FAR</name>
          <description>This register is use to enable a FIFO access mode for testing,</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- FIFO Access Register -->
            <field>
              <name>FIFO_Access</name>
              <description>This register is use to enable a FIFO access mode for testing,</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Transmit FIFO Read -->
        <!-- REGISTER 18 -->
        <register>
          <name>TFR</name>
          <description>Reading this register gives the data at the top of the transmit FIFO.Each consecutive read pops the transmit FIFO and gives next data in FIFO</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Transmit FIFO Read -->
            <field>
              <name>TX_FIFO_RD</name>
              <description>Transmit FIFO Read
        </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Receive FIFO Write -->
        <!-- REGISTER 19 -->
        <register>
          <name>RFW</name>
          <description>none</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RFWD -->
            <field>
              <name>RFWD</name>
              <description>Receive FIFO Write Data
        </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFPE -->
            <field>
              <name>RFPE</name>
              <description>Receive FIFO Parity Error
        </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFFE -->
            <field>
              <name>RFFE</name>
              <description>Receive FIFO Framing Error
        </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- USR: UART Status Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>USR</name>
          <description>UART Status Register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- BUSY : UART Busy -->
            <field>
              <name>BUSY</name>
              <description>Indicates that a serial transfer is in progress</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>UART_IDLE</name>
                  <description>UART is idle or inactive</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART_BUSY</name>
                  <description>UART is busy (actively transferring data)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFNF : Transmit FIFO Not Full -->
            <field>
              <name>TFNF</name>
              <description>To Indicate that the transmit FIFO is not full</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Transmit_FIFO_Full</name>
                  <description>Transmit FIFO is full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit_FIFO_Not_Full</name>
                  <description>Transmit FIFO is not full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFE : Transmit FIFO Empty -->
            <field>
              <name>TFE</name>
              <description>To Indicate that the transmit FIFO is completely empty</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Transmit_FIFO_Empty</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit_FIFO_Empty</name>
                  <description>Transmit FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFNE : Receive FIFO Not Empty -->
            <field>
              <name>RFNE</name>
              <description>To Indicate that the receive FIFO contains one or more entries</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Receive_FIFO_Empty</name>
                  <description>Receive FIFO is empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive FIFO_Not_Empty</name>
                  <description>Receive FIFO is not empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFE : Receive FIFO Full -->
            <field>
              <name>RFE</name>
              <description>To Indicate that the receive FIFO is completely full</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Receive_FIFO_Not_Full</name>
                  <description>Receive FIFO not full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_FIFO_Full</name>
                  <description>Receive FIFO Full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- TFL: Transmit FIFO Level -->
        <!-- REGISTER 21 -->
        <register>
          <name>TFL</name>
          <description>Transmit FIFO Level</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- FIFO_ADDR_WIDTH -->
            <field>
              <name>Transmit_FIFO_Level</name>
              <description>Transmit FIFO Level. This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[29:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RFL: Receive FIFO Level -->
        <!-- REGISTER 22 -->
        <register>
          <name>RFL</name>
          <description>Receive FIFO Level</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- FIFO ADDR WIDTH -->
            <field>
              <name>Receive_FIFO_Level</name>
              <description>Receive FIFO Level. This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[29:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRR: Software Reset Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>SRR</name>
          <description>Software Reset Register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- UR -->
            <field>
              <name>UR</name>
              <description>UART Reset</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFR -->
            <field>
              <name>RFR</name>
              <description>RCVR FIFO Reset</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <!-- XFR -->
            <field>
              <name>XFR</name>
              <description>XMIT FIFO Reset</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRTS: Shadow Request to Send -->
        <!-- REGISTER 24 -->
        <register>
          <name>SRTS</name>
          <description>Shadow Request to Send</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow Request to Send -->
            <field>
              <name>SRTS</name>
              <description>Shadow Request to Send.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SBCR: Shadow Break Control Register -->
        <!-- REGISTER 25 -->
        <register>
          <name>SBCR</name>
          <description>Shadow Break Control Register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow Break Control Register -->
            <field>
              <name>SBCR</name>
              <description>Shadow Break Control Bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SDMAM:Shadow DMA Mode -->
        <!-- REGISTER 26 -->
        <register>
          <name>SDMAM</name>
          <description>Shadow DMA Mode</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow DMA Mode -->
            <field>
              <name>SDMAM</name>
              <description>Shadow DMA Mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MODE0</name>
                  <description>mode 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MODE1</name>
                  <description>mode 1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SFE:Shadow FIFO Enable -->
        <!-- REGISTER 27 -->
        <register>
          <name>SFE</name>
          <description>Shadow FIFO Enable</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow FIFO Enable -->
            <field>
              <name>Shadow_FIFO_En</name>
              <description>Shadow FIFO Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRT:Shadow RCVR Trigger -->
        <!-- REGISTER 28 -->
        <register>
          <name>SRT</name>
          <description>Shadow RCVR Trigger</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow RCVR Trigger -->
            <field>
              <name>SRCVRT</name>
              <description>Shadow RCVR Trigger</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1_Character_in_FIFO</name>
                  <description>1 Character in FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_4th_Full</name>
                  <description>FIFO 1/4th Full</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_Half_Full</name>
                  <description>FIFO 1/2 Full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_2_Less_than_Full</name>
                  <description>FIFO 2 Less than Full</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- STET:Shadow TX Empty Trigger-->
        <!-- REGISTER 29 -->
        <register>
          <name>STET</name>
          <description>Shadow TX Empty Trigger</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow TX Empty Trigger -->
            <field>
              <name>STXET</name>
              <description>Shadow TX Empty Trigger</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_Empty</name>
                  <description>FIFO Empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2_Characters_in_FIFO</name>
                  <description>2 Characters in FIFO</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_4th_Full</name>
                  <description>FIFO 1/4th Full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_Half_Full</name>
                  <description>FIFO 1/2 Full</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- HTX: Halt transmit -->
        <!-- REGISTER 30 -->
        <register>
          <name>HTX</name>
          <description>Halt Transmit</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!--  Halt TX -->
            <field>
              <name>HALT_TX</name>
              <description>This register is use to halt transmissions for testing</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Halt_TX</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>Halt TX disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Halt TX enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMASA: DMA Software Acknowledge -->
        <!-- REGISTER 31 -->
        <register>
          <name>DMASA</name>
          <description>DMA Software Acknowledge</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!--  DMA Software Acknowledge -->
            <field>
              <name>DMA_SOFTWARE_ACK</name>
              <description>This register is use to perform a DMA software acknowledge if a transfer needs to be terminated due to an error condition
        </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- TCR:Transceiver Control Register-->
        <!-- REGISTER 32 -->
        <register>
          <name>TCR</name>
          <description>Transceiver Control Register.</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000006</resetValue>
          <fields>
            <!--RS485 EN-->
            <field>
              <name>RS485_EN</name>
              <description>RS485 Transfer Enable.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RE POL-->
            <field>
              <name>RE_POL</name>
              <description>Receiver Enable Polarity.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>RE_Signal</name>
                <enumeratedValue>
                  <name>Active_Low</name>
                  <description>RE signal is active low</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active_High</name>
                  <description>RE signal is active high</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--DE POL-->
            <field>
              <name>DE_POL</name>
              <description>Driver Enable Polarity.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>DE_Signal</name>
                <enumeratedValue>
                  <name>Active_Low</name>
                  <description>DE signal is active low</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active_High</name>
                  <description>DE signal is active high</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--XFER MODE-->
            <field>
              <name>XFER_MODE</name>
              <description>Transfer Mode.</description>
              <bitRange>[4:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--DE_EN-->
        <!-- REGISTER 33-->
        <register>
          <name>DE_EN</name>
          <description>Driver Output Enable Register.</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DE EN -->
            <field>
              <name>DE_EN</name>
              <description>DE Enable control.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>DE_Signal</name>
                <enumeratedValue>
                  <name>Deassert</name>
                  <description>De-assert 'de' signal</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert 'de' signal</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--RE_EN-->
        <!-- REGISTER 34-->
        <register>
          <name>RE_EN</name>
          <description>Receiver Output Enable Register.</description>
          <addressOffset>0xB4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RE EN-->
            <field>
              <name>RE_EN</name>
              <description>RE Enable control.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>RE_Signal</name>
                <enumeratedValue>
                  <name>Deassert</name>
                  <description>De-assert 're' signal</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert 're' signal</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--DET-->
        <!-- REGISTER 35-->
        <register>
          <name>DET</name>
          <description>Driver Output Enable Timing Register.</description>
          <addressOffset>0xB8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DE ASSERT TIME-->
            <field>
              <name>DE_ASSERT_TIME</name>
              <description>Driver enable assertion time.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED0</name>
              <description>reserved.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--DE DE ASSERT TIME-->
            <field>
              <name>DE_DE_ASSERT_TIME</name>
              <description>Driver enable de-assertion time.</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--TAT-->
        <!-- REGISTER 36-->
        <register>
          <name>TAT</name>
          <description>TurnAround Timing Register</description>
          <addressOffset>0xBC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DE RE-->
            <field>
              <name>DE_RE</name>
              <description>Driver Enable to Receiver Enable TurnAround time.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RE DE-->
            <field>
              <name>RE_DE</name>
              <description>Receiver Enable to Driver Enable TurnAround time.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--DLF-->
        <!-- REGISTER 37-->
        <register>
          <name>DLF</name>
          <description>Divisor Latch Fraction Register.</description>
          <addressOffset>0xC0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DLF-->
            <field>
              <name>DLF_Val</name>
              <description>Fractional part of divisor.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--RAR-->
        <!-- REGISTER 38-->
        <register>
          <name>RAR</name>
          <description>Receive Address Register.</description>
          <addressOffset>0xC4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RAR-->
            <field>
              <name>RAR</name>
              <description>This is an address matching register during receive mode.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--TAR-->
        <!-- REGISTER 39-->
        <register>
          <name>TAR</name>
          <description>Transmit Address Register.</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--TAR-->
            <field>
              <name>TAR</name>
              <description>This is an address matching register during transmit mode.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--LCR EXT-->
        <!-- REGISTER 40-->
        <register>
          <name>LCR_EXT</name>
          <description>Line Extended Control Register</description>
          <addressOffset>0xCC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DLS E-->
            <field>
              <name>DLS_E</name>
              <description>Extension for DLS.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ADDR MATCH-->
            <field>
              <name>ADDR_MATCH</name>
              <description>Address Match Mode.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--SEND ADDR-->
            <field>
              <name>SEND_ADDR</name>
              <description>Send address control bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--TRANSMIT MODE-->
            <field>
              <name>TRANSMIT_MODE</name>
              <description>Transmit mode control bit.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CPR:Component Parameter Register-->
        <!-- REGISTER 41 -->
        <register>
          <name>CPR</name>
          <description>Component Parameter Register</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0X000125F2</resetValue>
          <fields>
            <!--  APB DATA WIDTH -->
            <field>
              <name>APB_DATA_WIDTH</name>
              <description>APB data width register.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>APB_DATA_WIDTH</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>8_BIT</name>
                  <description>APB Data Width 8 BIT</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16_BIT</name>
                  <description>APB Data Width 16 BIT</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>32_BIT</name>
                  <description>APB Data Width 32 BIT</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RESERVED</name>
                  <description>Reserved</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--AFCE MODE-->
            <field>
              <name>AFCE_MODE</name>
              <description>none</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>AFCE_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--THRE MODE-->
            <field>
              <name>THRE_MODE</name>
              <description>none</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>THRE_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SIR MODE-->
            <field>
              <name>SIR_MODE</name>
              <description>none</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SIR_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SIR LP MODE-->
            <field>
              <name>SIR_LP_MODE</name>
              <description>none</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SIR_LP_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--ADDITIONAL FEAT-->
            <field>
              <name>ADDITIONAL_FEAT</name>
              <description>none</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ADDITIONAL_FEAT</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO ACCESS-->
            <field>
              <name>FIFO_ACCESS</name>
              <description>none</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>FIFO_ACCESS</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO STAT-->
            <field>
              <name>FIFO_STAT</name>
              <description>none</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>FIFO_STAT</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SHADOW-->
            <field>
              <name>SHADOW</name>
              <description>none</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SHADOW</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--UART ADD ENCODED PARAMS-->
            <field>
              <name>UART_ADD_ENCODED_PARAMS</name>
              <description>none</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>UART_ADD_ENCODED_PARAMS</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--DMA EXTRA-->
            <field>
              <name>DMA_EXTRA</name>
              <description>none</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>DMA_EXTRA</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved1-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
            </field>
            <!--FIFO MODE-->
            <field>
              <name>FIFO_MODE</name>
              <description>none</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved3-->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- UCV: UART Component Version -->
        <!-- REGISTER 42 -->
        <register>
          <name>UCV</name>
          <description>UART Component Version</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x3430302A</resetValue>
          <fields>
            <!--  UART Component Version -->
            <field>
              <name>UART_COMP_VER</name>
              <description>This register contains UART Component Version.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CTR: Component Type Register -->
        <!-- REGISTER 43 -->
        <register>
          <name>CTR</name>
          <description>Component Type Register,This register contains the peripherals identification code
</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x44570110</resetValue>
          <fields>
            <!--  UART Component Version -->
            <field>
              <name>UART_COMP_VER</name>
              <description>This register contains the peripherals identification code.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--ULP_UART  -->
    <peripheral>
      <name>ULP_UART</name>
      <version>1.0</version>
      <description>Universal Asynchronous Receiver/Transmitter is for serial communication with peripherals,
          modems and datasets</description>
      <groupName>UART_USRT</groupName>
      <baseAddress>0x24041800</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>ULP_UART</name>
        <value>12</value>
      </interrupt>
      <registers>
        <!-- DLL: Divisor Latch Low Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>DLL</name>
          <description>Divisor Latch Low</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DL(H): Divisor Latch(Low) -->
            <field>
              <name>DLL</name>
              <description> Lower 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate
              divisor for the UART.
        </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- THR: Transmit Holding Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>THR</name>
          <description>Transmit Holding Register</description>
          <alternateRegister>DLL</alternateRegister>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- THR: Data to be transmitted on serial output port -->
            <field>
              <name>THR_LSB_8_Bits</name>
              <description>Data to be transmitted on serial output port </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--#change-->
            <field>
              <name>THR_MSB_9th_Bit</name>
              <description>Data to be transmitted on the serial output port(sout) in UART mode for the MSB 9th bit.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- RBR: Receive Buffer Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>RBR</name>
          <description>Receive Buffer Register</description>
          <alternateRegister>DLL</alternateRegister>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- RBR: Receive Buffer -->
            <field>
              <name>RBR_LSB_8_Bits</name>
              <description>Receive Buffer Field</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--#change-->
            <field>
              <name>RBR_MSB_9th_Bit</name>
              <description>Data byte received on the serial input port (sin) in UART mode for the MSB 9th bit.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IER: Interrupt Enable Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>IER</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x8F</resetMask>
          <fields>
            <!-- ERBFI: Enable Received Data Available Interrupt -->
            <field>
              <name>ERBFI</name>
              <description>Enable Received Data Available Interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Received Data Available Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Received Data Available Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ETBEI: Enable Transmit Holding Register Empty Interrupt -->
            <field>
              <name>ETBEI</name>
              <description>Enable Transmit Holding Register Empty Interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit Holding Register Empty Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit Holding Register Empty Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ELSI: Enable Receiver Line Status Interrupt -->
            <field>
              <name>ELSI</name>
              <description>Enable Receiver Line Status Interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Receiver Line Status Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Receiver Line Status Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- EDSSI: Enable Modem Status Interrupt -->
            <field>
              <name>EDSSI</name>
              <description>Enable Modem Status Interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Modem Status Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Modem Status Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[6:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- PTIME: Programmable THRE Interrupt Mode Enable -->
            <field>
              <name>PTIME</name>
              <description>Programmable THRE Interrupt Mode Enable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>generation of THRE Interrupt is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>generation of THRE Interrupt is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DLH: Divisor Latch High Register -->
        <!-- REGISTER 5 -->
        <register>
          <name>DLH</name>
          <description>Divisor Latch High</description>
          <alternateRegister>DLL</alternateRegister>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DL(H): Divisor Latch(High) -->
            <field>
              <name>DLH</name>
              <description> Upper 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate
              divisor for the UART
        </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- FCR: FIFO Control Register -->
        <!-- REGISTER 6 -->
        <register>
          <name>FCR</name>
          <description>FIFO Control Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- FIFOE: FIFO Enable -->
            <field>
              <name>FIFOE</name>
              <description>This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFIFOR: RCVR FIFO Reset -->
            <field>
              <name>RFIFOR</name>
              <description>RCVR FIFO Reset</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <!-- XFIFOR: XMIT FIFO Reset-->
            <field>
              <name>XFIFOR</name>
              <description>XMIT FIFO Reset</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <!-- DMAM: DMA Mode -->
            <field>
              <name>DMAM</name>
              <description>DMA signalling mode</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mode0</name>
                  <description> DMA Signalling mode0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode1</name>
                  <description>DMA Signalling mode1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TET: TX Empty Trigger -->
            <field>
              <name>TET</name>
              <description>TX Empty Trigger</description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_EMPTY</name>
                  <description> FIFO Empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_2_CHARACTER</name>
                  <description>2 characters in the FIFO</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_4_CHARACTER</name>
                  <description>FIFO 1/4 full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_2_CHARACTER</name>
                  <description>FIFO 1/2 full</description>
                  <value>3</value>
                </enumeratedValue>
                <usage>write</usage>
              </enumeratedValues>
            </field>
            <!-- RT: RCVR Trigger -->
            <field>
              <name>RT</name>
              <description>This is used to select the trigger level in the receiver FIFO at which
               the Received Data Available Interrupt is generated
        </description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <usage>write</usage>
                <enumeratedValue>
                  <name>FIFO_1_CHARACTER</name>
                  <description> 1 character in the FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_4_CHARACTER</name>
                  <description>FIFO 1/4 full</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_BY_2_CHARACTER</name>
                  <description>FIFO 1/2 full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_LESS_THAN_2_CHARACTER</name>
                  <description>FIFO 2 less than full</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IIR: Interrupt Identity Register -->
        <!-- REGISTER 7 -->
        <register>
          <name>IIR</name>
          <description>Interrupt Identity Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!-- IID: Interrupt ID -->
            <field>
              <name>IID</name>
              <description>Interrupt ID</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Modem_Status</name>
                  <description>modem status pending pending interrupt</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>No_Interrupt_Pending</name>
                  <description>This field indicates no interrupt pending status</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>THR_Empty</name>
                  <description>Transmit Holding Register Empty pending interrupt</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_Data_Available</name>
                  <description>Received Data Available pending interrupt</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receiver_Line_Status</name>
                  <description>Receive line status pending interrupt</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Busy_Detect</name>
                  <description>Busy detect pending interrupt</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Character_Timeout</name>
                  <description>Character Timeout pending interrupt</description>
                  <value>12</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserve1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[5:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFOSE: FIFOs Enabled -->
            <field>
              <name>FIFOSE</name>
              <description>This is used to indicate whether the FIFOs are enabled or
               disabled.
        </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>FIFO is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>FIFO is enabled</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserve2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- LCR: Line Control Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>LCR</name>
          <description>Line Control Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DLS: Data Length Select -->
            <field>
              <name>DLS</name>
              <description>Data Length Select,This is used to select the number of data bits per character that the peripheral transmits and receives
        </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>5_BITS_PER_CHARACTER</name>
                  <description> 5 bits per character </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>6_BITS_PER_CHARACTER</name>
                  <description>6 bits per character</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>7_BITS_PER_CHARACTER</name>
                  <description>7 bits per character</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>8_BITS_PER_CHARACTER</name>
                  <description>8 bits per character</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- STOP: Number of stop bits -->
            <field>
              <name>STOP</name>
              <description>This is used to select the number of stop bits per character that the peripheral transmits and receives</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1_STOP_BIT_PER_CHARACTER</name>
                  <description> 1 stop bit per character </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1_5_OR_2_STOPS_BIT_PER_CHARACTER</name>
                  <description>1.5 or 2 stop bits per character</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- PEN: Parity Enable -->
            <field>
              <name>PEN</name>
              <description>This bit is used to enable and disable parity generation and detection in transmitted and received serial character</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Parity_Disable</name>
                  <description> Parity disabled </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Parity_Enable</name>
                  <description> Parity Enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- EPS:Even Parity Select -->
            <field>
              <name>EPS</name>
              <description>This is used to select between even and odd parity</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Set_to_0</name>
                  <description> An odd number of logic 1s is transmitted or checked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Set_to_1</name>
                  <description> An even number of logic 1s is transmitted or checked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Stick Parity  -->
            <field>
              <name>STICK_PARITY</name>
              <description>This bit is used to force parity value</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOGIC0</name>
                  <description> When PEN, EPS, and Stick Parity are set to 1, the parity bit is transmitted and checked as logic 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LOGIC1</name>
                  <description> If PEN and Stick Parity are set to 1 and EPS is a logic 0,then parity bit is transmitted and checked as a logic 1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- BC : Break Control-->
            <field>
              <name>BC</name>
              <description>This is used to cause a break condition to be transmitted to the receiving device</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SERIAL_OUTPUT_SPACING_STATE</name>
                  <description> If set to 1, the serial output is forced to the spacing (logic 0) state</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DLAB : Divisor Latch Access Bit-->
            <field>
              <name>DLAB</name>
              <description>enable reading and writing of the Divisor Latch register, This bit must be cleared after initial baud rate set up </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCR: Modem Control Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>MCR</name>
          <description>Modem Control Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- DTR: Data Terminal Ready -->
            <field>
              <name>DTR</name>
              <description>This is used to directly control the Data Terminal Ready (dtr_n) output</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DTR_LOGIC1</name>
                  <description> dtr_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DTR_LOGIC0</name>
                  <description>dtr_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RTS: Request to Send -->
            <field>
              <name>RTS</name>
              <description>This is used to directly control the Request to Send (rts_n) output</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- OUT1:  -->
            <field>
              <name>OUT1</name>
              <description>This is used to directly control the user-designated Output1 (out1_n) output</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OUT1_LOGIC1</name>
                  <description> out1_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OUT1_LOGIC0</name>
                  <description>out1_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OUT2:   -->
            <field>
              <name>OUT2</name>
              <description>This is used to directly control the user-designated Output2 (out2_n) output</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OUT2_LOGIC1</name>
                  <description> out2_n de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OUT2_LOGIC0</name>
                  <description>out2_n asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- LB: Loop Back   -->
            <field>
              <name>LB</name>
              <description>This is used to put the UART into a diagnostic mode for test purposes</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AFCE: Auto Flow Control Enable  -->
            <field>
              <name>AFCE</name>
              <description>This is used to directly control the user-designated Output2 (out2_n) output</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Auto_Flow_Control</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description> Auto Flow Control Mode disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Auto Flow Control Mode enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SIRE: Serial Mode Enable  -->
            <field>
              <name>SIRE</name>
              <description>This is used to enable/disable the IrDA SIR Mode features</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>IrDA_SIR_Mode</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description> IrDA SIR Mode disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>IrDA SIR Mode enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- LSR: Line Status Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>LSR</name>
          <description>Line Status Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000060</resetValue>
          <fields>
            <!-- DR: Data Ready -->
            <field>
              <name>DR</name>
              <description>This is used to indicate that the receiver contains at least one character in the RBR or the receiver FIFO
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Data_Ready</name>
                  <description>No data Ready</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Data_Ready</name>
                  <description>Data Ready</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OE: Overrun Error  -->
            <field>
              <name>OE</name>
              <description>This is used to indicate the occurrence of an overrun error</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_OverRun_Error</name>
                  <description>no overrun error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OverRun_Error</name>
                  <description>overrun error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- PE: Parity Error  -->
            <field>
              <name>PE</name>
              <description>This is used to indicate the occurrence of a parity error in the receiver 
               if the Parity Enable (PEN) bit (LCR[3]) is set
        </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Parity_Error</name>
                  <description>no parity error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Parity_Error</name>
                  <description>parity error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FE: Framing Error  -->
            <field>
              <name>FE</name>
              <description>This is used to indicate the occurrence of a framing error in the receiver</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Framing_Error</name>
                  <description>no framing error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Framing_Error</name>
                  <description>framing error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- BI: Break Interrupt  -->
            <field>
              <name>BI</name>
              <description>his is used to indicate the detection of a break sequence on the serial input data</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- THRE: Transmit Holding Register Empty  -->
            <field>
              <name>THRE</name>
              <description>Transmit Holding Register Empty bit</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TEMT: Transmitter Empty -->
            <field>
              <name>TEMT</name>
              <description>Transmitter Empty bit</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RFE: Receiver FIFO Error  -->
            <field>
              <name>RFE</name>
              <description>This is used to indicate if there is at least one parity error,framing error, or break indication in the FIFO
        </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Error_in_RX_FIFO</name>
                  <description>no error in RX FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Error_in_RX_FIFO</name>
                  <description>error in RX FIFO</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--ADDR_RCVD-->
            <field>
              <name>ADDR_RCVD</name>
              <description>Address Received bit,If 9-bit data mode (LCR_EXT[0]=1) is enabled, this bit is used to indicate that the 9th bit of the receive data is set to 1.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Character_is_Address</name>
                  <description>Indicates that the character is an address.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Character_is_Data</name>
                  <description>Indicates that the character is data.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MSR: Modem Status Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>MSR</name>
          <description>Modem Status Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- DCTS: Delta Clear to Send -->
            <field>
              <name>DCTS</name>
              <description>This is used to indicate that the modem control line cts_n has changed since the last time the MSR was read
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>change_on_cts_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on cts_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on cts_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DDSR: Delta Data Set Ready-->
            <field>
              <name>DDSR</name>
              <description>This is used to indicate that the modem control line dsr_n has changed since the last time the MSR was read
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_dsr_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on dsr_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on dsr_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TERI: Trailing Edge of Ring Indicator-->
            <field>
              <name>TERI</name>
              <description>This is used to indicate that a change on the input ri_n(from an active-low to an inactive-high state)has occurred since the last time the MSR was read
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_ri_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on ri_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on ri_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DDCD: Delta Data Carrier Detect-->
            <field>
              <name>DDCD</name>
              <description>This is used to indicate that the modem control line dcd_n has 
			               changed since the last time the MSR was read
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Change_on_dcd_n</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Change</name>
                  <description>no change on dcd_n since last read of MSR</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Change</name>
                  <description>change on dcd_n since last read of MSR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- CTS: Clear to Send -->
            <field>
              <name>CTS</name>
              <description>This is used to indicate the current state of the modem control line cts_n</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>cts_n_Input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>cts_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>cts_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DSR: Data Set Ready -->
            <field>
              <name>DSR</name>
              <description>This is used to indicate the current state of the modem control line dsr_n</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>dsr_n_Input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>dsr_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>dsr_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RI: Ring Indicator -->
            <field>
              <name>RI</name>
              <description>This is used to indicate the current state of the modem control line ri_n</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ri_n_input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>ri_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>ri_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DCD: Data Carrier Detect -->
            <field>
              <name>DCD</name>
              <description>This is used to indicate the current state of the modem control line dcd_n</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>dcd_n_input</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Deasserted</name>
                  <description>dcd_n input is de-asserted (logic 1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Asserted</name>
                  <description>dcd_n input is asserted (logic 0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SCR: Scratch pad Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>SCR</name>
          <description>Scratch pad Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- Scratch pad -->
            <field>
              <name>SCRATCH_PAD</name>
              <description>This register is for programmers to use as a temporary storage space. It has no defined purpose</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- LPDLL : Low Power Divisor Latch Low Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>LPDLL</name>
          <description>Low Power Divisor Latch Low Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- LOW POWER DLL -->
            <field>
              <name>LPDLL</name>
              <description>This register makes up the lower 8-bits of a 16-bit, read/write,
                           Low Power Divisor Latch register that contains the baud rate
                           divisor for the UART, which must give a baud rate of 115.2K
       </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- LPDLH : Low Power Divisor Latch High Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>LPDLH</name>
          <description>Low Power Divisor Latch High Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- LOW_POWER_DLH -->
            <field>
              <name>LPDLH</name>
              <description>This register makes up the upper 8-bits of a 16-bit, read/write,
                           Low Power Divisor Latch register that contains the baud rate
                           divisor for the UART, which must give a baud rate of 115200
       </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--Shadow RBR-->
        <!--REGISTER 15-->
        <register>
          <name>SRBR</name>
          <description>Shadow Receive Buffer Register</description>
          <alternateRegister>STHR</alternateRegister>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--SRBR: Receive Buffer -->
            <field>
              <name>SRBR_LSB_8_Bits</name>
              <description>This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--#change, added-->
            <field>
              <name>SRBR_MSB_9th_Bit</name>
              <description>This is a shadow register for the RBR[8] bit.It is applicable only when UART_9BIT_DATA_EN=1.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--Shadow THR-->
        <!--REGISTER 16-->
        <register>
          <name>STHR</name>
          <description>Transmit Holding Register</description>
          <alternateRegister>SRBR</alternateRegister>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- THR: Data to be transmitted on serial output port -->
            <field>
              <name>STHR_LSB_8_Bits</name>
              <description>Data to be transmitted on serial output port </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--#change-->
            <field>
              <name>STHR_MSB_9th_Bit</name>
              <description>This is a shadow register for the THR[8] bit.It is applicable only when UART_9BIT_DATA_EN=1</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- FIFO Access Register-->
        <!-- REGISTER 17 -->
        <register>
          <name>FAR</name>
          <description>This register is use to enable a FIFO access mode for testing,</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- FIFO Access Register -->
            <field>
              <name>FIFO_Access</name>
              <description>This register is use to enable a FIFO access mode for testing,</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Transmit FIFO Read -->
        <!-- REGISTER 18 -->
        <register>
          <name>TFR</name>
          <description>Reading this register gives the data at the top of the transmit FIFO.Each consecutive read pops the transmit FIFO and gives next data in FIFO</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Transmit FIFO Read -->
            <field>
              <name>TX_FIFO_RD</name>
              <description>Transmit FIFO Read
        </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- Receive FIFO Write -->
        <!-- REGISTER 19 -->
        <register>
          <name>RFW</name>
          <description>none</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RFWD -->
            <field>
              <name>RFWD</name>
              <description>Receive FIFO Write Data
        </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFPE -->
            <field>
              <name>RFPE</name>
              <description>Receive FIFO Parity Error
        </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFFE -->
            <field>
              <name>RFFE</name>
              <description>Receive FIFO Framing Error
        </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- USR: UART Status Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>USR</name>
          <description>UART Status Register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- BUSY : UART Busy -->
            <field>
              <name>BUSY</name>
              <description>Indicates that a serial transfer is in progress</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>UART_IDLE</name>
                  <description>UART is idle or inactive</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART_BUSY</name>
                  <description>UART is busy (actively transferring data)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFNF : Transmit FIFO Not Full -->
            <field>
              <name>TFNF</name>
              <description>To Indicate that the transmit FIFO is not full</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Transmit_FIFO_Full</name>
                  <description>Transmit FIFO is full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit_FIFO_Not_Full</name>
                  <description>Transmit FIFO is not full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFE : Transmit FIFO Empty -->
            <field>
              <name>TFE</name>
              <description>To Indicate that the transmit FIFO is completely empty</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Transmit_FIFO_Empty</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit_FIFO_Empty</name>
                  <description>Transmit FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFNE : Receive FIFO Not Empty -->
            <field>
              <name>RFNE</name>
              <description>To Indicate that the receive FIFO contains one or more entries</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Receive_FIFO_Empty</name>
                  <description>Receive FIFO is empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive FIFO_Not_Empty</name>
                  <description>Receive FIFO is not empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFE : Receive FIFO Full -->
            <field>
              <name>RFE</name>
              <description>To Indicate that the receive FIFO is completely full</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Receive_FIFO_Not_Full</name>
                  <description>Receive FIFO not full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_FIFO_Full</name>
                  <description>Receive FIFO Full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- TFL: Transmit FIFO Level -->
        <!-- REGISTER 21 -->
        <register>
          <name>TFL</name>
          <description>Transmit FIFO Level</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- FIFO_ADDR_WIDTH -->
            <field>
              <name>Transmit_FIFO_Level</name>
              <description>Transmit FIFO Level. This is indicates the number of data entries in the transmit FIFO.</description>
              <bitRange>[29:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RFL: Receive FIFO Level -->
        <!-- REGISTER 22 -->
        <register>
          <name>RFL</name>
          <description>Receive FIFO Level</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- FIFO ADDR WIDTH -->
            <field>
              <name>Receive_FIFO_Level</name>
              <description>Receive FIFO Level. This is indicates the number of data entries in the receive FIFO.</description>
              <bitRange>[29:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRR: Software Reset Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>SRR</name>
          <description>Software Reset Register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- UR -->
            <field>
              <name>UR</name>
              <description>UART Reset</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RFR -->
            <field>
              <name>RFR</name>
              <description>RCVR FIFO Reset</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <!-- XFR -->
            <field>
              <name>XFR</name>
              <description>XMIT FIFO Reset</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRTS: Shadow Request to Send -->
        <!-- REGISTER 24 -->
        <register>
          <name>SRTS</name>
          <description>Shadow Request to Send</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow Request to Send -->
            <field>
              <name>SRTS</name>
              <description>Shadow Request to Send.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SBCR: Shadow Break Control Register -->
        <!-- REGISTER 25 -->
        <register>
          <name>SBCR</name>
          <description>Shadow Break Control Register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow Break Control Register -->
            <field>
              <name>SBCR</name>
              <description>Shadow Break Control Bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SDMAM:Shadow DMA Mode -->
        <!-- REGISTER 26 -->
        <register>
          <name>SDMAM</name>
          <description>Shadow DMA Mode</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow DMA Mode -->
            <field>
              <name>SDMAM</name>
              <description>Shadow DMA Mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MODE0</name>
                  <description>mode 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MODE1</name>
                  <description>mode 1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SFE:Shadow FIFO Enable -->
        <!-- REGISTER 27 -->
        <register>
          <name>SFE</name>
          <description>Shadow FIFO Enable</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow FIFO Enable -->
            <field>
              <name>Shadow_FIFO_En</name>
              <description>Shadow FIFO Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SRT:Shadow RCVR Trigger -->
        <!-- REGISTER 28 -->
        <register>
          <name>SRT</name>
          <description>Shadow RCVR Trigger</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow RCVR Trigger -->
            <field>
              <name>SRCVRT</name>
              <description>Shadow RCVR Trigger</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1_Character_in_FIFO</name>
                  <description>1 Character in FIFO</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_4th_Full</name>
                  <description>FIFO 1/4th Full</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_Half_Full</name>
                  <description>FIFO 1/2 Full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_2_Less_than_Full</name>
                  <description>FIFO 2 Less than Full</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- STET:Shadow TX Empty Trigger-->
        <!-- REGISTER 29 -->
        <register>
          <name>STET</name>
          <description>Shadow TX Empty Trigger</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- Shadow TX Empty Trigger -->
            <field>
              <name>STXET</name>
              <description>Shadow TX Empty Trigger</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_Empty</name>
                  <description>FIFO Empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2_Characters_in_FIFO</name>
                  <description>2 Characters in FIFO</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_1_4th_Full</name>
                  <description>FIFO 1/4th Full</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_Half_Full</name>
                  <description>FIFO 1/2 Full</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- HTX: Halt transmit -->
        <!-- REGISTER 30 -->
        <register>
          <name>HTX</name>
          <description>Halt Transmit</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!--  Halt TX -->
            <field>
              <name>HALT_TX</name>
              <description>This register is use to halt transmissions for testing</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Halt_TX</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>Halt TX disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Halt TX enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMASA: DMA Software Acknowledge -->
        <!-- REGISTER 31 -->
        <register>
          <name>DMASA</name>
          <description>DMA Software Acknowledge</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01</resetMask>
          <fields>
            <!--  DMA Software Acknowledge -->
            <field>
              <name>DMA_SOFTWARE_ACK</name>
              <description>This register is use to perform a DMA software acknowledge if a transfer needs to be terminated due to an error condition
        </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- TCR:Transceiver Control Register-->
        <!-- REGISTER 32 -->
        <register>
          <name>TCR</name>
          <description>Transceiver Control Register.</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000006</resetValue>
          <fields>
            <!--RS485 EN-->
            <field>
              <name>RS485_EN</name>
              <description>RS485 Transfer Enable.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RE POL-->
            <field>
              <name>RE_POL</name>
              <description>Receiver Enable Polarity.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>RE_Signal</name>
                <enumeratedValue>
                  <name>Active_Low</name>
                  <description>RE signal is active low</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active_High</name>
                  <description>RE signal is active high</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--DE POL-->
            <field>
              <name>DE_POL</name>
              <description>Driver Enable Polarity.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>DE_Signal</name>
                <enumeratedValue>
                  <name>Active_Low</name>
                  <description>DE signal is active low</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active_High</name>
                  <description>DE signal is active high</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--XFER MODE-->
            <field>
              <name>XFER_MODE</name>
              <description>Transfer Mode.</description>
              <bitRange>[4:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--DE_EN-->
        <!-- REGISTER 33-->
        <register>
          <name>DE_EN</name>
          <description>Driver Output Enable Register.</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DE EN -->
            <field>
              <name>DE_EN</name>
              <description>DE Enable control.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>DE_Signal</name>
                <enumeratedValue>
                  <name>Deassert</name>
                  <description>De-assert 'de' signal</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert 'de' signal</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--RE_EN-->
        <!-- REGISTER 34-->
        <register>
          <name>RE_EN</name>
          <description>Receiver Output Enable Register.</description>
          <addressOffset>0xB4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RE EN-->
            <field>
              <name>RE_EN</name>
              <description>RE Enable control.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>RE_Signal</name>
                <enumeratedValue>
                  <name>Deassert</name>
                  <description>De-assert 're' signal</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Assert</name>
                  <description>Assert 're' signal</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--DET-->
        <!-- REGISTER 35-->
        <register>
          <name>DET</name>
          <description>Driver Output Enable Timing Register.</description>
          <addressOffset>0xB8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DE ASSERT TIME-->
            <field>
              <name>DE_ASSERT_TIME</name>
              <description>Driver enable assertion time.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED0</name>
              <description>reserved.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--DE DE ASSERT TIME-->
            <field>
              <name>DE_DE_ASSERT_TIME</name>
              <description>Driver enable de-assertion time.</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--TAT-->
        <!-- REGISTER 36-->
        <register>
          <name>TAT</name>
          <description>TurnAround Timing Register</description>
          <addressOffset>0xBC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DE RE-->
            <field>
              <name>DE_RE</name>
              <description>Driver Enable to Receiver Enable TurnAround time.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RE DE-->
            <field>
              <name>RE_DE</name>
              <description>Receiver Enable to Driver Enable TurnAround time.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--DLF-->
        <!-- REGISTER 37-->
        <register>
          <name>DLF</name>
          <description>Divisor Latch Fraction Register.</description>
          <addressOffset>0xC0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DLF-->
            <field>
              <name>DLF_Val</name>
              <description>Fractional part of divisor.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--RAR-->
        <!-- REGISTER 38-->
        <register>
          <name>RAR</name>
          <description>Receive Address Register.</description>
          <addressOffset>0xC4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RAR-->
            <field>
              <name>RAR</name>
              <description>This is an address matching register during receive mode.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--TAR-->
        <!-- REGISTER 39-->
        <register>
          <name>TAR</name>
          <description>Transmit Address Register.</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--TAR-->
            <field>
              <name>TAR</name>
              <description>This is an address matching register during transmit mode.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--LCR EXT-->
        <!-- REGISTER 40-->
        <register>
          <name>LCR_EXT</name>
          <description>Line Extended Control Register</description>
          <addressOffset>0xCC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--DLS E-->
            <field>
              <name>DLS_E</name>
              <description>Extension for DLS.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ADDR MATCH-->
            <field>
              <name>ADDR_MATCH</name>
              <description>Address Match Mode.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--SEND ADDR-->
            <field>
              <name>SEND_ADDR</name>
              <description>Send address control bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--TRANSMIT MODE-->
            <field>
              <name>TRANSMIT_MODE</name>
              <description>Transmit mode control bit.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CPR:Component Parameter Register-->
        <!-- REGISTER 41 -->
        <register>
          <name>CPR</name>
          <description>Component Parameter Register</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0X000125F2</resetValue>
          <fields>
            <!--  APB DATA WIDTH -->
            <field>
              <name>APB_DATA_WIDTH</name>
              <description>APB data width register.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>APB_DATA_WIDTH</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>8_BIT</name>
                  <description>APB Data Width 8 BIT</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16_BIT</name>
                  <description>APB Data Width 16 BIT</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>32_BIT</name>
                  <description>APB Data Width 32 BIT</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RESERVED</name>
                  <description>Reserved</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--AFCE MODE-->
            <field>
              <name>AFCE_MODE</name>
              <description>none</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>AFCE_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--THRE MODE-->
            <field>
              <name>THRE_MODE</name>
              <description>none</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>THRE_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SIR MODE-->
            <field>
              <name>SIR_MODE</name>
              <description>none</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SIR_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SIR LP MODE-->
            <field>
              <name>SIR_LP_MODE</name>
              <description>none</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SIR_LP_MODE</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--ADDITIONAL FEAT-->
            <field>
              <name>ADDITIONAL_FEAT</name>
              <description>none</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ADDITIONAL_FEAT</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO ACCESS-->
            <field>
              <name>FIFO_ACCESS</name>
              <description>none</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>FIFO_ACCESS</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO STAT-->
            <field>
              <name>FIFO_STAT</name>
              <description>none</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>FIFO_STAT</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SHADOW-->
            <field>
              <name>SHADOW</name>
              <description>none</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SHADOW</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--UART ADD ENCODED PARAMS-->
            <field>
              <name>UART_ADD_ENCODED_PARAMS</name>
              <description>none</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>UART_ADD_ENCODED_PARAMS</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--DMA EXTRA-->
            <field>
              <name>DMA_EXTRA</name>
              <description>none</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>DMA_EXTRA</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>TRUE</name>
                  <description>True</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FALSE</name>
                  <description>False</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved1-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
            </field>
            <!--FIFO MODE-->
            <field>
              <name>FIFO_MODE</name>
              <description>none</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved3-->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- UCV: UART Component Version -->
        <!-- REGISTER 42 -->
        <register>
          <name>UCV</name>
          <description>UART Component Version</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x3430302A</resetValue>
          <fields>
            <!--  UART Component Version -->
            <field>
              <name>UART_COMP_VER</name>
              <description>This register contains UART Component Version.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CTR: Component Type Register -->
        <!-- REGISTER 43 -->
        <register>
          <name>CTR</name>
          <description>Component Type Register,This register contains the peripherals identification code
</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x44570110</resetValue>
          <fields>
            <!--  UART Component Version -->
            <field>
              <name>UART_COMP_VER</name>
              <description>This register contains the peripherals identification code.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- GSPI Master -->
    <peripheral>
      <name>GSPI_Master</name>
      <version>1.0</version>
      <description>GSPI, or Generic SPI, is a module which has been derived from QSPI. GSPI can act only as a master
	    </description>
      <groupName>GSPI</groupName>
      <baseAddress>0x45030000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0xc0</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>GSPI0</name>
        <value>46</value>
      </interrupt>
      <registers>
        <!-- GSPI_CLK_CONFIG : GSPI Clock Configuration Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>GSPI_CLK_CONFIG</name>
          <description>GSPI Clock Configuration Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000004</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- GSPI_CLK_SYNC -->
            <field>
              <name>GSPI_CLK_SYNC</name>
              <description>If the clock frequency to FLASH (spi_clk) and SOC clk is same.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Divided SOC clock is connected SCLK. Division value is programmable</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>SCLK clock and SOC clock are same</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_CLK_EN -->
            <field>
              <name>GSPI_CLK_EN</name>
              <description>GSPI clock enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Dynamic clock gating is enabled in side GSPI controller</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Full time clock is enabled for GSPI controller.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved for future use</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_BUS_MODE : GSPI Bus Mode Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>GSPI_BUS_MODE</name>
          <description>GSPI Bus Mode Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <!-- GSPI_DATA_SAMPLE_EDGE-->
            <field>
              <name>GSPI_DATA_SAMPLE_EDGE</name>
              <description>Samples MISO data on clock edges. This should be ZERO for mode3 clock</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Pos edge of loop back spi_pad_clk</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Neg edge of loop back spi_pad_clk</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_CLK_MODE_CSN0-->
            <field>
              <name>GSPI_CLK_MODE_CSN0</name>
              <description>NONE</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Mode 0, GSPI_CLK is low when GSPI_CS is high for chip select0 (csn0)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Mode 3, GSPI_CLK is high when GSPI_CS is high for chip select0 (csn0)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_CLK_MODE_CSN1-->
            <field>
              <name>GSPI_CLK_MODE_CSN1</name>
              <description>NONE</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Mode 0, GSPI_CLK is low when GSPI_CS is high for chip select1 (csn1)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Mode 3, GSPI_CLK is high when GSPI_CS is high for chip select1 (csn1)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_CLK_MODE_CSN2-->
            <field>
              <name>GSPI_CLK_MODE_CSN2</name>
              <description>NONE</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Mode 0, GSPI_CLK is low when GSPI_CS is high for chip select2 (csn2)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Mode 3, GSPI_CLK is high when GSPI_CS is high for chip select2 (csn2)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_CLK_MODE_CSN3-->
            <field>
              <name>GSPI_CLK_MODE_CSN3</name>
              <description>NONE</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Mode 0, GSPI_CLK is low when GSPI_CS is high for chip select3 (csn3)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Mode 3, GSPI_CLK is high when GSPI_CS is high for chip select3 (csn3)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_GPIO_MODE_ENABLES-->
            <field>
              <name>GSPI_GPIO_MODE_ENABLES</name>
              <description>These bits are used to map GSPI on GPIO pins</description>
              <bitRange>[10:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SPI_HIGH_PERFORMANCE_EN-->
            <field>
              <name>SPI_HIGH_PERFORMANCE_EN</name>
              <description>High performance features are enabled when this bit is set to one</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved for future use</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_CONFIG1 : GSPI Configuration 1 Register  -->
        <!-- REGISTER 3 -->
        <register>
          <name>GSPI_CONFIG1</name>
          <description>GSPI Configuration 1 Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- GSPI_MANUAL_CSN -->
            <field>
              <name>GSPI_MANUAL_CSN</name>
              <description>SPI CS in manual mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GSPI_MANUAL_WR -->
            <field>
              <name>GSPI_MANUAL_WR</name>
              <description>Write enable for manual mode when CS is low.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GSPI_MANUAL_RD -->
            <field>
              <name>GSPI_MANUAL_RD</name>
              <description>Read enable for manual mode when CS is low</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GSPI_MANUAL_RD_CNT -->
            <field>
              <name>GSPI_MANUAL_RD_CNT</name>
              <description>Indicates total number of bytes to be read</description>
              <bitRange>[12:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GSPI_MANUAL_CSN_SELECT -->
            <field>
              <name>GSPI_MANUAL_CSN_SELECT</name>
              <description>Indicates which CSn is valid. Can be programmable in manual mode</description>
              <bitRange>[14:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SPI_FULL_DUPLEX_EN -->
            <field>
              <name>SPI_FULL_DUPLEX_EN</name>
              <description>Full duplex mode enable</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Full duplex mode disabled.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Full duplex mode enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_CONFIG2 : GSPI Configuration 2 Register  -->
        <!-- REGISTER 4 -->
        <register>
          <name>GSPI_CONFIG2</name>
          <description>GSPI Manual Configuration 2 Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000001F0</resetValue>
          <resetMask>0xFFF</resetMask>
          <fields>
            <!-- GSPI_WR_DATA_SWAP_MNL_CSN0-->
            <field>
              <name>GSPI_WR_DATA_SWAP_MNL_CSN0</name>
              <description>Swap the write data inside the GSPI controller it-self.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn0.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn0.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_WR_DATA_SWAP_MNL_CSN1-->
            <field>
              <name>GSPI_WR_DATA_SWAP_MNL_CSN1</name>
              <description>Swap the write data inside the GSPI controller it-self.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_WR_DATA_SWAP_MNL_CSN2-->
            <field>
              <name>GSPI_WR_DATA_SWAP_MNL_CSN2</name>
              <description>Swap the write data inside the GSPI controller it-self.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn2</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_WR_DATA_SWAP_MNL_CSN3-->
            <field>
              <name>GSPI_WR_DATA_SWAP_MNL_CSN3</name>
              <description>Swap the write data inside the GSPI controller it-self.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn3</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn3</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_RD_DATA_SWAP_MNL_CSN0-->
            <field>
              <name>GSPI_RD_DATA_SWAP_MNL_CSN0</name>
              <description>Swap the read data inside the GSPI controller it-self.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_RD_DATA_SWAP_MNL_CSN1-->
            <field>
              <name>GSPI_RD_DATA_SWAP_MNL_CSN1</name>
              <description>Swap the read data inside the GSPI controller it-self.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_RD_DATA_SWAP_MNL_CSN2-->
            <field>
              <name>GSPI_RD_DATA_SWAP_MNL_CSN2</name>
              <description>Swap the read data inside the GSPI controller it-self.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn2</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_RD_DATA_SWAP_MNL_CSN3-->
            <field>
              <name>GSPI_RD_DATA_SWAP_MNL_CSN3</name>
              <description>Swap the read data inside the GSPI controller it-self.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn3</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn3</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_MANUAL_SIZE_FRM_REG-->
            <field>
              <name>GSPI_MANUAL_SIZE_FRM_REG</name>
              <description>Manual reads and manual writes</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>1 Byte  8 bit mode </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>2 Bytes  16 bit mode </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved for future use</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TAKE_GSPI_MANUAL_WR_SIZE_FRM_REG-->
            <field>
              <name>TAKE_GSPI_MANUAL_WR_SIZE_FRM_REG</name>
              <description>NONE</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No action</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Take write size from Manual config register1[20:19]</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved for future use</description>
              <bitRange>[31:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_WRITE_DATA2 : GSPI Manual Write Data 2 Register  -->
        <!-- REGISTER 5 -->
        <register>
          <name>GSPI_WRITE_DATA2</name>
          <description>GSPI Write Data 2 Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x8F</resetMask>
          <fields>
            <!-- GSPI_MANUAL_WRITE_DATA2-->
            <field>
              <name>GSPI_MANUAL_WRITE_DATA2</name>
              <description>Number of bits to be written in write mode</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved for future use</description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- USE_PREV_LENGTH-->
            <field>
              <name>USE_PREV_LENGTH</name>
              <description>Use previous length</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No action</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Uses previously programmed length in [3:0] of this register for next writes</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved for future use</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_FIFO_THRLD : GSPI FIFO Threshold Register  -->
        <!-- REGISTER 6 -->
        <register>
          <name>GSPI_FIFO_THRLD</name>
          <description>GSPI FIFO Threshold Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000C7</resetValue>
          <resetMask>0x3FF</resetMask>
          <fields>
            <!-- FIFO_AEMPTY_THRLD-->
            <field>
              <name>FIFO_AEMPTY_THRLD</name>
              <description>FIFO almost empty threshold</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- FIFO_AFULL_THRLD-->
            <field>
              <name>FIFO_AFULL_THRLD</name>
              <description>FIFO almost full threshold</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- WFIFO_RESET-->
            <field>
              <name>WFIFO_RESET</name>
              <description>Write FIFO reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RFIFO_RESET-->
            <field>
              <name>RFIFO_RESET</name>
              <description>read FIFO reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved for future use</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_STATUS : GSPI Manual Status Register  -->
        <!-- REGISTER 7 -->
        <register>
          <name>GSPI_STATUS</name>
          <description>GSPI Status Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000588</resetValue>
          <resetMask>0x7FF</resetMask>
          <fields>
            <!-- GSPI_busy-->
            <field>
              <name>GSPI_BUSY</name>
              <description>State of Manual mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>GSPI controller is IDLE in Manual mode.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>A read, write or dummy cycle operation is in process in manual mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_S-->
            <field>
              <name>FIFO_FULL_WFIFO_S</name>
              <description>Full status indication for Wfifo in manual mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_AFULL_WFIFO_S-->
            <field>
              <name>FIFO_AFULL_WFIFO_S</name>
              <description>Almost full status indication for Wfifo in manual mode</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_EMPTY_WFIFO-->
            <field>
              <name>FIFO_EMPTY_WFIFO</name>
              <description>Empty status indication for Wfifo in manual mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved for future use</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_FULL_RFIFO-->
            <field>
              <name>FIFO_FULL_RFIFO</name>
              <description>Full status indication for Rfifo in manual mode</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved for future use</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_EMPTY_RFIFO_S-->
            <field>
              <name>FIFO_EMPTY_RFIFO_S</name>
              <description>Empty status indication for Rfifo in manual mode</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_S-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_S</name>
              <description>Aempty status indication for Rfifo in manual mode</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- GSPI_MANUAL_RD_CNT-->
            <field>
              <name>GSPI_MANUAL_RD_CNT</name>
              <description>This is a result of 10 bits ORing counter</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No read transactions are in pending</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read transactions are in pending ( to be done)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- GSPI_MANUAL_CSN-->
            <field>
              <name>GSPI_MANUAL_CSN</name>
              <description>Provide the status of chip select signal</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Active</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Inactive</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED3</name>
              <description>reserved for future use</description>
              <bitRange>[31:11]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_INTR_MASK : GSPI Interrupt Mask Register  -->
        <!-- REGISTER 8 -->
        <register>
          <name>GSPI_INTR_MASK</name>
          <description>GSPI Interrupt Mask Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- GSPI_INTR_MASK-->
            <field>
              <name>GSPI_INTR_MASK</name>
              <description>GSPI Interrupt mask bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>mask the GSPI intr</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_MASK-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_MASK</name>
              <description>NONE</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo almost empty intr mask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_RFIFO_MASK-->
            <field>
              <name>FIFO_AFULL_RFIFO_MASK</name>
              <description>NONE</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>read fifo almost full intr mask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_WFIFO_MASK-->
            <field>
              <name>FIFO_AEMPTY_WFIFO_MASK</name>
              <description>NONE</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo almost empty intr mask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Fifo_afull_wfifo_mask-->
            <field>
              <name>FIFO_AFULL_WFIFO_MASK</name>
              <description>NONE</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write fifo almost full intr mask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Fifo_full_wfifo_mask-->
            <field>
              <name>FIFO_FULL_WFIFO_MASK</name>
              <description>NONE</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo full intr mask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Fifo_empty_rfifo_mask-->
            <field>
              <name>FIFO_EMPTY_RFIFO_MASK</name>
              <description>NONE</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo is empty intr mask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved for future use</description>
              <bitRange>[31:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_INTR_UNMASK : GSPI Interrupt Unmask Register  -->
        <!-- REGISTER 9 -->
        <register>
          <name>GSPI_INTR_UNMASK</name>
          <description>GSPI Interrupt Unmask Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- GSPI_INTR_UNMASK-->
            <field>
              <name>GSPI_INTR_UNMASK</name>
              <description>GSPI Interrupt unmask bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>unmask the GSPI intr</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_UNMASK-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_UNMASK</name>
              <description>NONE</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo almost empty intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_RFIFO_UNMASK-->
            <field>
              <name>FIFO_AFULL_RFIFO_UNMASK</name>
              <description>NONE</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>read fifo almost full intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_WFIFO_UNMASK-->
            <field>
              <name>FIFO_AEMPTY_WFIFO_UNMASK</name>
              <description>NONE</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo almost empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_WFIFO_UNMASK-->
            <field>
              <name>FIFO_AFULL_WFIFO_UNMASK</name>
              <description>NONE</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write fifo almost full intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_UNMASK-->
            <field>
              <name>FIFO_FULL_WFIFO_UNMASK</name>
              <description>NONE</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo full intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_EMPTY_RFIFO_UNMASK-->
            <field>
              <name>FIFO_EMPTY_RFIFO_UNMASK</name>
              <description>NONE</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo is empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved for future use</description>
              <bitRange>[31:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_INTR_STS : GSPI Interrupt Status Register  -->
        <!-- REGISTER 10 -->
        <register>
          <name>GSPI_INTR_STS</name>
          <description>GSPI Interrupt Status Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000042</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- GSPI_INTR_LVL-->
            <field>
              <name>GSPI_INTR_LVL</name>
              <description>GSPI Interrupt status bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>no interrupt</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>GSPI raised a interrupt</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_LVL-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_LVL</name>
              <description>NONE</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Read fifo does not reach almost empty threshold.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo reached almost empty threshold</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESERVED1</name>
              <description>reserved for future use</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_AFULL_WFIFO_LVL-->
            <field>
              <name>FIFO_AFULL_WFIFO_LVL</name>
              <description>NONE</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Write fifo not reached almost full threshold</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write fifo almost full threshold</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_LVL-->
            <field>
              <name>FIFO_FULL_WFIFO_LVL</name>
              <description>NONE</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write fifo not full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_EMPTY_RFIFO_LVL-->
            <field>
              <name>FIFO_EMPTY_RFIFO_LVL</name>
              <description>NONE</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Read fifo is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved for future use</description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_INTR_ACK : GSPI Interrupt Acknowledge Register  -->
        <!-- REGISTER 11 -->
        <register>
          <name>GSPI_INTR_ACK</name>
          <description>GSPI Interrupt Acknowledge Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!--GSPI_INTR_ACK-->
            <field>
              <name>GSPI_INTR_ACK</name>
              <description>GSPI Interrupt status bit</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>GSPI intr ack.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_ACK-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_ACK</name>
              <description>NONE</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo almost empty intr ack</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:2]</bitRange>
              <access>write-only</access>
            </field>
            <!-- FIFO_AFULL_WFIFO_ACK-->
            <field>
              <name>FIFO_AFULL_WFIFO_ACK</name>
              <description>NONE</description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write fifo almost full intr ack</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_ACK-->
            <field>
              <name>FIFO_FULL_WFIFO_ACK</name>
              <description>NONE</description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo full intr ack</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_EMPTY_RFIFO_ACK-->
            <field>
              <name>FIFO_EMPTY_RFIFO_ACK</name>
              <description>NONE</description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo is empty intr ack</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:7]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_STS_MC : GSPI State Machine Monitor Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>GSPI_STS_MC</name>
          <description>GSPI State Machine Monitor Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--BUS_CTRL_PSTATE-->
            <field>
              <name>BUS_CTRL_PSTATE</name>
              <description>Provides SPI bus controller present state</description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--SPI_RD_CNT-->
            <field>
              <name>SPI_RD_CNT</name>
              <description>number of pending bytes to be read by device</description>
              <bitRange>[15:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_CLK_DIV : GSPI Clock Division Factor Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>GSPI_CLK_DIV</name>
          <description>GSPI Clock Division Factor Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!--GSPI_CLK_DIV_FACTOR-->
            <field>
              <name>GSPI_CLK_DIV_FACTOR</name>
              <description>Provides GSPI clock division factor to the clock divider, 
						   which takes SOC clock as input clock and generates required clock according to division factor</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_CONFIG3 : GSPI Configuration 3 Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>GSPI_CONFIG3</name>
          <description>GSPI Configuration 3 Register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--SPI_MANUAL_RD_LNTH_TO_BC-->
            <field>
              <name>SPI_MANUAL_RD_LNTH_TO_BC</name>
              <description>Bits are used to indicate the total number of bytes to read from flash during read operation</description>
              <bitRange>[14:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:15]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- GSPI_WRITE_FIFO : GSPI FIFO Register -->
        <!-- REGISTER 15 -->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>GSPI_WRITE_FIFOn</name>
          <description>GSPI FIFO 0 to 16 </description>
          <alternateCluster>GSPI_READ_FIFOn</alternateCluster>
          <addressOffset>0x80</addressOffset>
          <register>
            <name>GSPI_WRITE_FIFO_n_</name>
            <description>GSPI Fifo _n_</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <!--WRITE_FIFO-->
              <field>
                <name>WRITE_FIFO</name>
                <description>FIFO data is write to this address space</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- GSPI_READ_FIFO : GSPI FIFO Register -->
        <!-- REGISTER 16 -->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>GSPI_READ_FIFOn</name>
          <description>GSPI FIFO 0 to 16 </description>
          <alternateCluster>GSPI_WRITE_FIFOn</alternateCluster>
          <addressOffset>0x80</addressOffset>
          <register>
            <name>GSPI_READ_FIFO_n_</name>
            <description>GSPI READ FIFO</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <!--READ_FIFO-->
              <field>
                <name>READ_FIFO</name>
                <description>FIFO data is read from this address space</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
      </registers>
    </peripheral>
    <!-- Synchronous Serial Interface(SSI) Master -->
    <peripheral>
      <name>SSI_Master</name>
      <version>1.0</version>
      <description>Synchronous Serial Interface(SSI)</description>
      <groupName>SSI</groupName>
      <baseAddress>0x44020000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0xF8</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>SSI0</name>
        <value>47</value>
      </interrupt>
      <registers>
        <!-- CTRLR0: Control Register 0 -->
        <!-- REGISTER 1 -->
        <register>
          <name>CTRLR0</name>
          <description>Control Register 0 </description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00070007</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- DFS: Data Frame Size  -->
            <field>
              <name>DFS</name>
              <description>Select the data frame length (4-bit to 16-bit serial data transfers)</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <writeConstraint>
                <range>
                  <minimum>0</minimum>
                  <maximum>16</maximum>
                </range>
              </writeConstraint>
            </field>
            <!-- FRF: Frame Format  -->
            <field>
              <name>FRF</name>
              <description>Frame Format, Selects which serial protocol transfers the data</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Motorola_SPI</name>
                  <description>Motorola SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Texas_Instruments_SSP</name>
                  <description>Texas Instruments SSP</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>National_Semi_Conductors_Micro_Wire</name>
                  <description>National Semiconductors Micro wire</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SCPH: Serial Clock Phase  -->
            <field>
              <name>SCPH</name>
              <description>Serial Clock Phase. Valid when the frame format (FRF) is set to Motorola SPI
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Serial clock toggles in middle of first data bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Serial clock toggles at start of first data bit</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SCPOL: Serial Clock Polarity  -->
            <field>
              <name>SCPOL</name>
              <description>Serial Clock Polarity. Valid when the frame format (FRF) is set to Motorola SPI
			  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Serial_Clock_Inactive_State</name>
                <enumeratedValue>
                  <name>Inactive_State_Low</name>
                  <description>Inactive state of serial clock is low</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Inactive_State_High</name>
                  <description>Inactive state of serial clock is high</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TMOD: Transfer Mode -->
            <field>
              <name>TMOD</name>
              <description>Selects the mode of transfer for serial communication</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Transmit_and_Receive</name>
                  <description>Transmit and Receive</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit</name>
                  <description>Transmit Only</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive</name>
                  <description>Receive Only</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SLV_OE: Slave Output Enable  -->
            <!--#change-->
            <field>
              <name>RESERVED0</name>
              <description>Reserved</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SRL: Shift Register Loop  -->
            <field>
              <name>SRL</name>
              <description>Shift Register Loop Used for testing purposes only</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Normal_Mode_Operation</name>
                  <description>Normal Mode Operation</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Test_Mode_Operation</name>
                  <description>Test Mode Operation</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- CFS: Control Frame Size -->
            <field>
              <name>CFS</name>
              <description>Control Frame Size Selects the length of the control word for the Micro wire frame format</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1_Bit_Word_Control</name>
                  <description>Range -&gt; 1 bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16_Bit_Word_Control</name>
                  <description>Range -&gt; 16 bit</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DFS_32: Data frame size -->
            <field>
              <name>DFS_32</name>
              <description>Selects the data frame length</description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Data_Frame_Length</name>
                <enumeratedValue>
                  <name>4_Bit</name>
                  <description>Range -&gt; 3 bit</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16_Bit</name>
                  <description>Range -&gt; 16 bit</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SPI_FRF: SPI Frame Format -->
            <field>
              <name>SPI_FRF</name>
              <description>Selects data frame format for transmitting or receiving data</description>
              <bitRange>[22:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>SPI_Frame_Format</name>
                <enumeratedValue>
                  <name>Standard_SPI</name>
                  <description>Standard SPI Format</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual_SPI</name>
                  <description>Dual SPI Format</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad_SPI</name>
                  <description>Quad SPI Format</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:23]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CTRLR1: Control Register 1 -->
        <!-- REGISTER 2 -->
        <register>
          <name>CTRLR1</name>
          <description>Control Register 1</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- NDF: Number of Data Frames  -->
            <field>
              <name>NDF</name>
              <description>Number of Data Frames.When TMOD = 10 or TMOD = 11, this register field sets the number of data frames to be continuously received by the ssi_master</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED0</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SSIENR: SSI Enable Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>SSIENR</name>
          <description>SSI Enable Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- SSI_EN: SSI Enable -->
            <field>
              <name>SSI_EN</name>
              <description>Enables and disables all ssi operations</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MWCR: Micro wire Control Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>MWCR</name>
          <description>Micro wire Control Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--MWMOD: Micro wire Transfer Mode-->
            <field>
              <name>MWMOD</name>
              <description>The Micro wire transfer is sequential or non-sequential</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Non_Sequential_Transfer</name>
                  <description>non-sequential transfer</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Sequential_Transfer</name>
                  <description>sequential transfer</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--MDD: Micro wire Control-->
            <field>
              <name>MDD</name>
              <description>The direction of the data word when the Micro wire serial
                           protocol is used
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>the data word is received by the SSI MacroCell from the external serial device</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description> the data word is transmitted from the SSI MacroCell to the external serial device</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--MHS: Microwire Handshaking-->
            <field>
              <name>MHS</name>
              <description>Microwire Handshaking. Used to enable and disable the busy/ready handshaking 
			               interface for the Microwire protocol
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Hand_Shaking_Interface</name>
                <enumeratedValue>
                  <name>disable</name>
                  <description>handshaking interface is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>handshaking interface is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SER: SLAVE ENABLE REGISTER -->
        <!-- REGISTER 5 -->
        <register>
          <name>SER</name>
          <description>SLAVE ENABLE REGISTER</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0F</resetMask>
          <fields>
            <!--SER: slave select enable-->
            <field>
              <name>SER</name>
              <description>Each bit in this register corresponds to a slave select line (ss_x_n) from the SSI master.
						</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- BAUDR: Baud Rate Select Register -->
        <!-- REGISTER 6 -->
        <register>
          <name>BAUDR</name>
          <description>Baud Rate Select Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--SCKDV: SSI Clock Divider-->
            <field>
              <name>SCKDV</name>
              <description>SSI Clock Divider.The LSB for this field is always set to 0 and is unaffected by a write operation, which ensures an even value is held in this register</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- TXFTLR: Transmit FIFO Threshold Level Register-->
        <!-- REGISTER 7 -->
        <register>
          <name>TXFTLR</name>
          <description>Transmit FIFO Threshold Level Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--TFT: Transmit FIFO Threshold-->
            <field>
              <name>TFT</name>
              <description>Controls the level of entries (or below) at which the transmit 
			               FIFO controller triggers an interrupt
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- RXFTLR: Receive FIFO Threshold Level -->
        <!-- REGISTER 8 -->
        <register>
          <name>RXFTLR</name>
          <description>Receive FIFO Threshold Level</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--RFT: Receive FIFO Threshold-->
            <field>
              <name>RFT</name>
              <description>Controls the level of entries (or above) at which the 
			               receive FIFO controller triggers an interrupt
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- TXFLR: Transmit FIFO Level Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>TXFLR</name>
          <description>Transmit FIFO Level Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXTFL: Transmit FIFO Level -->
            <field>
              <name>TXTFL</name>
              <description>Contains the number of valid data entries in the transmit FIFO
			  </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RXFLR: Receive FIFO Level Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>RXFLR</name>
          <description>Receive FIFO Level Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RXTFL:Receive FIFO Level -->
            <field>
              <name>RXTFL</name>
              <description>Contains the number of valid data entries in the receive FIFO
			  </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SR: Status Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>SR</name>
          <description>Status Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000006</resetValue>
          <fields>
            <!-- BUSY: SSI Busy Flag -->
            <field>
              <name>BUSY</name>
              <description>indicates that a serial transfer is in progress
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SSI_Busy_Flag</name>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>SSI is idle or disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transferring_Data</name>
                  <description>SSI is actively transferring data</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFNF: Transmit FIFO Not Full -->
            <field>
              <name>TFNF</name>
              <description>Set when the transmit FIFO contains one or more empty locations
                           and is cleared when the FIFO is full
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Transmit_FIFO_Full</name>
                  <description>Transmit FIFO is full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit_FIFO_Not_Full</name>
                  <description>Transmit FIFO is not full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFE: Transmit FIFO Empty -->
            <field>
              <name>TFE</name>
              <description>When the transmit FIFO is completely empty this bit is set
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Transmit_FIFO_Not_Empty</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit_FIFO_Empty</name>
                  <description>Transmit FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFNE: Receive FIFO Not Empty -->
            <field>
              <name>RFNE</name>
              <description>Set when the receive FIFO contains one or more entries and is 
			               cleared when the receive FIFO is empty
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Receive_FIFO_Empty</name>
                  <description>Receive FIFO is empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_FIFO_Not_Empty</name>
                  <description>Receive FIFO is not empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFF: Receive FIFO Full -->
            <field>
              <name>RFF</name>
              <description>When the receive FIFO is completely full this bit is set
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Receive_FIFO_Not_Full</name>
                  <description>Receive FIFO is not full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_FIFO_Full</name>
                  <description>Receive FIFO is full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXE: Transmission Error -->
            <field>
              <name>RESERVED0</name>
              <description>Reserved</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DCOL: Data collosion error -->
            <field>
              <name>DCOL</name>
              <description>This bit is set if the ss_in_n input is asserted by another master,
                           while the ssi master is in the middle of the transfer
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>Data_Collision_Error</name>
                <enumeratedValue>
                  <name>No_Error</name>
                  <description>No error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit_Data_Collection_Error</name>
                  <description>Transmit data collision error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IMR: Interrupt Mask Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>IMR</name>
          <description>Interrupt Mask Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000003F</resetValue>
          <resetMask>0x3F</resetMask>
          <fields>
            <!-- TXEIM:Transmit FIFO Empty Interrupt Mask -->
            <field>
              <name>TXEIM</name>
              <description>Transmit FIFO Empty Interrupt Mask</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>ssi_txe_intr</name>
                <enumeratedValue>
                  <name>Masked</name>
                  <description> ssi_txe_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Not_Masked</name>
                  <description>ssi_txe_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXOIM:Transmit FIFO Overflow Interrupt Mask -->
            <field>
              <name>TXOIM</name>
              <description>Transmit FIFO Overflow Interrupt Mask</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>ssi_txo_intr </name>
                <enumeratedValue>
                  <name>Masked</name>
                  <description> ssi_txo_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Non_Masked</name>
                  <description>ssi_txo_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXUIM:Receive FIFO Underflow Interrupt Mask -->
            <field>
              <name>RXUIM</name>
              <description>Receive FIFO Underflow Interrupt Mask</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>ssi_rxu_intr</name>
                <enumeratedValue>
                  <name>Masked</name>
                  <description> ssi_rxu_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Not_Masked</name>
                  <description>ssi_rxu_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXOIM: Receive FIFO Overflow Interrupt Mask -->
            <field>
              <name>RXOIM</name>
              <description>Receive FIFO Overflow Interrupt Mask</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>ssi_rxo_intr</name>
                <enumeratedValue>
                  <name>Masked</name>
                  <description>ssi_rxo_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Not_Masked</name>
                  <description>ssi_rxo_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXFIM: Receive FIFO Full Interrupt Mask -->
            <field>
              <name>RXFIM</name>
              <description>Receive FIFO Full Interrupt Mask</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>ssi_rxf_intr</name>
                <enumeratedValue>
                  <name>Masked</name>
                  <description>ssi_rxf_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Not_Masked</name>
                  <description>ssi_rxf_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MSTIM: Multi-Master Contention Interrupt Mask -->
            <field>
              <name>MSTIM</name>
              <description>Multi-Master Contention Interrupt Mask</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>ssi_mst_intr</name>
                <enumeratedValue>
                  <name>Masked</name>
                  <description>ssi_mst_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Not_Masked</name>
                  <description>ssi_mst_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- ISR: Interrupt Status Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>ISR</name>
          <description>Interrupt Status Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXEIS:Transmit FIFO Empty Interrupt Status-->
            <field>
              <name>TXEIS</name>
              <description>Transmit FIFO Empty Interrupt Status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_txe_intr_After_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_txe_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_txe_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXOIS: Transmit FIFO Overflow Interrupt Status -->
            <field>
              <name>TXOIS</name>
              <description>Transmit FIFO Overflow Interrupt Status</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_txo_intr_After_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_txo_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_txo_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXUIS: Receive FIFO Underflow Interrupt Status -->
            <field>
              <name>RXUIS</name>
              <description>Receive FIFO Underflow Interrupt Status</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxu_intr_After_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxu_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_rxu_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXOIS: Receive FIFO Overflow Interrupt Status -->
            <field>
              <name>RXOIS</name>
              <description>Receive FIFO Overflow Interrupt Status</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxo_intr_After_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxo_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_rxo_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXFIS: Receive FIFO Full Interrupt Status -->
            <field>
              <name>RXFIS</name>
              <description>Receive FIFO Full Interrupt Status</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxf_intr_After_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxf_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Full</name>
                  <description>ssi_rxf_intr interrupt is full after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MSTIS: Multi-Master Contention Interrupt Status -->
            <field>
              <name>MSTIS</name>
              <description>Multi-Master Contention Interrupt Status</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_mst_intr_After_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_mst_intr interrupt not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_mst_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RISR: Raw Interrupt Status Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>RISR</name>
          <description>Raw Interrupt Status Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXEIR: Transmit FIFO Empty Raw Interrupt Status -->
            <field>
              <name>TXEIR</name>
              <description>Transmit FIFO Empty Raw Interrupt Status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_txe_intr_Prior_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_txe_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_txe_intr interrupt is active prior masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXOIR: Transmit FIFO Overflow Raw Interrupt Status -->
            <field>
              <name>TXOIR</name>
              <description>Transmit FIFO Overflow Raw Interrupt Status</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_txo_intr_Prior_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_txo_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>1 =&gt; ssi_txo_intr interrupt is active prior masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXUIR: Receive FIFO Underflow Raw Interrupt Status -->
            <field>
              <name>RXUIR</name>
              <description>Receive FIFO Underflow Raw Interrupt Status</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxu_intr_Prior_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxu_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_rxu_intr interrupt is active prior to masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXOIR: Receive FIFO Overflow Raw Interrupt Status -->
            <field>
              <name>RXOIR</name>
              <description>Receive FIFO Overflow Raw Interrupt Status</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxo_intr_Prior_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxo_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_rxo_intr interrupt is active prior masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXFIR: Receive FIFO Full Raw Interrupt Status -->
            <field>
              <name>RXFIR</name>
              <description>Receive FIFO Full Raw Interrupt Status</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxf_intr_Prior_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxf_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_rxf_intr interrupt is active prior to masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MSTIR: Multi-Master Contention Raw Interrupt Status -->
            <field>
              <name>MSTIR</name>
              <description>Multi-Master Contention Raw Interrupt Status</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_mst_intr_Prior_Masking</name>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_mst_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_mst_intr interrupt is active prior masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- TXOICR: Transmit FIFO Overflow Interrupt Clear Register -->
        <!-- REGISTER 15 -->
        <register>
          <name>TXOICR</name>
          <description>Transmit FIFO Overflow Interrupt Clear Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXOICR: Transmit FIFO Overflow Interrupt Clear Register -->
            <field>
              <name>TXOICR</name>
              <description>Clear Transmit FIFO Overflow Interrupt This register reflects the status of the interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RXOICR: Receive FIFO Overflow Interrupt Clear Register -->
        <!-- REGISTER 16 -->
        <register>
          <name>RXOICR</name>
          <description>Receive FIFO Overflow Interrupt Clear Register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RXOICR: Receive FIFO Overflow Interrupt Clear Register -->
            <field>
              <name>RXOICR</name>
              <description>This register reflects the status of the interrupt A read from this 
			               register clears the ssi_rxo_intr interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RXUICR: Receive FIFO Underflow Interrupt Clear Register -->
        <!-- REGISTER 17 -->
        <register>
          <name>RXUICR</name>
          <description>Receive FIFO Underflow Interrupt Clear Register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- RXUICR:Receive FIFO Underflow Interrupt Clear Register -->
            <field>
              <name>RXUICR</name>
              <description>This register reflects the status of the interrupt A read from this 
			               register clears the ssi_rxu_intr interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MSTICR: Multi-Master Interrupt Clear Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>MSTICR</name>
          <description>Multi-Master Interrupt Clear Register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- MSTICR: Multi-Master Interrupt Clear Register -->
            <field>
              <name>MSTICR</name>
              <description>This register reflects the status of the interrupt A read from this 
			               register clears the ssi_mst_intr interrupt 
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- ICR: Interrupt Clear Register -->
        <!-- REGISTER 19 -->
        <register>
          <name>ICR</name>
          <description>Interrupt Clear Register</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- ICR: Interrupt Clear Register -->
            <field>
              <name>ICR</name>
              <description>This register is set if any of the interrupts below are active A read clears
                           the ssi_txo_intr, ssi_rxu_intr, ssi_rxo_intr, and the ssi_mst_intr interrupts
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMACR: DMA Control Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>DMACR</name>
          <description>DMA Control Register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <!--  RDMAE: Receive DMA Enable -->
            <field>
              <name>RDMAE</name>
              <description>This bit enables/disables the receive FIFO DMA channel		  
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Receive_DMA</name>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>	Receive DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Receive DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  TDMAE: Transmit DMA Enable -->
            <field>
              <name>TDMAE</name>
              <description>This bit enables/disables the transmit FIFO DMA channel		  
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Transmit_DMA</name>
                <enumeratedValue>
                  <name>disabled</name>
                  <description>	Transmit DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Transmit DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMATDLR: DMA Transmit Data Level Register -->
        <!-- REGISTER 21 -->
        <register>
          <name>DMATDLR</name>
          <description>DMA Transmit Data Level</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--  DMATDL: DMA Transmit Data Level -->
            <field>
              <name>DMATDL</name>
              <description>This bit field controls the level at which a DMA
                           request is made by the transmit logic</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMARDLR: DMA Receive Data Level Register -->
        <!-- REGISTER 22 -->
        <register>
          <name>DMARDLR</name>
          <description>DMA Receive Data Level Register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--  DMARDL: Receive Data Level -->
            <field>
              <name>DMARDL</name>
              <description>This bit field controls the level at which a DMA request
                           is made by the receive logic
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- IDR: Identification Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>IDR</name>
          <description>Identification Register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--  IDCODE: Identification Code. -->
            <field>
              <name>IDCODE</name>
              <description>This register contains the peripherals identification code
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SSI_COMP_VERSION: coreKit version ID register -->
        <!-- REGISTER 24 -->
        <register>
          <name>SSI_COMP_VERSION</name>
          <description>coreKit version ID register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x3430302A</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--  SSI_COMP_VERSION -->
            <field>
              <name>SSI_COMP_VERSION</name>
              <description>Contains the hex representation of the Synopsys component version
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DR: Data Register -->
        <!-- REGISTER 25 -->
        <register>
          <name>DR</name>
          <description>Data Register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- DR: Data Register -->
            <field>
              <name>DR</name>
              <description>When writing to this register must right-justify the data</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- RX_SAMPLE_DLY: Rx Sample Delay Register -->
        <!-- REGISTER 26 -->
        <register>
          <name>RX_SAMPLE_DLY</name>
          <description>Rx Sample Delay Register</description>
          <addressOffset>0xF0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- RSD: Receive Data (rxd) Sample Delay -->
            <field>
              <name>RSD</name>
              <description>Receive Data (rxd) Sample Delay. This register is used to delay the sample of the rxd
							input signal.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SPI_CTRLR0: SPI control Register -->
        <!-- REGISTER 27 -->
        <!--#SS is there in datasheet need to verify-->
        <register>
          <name>SPI_CTRLR0</name>
          <description>SPI control Register</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000200</resetValue>
          <resetMask>0x7FFF</resetMask>
          <fields>
            <!-- TRANS_TYPE: Address and instruction transfer format -->
            <field>
              <name>TRANS_TYPE</name>
              <description>Address and instruction transfer format</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ADDR_L: Length of the address to be transmitted-->
            <field>
              <name>ADDR_L</name>
              <description>This bit defines length of address to be transmitted,
            			  The transfer begins only after these many bits are programmed into the FIFO</description>
              <bitRange>[5:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- INST_L: DUAL/QUAD length in bits-->
            <field>
              <name>INST_L</name>
              <description>DUAL/QUAD length in bits</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved for future use</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- WAIT_CYCLES: Wait cycles in DUAL/QUAD mode-->
            <field>
              <name>WAIT_CYCLES</name>
              <description>This bit defines the wait cycles in dual/quad mode between control frames transmit and data reception,
			               Specified as number of SPI clock cycles</description>
              <bitRange>[14:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved for future use</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- SSI1 -->
    <!--#SS need to check base address the address-->
    <peripheral>
      <name>SSI_Slave</name>
      <version>1.0</version>
      <description>Synchronous Serial Interface(SSI)</description>
      <groupName>SSI</groupName>
      <baseAddress>0x45010000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0xF8</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>SSISlave</name>
        <value>44</value>
      </interrupt>
      <registers>
        <!-- CTRLR0: Control Register 0 -->
        <!-- REGISTER 1 -->
        <register>
          <name>CTRLR0</name>
          <description>Control Register 0 </description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000007</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- DFS: Data Frame Size  -->
            <field>
              <name>DFS</name>
              <description>Select the data frame length (4-bit to 16-bit serial data transfers)</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <writeConstraint>
                <range>
                  <minimum>0</minimum>
                  <maximum>16</maximum>
                </range>
              </writeConstraint>
            </field>
            <!-- FRF: Frame Format  -->
            <field>
              <name>FRF</name>
              <description>Frame Format, Selects which serial protocol transfers the data</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Motorola_SPI</name>
                  <description>Motorola SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Texas_Instruments_SSP</name>
                  <description>Texas Instruments SSP</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>National_Semi_Conductors_Micro_Wire</name>
                  <description>National Semiconductors Micro wire</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SCPH: Serial Clock Phase  -->
            <field>
              <name>SCPH</name>
              <description>Serial Clock Phase. Valid when the frame format (FRF) is set to Motorola SPI
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Serial clock toggles in middle of first data bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Serial clock toggles at start of first data bit</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SCPOL: Serial Clock Polarity  -->
            <field>
              <name>SCPOL</name>
              <description>Serial Clock Polarity. Valid when the frame format (FRF) is set to Motorola SPI
			  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Serial_Clock_Inactive_State</name>
                <enumeratedValue>
                  <name>Inactive_State_Low</name>
                  <description>Inactive state of serial clock is low</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Inactive_State_High</name>
                  <description>Inactive state of serial clock is high</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TMOD: Transfer Mode -->
            <field>
              <name>TMOD</name>
              <description>Selects the mode of transfer for serial communication</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Transmit_and_Receive</name>
                  <description>Transmit and Receive</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit</name>
                  <description>Transmit Only</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive</name>
                  <description>Receive Only</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SLV_OE: Slave Output Enable  -->
            <field>
              <name>SLV_OE</name>
              <description>DW_apb_ssi is configured as a serial-slave device</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>None</name>
                  <description>Slave txd is enabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>none</name>
                  <description>Slave txd is disabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SRL: Shift Register Loop  -->
            <field>
              <name>SRL</name>
              <description>Shift Register Loop Used for testing purposes only</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Normal_Mode_Operation</name>
                  <description>Normal Mode Operation</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Test_Mode_Operation</name>
                  <description>Test Mode Operation</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- CFS: Control Frame Size -->
            <field>
              <name>CFS</name>
              <description>Control Frame Size Selects the length of the control word for the Micro wire frame format</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1_Bit_Word_Control</name>
                  <description>Range -&gt; 1 bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16_Bit_Word_Control</name>
                  <description>Range -&gt; 16 bit</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SSIENR: SSI Enable Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>SSIENR</name>
          <description>SSI Enable Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- SSI_EN: SSI Enable -->
            <field>
              <name>SSI_EN</name>
              <description>Enables and disables all ssi operations</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MWCR: Micro wire Control Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>MWCR</name>
          <description>Micro wire Control Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--MWMOD: Micro wire Transfer Mode-->
            <field>
              <name>MWMOD</name>
              <description>The Micro wire transfer is sequential or non-sequential</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Non_Sequential_Transfer</name>
                  <description>non-sequential transfer</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Sequential_Transfer</name>
                  <description>sequential transfer</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--MDD: Micro wire Control-->
            <field>
              <name>MDD</name>
              <description>The direction of the data word when the Micro wire serial protocol is used</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>the data word is received by the SSI MacroCell from the external serial device</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description> the data word is transmitted from the SSI MacroCell to the external serial device</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- TXFTLR: Transmit FIFO Threshold Level Register-->
        <!-- REGISTER 7 -->
        <register>
          <name>TXFTLR</name>
          <description>Transmit FIFO Threshold Level Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--TFT: Transmit FIFO Threshold-->
            <field>
              <name>TFT</name>
              <description>Controls the level of entries (or below) at which the transmit 
                     FIFO controller triggers an interrupt
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- RXFTLR: Receive FIFO Threshold Level -->
        <!-- REGISTER 8 -->
        <register>
          <name>RXFTLR</name>
          <description>Receive FIFO Threshold Level</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--RFT: Receive FIFO Threshold-->
            <field>
              <name>RFT</name>
              <description>Controls the level of entries (or above) at which the 
                     receive FIFO controller triggers an interrupt
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- TXFLR: Transmit FIFO Level Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>TXFLR</name>
          <description>Transmit FIFO Level Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXTFL: Transmit FIFO Level -->
            <field>
              <name>TXTFL</name>
              <description>Contains the number of valid data entries in the transmit FIFO
        </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RXFLR: Receive FIFO Level Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>RXFLR</name>
          <description>Receive FIFO Level Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RXTFL:Receive FIFO Level -->
            <field>
              <name>RXTFL</name>
              <description>Contains the number of valid data entries in the receive FIFO
        </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SR: Status Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>SR</name>
          <description>Status Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000006</resetValue>
          <fields>
            <!-- BUSY: SSI Busy Flag -->
            <field>
              <name>BUSY</name>
              <description>indicates that a serial transfer is in progress
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>SSI_Busy_Flag</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Idle</name>
                  <description>SSI is idle or disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transferring_Data</name>
                  <description>SSI is actively transferring data</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFNF: Transmit FIFO Not Full -->
            <field>
              <name>TFNF</name>
              <description>Set when the transmit FIFO contains one or more empty locations
                           and is cleared when the FIFO is full
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Transmit_FIFO_Full</name>
                  <description>Transmit FIFO is full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit_FIFO_Not_Full</name>
                  <description>Transmit FIFO is not full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFE: Transmit FIFO Empty -->
            <field>
              <name>TFE</name>
              <description>When the transmit FIFO is completely empty this bit is set
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Transmit_FIFO_Not_Empty</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit_FIFO_Empty</name>
                  <description>Transmit FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFNE: Receive FIFO Not Empty -->
            <field>
              <name>RFNE</name>
              <description>Set when the receive FIFO contains one or more entries and is 
			               cleared when the receive FIFO is empty
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Receive_FIFO_Empty</name>
                  <description>Receive FIFO is empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_FIFO_Not_Empty</name>
                  <description>Receive FIFO is not empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFF: Receive FIFO Full -->
            <field>
              <name>RFF</name>
              <description>When the receive FIFO is completely full this bit is set
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Receive_FIFO_Not_Full</name>
                  <description>Receive FIFO is not full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Receive_FIFO_Full</name>
                  <description>Receive FIFO is full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXE: Transmission Error -->
            <field>
              <name>TXE</name>
              <description>Transmission Error</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <usage>read</usage>
                <enumeratedValue>
                  <name>No_Error</name>
                  <description>No error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmission_Error</name>
                  <description>Transmission Error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IMR: Interrupt Mask Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>IMR</name>
          <description>Interrupt Mask Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000001F</resetValue>
          <resetMask>0x1F</resetMask>
          <fields>
            <!-- TXEIM:Transmit FIFO Empty Interrupt Mask -->
            <field>
              <name>TXEIM</name>
              <description>Transmit FIFO Empty Interrupt Mask</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>ssi_txe_intr</name>
                <enumeratedValue>
                  <name>Masked</name>
                  <description> ssi_txe_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Not_Masked</name>
                  <description>ssi_txe_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXOIM:Transmit FIFO Overflow Interrupt Mask -->
            <field>
              <name>TXOIM</name>
              <description>Transmit FIFO Overflow Interrupt Mask</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>ssi_txo_intr </name>
                <enumeratedValue>
                  <name>Masked</name>
                  <description> ssi_txo_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Non_Masked</name>
                  <description>ssi_txo_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXUIM:Receive FIFO Underflow Interrupt Mask -->
            <field>
              <name>RXUIM</name>
              <description>Receive FIFO Underflow Interrupt Mask</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>ssi_rxu_intr</name>
                <enumeratedValue>
                  <name>Masked</name>
                  <description> ssi_rxu_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Not_Masked</name>
                  <description>ssi_rxu_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXOIM: Receive FIFO Overflow Interrupt Mask -->
            <field>
              <name>RXOIM</name>
              <description>Receive FIFO Overflow Interrupt Mask</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>ssi_rxo_intr</name>
                <enumeratedValue>
                  <name>Masked</name>
                  <description>ssi_rxo_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Not_Masked</name>
                  <description>ssi_rxo_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXFIM: Receive FIFO Full Interrupt Mask -->
            <field>
              <name>RXFIM</name>
              <description>Receive FIFO Full Interrupt Mask</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>ssi_rxf_intr</name>
                <enumeratedValue>
                  <name>Masked</name>
                  <description>ssi_rxf_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Not_Masked</name>
                  <description>ssi_rxf_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- ISR: Interrupt Status Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>ISR</name>
          <description>Interrupt Status Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXEIS:Transmit FIFO Empty Interrupt Status-->
            <field>
              <name>TXEIS</name>
              <description>Transmit FIFO Empty Interrupt Status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_txe_intr_After_Masking</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_txe_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_txe_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXOIS: Transmit FIFO Overflow Interrupt Status -->
            <field>
              <name>TXOIS</name>
              <description>Transmit FIFO Overflow Interrupt Status</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_txo_intr_After_Masking</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_txo_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_txo_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXUIS: Receive FIFO Underflow Interrupt Status -->
            <field>
              <name>RXUIS</name>
              <description>Receive FIFO Underflow Interrupt Status</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxu_intr_After_Masking</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxu_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_rxu_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXOIS: Receive FIFO Overflow Interrupt Status -->
            <field>
              <name>RXOIS</name>
              <description>Receive FIFO Overflow Interrupt Status</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxo_intr_After_Masking</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxo_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_rxo_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXFIS: Receive FIFO Full Interrupt Status -->
            <field>
              <name>RXFIS</name>
              <description>Receive FIFO Full Interrupt Status</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxf_intr_After_Masking</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxf_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Full</name>
                  <description>ssi_rxf_intr interrupt is full after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RISR: Raw Interrupt Status Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>RISR</name>
          <description>Raw Interrupt Status Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXEIR: Transmit FIFO Empty Raw Interrupt Status -->
            <field>
              <name>TXEIR</name>
              <description>Transmit FIFO Empty Raw Interrupt Status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_txe_intr_Prior_Masking</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_txe_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_txe_intr interrupt is active prior masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXOIR: Transmit FIFO Overflow Raw Interrupt Status -->
            <field>
              <name>TXOIR</name>
              <description>Transmit FIFO Overflow Raw Interrupt Status</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_txo_intr_Prior_Masking</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_txo_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>1 =&gt; ssi_txo_intr interrupt is active prior masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXUIR: Receive FIFO Underflow Raw Interrupt Status -->
            <field>
              <name>RXUIR</name>
              <description>Receive FIFO Underflow Raw Interrupt Status</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxu_intr_Prior_Masking</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxu_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_rxu_intr interrupt is active prior to masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXOIR: Receive FIFO Overflow Raw Interrupt Status -->
            <field>
              <name>RXOIR</name>
              <description>Receive FIFO Overflow Raw Interrupt Status</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxo_intr_Prior_Masking</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxo_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_rxo_intr interrupt is active prior masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXFIR: Receive FIFO Full Raw Interrupt Status -->
            <field>
              <name>RXFIR</name>
              <description>Receive FIFO Full Raw Interrupt Status</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <name>ssi_rxf_intr_Prior_Masking</name>
                <usage>read</usage>
                <enumeratedValue>
                  <name>Not_Active</name>
                  <description>ssi_rxf_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Active</name>
                  <description>ssi_rxf_intr interrupt is active prior to masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- TXOICR: Transmit FIFO Overflow Interrupt Clear Register -->
        <!-- REGISTER 15 -->
        <register>
          <name>TXOICR</name>
          <description>Transmit FIFO Overflow Interrupt Clear Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXOICR: Transmit FIFO Overflow Interrupt Clear Register -->
            <field>
              <name>TXOICR</name>
              <description>Clear Transmit FIFO Overflow Interrupt This register reflects the status of the interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RXOICR: Receive FIFO Overflow Interrupt Clear Register -->
        <!-- REGISTER 16 -->
        <register>
          <name>RXOICR</name>
          <description>Receive FIFO Overflow Interrupt Clear Register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RXOICR: Receive FIFO Overflow Interrupt Clear Register -->
            <field>
              <name>RXOICR</name>
              <description>This register reflects the status of the interrupt A read from this 
                     register clears the ssi_rxo_intr interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RXUICR: Receive FIFO Underflow Interrupt Clear Register -->
        <!-- REGISTER 17 -->
        <register>
          <name>RXUICR</name>
          <description>Receive FIFO Underflow Interrupt Clear Register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- RXUICR:Receive FIFO Underflow Interrupt Clear Register -->
            <field>
              <name>RXUICR</name>
              <description>This register reflects the status of the interrupt A read from this 
                     register clears the ssi_rxu_intr interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MSTICR: Multi-Master Interrupt Clear Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>MSTICR</name>
          <description>Multi-Master Interrupt Clear Register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- MSTICR: Multi-Master Interrupt Clear Register -->
            <field>
              <name>MSTICR</name>
              <description>This register reflects the status of the interrupt A read from this 
                     register clears the ssi_mst_intr interrupt 
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- ICR: Interrupt Clear Register -->
        <!-- REGISTER 19 -->
        <register>
          <name>ICR</name>
          <description>Interrupt Clear Register</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- ICR: Interrupt Clear Register -->
            <field>
              <name>ICR</name>
              <description>This register is set if any of the interrupts below are active A read clears
                           the ssi_txo_intr, ssi_rxu_intr, ssi_rxo_intr, and the ssi_mst_intr interrupts
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMACR: DMA Control Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>DMACR</name>
          <description>DMA Control Register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <!--  RDMAE: Receive DMA Enable -->
            <field>
              <name>RDMAE</name>
              <description>This bit enables/disables the receive FIFO DMA channel     
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Receive_DMA</name>
                <enumeratedValue>
                  <name>disabled</name>
                  <description> Receive DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Receive DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  TDMAE: Transmit DMA Enable -->
            <field>
              <name>TDMAE</name>
              <description>This bit enables/disables the transmit FIFO DMA channel      
        </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Transmit_DMA</name>
                <enumeratedValue>
                  <name>disabled</name>
                  <description> Transmit DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Transmit DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMATDLR: DMA Transmit Data Level Register -->
        <!-- REGISTER 21 -->
        <register>
          <name>DMATDLR</name>
          <description>DMA Transmit Data Level</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--  DMATDL: DMA Transmit Data Level -->
            <field>
              <name>DMATDL</name>
              <description>This bit field controls the level at which a DMA
                           request is made by the transmit logic</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMARDLR: DMA Receive Data Level Register -->
        <!-- REGISTER 22 -->
        <register>
          <name>DMARDLR</name>
          <description>DMA Receive Data Level Register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--  DMARDL: Receive Data Level -->
            <field>
              <name>DMARDL</name>
              <description>This bit field controls the level at which a DMA request
                           is made by the receive logic
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- IDR: Identification Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>IDR</name>
          <description>Identification Register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--  IDCODE: Identification Code. -->
            <field>
              <name>IDCODE</name>
              <description>This register contains the peripherals identification code
        </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SSI_COMP_VERSION: coreKit version ID register -->
        <!-- REGISTER 24 -->
        <register>
          <name>SSI_COMP_VERSION</name>
          <description>coreKit version ID register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x3430302A</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--  SSI_COMP_VERSION -->
            <field>
              <name>SSI_COMP_VERSION</name>
              <description>Contains the hex representation of the Synopsys component version
        </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DR: Data Register -->
        <!-- REGISTER 25 -->
        <register>
          <name>DR</name>
          <description>Data Register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- DR: Data Register -->
            <field>
              <name>DR</name>
              <description>When writing to this register must right-justify the data</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- ULP_SSIMaster -->
    <peripheral>
      <name>ULP_SSI</name>
      <version>1.0</version>
      <description>Synchronous Serial Interface(SSI)</description>
      <groupName>SSI</groupName>
      <baseAddress>0x24040800</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0xF8</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>SSI2</name>
        <value>16</value>
      </interrupt>
      <registers>
        <!-- CTRLR0: Control Register 0 -->
        <!-- REGISTER 1 -->
        <register>
          <name>CTRLR0</name>
          <description>Control Register 0 </description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000007</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- DFS: Data Frame Size  -->
            <field>
              <name>DFS</name>
              <description>Select the data frame length (4-bit to 16-bit serial data transfers)</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <writeConstraint>
                <range>
                  <minimum>0</minimum>
                  <maximum>16</maximum>
                </range>
              </writeConstraint>
            </field>
            <!-- FRF: Frame Format  -->
            <field>
              <name>FRF</name>
              <description>Frame Format, Selects which serial protocol transfers the data</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Motorola SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Texas Instruments SSP</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>National Semiconductors Micro wire</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SCPH: Serial Clock Phase  -->
            <field>
              <name>SCPH</name>
              <description>Serial Clock Phase. Valid when the frame format (FRF) is set to Motorola SPI
        </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Serial clock toggles in middle of first data bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Serial clock toggles at start of first data bit</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SCPOL: Serial Clock Polarity  -->
            <field>
              <name>SCPOL</name>
              <description>Serial Clock Polarity. Valid when the frame format (FRF) is set to Motorola SPI
        </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Inactive state of serial clock is low</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Inactive state of serial clock is high</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TMOD: Transfer Mode -->
            <field>
              <name>TMOD</name>
              <description>Selects the mode of transfer for serial communication</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Transmit and Receive</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Transmit Only</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Receive Only</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SLV_OE: Slave Output Enable  -->
            <field>
              <name>SLV_OE</name>
              <description>DW_apb_ssi is configured as a serial-slave device</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>None</name>
                  <description>Slave txd is enabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>none</name>
                  <description>Slave txd is disabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SRL: Shift Register Loop  -->
            <field>
              <name>SRL</name>
              <description>Shift Register Loop Used for testing purposes only</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>None</name>
                  <description>Normal Mode Operation</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>none</name>
                  <description>Test Mode Operation</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- CFS: Control Frame Size -->
            <field>
              <name>CFS</name>
              <description>Control Frame Size Selects the length of the control word for the Micro wire frame format</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>None</name>
                  <description>Range -&gt; 1 bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>none</name>
                  <description>Range -&gt; 16 bit</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DFS_32: Data frame size -->
            <field>
              <name>DFS_32</name>
              <description>Selects the data frame length</description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>None</name>
                  <description>Range -&gt; 3 bit</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>none</name>
                  <description>Range -&gt; 16 bit</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- SPI_FRF: SPI Frame Format -->
            <field>
              <name>SPI_FRF</name>
              <description>Selects data frame format for transmitting or receiving data</description>
              <bitRange>[22:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Standard SPI Format</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual SPI Format</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad SPI Format</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>Reser</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:23]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CTRLR1: Control Register 1 -->
        <!-- REGISTER 2 -->
        <register>
          <name>CTRLR1</name>
          <description>Control Register 1</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- NDF: Number of Data Frames  -->
            <field>
              <name>NDF</name>
              <description>Number of Data Frames.When TMOD = 10 or TMOD = 11, this register field sets the
               number of data frames to be continuously received by the ssi_master</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SSIENR: SSI Enable Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>SSIENR</name>
          <description>SSI Enable Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- SSI_EN: SSI Enable -->
            <field>
              <name>SSI_EN</name>
              <description>Enables and disables all ssi operations</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MWCR: Micro wire Control Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>MWCR</name>
          <description>Micro wire Control Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--MWMOD: Micro wire Transfer Mode-->
            <field>
              <name>MWMOD</name>
              <description>The Micro wire transfer is sequential or non-sequential</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>non-sequential transfer</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>sequential transfer</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--MDD: Micro wire Control-->
            <field>
              <name>MDD</name>
              <description>The direction of the data word when the Micro wire serial
                           protocol is used
        </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>the data word is received by the SSI MacroCell from the external serial device</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description> the data word is transmitted from the SSI MacroCell to the external serial device</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--MHS: Microwire Handshaking-->
            <field>
              <name>MHS</name>
              <description>Microwire Handshaking. Used to enable and disable the busy/ready handshaking 
                     interface for the Microwire protocol
        </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>handshaking interface is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>handshaking interface is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SER: SLAVE ENABLE REGISTER -->
        <!-- REGISTER 5 -->
        <register>
          <name>SER</name>
          <description>SLAVE ENABLE REGISTER</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0F</resetMask>
          <fields>
            <!--SER: slave select enable-->
            <field>
              <name>SER</name>
              <description>Each bit in this register corresponds to a slave select line (ss_x_n) from the SSI master.
            </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Not selected</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>selected</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- BAUDR: Baud Rate Select Register -->
        <!-- REGISTER 6 -->
        <register>
          <name>BAUDR</name>
          <description>Baud Rate Select Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--SCKDV: SSI Clock Divider-->
            <field>
              <name>SCKDV</name>
              <description>SSI Clock Divider.The LSB for this field is always set to 0 and is unaffected by a write
              operation, which ensures an even value is held in this register</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- TXFTLR: Transmit FIFO Threshold Level Register-->
        <!-- REGISTER 7 -->
        <register>
          <name>TXFTLR</name>
          <description>Transmit FIFO Threshold Level Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--TFT: Transmit FIFO Threshold-->
            <field>
              <name>TFT</name>
              <description>Controls the level of entries (or below) at which the transmit 
                     FIFO controller triggers an interrupt
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- RXFTLR: Receive FIFO Threshold Level -->
        <!-- REGISTER 8 -->
        <register>
          <name>RXFTLR</name>
          <description>Receive FIFO Threshold Level</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--RFT: Receive FIFO Threshold-->
            <field>
              <name>RFT</name>
              <description>Controls the level of entries (or above) at which the 
                     receive FIFO controller triggers an interrupt
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- TXFLR: Transmit FIFO Level Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>TXFLR</name>
          <description>Transmit FIFO Level Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXTFL: Transmit FIFO Level -->
            <field>
              <name>TXTFL</name>
              <description>Contains the number of valid data entries in the transmit FIFO
        </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RXFLR: Receive FIFO Level Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>RXFLR</name>
          <description>Receive FIFO Level Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RXTFL:Receive FIFO Level -->
            <field>
              <name>RXTFL</name>
              <description>Contains the number of valid data entries in the receive FIFO
        </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SR: Status Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>SR</name>
          <description>Status Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000006</resetValue>
          <fields>
            <!-- BUSY: SSI Busy Flag -->
            <field>
              <name>BUSY</name>
              <description>indicates that a serial transfer is in progress
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>SSI is idle or disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>SSI is actively transferring data</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFNF: Transmit FIFO Not Full -->
            <field>
              <name>TFNF</name>
              <description>Set when the transmit FIFO contains one or more empty locations
                           and is cleared when the FIFO is full
        </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Transmit FIFO is full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Transmit FIFO is not full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TFE: Transmit FIFO Empty -->
            <field>
              <name>TFE</name>
              <description>When the transmit FIFO is completely empty this bit is set
        </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Transmit FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Transmit FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFNE: Receive FIFO Not Empty -->
            <field>
              <name>RFNE</name>
              <description>Set when the receive FIFO contains one or more entries and is 
                     cleared when the receive FIFO is empty
        </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Receive FIFO is empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Receive FIFO is not empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RFF: Receive FIFO Full -->
            <field>
              <name>RFF</name>
              <description>When the receive FIFO is completely full this bit is set
        </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Receive FIFO is not full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Receive FIFO is full</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXE: Transmission Error -->
            <field>
              <name>TXE</name>
              <description>This bit is cleared when read
        </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>No error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Transmission error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DCOL: Data collosion error -->
            <field>
              <name>DCOL</name>
              <description>This bit is set if the ss_in_n input is asserted by another master,
                           while the ssi master is in the middle of the transfer
        </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>No error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Transmit data collision error</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- IMR: Interrupt Mask Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>IMR</name>
          <description>Interrupt Mask Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000003F</resetValue>
          <resetMask>0x3F</resetMask>
          <fields>
            <!-- TXEIM:Transmit FIFO Empty Interrupt Mask -->
            <field>
              <name>TXEIM</name>
              <description>Transmit FIFO Empty Interrupt Mask</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description> ssi_txe_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_txe_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXOIM:Transmit FIFO Overflow Interrupt Mask -->
            <field>
              <name>TXOIM</name>
              <description>Transmit FIFO Overflow Interrupt Mask</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description> ssi_txo_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_txo_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXUIM:Receive FIFO Underflow Interrupt Mask -->
            <field>
              <name>RXUIM</name>
              <description>Receive FIFO Underflow Interrupt Mask</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description> ssi_rxu_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_rxu_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXOIM: Receive FIFO Overflow Interrupt Mask -->
            <field>
              <name>RXOIM</name>
              <description>Receive FIFO Overflow Interrupt Mask</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_rxo_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_rxo_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXFIM: Receive FIFO Full Interrupt Mask -->
            <field>
              <name>RXFIM</name>
              <description>Receive FIFO Full Interrupt Mask</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_rxf_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_rxf_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MSTIM: Multi-Master Contention Interrupt Mask -->
            <field>
              <name>MSTIM</name>
              <description>Multi-Master Contention Interrupt Mask</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_mst_intr interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_mst_intr interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- ISR: Interrupt Status Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>ISR</name>
          <description>Interrupt Status Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXEIS:Transmit FIFO Empty Interrupt Status-->
            <field>
              <name>TXEIS</name>
              <description>Transmit FIFO Empty Interrupt Status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_txe_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_txe_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXOIS: Transmit FIFO Overflow Interrupt Status -->
            <field>
              <name>TXOIS</name>
              <description>Transmit FIFO Overflow Interrupt Status</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_txo_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_txo_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXUIS: Receive FIFO Underflow Interrupt Status -->
            <field>
              <name>RXUIS</name>
              <description>Receive FIFO Underflow Interrupt Status</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_rxu_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_rxu_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXOIS: Receive FIFO Overflow Interrupt Status -->
            <field>
              <name>RXOIS</name>
              <description>Receive FIFO Overflow Interrupt Status</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_rxo_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_rxo_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXFIS: Receive FIFO Full Interrupt Status -->
            <field>
              <name>RXFIS</name>
              <description>Receive FIFO Full Interrupt Status</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_rxf_intr interrupt is not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_rxf_intr interrupt is full after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MSTIS: Multi-Master Contention Interrupt Status -->
            <field>
              <name>MSTIS</name>
              <description>Multi-Master Contention Interrupt Status</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_mst_intr interrupt not active after masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_mst_intr interrupt is active after masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RISR: Raw Interrupt Status Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>RISR</name>
          <description>Raw Interrupt Status Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXEIR: Transmit FIFO Empty Raw Interrupt Status -->
            <field>
              <name>TXEIR</name>
              <description>Transmit FIFO Empty Raw Interrupt Status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_txe_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_txe_intr interrupt is active prior masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TXOIR: Transmit FIFO Overflow Raw Interrupt Status -->
            <field>
              <name>TXOIR</name>
              <description>Transmit FIFO Overflow Raw Interrupt Status</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_txo_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>1 = ssi_txo_intr interrupt is active prior masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXUIR: Receive FIFO Underflow Raw Interrupt Status -->
            <field>
              <name>RXUIR</name>
              <description>Receive FIFO Underflow Raw Interrupt Status</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_rxu_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_rxu_intr interrupt is active prior to masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXOIR: Receive FIFO Overflow Raw Interrupt Status -->
            <field>
              <name>RXOIR</name>
              <description>Receive FIFO Overflow Raw Interrupt Status</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_rxo_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_rxo_intr interrupt is active prior masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RXFIR: Receive FIFO Full Raw Interrupt Status -->
            <field>
              <name>RXFIR</name>
              <description>Receive FIFO Full Raw Interrupt Status</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_rxf_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_rxf_intr interrupt is active prior to masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MSTIR: Multi-Master Contention Raw Interrupt Status -->
            <field>
              <name>MSTIR</name>
              <description>Multi-Master Contention Raw Interrupt Status</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>ssi_mst_intr interrupt is not active prior to masking</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>ssi_mst_intr interrupt is active prior masking</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- TXOICR: Transmit FIFO Overflow Interrupt Clear Register -->
        <!-- REGISTER 15 -->
        <register>
          <name>TXOICR</name>
          <description>Transmit FIFO Overflow Interrupt Clear Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TXOICR: Transmit FIFO Overflow Interrupt Clear Register -->
            <field>
              <name>TXOICR</name>
              <description>Clear Transmit FIFO Overflow Interrupt This register reflects the status of the interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RXOICR: Receive FIFO Overflow Interrupt Clear Register -->
        <!-- REGISTER 16 -->
        <register>
          <name>RXOICR</name>
          <description>Receive FIFO Overflow Interrupt Clear Register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RXOICR: Receive FIFO Overflow Interrupt Clear Register -->
            <field>
              <name>RXOICR</name>
              <description>This register reflects the status of the interrupt A read from this 
                     register clears the ssi_rxo_intr interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RXUICR: Receive FIFO Underflow Interrupt Clear Register -->
        <!-- REGISTER 17 -->
        <register>
          <name>RXUICR</name>
          <description>Receive FIFO Underflow Interrupt Clear Register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- RXUICR:Receive FIFO Underflow Interrupt Clear Register -->
            <field>
              <name>RXUICR</name>
              <description>This register reflects the status of the interrupt A read from this 
                     register clears the ssi_rxu_intr interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MSTICR: Multi-Master Interrupt Clear Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>MSTICR</name>
          <description>Multi-Master Interrupt Clear Register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- MSTICR: Multi-Master Interrupt Clear Register -->
            <field>
              <name>MSTICR</name>
              <description>This register reflects the status of the interrupt A read from this 
                     register clears the ssi_mst_intr interrupt 
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- ICR: Interrupt Clear Register -->
        <!-- REGISTER 19 -->
        <register>
          <name>ICR</name>
          <description>Interrupt Clear Register</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- ICR: Interrupt Clear Register -->
            <field>
              <name>ICR</name>
              <description>This register is set if any of the interrupts below are active A read clears
                           the ssi_txo_intr, ssi_rxu_intr, ssi_rxo_intr, and the ssi_mst_intr interrupts
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMACR: DMA Control Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>DMACR</name>
          <description>DMA Control Register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x3</resetMask>
          <fields>
            <!--  RDMAE: Receive DMA Enable -->
            <field>
              <name>RDMAE</name>
              <description>This bit enables/disables the receive FIFO DMA channel     
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description> Receive DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Receive DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  TDMAE: Transmit DMA Enable -->
            <field>
              <name>TDMAE</name>
              <description>This bit enables/disables the transmit FIFO DMA channel      
        </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disabled</name>
                  <description> Transmit DMA disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enabled</name>
                  <description>Transmit DMA enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMATDLR: DMA Transmit Data Level Register -->
        <!-- REGISTER 21 -->
        <register>
          <name>DMATDLR</name>
          <description>DMA Transmit Data Level</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--  DMATDL: DMA Transmit Data Level -->
            <field>
              <name>DMATDL</name>
              <description>This bit field controls the level at which a DMA
                           request is made by the transmit logic</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DMARDLR: DMA Receive Data Level Register -->
        <!-- REGISTER 22 -->
        <register>
          <name>DMARDLR</name>
          <description>DMA Receive Data Level Register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!--  DMARDL: Receive Data Level -->
            <field>
              <name>DMARDL</name>
              <description>This bit field controls the level at which a DMA request
                           is made by the receive logic
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- IDR: Identification Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>IDR</name>
          <description>Identification Register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--  IDCODE: Identification Code. -->
            <field>
              <name>IDCODE</name>
              <description>This register contains the peripherals identification code
        </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SSI_COMP_VERSION: coreKit version ID register -->
        <!-- REGISTER 24 -->
        <register>
          <name>SSI_COMP_VERSION</name>
          <description>coreKit version ID register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x3430302a</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--  SSI_COMP_VERSION -->
            <field>
              <name>SSI_COMP_VERSION</name>
              <description>Contains the hex representation of the Synopsys component version
        </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- DR: Data Register -->
        <!-- REGISTER 25 -->
        <register>
          <name>DR</name>
          <description>Data Register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- DR: Data Register -->
            <field>
              <name>DR</name>
              <description>When writing to this register must right-justify the data</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- RX_SAMPLE_DLY: Rx Sample Delay Register -->
        <!-- REGISTER 26 -->
        <register>
          <name>RX_SAMPLE_DLY</name>
          <description>Rx Sample Delay Register</description>
          <addressOffset>0xF0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- RSD: Receive Data (rxd) Sample Delay -->
            <field>
              <name>RSD</name>
              <description>Receive Data (rxd) Sample Delay. This register is used to delay the sample of the rxd
              input signal.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SPI_CTRLR0: SPI control Register -->
        <!-- REGISTER 27 -->
        <register>
          <name>SPI_CTRLR0</name>
          <description>SPI control Register</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000200</resetValue>
          <resetMask>0x7FFF</resetMask>
          <fields>
            <!-- TRANS_TYPE: Address and instruction transfer format -->
            <field>
              <name>TRANS_TYPE</name>
              <description>Address and instruction transfer format</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ADDR_L: Length of the address to be transmitted-->
            <field>
              <name>ADDR_L</name>
              <description>This bit defines length of address to be transmitted,
                    The transfer begins only after these many bits are programmed into the FIFO</description>
              <bitRange>[5:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- INST_L: DUAL/QUAD length in bits-->
            <field>
              <name>INST_L</name>
              <description>DUAL/QUAD length in bits</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved for future use</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- WAIT_CYCLES: Wait cycles in DUAL/QUAD mode-->
            <field>
              <name>WAIT_CYCLES</name>
              <description>This bit defines the wait cycles in dual/quad mode between control frames transmit and data reception,
                     Specified as number of SPI clock cycles</description>
              <bitRange>[14:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved for future use</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--SERIAL INPUT/OUTPUT(SIO) -->
    <peripheral>
      <name>SIO</name>
      <version>1.0</version>
      <description>SERIAL GENERAL PERPOSE INPUT/OUTPUT</description>
      <groupName>SGPIO</groupName>
      <baseAddress>0x47000000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x2CC</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>SIO</name>
        <value>37</value>
      </interrupt>
      <registers>
        <!-- ENABLE_REG :ENABLE REGISTER -->
        <!-- REGISTER 1 -->
        <register>
          <name>SIO_ENABLE_REG</name>
          <description>ENABLE REGISTER</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- sio operation enable  -->
            <field>
              <name>SIO_OPERATION_ENABLE</name>
              <description>Contains the Enables for all SIO</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PAUSE_REG: PAUSE REGISTER -->
        <!-- REGISTER 2 -->
        <register>
          <name>SIO_PAUSE_REG</name>
          <description>PAUSE REGISTER</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- SIO position counter disable -->
            <field>
              <name>SIO_POSITION_COUNTER_DISABLE</name>
              <description>Contains sio position counter disable for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- OUT_MUX_REG: Output muxing Register -->
        <!-- REGISTER 3 -->
        <!--#SS dimension should be 8 not 16-->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>SIO_OUT_MUX_REGn</name>
          <description>SIO Output mux register </description>
          <addressOffset>0x230</addressOffset>
          <register>
            <name>SIO_OUT_MUX_REG__n_</name>
            <description>Output muxing Register </description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x3F</resetMask>
            <fields>
              <!--dout oen sel-->
              <field>
                <name>DOUT_OEN_SEL</name>
                <description>OEN select for GPIO pin 0</description>
                <bitRange>[2:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--dout sel-->
              <field>
                <name>DOUT_SEL</name>
                <description>Output mux select for GPIO pin 0</description>
                <bitRange>[5:3]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:6]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- INPUT_MUX_REG: Input muxing Register  -->
        <!-- REGISTER 19 -->
        <!--#SS dimension should be 8 not 16-->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>SIO_INPUT_MUX_REGn</name>
          <description>SIO Input mux register </description>
          <addressOffset>0x270</addressOffset>
          <register>
            <name>SIO_INPUT_MUX_REG__n_</name>
            <description>Input muxing Register </description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x3FF</resetMask>
            <fields>
              <!--clk sel-->
              <field>
                <name>CLK_SEL</name>
                <description>Input clock select for SIO 0</description>
                <bitRange>[2:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--qualifier select-->
              <field>
                <name>QUALIFIER_SELECT</name>
                <description>qualifier select</description>
                <bitRange>[4:3]</bitRange>
                <access>read-write</access>
              </field>
              <!--qualifier mode-->
              <field>
                <name>QUALIFIER_MODE</name>
                <description>qualifier mode</description>
                <bitRange>[6:5]</bitRange>
                <access>read-write</access>
              </field>
              <!--din sel-->
              <field>
                <name>DIN_SEL</name>
                <description>Data in mux select</description>
                <bitRange>[9:7]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:10]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- SHIFT_COUNTER_0: Shift counter register 0-->
        <!-- REGISTER 35 -->
        <!--#SS dimension should be 8 not 16-->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>SIO_SHIFT_COUNTERn</name>
          <description>Shift counter register </description>
          <addressOffset>0x28</addressOffset>
          <register>
            <name>SIO_SHIFT_COUNTER__n_</name>
            <description>Shift counter register </description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x3FFF</resetMask>
            <fields>
              <!--shift counter-->
              <field>
                <name>SHIFT_COUNTER</name>
                <description>shift counter current value</description>
                <bitRange>[13:0]</bitRange>
                <access>read-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:14]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- BUFFER_REG_0: Buffer Register 0 -->
        <!-- REGISTER 51 -->
        <!--#SS dimension should be 8 not 16-->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>SIO_BUFFER_REGn</name>
          <description>SIO Buffer registers </description>
          <addressOffset>0x68</addressOffset>
          <register>
            <name>SIO_BUFFER_REG__n_</name>
            <description>Buffer Register </description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <!--Data-->
              <field>
                <name>DATA</name>
                <description>Data to load into the shift register</description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- SHIFT_COUNT_PRELOAD_REG_0: Shift counter Reload Register 0 -->
        <!-- REGISTER 67 -->
        <!--#SS dimension should be 8 not 16-->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>SIO_SHIFT_COUNT_PRELOAD_REGn</name>
          <description>SIO Shift count preload register </description>
          <addressOffset>0xA8</addressOffset>
          <register>
            <name>SIO_SHIFT_COUNT_PRELOAD_REG__n_</name>
            <description>Shift counter preload Register </description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xBFFF</resetMask>
            <fields>
              <!--reload value-->
              <field>
                <name>RELOAD_VALUE</name>
                <description>division factor required to generate shift clock</description>
                <bitRange>[13:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[14:14]</bitRange>
                <access>read-only</access>
              </field>
              <!--reverse_load-->
              <field>
                <name>REVERSE_LOAD</name>
                <description>When set, the data on APB is loaded to buffer is reverse order</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED2</name>
                <description>Reserved for future use</description>
                <bitRange>[31:16]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- DATA_POS_COUNT_REG: Data Position Counter Register  -->
        <!-- REGISTER 83 -->
        <!--#SS dimension should be 8 not 16-->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>SIO_DATA_POS_COUNT_REGn</name>
          <description>SIO DATA position count registers </description>
          <addressOffset>0xE8</addressOffset>
          <register>
            <name>SIO_DATA_POS_COUNT_REG__n_</name>
            <description>Data Position Counter Register </description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--reload value-->
              <field>
                <name>RELOAD_VALUE</name>
                <description>No. of shifts to happen before reloading the shift register with data/ pausing the operation</description>
                <bitRange>[7:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--position counter-->
              <field>
                <name>POSITION_COUNTER</name>
                <description>The position counter can be loaded via AHB</description>
                <bitRange>[15:8]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED3</name>
                <description>Reserved for future use</description>
                <bitRange>[31:16]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- CONFIG_REG_0: Configuration Register 0 -->
        <!-- REGISTER 99 -->
        <!--#SS dimension should be 8 not 16-->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>SIO_CONFIG_REGn</name>
          <description>SIO Configuration Registers 0 to 15 </description>
          <addressOffset>0x128</addressOffset>
          <register>
            <name>SIO_CONFIG_REG__n_</name>
            <description>Configuration Register </description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x1FFFF</resetMask>
            <fields>
              <!-- full enable -->
              <field>
                <name>FULL_ENABLE</name>
                <description>When set, fifo full indication would be asserted when internal buffer is full</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <!-- empty enable -->
              <field>
                <name>EMPTY_ENABLE</name>
                <description>When set, fifo full indication would be asserted when internal buffer is empty</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <!-- edge sel -->
              <field>
                <name>EDGE_SEL</name>
                <description>edge selection</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>pos edge</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>neg edge</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- clk sel -->
              <field>
                <name>CLK_SEL</name>
                <description>clock selection</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>internal counter clock is used for shift operations and sent out</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>external clock is used for shift operations and is sent out</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- ignore first shift condition -->
              <field>
                <name>IGNORE_FIRST_SHIFT_CONDITION</name>
                <description>data shift condition</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>at a shift/capture happens at the first clock edge</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- flow control enabled -->
              <field>
                <name>FLOW_CONTROL_ENABLED</name>
                <description>flow control</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>flow control disable</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>flow control enable</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- pattern match enable -->
              <field>
                <name>PATTERN_MATCH_ENABLE</name>
                <description>pattern match</description>
                <bitRange>[6:6]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>pattern match disable</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>pattern match enable</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- qualifier mode -->
              <field>
                <name>QUALIFIER_MODE</name>
                <description>qualifier mode</description>
                <bitRange>[7:7]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>none</name>
                    <description>Use direct qualifier input</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>None</name>
                    <description>Use inverted qualifier</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- qualify clock -->
              <field>
                <name>QUALIFY_CLOCK</name>
                <description>qualify clock</description>
                <bitRange>[8:8]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>none</name>
                    <description>output clock is not qualified </description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>None</name>
                    <description>output clock is qualified with qualifier</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- invert clock -->
              <field>
                <name>INVERT_CLOCK</name>
                <description>invert clock</description>
                <bitRange>[9:9]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>None</name>
                    <description>direct version of shift clock is provided out </description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>none</name>
                    <description>inverted version of the clock is provided out</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- parallel mode -->
              <field>
                <name>PARALLEL_MODE</name>
                <description>No. of bits to shift/capture at valid clk edge</description>
                <bitRange>[11:10]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>00</name>
                    <description>1 bit</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>01</name>
                    <description>2 bits</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>10</name>
                    <description>4 bits</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>11</name>
                    <description>8 bits</description>
                    <value>3</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- pin detection mode -->
              <field>
                <name>PIN_DETECTION_MODE</name>
                <description>Pin mode to be considered for gpio interrupt</description>
                <bitRange>[13:12]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>00</name>
                    <description>rise edge</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>01</name>
                    <description>fall edge</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>10</name>
                    <description> level zero</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>11</name>
                    <description>level one</description>
                    <value>3</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- set_clk_out -->
              <field>
                <name>SET_CLK_OUT</name>
                <description>When high sets the sio clock_out port. This is used only when sio is not enabled</description>
                <bitRange>[14:14]</bitRange>
                <access>read-write</access>
              </field>
              <!-- reset_clk_out -->
              <field>
                <name>RESET_CLK_OUT</name>
                <description>When high resets the sio clock_out port. This is used only when sio is not enabled</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
              </field>
              <!-- Load_data_pos_cntr_via_apb -->
              <field>
                <name>LOAD_DATA_POS_CNTR_VIA_APB</name>
                <description>When set, data position counter can be loaded via APB</description>
                <bitRange>[16:16]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:17]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- SIO_PATTERN_MATCH_MASK_REG_slice_0: Pattern Match Mask Register 0 -->
        <!-- REGISTER 115 -->
        <register>
          <name>SIO_PATTERN_MATCH_MASK_REG_SLICE_0</name>
          <description>Pattern Match Mask Register 0</description>
          <addressOffset>0x168</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Match mask lower 16 bits-->
            <field>
              <name>MATCH_MASK_LOWER16_BITS</name>
              <description>Enable for lower 16 bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SIO_PATTERN_MATCH_MASK_REG_slice_1: Pattern Match Mask Register Slice 1 -->
        <!-- REGISTER 116 -->
        <register>
          <name>SIO_PATTERN_MATCH_MASK_REG_SLICE_1</name>
          <description>Pattern Match Mask Register Slice 1</description>
          <addressOffset>0x16C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Match mask lower 16 bits-->
            <field>
              <name>MATCH_MASK_LOWER16_BITS</name>
              <description>Enable for lower 16 bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SIO_PATTERN_MATCH_MASK_REG_slice_2: Pattern Match Mask Register Slice 2 -->
        <!-- REGISTER 117 -->
        <register>
          <name>SIO_PATTERN_MATCH_MASK_REG_SLICE_2</name>
          <description>Pattern Match Mask Register Slice 2</description>
          <addressOffset>0x170</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Match mask lower 16 bits-->
            <field>
              <name>MATCH_MASK_LOWER16_BITS</name>
              <description>Enable for lower 16 bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PATTERN_MATCH_MASK_REG_slice_8: Pattern Match Mask Register Slice 8 -->
        <!-- REGISTER 118 -->
        <register>
          <name>SIO_PATTERN_MATCH_MASK_REG_SLICE_8</name>
          <description>Pattern Match Mask Register Slice 8</description>
          <addressOffset>0x188</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Match mask lower 16 bits-->
            <field>
              <name>MATCH_MASK_LOWER16_BITS</name>
              <description>Enable for lower 16 bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PATTERN_MATCH_MASK_REG_slice_9: Pattern Match Mask Register Slice 9 -->
        <!-- REGISTER 119 -->
        <register>
          <name>SIO_PATTERN_MATCH_MASK_REG_SLICE_9</name>
          <description>Pattern Match Mask Register Slice 9</description>
          <addressOffset>0x18C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Match mask lower 16 bits-->
            <field>
              <name>MATCH_MASK_LOWER16_BITS</name>
              <description>Enable for lower 16 bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PATTERN_MATCH_MASK_REG_slice_10: Pattern Match Mask Register Slice 10 -->
        <!-- REGISTER 120 -->
        <register>
          <name>SIO_PATTERN_MATCH_MASK_REG_SLICE_10</name>
          <description>Pattern Match Mask Register Slice 10</description>
          <addressOffset>0x190</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Match mask lower 16 bits-->
            <field>
              <name>MATCH_MASK_LOWER16_BITS</name>
              <description>Enable for lower 16 bits</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--  PATTERN_MATCH_REG_slice_0: Pattern Match Register Slice 0 -->
        <!-- REGISTER 121 -->
        <register>
          <name>SIO_PATTERN_MATCH_REG_SLICE_0</name>
          <description>Pattern Match Mask Register Slice 0</description>
          <addressOffset>0x1A8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Pattern match lower 16 bits-->
            <field>
              <name>PATTERN_MATCH_LOWER16_BITS</name>
              <description>Lower 16-bits of pattern to be detected</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--  PATTERN_MATCH_REG_slice_1: Pattern Match Register Slice 1 -->
        <!-- REGISTER 122 -->
        <register>
          <name>SIO_PATTERN_MATCH_REG_SLICE_1</name>
          <description>Pattern Match Mask Register Slice 1</description>
          <addressOffset>0x1AC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Pattern match lower 16 bits-->
            <field>
              <name>PATTERN_MATCH_LOWER16_BITS</name>
              <description>Lower 16-bits of pattern to be detected</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--  PATTERN_MATCH_REG_slice_2: Pattern Match Register Slice 2 -->
        <!-- REGISTER 123 -->
        <register>
          <name>SIO_PATTERN_MATCH_REG_SLICE_2</name>
          <description>Pattern Match Mask Register Slice 2</description>
          <addressOffset>0x1B0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Pattern match lower 16 bits-->
            <field>
              <name>PATTERN_MATCH_LOWER16_BITS</name>
              <description>Lower 16-bits of pattern to be detected</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--  PATTERN_MATCH_REG_slice_8: Pattern Match Register Slice 8 -->
        <!-- REGISTER 124 -->
        <register>
          <name>SIO_PATTERN_MATCH_REG_SLICE_8</name>
          <description>Pattern Match Mask Register Slice 8</description>
          <addressOffset>0x1C8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Pattern match lower 16 bits-->
            <field>
              <name>PATTERN_MATCH_LOWER16_BITS</name>
              <description>Lower 16 bits of pattern to be detected</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--  PATTERN_MATCH_REG_slice_9: Pattern Match Register Slice 9 -->
        <!-- REGISTER 125 -->
        <register>
          <name>SIO_PATTERN_MATCH_REG_SLICE_9</name>
          <description>Pattern Match Mask Register Slice 9</description>
          <addressOffset>0x1CC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Pattern match lower 16 bits-->
            <field>
              <name>PATTERN_MATCH_LOWER16_BITS</name>
              <description>Lower 16 bits of pattern to be detected</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--  PATTERN_MATCH_REG_slice_10: Pattern Match Register Slice 10 -->
        <!-- REGISTER 126 -->
        <register>
          <name>SIO_PATTERN_MATCH_REG_SLICE_10</name>
          <description>Pattern Match Mask Register Slice 10</description>
          <addressOffset>0x1D0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Pattern match lower 16 bits-->
            <field>
              <name>PATTERN_MATCH_LOWER16_BITS</name>
              <description>Lower 16 bits of pattern to be detected</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PATTERN_MATCH_INTR_EN_SET_REG: Pattern Match Interrupt Enable Set Register-->
        <!-- REGISTER 127 -->
        <register>
          <name>SIO_PATTERN_MATCH_INTR_EN_SET_REG</name>
          <description>Pattern Match Interrupt Enable Set Register</description>
          <addressOffset>0x218</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr enable set -->
            <field>
              <name>INTR_ENABLE_SET</name>
              <description>Common pattern or buffer under run interrupt enable set register for all SIOs. Each bit corresponds to one SIO</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PATTERN_MATCH_INTR_EN_CLEAR_REG: Pattern Match Interrupt Enable Clear Register-->
        <!-- REGISTER 128 -->
        <register>
          <name>SIO_PATTERN_MATCH_INTR_EN_CLEAR_REG</name>
          <description>Pattern Match Interrupt Enable Clear Register</description>
          <addressOffset>0x21C</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- inrt enable clear -->
            <field>
              <name>INRT_ENABLE_CLEAR</name>
              <description>Common pattern or buffer under run interrupt enable clear register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- PATTERN_MATCH_INTR_MASK_SET_REG: Pattern Match Interrupt Mask Set Register-->
        <!-- REGISTER 129 -->
        <register>
          <name>SIO_PATTERN_MATCH_INTR_MASK_SET_REG</name>
          <description>Pattern Match Interrupt Mask Set Register</description>
          <addressOffset>0x220</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr mask set -->
            <field>
              <name>INTR_MASK_SET</name>
              <description>Common pattern or buffer under run interrupt mask set register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PATTERN_MATCH_INTR_MASK_CLEAR_REG: Pattern Match Interrupt Mask Clear Register-->
        <!-- REGISTER 130 -->
        <register>
          <name>SIO_PATTERN_MATCH_INTR_MASK_CLEAR_REG</name>
          <description>Pattern Match Interrupt Mask Clear Register</description>
          <addressOffset>0x224</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr mask Clear -->
            <field>
              <name>INTR_MASK_CLEAR</name>
              <description>Common pattern or buffer under run interrupt mask clear register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- PATTERN_MATCH_INTR_STATUS_REG: Pattern Match Interrupt Status Register-->
        <!-- REGISTER 131 -->
        <register>
          <name>SIO_PATTERN_MATCH_INTR_STATUS_REG</name>
          <description>Pattern Match Interrupt Status Register</description>
          <addressOffset>0x228</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr Status -->
            <field>
              <name>INTR_STATUS</name>
              <description>Common pattern interrupt status register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- BUFFER_INTR_STATUS_REG: Buffer Interrupt Status Register-->
        <!-- REGISTER 132 -->
        <register>
          <name>SIO_BUFFER_INTR_STATUS_REG</name>
          <description>Buffer Interrupt Status Register</description>
          <addressOffset>0x22C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr status -->
            <field>
              <name>INTR_STATUS</name>
              <description>Common pattern interrupt status register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SHIFT_INTR_EN_SET_REG: Shift Interrupt Enable Set Register-->
        <!-- REGISTER 133 -->
        <register>
          <name>SIO_SHIFT_INTR_EN_SET_REG</name>
          <description>Shift Interrupt Enable Set Register</description>
          <addressOffset>0x1F0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr enable set -->
            <field>
              <name>INTR_ENABLE_SET</name>
              <description>Common shift interrupt enable set register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SHIFT_INTR_EN_CLEAR_REG: Shift Interrupt Enable Clear Register-->
        <!-- REGISTER 134 -->
        <register>
          <name>SIO_SHIFT_INTR_EN_CLEAR_REG</name>
          <description>Shift Interrupt Enable Clear Register</description>
          <addressOffset>0x1F4</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- inrt enable clear -->
            <field>
              <name>INRT_ENABLE_CLEAR</name>
              <description>Common shift interrupt enable Clear register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- SHIFT_INTR_MASK_SET_REG: Shift Interrupt Mask Set Register-->
        <!-- REGISTER 135 -->
        <register>
          <name>SIO_SHIFT_INTR_MASK_SET_REG</name>
          <description>Shift Interrupt Mask Set Register</description>
          <addressOffset>0x1F8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- inrt mask set -->
            <field>
              <name>INTR_MASK_SET</name>
              <description>Common shift interrupt enable Set register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SHIFT_INTR_MASK_CLEAR_REG: Shift Interrupt Mask Clear Register-->
        <!-- REGISTER 136 -->
        <register>
          <name>SIO_SHIFT_INTR_MASK_CLEAR_REG</name>
          <description>Shift Interrupt Mask Clear Register</description>
          <addressOffset>0x1FC</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr mask clear -->
            <field>
              <name>INTR_MASK_CLEAR</name>
              <description>Common shift interrupt mask clear register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- SHIFT_INTR_STATUS_REG: Shift Interrupt Status Register-->
        <!-- REGISTER 137 -->
        <register>
          <name>SIO_SHIFT_INTR_STATUS_REG</name>
          <description>Shift Interrupt Status Register</description>
          <addressOffset>0x200</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr enable set -->
            <field>
              <name>INTR_ENABLE_SET</name>
              <description>Common shift interrupt mask clear register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SWAP_INTR_EN_SET_REG: Swap Interrupt Enable Set Register-->
        <!-- REGISTER 138 -->
        <register>
          <name>SIO_SWAP_INTR_EN_SET_REG</name>
          <description>Swap Interrupt Enable Set Register</description>
          <addressOffset>0x204</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr enable set -->
            <field>
              <name>INTR_ENABLE_SET</name>
              <description>Swap interrupt enable set register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--  SWAP_INTR_EN_CLEAR_REG: Swap Interrupt Enable Clear Register-->
        <!-- REGISTER 139 -->
        <register>
          <name>SIO_SWAP_INTR_EN_CLEAR_REG</name>
          <description>Swap Interrupt Enable Clear Register</description>
          <addressOffset>0x208</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr enable Clear -->
            <field>
              <name>INTR_ENABLE_CLEAR</name>
              <description>Swap interrupt enable Clear register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!--  SWAP_INTR_MASK_SET_REG: Swap Interrupt Mask Set Register-->
        <!-- REGISTER 140 -->
        <register>
          <name>SIO_SWAP_INTR_MASK_SET_REG</name>
          <description>Swap Interrupt Mask Set Register</description>
          <addressOffset>0x20C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr mask set -->
            <field>
              <name>INTR_MASK_SET</name>
              <description>Common swap interrupt mask set register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--  SWAP_INTR_MASK_CLEAR_REG: Swap Interrupt Mask Clear Register-->
        <!-- REGISTER 141 -->
        <register>
          <name>SIO_SWAP_INTR_MASK_CLEAR_REG</name>
          <description>Swap Interrupt Mask Clear Register</description>
          <addressOffset>0x210</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr mask Clear -->
            <field>
              <name>INTR_MASK_CLEAR</name>
              <description>Common swap interrupt mask Clear register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!--  SWAP_INTR_STATUS_REG: Swap Interrupt Status Register-->
        <!-- REGISTER 142 -->
        <register>
          <name>SIO_SWAP_INTR_STATUS_REG</name>
          <description>Swap Interrupt Statusr Register</description>
          <addressOffset>0x214</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr enable set -->
            <field>
              <name>INTR_ENABLE_SET</name>
              <description>Common swap interrupt status register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--  GPIO_INTR_EN_SET_REG: GPIO Interrupt Enable Set Register-->
        <!-- REGISTER 143 -->
        <register>
          <name>SIO_GPIO_INTR_EN_SET_REG</name>
          <description> GPIO Interrupt Enable Set Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr enable set-->
            <field>
              <name>INTR_ENABLE_SET</name>
              <description>gpio interrupt enable set register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--  GPIO_INTR_EN_CLEAR_REG: GPIO Interrupt Enable Clear Register-->
        <!-- REGISTER 144 -->
        <register>
          <name>SIO_GPIO_INTR_EN_CLEAR_REG</name>
          <description>GPIO Interrupt Enable Clear Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr enable Clear-->
            <field>
              <name>INTR_ENABLE_CLEAR</name>
              <description>gpio interrupt enable Clear register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!--  GPIO_INTR_MASK_SET_REG: GPIO Interrupt Mask Set Clear Register-->
        <!-- REGISTER 145 -->
        <register>
          <name>SIO_GPIO_INTR_MASK_SET_REG</name>
          <description> GPIO Interrupt Enable Clear Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr mask set-->
            <field>
              <name>INTR_MASK_SET</name>
              <description>Common gpio interrupt mask set register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--   GPIO_INTR_MASK_CLEAR_REG: GPIO Interrupt Mask Set Clear Register-->
        <!-- REGISTER 146 -->
        <register>
          <name>SIO_GPIO_INTR_MASK_CLEAR_REG</name>
          <description> GPIO Interrupt Enable Clear Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr mask clear-->
            <field>
              <name>INTR_MASK_CLEAR</name>
              <description>gpio interrupt mask clear register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!--   GPIO_INTR_STATUS_REG: GPIO Interrupt Status Register-->
        <!-- REGISTER 147-->
        <register>
          <name>SIO_GPIO_INTR_STATUS_REG</name>
          <description> GPIO Interrupt Status Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- intr mask set-->
            <field>
              <name>INTR_MASK_SET</name>
              <description>Common gpio interrupt status register for all SIOs</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- GPIO_IN_REG:GPIO Input Register-->
        <!-- REGISTER 148 -->
        <register>
          <name>SIO_GPIO_IN_REG</name>
          <description>GPIO Input Register</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Data-->
            <field>
              <name>IN_VALUE</name>
              <description>GPIO input pin status</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- GPIO_OUT_REG:GPIO Output Register-->
        <!-- REGISTER 149-->
        <register>
          <name>SIO_GPIO_OUT_REG</name>
          <description>GPIO Output Register</description>
          <addressOffset>0xC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Data-->
            <field>
              <name>OUT_VALUE</name>
              <description>Value to be loaded on GPIO out pins</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- GPIO_OEN_REG:GPIO Output enable Register-->
        <!-- REGISTER 150 -->
        <register>
          <name>SIO_GPIO_OEN_REG</name>
          <description>GPIO Output enable Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Data-->
            <field>
              <name>OEN_VALUE</name>
              <description>OEN for the GPIO pins</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- FIFO_WR_RD_REG:FIFO read/write Register-->
        <!-- REGISTER 149-->
        <register>
          <name>SIO_FIFO_WR_RD_REG</name>
          <description>FIFO READ/WRITE Register</description>
          <addressOffset>0x2B0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--FIFO Data Register-->
            <field>
              <name>FIFO_DATA_REGISTER</name>
              <description>Writes and read into this register will be written into SIO buffer register</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- FIFO_WR_OFFSET_START_REG:SIO start slice no indication Register-->
        <!-- REGISTER 150 -->
        <register>
          <name>SIO_FIFO_WR_OFFSET_START_REG</name>
          <description>Points to start slice number forming the FIFO</description>
          <addressOffset>0x2B4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--SIO Start Slice Number-->
            <field>
              <name>SIO_START_SLICE_NUMBER</name>
              <description>Points to start slice number forming the FIFO,On write, FIFO_WR_OFFSET_CNT_REG 
		               will also be reset to the value pointed written into this register</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- FIFO_WR_OFFSET_END_REG:SIO last slice no indication Register-->
        <!-- REGISTER 149-->
        <register>
          <name>SIO_FIFO_WR_OFFSET_END_REG</name>
          <description>SIO last slice no indication Register</description>
          <addressOffset>0x2B8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--SIO End Slice Number-->
            <field>
              <name>SIO_END_SLICE_NUMBER</name>
              <description>points to last slice no forming fifo</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- FIFO_WR_OFFSET_CNT_REG:SIO current slice no indication Register-->
        <!-- REGISTER 150 -->
        <register>
          <name>SIO_FIFO_WR_OFFSET_CNT_REG</name>
          <description>Points to current slice number forming the FIFO</description>
          <addressOffset>0x2BC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--SIO current Slice Number-->
            <field>
              <name>SIO_CURRENT_SLICE_NUMBER</name>
              <description>Next FIFO operation will happen to buffer in the slice pointed by this register</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- FIFO_RD_OFFSET_START_REG:SIO start slice no indication Register-->
        <!-- REGISTER 150 -->
        <register>
          <name>SIO_FIFO_RD_OFFSET_START_REG</name>
          <description>Points to start slice number forming the FIFO</description>
          <addressOffset>0x2C0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--SIO start Slice Number-->
            <field>
              <name>SIO_START_SLICE_NUMBER</name>
              <description>Points to start slice number forming the FIFO</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- FIFO_RD_OFFSET_END_REG:SIO last slice no indication Register-->
        <!-- REGISTER 150 -->
        <register>
          <name>SIO_FIFO_RD_OFFSET_END_REG</name>
          <description>Points to last slice number forming the FIFO</description>
          <addressOffset>0x2C4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--SIO end Slice Number-->
            <field>
              <name>SIO_END_SLICE_NUMBER</name>
              <description>Points to last slice number forming the FIFO</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- FIFO_RD_OFFSET_CNT_REG:SIO current slice no indication Register-->
        <!-- REGISTER 150 -->
        <register>
          <name>SIO_FIFO_RD_OFFSET_CNT_REG</name>
          <description>Points to start current number forming the FIFO</description>
          <addressOffset>0x2C8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--SIO current Slice Number-->
            <field>
              <name>SIO_CURRENT_SLICE_NUMBER</name>
              <description>Next FIFO operation will happen to buffer in the slice pointed by this register
              			  This register has to be set to zero before starting fresh DMA operation</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- QSPI -->
    <peripheral>
      <name>QSPI</name>
      <version>1.0</version>
      <description>The queued serial peripheral interface module provides a serial peripheral interface with queued transfer capability
	    </description>
      <groupName>QSPI</groupName>
      <baseAddress>0x12000000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x164</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>QSPI</name>
        <value>60</value>
      </interrupt>
      <registers>
        <!-- QSPI_CLK_CONFIG : QSPI Clock Configuration Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>QSPI_CLK_CONFIG</name>
          <description>QSPI Clock Configuration Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x11F</resetValue>
          <resetMask>0xFFF</resetMask>
          <fields>
            <!-- QSPI_auto_csn_high_cnt -->
            <field>
              <name>QSPI_AUTO_CSN_HIGH_CNT</name>
              <description>Minimum SOC clock cycles, during which QSPI auto csn should be high between consecutive CSN assertions</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_CLK_SYNC -->
            <field>
              <name>RESERVED0</name>
              <description>Reserved</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_CLK_EN -->
            <field>
              <name>QSPI_CLK_EN_SCLK</name>
              <description>QSPI clock enable</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Dynamic_Clock_Gating_Enabled</name>
                  <description>Dynamic clock gating is enabled in side QSPI controller</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Full_Time_Clock_Enabled</name>
                  <description>Full time clock is enabled for QSPI controller.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Spi_clk_delay_val -->
            <field>
              <name>SPI_CLK_DELAY_VAL</name>
              <description>Delay value programmed to RX QSPI DLL on read side. 
			               This delay is used to delay the pad clock/DQS according to the requirement</description>
              <bitRange>[17:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Octa_mode_enable_with_dqs -->
            <field>
              <name>OCTA_MODE_ENABLE_WITH_DQS</name>
              <description>Enables SPI octa mode along with DQS in DDR mode</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_dll_enable -->
            <field>
              <name>QSPI_DLL_ENABLE</name>
              <description>Enable for RX QSPI DLL in read mode.This is used in M4SS QSPI DDR pads to delay the pad clock DQS input</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>DLL</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>DLL is disabled/bypassed.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>DLL is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ddr_clk_polarity_from_reg -->
            <field>
              <name>DDR_CLK_POLARITY_FROM_REG</name>
              <description>Used this bit to sample the data at posedge negedge after interface FFs with internal qspi clock
			               0-Sample at negedge 1-Sample at posedge</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Sample_Edge</name>
                <enumeratedValue>
                  <name>Negative_Edge</name>
                  <description>Sample at Negative edge</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Positive_Edge</name>
                  <description>Sample at positive edge</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_dll_enable_tx -->
            <field>
              <name>QSPI_DLL_ENABLE_TX</name>
              <description>Enable for TX QSPI DLL in write path. This is used in M4SS QSPI DDR pads to delay the qspi clock output.
                           0–DLL is disabled bypassed 1–DLL is enabled</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>DLL</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>DLL is disabled/bypassed.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>DLL is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Spi_clk_delay_val_tx-->
            <field>
              <name>SPI_CLK_DELAY_VAL_TX</name>
              <description>Delay value programmed to TX QSPI DLL in write path. 
			               This delay is used to delay the qspi clock output according to the requirement</description>
              <bitRange>[27:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_rx_dqs_dll_calib-->
            <field>
              <name>QSPI_RX_DQS_DLL_CALIB</name>
              <description>Delay value programmed to TX QSPI DLL in write path. 
			               This delay is used to delay the qspi clock output according to the requirement</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED3 -->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_BUS_MODE : QSPI Bus Mode Register  -->
        <!-- REGISTER 2 -->
        <register>
          <name>QSPI_BUS_MODE</name>
          <description>QSPI Bus Mode Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_9116_FEATURE_EN -->
            <field>
              <name>QSPI_9116_FEATURE_EN</name>
              <description>9115 specific features are enabled with this enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_MAN_MODE_CONF_CSN0 -->
            <field>
              <name>QSPI_MAN_MODE_CONF_CSN0</name>
              <description>Configures the QSPI flash for Single/Dual/Quad mode operation in manual mode</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Single Mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual Mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad Mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--AUTO_MODE_RESET-->
            <field>
              <name>AUTO_MODE_RESET</name>
              <description>QSPI Auto controller reset. This is not a Self clearing bit</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Auto mode is active</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Auto mode is inactive</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_PREFETCH_EN-->
            <field>
              <name>QSPI_PREFETCH_EN</name>
              <description>Pre-fetch of data from the model which is connected to QSPI, automatically with out reading on AHB and is supplied to AHB, 
							when address is matched with AHB read transaction address
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Pre-fetch mode is disabled.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Pre-fetch mode is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_WRAP_EN-->
            <field>
              <name>QSPI_WRAP_EN</name>
              <description> Model wrap is considered with this bit and uses wrap instruction to read from FLASH</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Wrap mode is disabled (AHB WRAP can be used).</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Wrap mode is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_AUTO_MODE_FRM_REG-->
            <field>
              <name>QSPI_AUTO_MODE_FRM_REG</name>
              <description>QSPI Mode of Operation</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual Mode is selected</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Auto Mode is selected.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Programmable_auto_csn_base_addr_en -->
            <field>
              <name>PROGRAMMABLE_AUTO_CSN_BASE_ADDR_EN</name>
              <description>Programmable auto csn mode enable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D2_OEN_CSN0-->
            <field>
              <name>QSPI_D2_OEN_CSN0</name>
              <description>Direction Control for SPI_IO2 in case of dual/single mode for chip select0 csn0.
						   It is used both in Auto and Manual Mode</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D3_OEN_CSN0-->
            <field>
              <name>QSPI_D3_OEN_CSN0</name>
              <description>Direction Control for SPI_IO3 in case of dual/single mode for chip select0 csn0.
						   It is used both in Auto and Manual Mode.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D2_DATA_CSN0-->
            <field>
              <name>QSPI_D2_DATA_CSN0</name>
              <description>Value of SPI_IO2 in case of dual/single mode for chip select0 csn0.
						   It is used both in Auto and Manual Mode.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D3_DATA_CSN0-->
            <field>
              <name>QSPI_D3_DATA_CSN0</name>
              <description>Value of SPI_IO3 in case of dual/single mode for chip select0 csn0.
						   It is used both in Auto and Manual Mode</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D2_OEN_CSN1-->
            <field>
              <name>QSPI_D2_OEN_CSN1</name>
              <description>Direction Control for SPI_IO2 in case of dual/single mode for chip select1 csn1</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D3_OEN_CSN1-->
            <field>
              <name>QSPI_D3_OEN_CSN1</name>
              <description>Direction Control for SPI_IO3 in case of dual/single mode for chip select1 csn1</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D2_DATA_CSN1-->
            <field>
              <name>QSPI_D2_DATA_CSN1</name>
              <description>Direction Control for SPI_IO3 in case of dual/single mode for chip select1 csn1</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D3_DATA_CSN1-->
            <field>
              <name>QSPI_D3_DATA_CSN1</name>
              <description>Value of SPI_IO3 in case of dual/single mode for chip select1 csn1</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DATA_SAMPLE_EDGE-->
            <field>
              <name>QSPI_DATA_SAMPLE_EDGE</name>
              <description>Samples MISO data on clock edges</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Pos edge of loop back spi_pad_clk</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Neg edge of loop back spi_pad_clk</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CLK_MODE_CSN0-->
            <field>
              <name>QSPI_CLK_MODE_CSN0</name>
              <description>QSPI Clock Mode</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MOde0</name>
                  <description>Mode 0, QSPI_CLK is low when QSPI_CS is high for chip select0 csn0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode3</name>
                  <description>Mode 3, QSPI_CLK is high when QSPI_CS is high for chip select0 csn0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CLK_MODE_CSN1-->
            <field>
              <name>QSPI_CLK_MODE_CSN1</name>
              <description>QSPI Clock Mode</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MOde0</name>
                  <description>Mode 0, QSPI_CLK is low when QSPI_CS is high for chip select1 csn1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode3</name>
                  <description>Mode 3, QSPI_CLK is high when QSPI_CS is high for chip select1 csn1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CLK_MODE_CSN2-->
            <field>
              <name>QSPI_CLK_MODE_CSN2</name>
              <description>QSPI Clock Mode</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MOde0</name>
                  <description>Mode 0 QSPI_CLK is low when QSPI_CS is high for chip select2 csn2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode3</name>
                  <description>Mode 3 QSPI_CLK is high when QSPI_CS is high for chip select2 csn2</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CLK_MODE_CSN3-->
            <field>
              <name>QSPI_CLK_MODE_CSN3</name>
              <description>QSPI Clock Mode</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MOde0</name>
                  <description>Mode 0, QSPI_CLK is low when QSPI_CS is high for chip select3 csn3</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode3</name>
                  <description>Mode 3, QSPI_CLK is high when QSPI_CS is high for chip select3 csn3</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Flash_aw_fifo_ls_en -->
            <field>
              <name>FLASH_AW_FIFO_LS_EN</name>
              <description>Qspi flash auto write fifo light sleep enable</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Flash_sec_aes_ls_en -->
            <field>
              <name>FLASH_SEC_AES_LS_EN</name>
              <description>Qspi flash auto write fifo light sleep enable</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D2_OEN_CSN2-->
            <field>
              <name>QSPI_D2_OEN_CSN2</name>
              <description>Direction Control for SPI_IO2 in case of dual/single mode for chip select2 csn2</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D3_OEN_CSN2-->
            <field>
              <name>QSPI_D3_OEN_CSN2</name>
              <description>Direction Control for SPI_IO3 in case of dual/single mode for chip select2 csn2</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D2_DATA_CSN2-->
            <field>
              <name>QSPI_D2_DATA_CSN2</name>
              <description>Value of SPI_IO2 in case of dual/single mode for chip select2 csn2</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_D3_DATA_CSN2-->
            <field>
              <name>QSPI_D3_DATA_CSN2</name>
              <description>Value of SPI_IO3 in case of dual/single mode for chip select2 csn2</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_D2_OEN_CSN3-->
            <field>
              <name>QSPI_D2_OEN_CSN3</name>
              <description>Direction Control for SPI_IO2 in case of dual/single mode for chip select3 csn3</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_D3_OEN_CSN3-->
            <field>
              <name>QSPI_D3_OEN_CSN3</name>
              <description>Direction Control for SPI_IO3 in case of dual/single mode for chip select3 csn3</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_D2_DATA_CSN3-->
            <field>
              <name>QSPI_D2_DATA_CSN3</name>
              <description>Value of SPI_IO2 in case of dual/single mode for chip select3 csn3</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_D3_DATA_CSN3-->
            <field>
              <name>QSPI_D3_DATA_CSN3</name>
              <description>Value of SPI_IO3 in case of dual/single mode for chip select3 csn3</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_1: QSPI Auto Controller Configuration 1 Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>QSPI_AUTO_CONFIG_1</name>
          <description>QSPI Auto Controller Configuration 1 Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF8FFFFF</resetMask>
          <fields>
            <!-- QSPI_EXT_BYTE_MODE_CSN0 -->
            <field>
              <name>QSPI_EXT_BYTE_MODE_CSN0</name>
              <description> Mode of operation of QSPI in the extra byte phase</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DUMMY_MODE_CSN0 -->
            <field>
              <name>QSPI_DUMMY_MODE_CSN0</name>
              <description>Mode of operation of QSPI in instruction phase</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_ADDR_MODE_CSN0 -->
            <field>
              <name>QSPI_ADDR_MODE_CSN0</name>
              <description>Mode of operation of QSPI in instruction phase</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CMD_MODE_CSN0 -->
            <field>
              <name>QSPI_CMD_MODE_CSN0</name>
              <description>Mode of operation of QSPI in instruction phase</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DATA_MODE_CSN0 -->
            <field>
              <name>QSPI_DATA_MODE_CSN0</name>
              <description>Mode of operation of QSPI in DATA phase</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_EXTRA_BYTE_CSN0 -->
            <field>
              <name>QSPI_EXTRA_BYTE_CSN0</name>
              <description>Value of the extra byte to be transmitted, if the extra byte mode is enabled</description>
              <bitRange>[17:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_EXTRA_BYTE_EN_CSN0 -->
            <field>
              <name>QSPI_EXTRA_BYTE_EN_CSN0</name>
              <description>Value of the extra byte to be transmitted, if the extra byte mode is enabled</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Do not transmit extra byte.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Transmit Extra byte after address phase</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Transmit only first nibble of the byte and maintain Hi-Z on the IO bus for next nibble</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_wrap-size -->
            <field>
              <name>QSPI_WRAP_SIZE</name>
              <description>Qspi auto wrap size</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_PG_JUMP_CSN0 -->
            <field>
              <name>QSPI_PG_JUMP_CSN0</name>
              <description>NONE</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DUMMY_BYTES_INCR_CSN0 -->
            <field>
              <name>QSPI_DUMMY_BYTES_INCR_CSN0</name>
              <description>Specifies the number of dummy bytes 0 to 7 for the selected SPI mode</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DUMMY_BYTES_WRAP_CSN0 -->
            <field>
              <name>QSPI_DUMMY_BYTES_WRAP_CSN0</name>
              <description>Specifies the number of dummy bytes 0  to 7 for the selected SPI mode in case of wrap instruction</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_2: QSPI Auto Controller Configuration 2 Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>QSPI_AUTO_CONFIG_2</name>
          <description>QSPI Auto Controller Configuration 2 Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000301</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_RD_DATA_SWAP_AUTO_CSN0 -->
            <field>
              <name>QSPI_RD_DATA_SWAP_AUTO_CSN0</name>
              <description>NONE</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not swap the read data in auto mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Swap the auto read data in auto mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_ADR_SIZE_16_BIT_AUTO_MODE_CSN0 -->
            <field>
              <name>QSPI_ADR_SIZE_16BIT_AUTO_MODE_CSN0</name>
              <description>NONE</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>24 bit address is sent to model</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>16 Bit address is sent to model</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CONTI_RD_EN_CSN0 -->
            <field>
              <name>QSPI_CONTI_RD_EN_CSN0</name>
              <description>NONE </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Continuous_Read</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>Continuous read disabled.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Continuous read enabled.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DUMMY_BYTES_WR_RD_CSN0 -->
            <field>
              <name>DUMMY_BYTES_WR_RD_CSN0</name>
              <description>Dummy bytes to the model to be read or to be write</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Dummy bytes will be read</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Dummy bytes to be write.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DUMMY_BYTES_JMP_CSN-->
            <field>
              <name>QSPI_DUMMY_BYTES_JMP_CSN0</name>
              <description>Dummy cycles to be selected in case of JUMP</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_RD_INST_CSN0-->
            <field>
              <name>QSPI_RD_INST_CSN0_LSB</name>
              <description>Read instruction LS Byte to be used for the selected SPI modes and when wrap is not supported</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_RD_WRAP_INT_CSN0-->
            <field>
              <name>QSPI_RD_WRAP_INST_CSN0</name>
              <description>Read instruction to be used, when wrap mode is supported by QSPI flash</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_PG_JUMP_INST_CSN0-->
            <field>
              <name>QSPI_PG_JMP_INST_CSN0</name>
              <description>Read instruction to be used, when Page jump is to be used</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_MANUAL_CONFIG1: QSPI Manual Configuration 1 Register-->
        <!-- REGISTER 5 -->
        <register>
          <name>QSPI_MANUAL_CONFIG1</name>
          <description>QSPI Manual Configuration 1 Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000C0001</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_MANUAL_CSN -->
            <field>
              <name>QSPI_MANUAL_CSN</name>
              <description>SPI CS in manual mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_MANUAL_WR -->
            <field>
              <name>QSPI_MANUAL_WR</name>
              <description>Write enable for manual mode when CS is low</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_MANUAL_RD -->
            <field>
              <name>QSPI_MANUAL_RD</name>
              <description>Read enable for manual mode when CS is low</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_MANUAL_RD_CNT[9:0]-->
            <field>
              <name>QSPI_MANUAL_RD_CNT_0_to_9_Bits</name>
              <description>Indicates total number of bytes to be read along with [31:27] bits of this register.
							Maximum length supported is 32k bytes</description>
              <bitRange>[12:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_MANUAL_CSN_SELECT-->
            <field>
              <name>QSPI_MANUAL_CSN_SELECT</name>
              <description>Indicates which CSn is valid</description>
              <bitRange>[14:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[18:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_MANUAL_SIZE_FRM -->
            <field>
              <name>QSPI_MANUAL_SIZE_FRM_REG</name>
              <description>Manual reads and manual writes follow this size</description>
              <bitRange>[20:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TAKE_QSPI_MANUAL_WR_SIZE_FRM_REG -->
            <field>
              <name>TAKE_QSPI_MANUAL_WR_SIZE_FRM_REG</name>
              <description>NONE</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No action. Takes write size from fifo </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Take write size from Manual config register1 </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_FULL_DUPLEX_EN-->
            <field>
              <name>QSPI_FULL_DUPLEX_EN</name>
              <description>Full duplex mode enable.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Full duplex mode disabled.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Full duplex mode enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[24:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- HW_CTRLD_QSPI_MODE_CTRL-->
            <field>
              <name>HW_CTRLD_QSPI_MODE_CTRL</name>
              <description>Hardware controlled qspi mode in between AUTO and manual</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <name>Hardware_Control</name>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>Hardware control is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>Hardware control is enabled.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_MANUAL_QSPI_MODE-->
            <field>
              <name>QSPI_MANUAL_GSPI_MODE</name>
              <description>Internally the priority is given to manual mode</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI_Mode</name>
                  <description>SPI mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Host_SPI_Mode</name>
                  <description>Host SPI mode.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_MANUAL_RD_CNT -->
            <field>
              <name>QSPI_MANUAL_RD_CNT_10_to_14_Bits</name>
              <description>Indicates total number of bytes or bits</description>
              <bitRange>[31:27]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_MANUAL_CONFIG2: QSPI Manual Configuration 2 Register-->
        <!-- REGISTER 6 -->
        <register>
          <name>QSPI_MANUAL_CONFIG2</name>
          <description>QSPI Manual Configuration 2 Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000F0</resetValue>
          <resetMask>0xFFF</resetMask>
          <fields>
            <!-- QSPI_WR_DATA_SWAP_MNL_CSN0-->
            <field>
              <name>QSPI_WR_DATA_SWAP_MNL_CSN0</name>
              <description>Swap the write data inside the QSPI controller it-self</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn0.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn0.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_WR_DATA_SWAP_MNL_CSN1-->
            <field>
              <name>QSPI_WR_DATA_SWAP_MNL_CSN1</name>
              <description>Swap the write data inside the QSPI controller it-self.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn1.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn1.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_WR_DATA_SWAP_MNL_CSN2-->
            <field>
              <name>QSPI_WR_DATA_SWAP_MNL_CSN2</name>
              <description>Swap the write data inside the QSPI controller itself.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn2.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn2.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_WR_DATA_SWAP_MNL_CSN3-->
            <field>
              <name>QSPI_WR_DATA_SWAP_MNL_CSN3</name>
              <description>Swap the write data inside the QSPI controller itself.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn3.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn3.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_RD_DATA_SWAP_MNL_CSN0-->
            <field>
              <name>QSPI_RD_DATA_SWAP_MNL_CSN0</name>
              <description>Swap the read data inside the QSPIcontroller it self.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn0.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn0.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_RD_DATA_SWAP_MNL_CSN1-->
            <field>
              <name>QSPI_RD_DATA_SWAP_MNL_CSN1</name>
              <description>Swap the read data inside the QSPIcontroller itself.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_RD_DATA_SWAP_MNL_CSN2-->
            <field>
              <name>QSPI_RD_DATA_SWAP_MNL_CSN2</name>
              <description>Swap the read data inside the QSPIcontroller it-self</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn2</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_RD_DATA_SWAP_MNL_CSN3-->
            <field>
              <name>QSPI_RD_DATA_SWAP_MNL_CSN3</name>
              <description>Swap the read data inside the QSPIcontroller itself</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn3</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn3</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_MAN_MODE_CONF_CSN1 -->
            <field>
              <name>QSPI_MAN_MODE_CONF_CSN1</name>
              <description>Configures the QSPI flash for Single/Dual/Quad mode operation in manual mode for chip select1 csn1</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Single</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description> Dual</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description> Quad</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_MAN_MODE_CONF_CSN2 -->
            <field>
              <name>QSPI_MAN_MODE_CONF_CSN2</name>
              <description>Configures the QSPI flash for Single or Dual or Quad mode operation in manual mode for chip select2 csn2</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Single</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description> Dual</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description> Quad</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_MAN_MODE_CONF_CSN3 -->
            <field>
              <name>QSPI_MAN_MODE_CONF_CSN3</name>
              <description>Configures the QSPI flash for Single or Dual or Quad mode operation in manual mode for chip select3 csn3</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Single</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description> Dual</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description> Quad</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- loop_back_mode_en  -->
            <field>
              <name>LOOP_BACK_EN</name>
              <description>Internal loop back test mode.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_manual_ddr_phasse  -->
            <field>
              <name>QSPI_MANUAL_DDR_PHASE</name>
              <description>DDR operations can be performed even in manual mode</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_ddr_clk_en  -->
            <field>
              <name>QSPI_DDR_CLK_EN</name>
              <description>DDR operations can be performed even in manual mode</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Use SDR mode clk</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Use DDR mode clk</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_rd_data_swap_word_lvl_mnl_csn0 -->
            <field>
              <name>QSPI_RD_DATA_SWAP_WORD_LVL_MNL_CSN0</name>
              <description>Set this bit for read data byte swapping within the word. 
			               It is valid only for octa ddr mode. It is valid for csn0.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_rd_data_swap_word_lvl_mnl_csn1 -->
            <field>
              <name>QSPI_RD_DATA_SWAP_WORD_LVL_MNL_CSN1</name>
              <description>Set this bit for read data byte swapping within the word. 
			               It is valid only for octa ddr mode. It is valid for csn1.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_rd_data_swap_word_lvl_mnl_csn2 -->
            <field>
              <name>QSPI_RD_DATA_SWAP_WORD_LVL_MNL_CSN2</name>
              <description>Set this bit for read data byte swapping within the word. 
			               It is valid only for octa ddr mode. It is valid for csn2.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_wr_data_swap_word_lvl_mnl_csn0 -->
            <field>
              <name>QSPI_WR_DATA_SWAP_WORD_LVL_MNL_CSN0</name>
              <description>Set this bit for write data byte swapping within the word. 
			               It is valid only for octa ddr mode. It is valid for csn0.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_wr_data_swap_word_lvl_mnl_csn1 -->
            <field>
              <name>QSPI_WR_DATA_SWAP_WORD_LVL_MNL_CSN1</name>
              <description>Set this bit for write data byte swapping within the word. 
			               It is valid only for octa ddr mode. It is valid for csn1.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_wr_data_swap_word_lvl_mnl_csn2 -->
            <field>
              <name>QSPI_WR_DATA_SWAP_WORD_LVL_MNL_CSN2</name>
              <description>Set this bit for write data byte swapping within the word. 
			               It is valid only for octa ddr mode. It is valid for csn2.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_wr_data_swap_word_lvl_mnl_csn3 -->
            <field>
              <name>QSPI_WR_DATA_SWAP_WORD_LVL_MNL_CSN3</name>
              <description>Set this bit for write data byte swapping within the word. 
			               It is valid only for octa ddr mode. It is valid for csn3.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_manual_dummy_byte_or_bit_mode -->
            <field>
              <name>QSPI_MANUAL_DUMMY_BYTE_OR_BIT_MODE</name>
              <description>Indicates qspi_manual_rd_cnt values are dummy bytes or bits in manual mode.</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:26]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_MANUAL_WRITE_DATA2: QSPI Manual Write Data 2 Register -->
        <!-- REGISTER 7 -->
        <register>
          <name>QSPI_MANUAL_WRITE_DATA2</name>
          <description>QSPI Manual Write Data 2 Register</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- QSPI_MANUAL_WRITE_DATA2 -->
            <field>
              <name>QSPI_MANUAL_WRITE_DATA2</name>
              <description>Number of bits to be written in write mode</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[6:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- USE_PREV_LENGTH-->
            <field>
              <name>USE_PREV_LENGTH</name>
              <description>Use previous length.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No action</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Uses previously programmed length in [4:0] of this register for next writes</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_clk_enable_hclk -->
            <field>
              <name>QSPI_CLK_ENABLE_HCLK</name>
              <description>reserved2</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:9]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_FIFO_THRLD: QSPI FIFO Threshold Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>QSPI_FIFO_THRLD</name>
          <description>QSPI FIFO Threshold Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000C7</resetValue>
          <resetMask>0x1FF</resetMask>
          <fields>
            <!-- FIFO_AEMPTY_THRLD -->
            <field>
              <name>FIFO_AEMPTY_THRLD</name>
              <description>FIFO almost empty threshold</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- FIFO_AFULL_THRLD -->
            <field>
              <name>FIFO_AFULL_THRLD</name>
              <description>FIFO almost full threshold</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- WFIFO_RESET -->
            <field>
              <name>WFIFO_RESET</name>
              <description>Write fifo reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RFIFO_RESET -->
            <field>
              <name>RFIFO_RESET</name>
              <description>Read fifo reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_MANUAL_STATUS: QSPI Manual Status Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>QSPI_MANUAL_STATUS</name>
          <description>QSPI Manual Status Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000591</resetValue>
          <resetMask>0x7FFF</resetMask>
          <fields>
            <!-- QSPI_BUSY-->
            <field>
              <name>QSPI_BUSY</name>
              <description>State of Manual mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>QSPI controller is IDLE in Manual mode.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>A read, write or dummy cycle operation is in process in manual mode.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_S-->
            <field>
              <name>FIFO_FULL_WFIFO_S</name>
              <description>Status indication for Wfifo in manual mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_AFULL_WFIFO_S-->
            <field>
              <name>FIFO_AFULL_WFIFO_S</name>
              <description>Status indication for Wfifo in manual mode</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_EMPTY_WFIFO-->
            <field>
              <name>FIFO_EMPTY_WFIFO</name>
              <description>Status indication for Wfifo in manual mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_AEMPTY_WFIFO-->
            <field>
              <name>FIFO_AEMPTY_WFIFO</name>
              <description>Status indication for Wfifo in manual mode</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_FULL_RFIFO-->
            <field>
              <name>FIFO_FULL_RFIFO</name>
              <description>Status indication for Rfifo in manual mode</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_AFULL_RFIFO-->
            <field>
              <name>FIFO_AFULL_RFIFO</name>
              <description>Status indication for Rfifo in manual mode</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_EMPTY_RFIFO_S-->
            <field>
              <name>FIFO_EMPTY_RFIFO_S</name>
              <description>Status indication for Rfifo in manual mode</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_S-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_S</name>
              <description>Status indication for Rfifo in manual mode</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- GSPI_MANUAL_RD_CNT-->
            <field>
              <name>GSPI_MANUAL_RD_CNT</name>
              <description>This is a result of 10 bits ORing counter</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No read transactions are in pending</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read transactions are in pending ( to be done)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- AUTO_MODE_FSM_IDLE_SCLK-->
            <field>
              <name>AUTO_MODE_FSM_IDLE_SCLK</name>
              <description>Auto mode idle signal to track auto controller is busy or idle.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Auto mode is busy  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Auto mode is idle</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_AUTO_MODE-->
            <field>
              <name>QSPI_AUTO_MODE</name>
              <description>QSPI controller status.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>QSPI controller is in manual mode.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>QSPI controller is in auto mode.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_AUTO_MODE_FRM_REG_SCLK-->
            <field>
              <name>QSPI_AUTO_MODE_FRM_REG_SCLK</name>
              <description>QSPI auto mode status. Valid only when HW_CTRLD_QSPI_MODE_CTRL is zero.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>QSPI controller is hot coded to manual mode operations.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>QSPI controller is hot coded to AUTO mode operations</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- HW_CTRLD_MODE_SCLK-->
            <field>
              <name>HW_CTRLD_MODE_SCLK</name>
              <description>QSPI mode status in HW_CTRLD_MODE</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>QSPI controller is in MANUAL mode.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>QSPI controller is working in AUTO MODE.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- HW_CTRLD_MODE_CTRL_SCLK-->
            <field>
              <name>HW_CTRLD_MODE_CTRL_SCLK</name>
              <description>HW_CTRLD_MODE status</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>HW_CTRL_MODE is disabled.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>HW_CTRL_MODE is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Aw_ctrl_busy -->
            <field>
              <name>AW_CTRL_BUSY</name>
              <description>Auto write busy indication.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_INTR_MASK: QSPI Interrupt Mask Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>QSPI_INTR_MASK</name>
          <description>QSPI Interrupt Mask Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x6F</resetMask>
          <fields>
            <!-- QSPI_INTR_MASK-->
            <field>
              <name>QSPI_INTR_MASK</name>
              <description>Interrupt Status bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>mask the qspi intr</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_MASK-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_MASK</name>
              <description>NONE </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo almost empty intr mask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_AFULL_RFIFO_MASK-->
            <field>
              <name>FIFO_AFULL_RFIFO_MASK</name>
              <description>NONE </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>read fifo almost full intr mask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_AEMPTY_WFIFO_MASK-->
            <field>
              <name>FIFO_AEMPTY_WFIFO_MASK</name>
              <description>NONE </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo almost empty intr mask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_AFULL_WFIFO_MASK-->
            <field>
              <name>FIFO_AFULL_WFIFO_MASK</name>
              <description>NONE </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write fifo almost full intr mask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_FULL_WFIFO_MASK-->
            <field>
              <name>FIFO_FULL_WFIFO_MASK</name>
              <description>NONE </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo full intr mask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_EMPTY_RFIFO_MASK-->
            <field>
              <name>FIFO_EMPTY_RFIFO_MASK</name>
              <description>NONE </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo is empty intr mask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Ahb_auto_write_intr_mask -->
            <field>
              <name>AHB_AUTO_WRITE_INTR_MASK</name>
              <description>Rising interrupt for any auto write operation on AHB bus. This bit is a mask for this interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_auto_base_addr_err_intr_mask -->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_ERR_INTR_MASK</name>
              <description>Rising interrupt when no csn is selected using programmable auto base address. This bit is a mask for this interrupt.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4qspi_manual_blocked_intr_mask -->
            <field>
              <name>M4QSPI_MANUAL_BLOCKED_INTR_MASK</name>
              <description>Rising interrupt when M4 QSPI tries to do manual mode transactions in Common flash mode (3). 
			               This bit is a mask for this interrupt.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4_auto_read_out_range_intr_mask -->
            <field>
              <name>M4_AUTO_READ_OUT_range_intr_mask</name>
              <description>Rising interrupt when M4 QSPI tries to read TA locations in Common flash mode (3). 
			               This bit is a mask for this interrupt.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_INTR_UNMASK: QSPI Interrupt Unmask Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>QSPI_INTR_UNMASK</name>
          <description>QSPI Interrupt Unmask Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- QSPI_INTR_UNMASK-->
            <field>
              <name>QSPI_INTR_UNMASK</name>
              <description>Interrupt Status bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>unmask the qspi intr</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_UN-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_UN</name>
              <description>NONE</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo almost empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_RFIFO_UNMASK-->
            <field>
              <name>FIFO_AFULL_RFIFO_UNMASK</name>
              <description>NONE</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>read fifo almost full intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_WFIFO_UNMASK-->
            <field>
              <name>FIFO_AEMPTY_WFIFO_UNMASK</name>
              <description>NONE</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo almost empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_WFIFO_UNMASK-->
            <field>
              <name>FIFO_AFULL_WFIFO_UNMASK</name>
              <description>NONE</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write fifo almost full intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_UNMASK-->
            <field>
              <name>FIFO_FULL_WFIFO_UNMASK</name>
              <description>NONE</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo full intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_EMPTY_RFIFO_UNMASK-->
            <field>
              <name>FIFO_EMPTY_RFIFO_UNMASK</name>
              <description>NONE</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo is empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Ahb_auto_write_intr_unmask -->
            <field>
              <name>AHB_AUTO_WRITE_INTR_UNMASK</name>
              <description>Rising interrupt for any auto write operation on AHB bus. This bit is a unmask for this interrupt.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_auto_base_addr_err_intr_unmask-->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_ERR_INTR_UNMASK</name>
              <description>Rising interrupt when M4 QSPI tries to do manual mode transactions in Common flash mode (3). 
			               This bit is a unmask for this interrupt.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4qspi_manual_blocked_intr_unmask	 -->
            <field>
              <name>M4QSPI_MANUAL_BLOCKED_INTR_UNMASK</name>
              <description>Rising interrupt when M4 QSPI tries to do manual mode transactions in Common flash mode (3). 
			               This bit is a unmask for this interrupt.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4_auto_read_out_range_intr_unmask	 -->
            <field>
              <name>M4_AUTO_READ_OUT_RANGE_INTR_UNMASK</name>
              <description>Rising interrupt when M4 QSPI tries to read TA locations in Common flash mode (3). 
			               This bit is a unmask for this interrupt.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_INTR_STS: QSPI Interrupt Status Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>QSPI_INTR_STS</name>
          <description>QSPI Interrupt Status Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000004A</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- QSPI_INTR_LVL-->
            <field>
              <name>QSPI_INTR_LVL</name>
              <description>Interrupt Status bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>no interrupt</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>qspi raised a interrupt</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_LVL-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_LVL</name>
              <description>NONE</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Read fifo does not reached almost empty threshold</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo reached almost empty threshold</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_RFIFO_LVL-->
            <field>
              <name>FIFO_AFULL_RFIFO_LVL</name>
              <description>NONE</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>read FIFO do not reached almost full threshold</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>read FIFO reached almost full threshold</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_WFIFO_LVL-->
            <field>
              <name>FIFO_AEMPTY_WFIFO_LVL</name>
              <description>NONE</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write FIFO not reached almost full threshold.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write FIFO reached almost empty threshold.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_WFIFO_LVL-->
            <field>
              <name>FIFO_AFULL_WFIFO_LVL</name>
              <description>NONE</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write FIFO not reached almost full threshold</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write FIFO reached almost full threshold</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_LVL-->
            <field>
              <name>FIFO_FULL_WFIFO_LVL</name>
              <description>NONE</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Write fifo not got full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo got full.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_EMPTY_RFIFO_LVL-->
            <field>
              <name>FIFO_EMPTY_RFIFO_LVL</name>
              <description>NONE</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Read FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Ahb_auto_write_intr_lev -->
            <field>
              <name>AHB_AUTO_WRITE_INTR_LEV</name>
              <description>rising interrupt for any auto write operation on AHB bus.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Qspi_auto_base_addr_err_intr_lvl -->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_ERR_INTR_LVL</name>
              <description>Rising interrupt when no csn is selected using programmable auto base address.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- m4qspi_manual_blocked_lvl -->
            <field>
              <name>M4QSPI_MANUAL_BLOCKED_LVL</name>
              <description>Rising interrupt when M4 QSPI tries to do manual mode transactions in Common flash mode (3).</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- m4_auto_read_out_range_lvl -->
            <field>
              <name>M4_AUTO_READ_OUT_RANGE_LVL</name>
              <description>Rising interrupt when M4 QSPI tries to read TA locations in Common flash mode (3).</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:11]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_INTR_ACK: QSPI Interrupt Acknowledge Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>QSPI_INTR_ACK</name>
          <description>QSPI Interrupt Acknowledge Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- QSPI_INTR_ACK-->
            <field>
              <name>QSPI_INTR_ACK</name>
              <description>Interrupt Status bit</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>unmask the qspi intr.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_ACK-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_ACK</name>
              <description>NONE</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo almost empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_RFIFO_ACK-->
            <field>
              <name>FIFO_AFULL_RFIFO_ACK</name>
              <description>NONE</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>read fifo almost full intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_WFIFO_ACK-->
            <field>
              <name>FIFO_AEMPTY_WFIFO_ACK</name>
              <description>NONE</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo almost empty intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_WFIFO_ACK-->
            <field>
              <name>FIFO_AFULL_WFIFO_ACK</name>
              <description>NONE</description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write fifo almost full intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_ACK-->
            <field>
              <name>FIFO_FULL_WFIFO_ACK</name>
              <description>NONE</description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo full intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_EMPTY_RFIFO_ACK-->
            <field>
              <name>FIFO_EMPTY_RFIFO_ACK</name>
              <description>NONE</description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo is empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Ahb_auto_write_intr_ack -->
            <field>
              <name>AHB_AUTO_WRITE_INTR_ACK</name>
              <description>Rising interrupt for any auto write operation on AHB bus. This bit is an ack for this interrupt.</description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Qspi_auto_base_addr_err_intr_ack -->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_ERR_INTR_ACK</name>
              <description>Rising interrupt when no csn is selected using programmable auto base address. This bit is an ack for this interrupt.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- m4qspi_manual_blocked_intr_ack -->
            <field>
              <name>M4QSPI_MANUAL_BLOCKED_INTR_ACK</name>
              <description>Rising interrupt when M4 QSPI tries to do manual mode transactions in Common flash mode (3). 
			               This bit is an ack for this interrupt.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4_auto_read_out_range_intr_ack -->
            <field>
              <name>M4_AUTO_READ_OUT_RANGE_INTR_ACK</name>
              <description>Rising interrupt when M4 QSPI tries to read TA locations in Common flash mode (3). This bit is an ack for this interrupt.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:11]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_STS_MC: QSPI State Machine Monitor Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>QSPI_STS_MC</name>
          <description>QSPI State Machine Monitor Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x6FF</resetMask>
          <fields>
            <!-- BUS_CTRL_PSTATE-->
            <field>
              <name>BUS_CTRL_PSTATE</name>
              <description>Bus controller present state</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--AUTO_CTRL_PSTATE-->
            <field>
              <name>AUTO_CTRL_PSTATE</name>
              <description>Auto controller present state</description>
              <bitRange>[6:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--QSPI_MASTER_PSTATE-->
            <field>
              <name>QSPI_MASTER_PSTATE</name>
              <description>Qspi master present state</description>
              <bitRange>[9:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--Qspi_manual_rd_cnt-->
            <field>
              <name>QSPI_MANUAL_RD_CNT</name>
              <description>Qspi manual read counter value</description>
              <bitRange>[24:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:25]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_1_CSN1: QSPI Auto Controller Configuration 1 CSN1 Register -->
        <!-- REGISTER 15 -->
        <register>
          <name>QSPI_AUTO_CONFIG_1_CSN1</name>
          <description>QSPI Auto Controller Configuration 1 CSN1 Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x87FFFF</resetMask>
          <fields>
            <!-- QSPI_EXT_BYTE_MODE_CSN1-->
            <field>
              <name>QSPI_EXT_BYTE_MODE_CSN1</name>
              <description>Mode of operation of QSPI in instruction phase.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DUMMY_MODE_CSN1-->
            <field>
              <name>QSPI_DUMMY_MODE_CSN1</name>
              <description>Mode of operation of QSPI in instruction phase</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_ADDR_MODE_CSN1-->
            <field>
              <name>QSPI_ADDR_MODE_CSN1</name>
              <description>Mode of operation of QSPI in instruction phase.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CMD_MODE_CSN1-->
            <field>
              <name>QSPI_CMD_MODE_CSN1</name>
              <description>Mode of operation of QSPI in instruction phase.</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DATA_MODE_CSN1-->
            <field>
              <name>QSPI_DATA_MODE_CSN1</name>
              <description>Mode of operation of QSPI in DATA phase.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_EXTRA_BYTE_CSN1-->
            <field>
              <name>QSPI_EXTRA_BYTE_CSN1</name>
              <description>Value of the extra byte to be transmitted, if the extra byte mode is enabled.</description>
              <bitRange>[17:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- QSPI_EXTRA_BYTE_EN_CSN1-->
            <field>
              <name>QSPI_EXTRA_BYTE_EN_CSN1</name>
              <description>Mode of operation of QSPI in DATA phase.</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Do not transmit extra byte.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Transmit Extra byte after address phase</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Transmit only first nibble of the byte and maintain Hi-Z on the IO bus for next nibble.</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_wrap-size -->
            <field>
              <name>QSPI_WRAP_SIZE</name>
              <description>Qspi auto wrap size</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_PG_JUMP_CSN1-->
            <field>
              <name>QSPI_PG_JUMP_CSN1</name>
              <description>NONE</description>
              <bitRange>[23:23]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not use Index jump instruction.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Use Index jump instruction specified by QSPI_PG_JUMP_INST</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_DUMMY_BYTES_INCR_CSN1-->
            <field>
              <name>QSPI_DUMMY_BYTES_INCR_CSN1</name>
              <description>Specifies the number of dummy bytes 0 to 7 for the selected SPI mode.</description>
              <bitRange>[27:24]</bitRange>
              <access>read-only</access>
            </field>
            <!--QSPI_DUMMY_BYTES_WRAP_CSN1-->
            <field>
              <name>QSPI_DUMMY_BYTES_WRAP_CSN1</name>
              <description>Specifies the number of dummy bytes  0 to 7 for the selected SPI mode in case of wrap instruction.</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_2: QSPI Auto Controller Configuration 2 CSN1 Register -->
        <!-- REGISTER 16 -->
        <register>
          <name>QSPI_AUTO_CONFIG_2_CSN1</name>
          <description>QSPI Auto Controller Configuration 2 CSN1 Register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_RD_SWAP_AUTO_CSN1-->
            <field>
              <name>QSPI_RD_SWAP_AUTO_CSN1</name>
              <description>Swap the read data from the flash in byte order for chip select1 csn1 in auto mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Swap_Disable</name>
                  <description>Swap is disabled.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Swap_Enable</name>
                  <description>Swap is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_ADR_SIZE_16BIT_AUTO_MODE_CSN1-->
            <field>
              <name>QSPI_ADR_SIZE_16BIT_AUTO_MODE_CSN1</name>
              <description>NONE</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_CONTI_RD_EN_CSN1-->
            <field>
              <name>QSPI_CONTI_RD_EN_CSN1</name>
              <description>Continuous read enable bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--DUMMY_BYTES_WR_RD-->
            <field>
              <name>DUMMY_BYTES_WR_RD</name>
              <description>Dummy bytes to the model to be read or to be write.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_DUMMY_BYTES_JMP_CSN1-->
            <field>
              <name>QSPI_DUMMY_BYTES_JMP_CSN1</name>
              <description>Dummy cycles to be selected in case of JUMP</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_RD_INST_CSN1-->
            <field>
              <name>QSPI_RD_INST_CSN1</name>
              <description>Read instruction to be used for the selected SPI modes and when wrap is not needed or supported</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_RD_WRAP_INST_CSN1-->
            <field>
              <name>QSPI_RD_WRAP_INST_CSN1</name>
              <description>Read instruction to be used for the selected SPI modes and when wrap is not needed or supported</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_PG_JMP_INST_CSN1-->
            <field>
              <name>QSPI_PG_JMP_INST_CSN1</name>
              <description>Read instruction to be used, when Page jump is to be used.</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_3_CSN0: QSPI Auto Controller Configuration 3 CSN0 Register -->
        <!-- REGISTER 17 -->
        <register>
          <name>QSPI_AUTO_CONFIG_3</name>
          <description>QSPI Auto Controller Configuration 3 CSN0 Register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Qspi_dummy_byte_or_bit_csn0 -->
            <field>
              <name>QSPI_DUMMY_BYTE_OR_BIT_CSN0</name>
              <description>Indicates all above mention values are dummy bytes or bits in auto mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DUMMY_BYTES_INCR_CSN0 -->
            <field>
              <name>QSPI_DUMMY_BYTES_INCR_CSN0</name>
              <description>Specifies the number of dummy bytes  for the selected SPI mode. It contains MS nibble for byte.</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DUMMY_BYTES_WRAP_CSN0 -->
            <field>
              <name>QSPI_DUMMY_BYTES_WRAP_CSN0</name>
              <description>Specifies the number of dummy bytes for the selected SPI mode in case of wrap instruction. It contains MS nibble for byte.</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_ddr_cmd_mode_csn0-->
            <field>
              <name>QSPI_DDR_CMD_MODE_CSN0</name>
              <description>DDR Command mode</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Command byte is driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Command byte is driven in DDR fashion.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_addr_mode_csn0-->
            <field>
              <name>QSPI_DDR_ADDR_MODE_CSN0</name>
              <description>DDR Address mode</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Address bytes are driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Address bytes are driven in DDR fashion</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_dummy_mode_csn0-->
            <field>
              <name>QSPI_DDR_DUMMY_MODE_CSN0</name>
              <description>DDR Address mode</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Dummy bytes are driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Dummy bytes are driven in DDR fashion.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_extra_mode_csn0-->
            <field>
              <name>QSPI_DDR_EXTRA_MODE_CSN0</name>
              <description>DDR Address mode</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Extra byte is driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Extra byte is driven in DDR fashion</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_data_mode_csn0-->
            <field>
              <name>QSPI_DDR_DATA_MODE_CSN0</name>
              <description>DDR Address mode</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Data are sampled in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Data are sampled in DDR fashion</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_auto_ddr_cmd_mode_csn0-->
            <field>
              <name>QSPI_AUTO_DDR_CMD_MODE_CSN0</name>
              <description>DDR data mode.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_cmd_size_16bit_csn0-->
            <field>
              <name>QSPI_CMD_SIZE_16BIT_CSN0</name>
              <description>Enable for 16 read cmd size for csn0.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_ADR_SIZE_32BIT_AUTO_MODE-->
            <field>
              <name>QSPI_ADR_SIZE_32BIT_AUTO_MODE</name>
              <description>32 bit addressing support enable.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_rd_data_swap_word_lvl_auto_csn0-->
            <field>
              <name>QSPI_RD_DATA_SWAP_WORD_LVL_AUTO_CSN0</name>
              <description>Rd data swap at word level in auto mode for csn0. It is valid for octa mode.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[23:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>QSPI_RD_INST_CSN0_MSB</name>
              <description>Read instruction MS byte to be used the selected SPI modes and when wrap is not needed or supported.</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_3_CSN0: QSPI Auto Controller Configuration 3 CSN1 Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>QSPI_AUTO_CONFIG_3_CSN1</name>
          <description>QSPI Auto Controller Configuration 3 CSN1 Register</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Qspi_dummy_byte_or_bit_csn1 -->
            <field>
              <name>QSPI_DUMMY_BYTE_OR_BIT_CSN1</name>
              <description>Indicates all above mention values are dummy bytes or bits in auto mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DUMMY_BYTES_INCR_CSN1 -->
            <field>
              <name>QSPI_DUMMY_BYTES_INCR_CSN1</name>
              <description>Specifies the number of dummy bytes  for the selected SPI mode. It contains MS nibble for byte.</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DUMMY_BYTES_WRAP_CSN1 -->
            <field>
              <name>QSPI_DUMMY_BYTES_WRAP_CSN1</name>
              <description>Specifies the number of dummy bytes for the selected SPI mode in case of wrap instruction. It contains MS nibble for byte.</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_ddr_cmd_mode_csn1-->
            <field>
              <name>QSPI_DDR_CMD_MODE_CSN1</name>
              <description>DDR Command mode</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0</name>
                  <description>Command byte is driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1</name>
                  <description>Command byte is driven in DDR fashion.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_addr_mode_csn1-->
            <field>
              <name>QSPI_DDR_ADDR_MODE_CSN1</name>
              <description>DDR Address mode</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0</name>
                  <description>Address bytes are driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1</name>
                  <description>Address bytes are driven in DDR fashion</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_dummy_mode_csn1-->
            <field>
              <name>QSPI_DDR_DUMMY_MODE_CSN1</name>
              <description>DDR Address mode</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0</name>
                  <description>Dummy bytes are driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1</name>
                  <description>Dummy bytes are driven in DDR fashion.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_extra_mode_csn1-->
            <field>
              <name>QSPI_DDR_EXTRA_MODE_CSN1</name>
              <description>DDR Address mode</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0</name>
                  <description>Extra byte is driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1</name>
                  <description>Extra byte is driven in DDR fashion</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_data_mode_csn1-->
            <field>
              <name>QSPI_DDR_DATA_MODE_CSN1</name>
              <description>DDR Address mode</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0</name>
                  <description>Data are sampled in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1</name>
                  <description>Data are sampled in DDR fashion</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_auto_ddr_cmd_mode_csn1-->
            <field>
              <name>QSPI_AUTO_DDR_CMD_MODE_CSN1</name>
              <description>DDR data mode.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_cmd_size_16bit_csn1-->
            <field>
              <name>QSPI_CMD_SIZE_16BIT_CSN1</name>
              <description>Enable for 16 read cmd size for csn1.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED3-->
            <field>
              <name>RESERVED3</name>
              <description>RESERVED3</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_rd_data_swap_word_lvl_auto_csn1-->
            <field>
              <name>QSPI_RD_DATA_SWAP_WORD_LVL_AUTO_CSN1</name>
              <description>Rd data swap at word level in auto mode for csn1. It is valid for octa mode.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED4</name>
              <description>reserved4</description>
              <bitRange>[23:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>QSPI_RD_INST_CSN1_MSB</name>
              <description>Read instruction MS byte to be used the selected SPI modes and when wrap is not needed or supported.</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_BASE_ADDR_CSN0 -->
        <!-- REGISTER 19 -->
        <register>
          <name>QSPI_AUTO_BASE_ADDR_CSN0</name>
          <description>none</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AUTO_BASE_ADDR_CSN0-->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_CSN0</name>
              <description>Holds the 32 bit base address for select chip select0 in programmable auto csn mode. 
			               It is valid only programmable auto csn mode is enabled.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_BASE_ADDR_CSN1 -->
        <!-- REGISTER 20 -->
        <register>
          <name>QSPI_AUTO_BASE_ADDR_CSN1</name>
          <description>none</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AUTO_BASE_ADDR_CSN1-->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_CSN1</name>
              <description>Holds the 32 bit base address for select chip select1 in programmable auto csn mode. 
			               It is valid only programmable auto csn mode is enabled.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- OCTASPI_BUS_CONTROLLER -->
        <!-- REGISTER 21 -->
        <register>
          <name>OCTASPI_BUS_CONTROLLER</name>
          <description>none</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_D7TOD4_DATA_CSN0-->
            <field>
              <name>QSPI_D7TOD4_DATA_CSN0</name>
              <description>Value of SPI_IO7,6,5 and 4 in case of quad/dual/single mode for chip select1 (cs_n0).
      			           It is used both in Auto and Manual Mode.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_OEN_CSN0-->
            <field>
              <name>QSPI_D7TOD4_OEN_CSN0</name>
              <description>Direction Control for SPI_IO 7,6,5 and 4 in case of quad/dual/single mode for chip select0 (cs_n0). 
			               It is used both in Auto and Manual Mode.</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_DATA_CSN1-->
            <field>
              <name>QSPI_D7TOD4_DATA_CSN1</name>
              <description>Value of SPI_IO7,6,5 and 4 in case of quad/dual/single mode for chip select1 (cs_n1). 
			               It is used both in Auto and Manual Mode.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_OEN_CSN1-->
            <field>
              <name>QSPI_D7TOD4_OEN_CSN1</name>
              <description>Direction Control for SPI_IO 7,6,5 and 4 in case of quad/dual/single mode for chip select1 (cs_n1). 
			               It is used both in Auto and Manual Mode.</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_DATA_CSN2-->
            <field>
              <name>QSPI_D7TOD4_DATA_CSN2</name>
              <description>Value of SPI_IO7,6,5 and 4 in case of quad/dual/single mode for chip select2 (cs_n2). 
			               It is used both in Auto and Manual Mode.</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_OEN_CSN2-->
            <field>
              <name>QSPI_D7TOD4_OEN_CSN2</name>
              <description>Direction Control for SPI_IO 7,6,5 and 4 in case of quad/dual/single mode for chip select2 (cs_n2). 
			               It is used both in Auto and Manual Mode.</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_DATA_CSN3-->
            <field>
              <name>QSPI_D7TOD4_DATA_CSN3</name>
              <description>Value of SPI_IO7,6,5 and 4 in case of quad/dual/single mode for chip select3 (cs_n3).
          			       It is used both in Auto and Manual Mode.</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_OEN_CSN3-->
            <field>
              <name>QSPI_D7TOD4_OEN_CSN3</name>
              <description>Direction Control for SPI_IO 7,6,5 and 4 in case of quad/dual/single mode for chip select3 (cs_n3). 
			               It is used both in Auto and Manual Mode.</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_BASE_ADDR_UNMASK_CSN0 -->
        <!-- REGISTER 22 -->
        <register>
          <name>QSPI_AUTO_BASE_ADDR_UNMASK_CSN0</name>
          <description>none</description>
          <addressOffset>0xB4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <fields>
            <!-- QSPI_AUTO_BASE_ADDR_UNMASK_CSN0-->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_UNMASK_CSN0</name>
              <description>Holds the 32 bit base address unmask value for select chip select0 in programmable auto csn mode. 
			               It is valid only programmable auto csn mode is enabled.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_BASE_ADDR_UNMASK_CSN1 -->
        <!-- REGISTER 23-->
        <register>
          <name>QSPI_AUTO_BASE_ADDR_UNMASK_CSN1</name>
          <description>none</description>
          <addressOffset>0xB8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <fields>
            <!-- QSPI_AUTO_BASE_ADDR_UNMASK_CSN1-->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_UNMASK_CSN1</name>
              <description>Holds the 32 bit base address unmask value for select chip select1 in programmable auto csn mode. 
			               It is valid only programmable auto csn mode is enabled.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- OCTASPI_BUS_CONTROLLER_2 -->
        <!-- REGISTER 24 -->
        <register>
          <name>OCTASPI_BUS_CONTROLLER_2</name>
          <description>none</description>
          <addressOffset>0xC4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- SET_IP_MODE-->
            <field>
              <name>SET_IP_MODE</name>
              <description>This bit enables the qspi interface pins into HiZ mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AES_NONCE_INIT-->
            <field>
              <name>AES_NONCE_INIT</name>
              <description>This bit enables the AES initialization with nonce</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AES_SEC_ENABLE-->
            <field>
              <name>AES_SEC_ENABLE</name>
              <description>This bit enables the AES security enable or not</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- DUAL_MODE_EN-->
            <field>
              <name>DUAL_MODE_EN</name>
              <description>Dual flash mode enable control.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Csn0_2_csn-->
            <field>
              <name>CSN0_2_CSN</name>
              <description>Map csn0 to the programmed csn. It is valid for both manual and auto modes</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Not valid</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Map csn0 to csn1. Reads on csn0 will have data from csn1 also</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Map csn0 to csn2. Reads on csn0 will have data from csn2 also</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>Map csn0 to csn3. Reads on csn0 will have data from csn3 also</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Csn1_2_csn-->
            <field>
              <name>CSN1_2_CSN</name>
              <description>Map csn1 to the programmed csn. It is valid for both manual and auto modes</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Map csn1 to csn0. Reads on csn1 will have data from csn1 also</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Not valid</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Map csn1 to csn2. Reads on csn1 will have data from csn2 also</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>Map csn1 to csn3. Reads on csn1 will have data from csn3 also</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Csn2_2_csn-->
            <field>
              <name>CSN2_2_CSN</name>
              <description>Map csn2 to the programmed csn. It is valid for both manual and auto modes</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Map csn2 to csn1. Reads on csn2 will have data from csn0 also</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Map csn2 to csn1. Reads on csn2 will have data from csn1 also</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Not valid</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>Map csn2 to csn3. Reads on csn2 will have data from csn3 also.</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Csn3_2_csn-->
            <field>
              <name>CSN3_2_CSN</name>
              <description>Map csn3 to the programmed csn. It is valid for both manual and auto modes</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Map csn3 to csn0. Reads on csn3 will have data from csn0 also.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Map csn3 to csn1. Reads on csn3 will have data from csn0 also</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Map csn3 to csn2. Reads on csn3 will have data from csn0 also.</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>Not valid</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- AES_SEC_ENABLE_SG1-->
            <field>
              <name>AES_SEC_ENABLE_SG1</name>
              <description>This bit enables the AES security enable or not for segment 1</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AES_SEC_ENABLE_SG2-->
            <field>
              <name>AES_SEC_ENABLE_SG2</name>
              <description>This bit enables the AES security enable or not for segment 2</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AES_SEC_ENABLE_SG3-->
            <field>
              <name>AES_SEC_ENABLE_SG3</name>
              <description>This bit enables the AES security enable or not for segment 3</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AES_SEC_ENABLE_SG4-->
            <field>
              <name>AES_SEC_ENABLE_SG4</name>
              <description>This bit enables the AES security enable or not for segment 4</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Dual_mode_swap_lines-->
            <field>
              <name>DUAL_MODE_SWAP_LINES</name>
              <description>This bit controls the 8 lines of qspi with 4 bit swap manner</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Auto_mode_in_default_en -->
            <field>
              <name>AUTO_MODE_IN_DEFAULT_EN</name>
              <description>Qspi works in auto mode if set this is bit by default.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Otp_key_load -->
            <field>
              <name>OTP_KEY_LOAD</name>
              <description>Enable to load key from OTP/KH</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Dual_stage_en_manual-->
            <field>
              <name>DUAL_STAGE_EN_MANUAL</name>
              <description>Dual stage en for dual flash mode</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_CONFIG -->
        <!-- REGISTER 25 -->
        <register>
          <name>QSPI_AES_CONFIG</name>
          <description>QSPI AES CONFIG REG</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000080</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qspi_aes_mode-->
            <field>
              <name>QSPI_AES_MODE</name>
              <description>AES mode of decryption CTR/XTS</description>
              <bitRange>[8:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_aes_deckeycal	-->
            <field>
              <name>QSPI_AES_DECKEYCAL</name>
              <description>Enables pre-calculation of KEY before decryption operation</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- flip_key_frm_reg	-->
            <field>
              <name>FLIP_KEY_FRM_REG</name>
              <description>writing 1 to this Flips the 32-bit endian key taken from kh</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- flip_key_frm_kh-->
            <field>
              <name>FLIP_KEY_FRM_KH</name>
              <description>writing 1 to this Flips the 32-bit endian key taken from kh</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_aes_srst-->
            <field>
              <name>QSPI_AES_SRST</name>
              <description>Synchronous soft reset for AES Module. Write only bit. Reading this bit gives alway 0</description>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY_IV_VALID -->
        <!-- REGISTER 26 -->
        <register>
          <name>QSPI_AES_KEY_IV_VALID</name>
          <description>QSPI AES KEYS and IVS VALID</description>
          <addressOffset>0xCC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qspi_aes_key1_valid-->
            <field>
              <name>QSPI_AES_KEY1_VALID</name>
              <description>Write enables for AES KEY 1. Denotes which bytes of key1 is valid</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_aes_key2_valid	-->
            <field>
              <name>QSPI_AES_KEY2_VALID</name>
              <description>Write enables for AES KEY 2. Denotes which bytes of key2 is valid</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_aes_iv1_valid	-->
            <field>
              <name>QSPI_AES_IV1_VALID</name>
              <description>Write enables for AES IV 1. Denotes which bytes of IV1 is valid</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED3 -->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_CMNFLASH_STS -->
        <!-- REGISTER 27 -->
        <register>
          <name>QSPI_CMNFLASH_STS</name>
          <description>QSPI Common Flash Status</description>
          <addressOffset>0xD0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qspi_manual_blocked-->
            <field>
              <name>QSPI_MANUAL_BLOCKED</name>
              <description>1 - Manual read/write transaction initiated is blocked.0- No manual transactions</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- auto_read_out_range	-->
            <field>
              <name>AUTO_READ_OUT_RANGE</name>
              <description>1- Auto read transaction is out of M4 Address range 0- Auto read transaction is in Address range</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- qspi_auto_rd_busy-->
            <field>
              <name>QSPI_AUTO_RD_BUSY</name>
              <description>1 - Auto read transactions in progress.0 - No Auto read transactions</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY1_0_3 -->
        <!-- REGISTER 28 -->
        <register>
          <name>QSPI_AES_KEY1_0_3</name>
          <description>QSPI_AES_KEY1_0_3</description>
          <addressOffset>0x134</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY1_0_3-->
            <field>
              <name>QSPI_AES_KEY1_0_3</name>
              <description>To hold first 3-0  bytes of  aes key1 as 0 referred as lsb in the key</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY1_4_7 -->
        <!-- REGISTER 29 -->
        <register>
          <name>QSPI_AES_KEY1_4_7</name>
          <description>QSPI_AES_KEY1_4_7</description>
          <addressOffset>0x138</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY1_4_7-->
            <field>
              <name>QSPI_AES_KEY1_4_7</name>
              <description>To hold first 7-4 bytes of  aes key1 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY1_8_B -->
        <!-- REGISTER 30 -->
        <register>
          <name>QSPI_AES_KEY1_8_B</name>
          <description>QSPI_AES_KEY1_8_B</description>
          <addressOffset>0x13C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY1_8_B-->
            <field>
              <name>QSPI_AES_KEY1_8_B</name>
              <description>To hold first 11-8 bytes of  aes key1 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY1_C_F -->
        <!-- REGISTER 31 -->
        <register>
          <name>QSPI_AES_KEY1_C_F</name>
          <description>QSPI_AES_KEY1_C_F</description>
          <addressOffset>0x140</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY1_C_F-->
            <field>
              <name>QSPI_AES_KEY1_C_F</name>
              <description>To hold first 11-8 bytes of  aes key1 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY2_0_3 -->
        <!-- REGISTER 32 -->
        <register>
          <name>QSPI_AES_KEY2_0_3</name>
          <description>QSPI_AES_KEY2_0_3</description>
          <addressOffset>0x154</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY2_0_3-->
            <field>
              <name>QSPI_AES_KEY2_0_3</name>
              <description>To hold first 3-0  bytes of  aes key2 as 0 referred as lsb in the key</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY2_4_7 -->
        <!-- REGISTER 33 -->
        <register>
          <name>QSPI_AES_KEY2_4_7</name>
          <description>QSPI_AES_KEY2_4_7</description>
          <addressOffset>0x158</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY2_4_7-->
            <field>
              <name>QSPI_AES_KEY2_4_7</name>
              <description>To hold first 7-4 bytes of  aes key2 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY2_8_B -->
        <!-- REGISTER 34 -->
        <register>
          <name>QSPI_AES_KEY2_8_B</name>
          <description>QSPI_AES_KEY2_8_B</description>
          <addressOffset>0x15C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY2_8_B-->
            <field>
              <name>QSPI_AES_KEY2_8_B</name>
              <description>To hold first 11-8 bytes of  aes key2 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY2_C_F -->
        <!-- REGISTER 35 -->
        <register>
          <name>QSPI_AES_KEY2_C_F</name>
          <description>QSPI_AES_KEY2_C_F</description>
          <addressOffset>0x160</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY2_C_F-->
            <field>
              <name>QSPI_AES_KEY2_C_F</name>
              <description>To hold first 15-12  bytes of  aes key2 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_SEC_SEG_LS_ADDR_1 -->
        <!-- REGISTER 36 -->
        <register>
          <name>QSPI_AES_SEC_SEG_LS_ADDR_1</name>
          <description>QSPI_AES_SEC_SEG_LS_ADDR_1</description>
          <addressOffset>0xE4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_SEC_SEG_LS_ADDR_1-->
            <field>
              <name>QSPI_AES_SEC_SEG_LS_ADDR_1</name>
              <description>This register specifies the lower boundary address of  1st segment</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_SEC_SEG_MS_ADDR_1 -->
        <!-- REGISTER 37 -->
        <register>
          <name>QSPI_AES_SEC_SEG_MS_ADDR_1</name>
          <description>QSPI_AES_SEC_SEG_MS_ADDR_1</description>
          <addressOffset>0xE8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_SEC_SEG_MS_ADDR_1-->
            <field>
              <name>QSPI_AES_SEC_SEG_MS_ADDR_1</name>
              <description>This register specifies the upper boundary address of  1st segment </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_SEC_SEG_LS_ADDR_2 -->
        <!-- REGISTER 38 -->
        <register>
          <name>QSPI_AES_SEC_SEG_LS_ADDR_2</name>
          <description>QSPI_AES_SEC_SEG_LS_ADDR_2</description>
          <addressOffset>0xEC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_SEC_SEG_LS_ADDR_2-->
            <field>
              <name>QSPI_AES_SEC_SEG_LS_ADDR_2</name>
              <description>This register specifies the lower boundary address of  2nd  segment</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_SEC_SEG_MS_ADDR_2 -->
        <!-- REGISTER 39 -->
        <register>
          <name>QSPI_AES_SEC_SEG_MS_ADDR_2</name>
          <description>QSPI_AES_SEC_SEG_MS_ADDR_2</description>
          <addressOffset>0xF0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_SEC_SEG_MS_ADDR_2-->
            <field>
              <name>QSPI_AES_SEC_SEG_MS_ADDR_2</name>
              <description>This register specifies the upper boundary address of  2nd segment</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_SEC_SEG_LS_ADDR_3 -->
        <!-- REGISTER 40 -->
        <register>
          <name>QSPI_AES_SEC_SEG_LS_ADDR_3</name>
          <description>QSPI_AES_SEC_SEG_LS_ADDR_3</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_SEC_SEG_LS_ADDR_3-->
            <field>
              <name>QSPI_AES_SEC_SEG_LS_ADDR_3</name>
              <description>This register specifies the lower boundary address of  3rd segment</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_SEC_SEG_MS_ADDR_3 -->
        <!-- REGISTER 41 -->
        <register>
          <name>QSPI_AES_SEC_SEG_MS_ADDR_3</name>
          <description>QSPI_AES_SEC_SEG_MS_ADDR_3</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_SEC_SEG_MS_ADDR_3-->
            <field>
              <name>QSPI_AES_SEC_SEG_MS_ADDR_3</name>
              <description>This register specifies the upper boundary address of  3rd segment </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_SEC_SEG_LS_ADDR_4 -->
        <!-- REGISTER 42 -->
        <register>
          <name>QSPI_AES_SEC_SEG_LS_ADDR_4</name>
          <description>QSPI_AES_SEC_SEG_LS_ADDR_4</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_SEC_SEG_LS_ADDR_4-->
            <field>
              <name>QSPI_AES_SEC_SEG_LS_ADDR_4</name>
              <description>This register specifies the lower boundary address of  4th segment</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_SEC_SEG_MS_ADDR_4 -->
        <!-- REGISTER 43 -->
        <register>
          <name>QSPI_AES_SEC_SEG_MS_ADDR_4</name>
          <description>QSPI_AES_SEC_SEG_MS_ADDR_4</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_SEC_SEG_MS_ADDR_4-->
            <field>
              <name>QSPI_AES_SEC_SEG_MS_ADDR_4</name>
              <description>This register specifies the upper boundary address of  4th  segment</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_SRAM_CTRL_CSNn_REG -->
        <!-- REGISTER 44 -->
        <cluster>
          <dim>2</dim>
          <dimIncrement>0x4</dimIncrement>
          <dimIndex>0-1</dimIndex>
          <name>QSPI_SRAM_CTRL_CSNn_REG</name>
          <description>QSPI SRAM CTRL CSN (0-1) </description>
          <addressOffset>0x104</addressOffset>
          <register>
            <name>QSPI_SRAM_CTRL_CSN_n__REG</name>
            <description>QSPI SRAM CTRL CSN</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <!-- bit_8_mode-->
              <field>
                <name>BIT_8_MODE</name>
                <description>Flash 8bit (1 byte) boundary mode</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>0</name>
                    <description>Flash is not with 8bit (1 byte) boundary</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>1</name>
                    <description>Flash is with 8bit (1 byte) boundary</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- byte_32_mode-->
              <field>
                <name>BYTE_32_MODE</name>
                <description>Flash 32 byte boundary mode</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>0</name>
                    <description>Flash is not with 32 byte boundary</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>1</name>
                    <description>Flash is with 32 byte boundary.</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- addr_16bit_mode-->
              <field>
                <name>ADDR_16BIT_MODE</name>
                <description>Send only lower 16bits of Address enable.</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>0</name>
                    <description>24 address bit flash is connected</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>1</name>
                    <description>16 address bit flash is connected</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- RESERVED1 -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[7:3]</bitRange>
                <access>read-write</access>
              </field>
              <!-- cmd_mode-->
              <field>
                <name>CMD_MODE</name>
                <description>writing cmd mode</description>
                <bitRange>[9:8]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>00</name>
                    <description>Single SPI</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>01</name>
                    <description>Dual SPI</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>10</name>
                    <description>Quad SPI</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>11</name>
                    <description>OCTA SPI</description>
                    <value>3</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- addr_mode-->
              <field>
                <name>ADDR_MODE</name>
                <description>writing address mode</description>
                <bitRange>[11:10]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>00</name>
                    <description>Single SPI</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>01</name>
                    <description>Dual SPI</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>10</name>
                    <description>Quad SPI</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>11</name>
                    <description>OCTA SPI</description>
                    <value>3</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- data_mode-->
              <field>
                <name>DATA_MODE</name>
                <description>writing address mode</description>
                <bitRange>[13:12]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>00</name>
                    <description>Single SPI</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>01</name>
                    <description>Dual SPI</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>10</name>
                    <description>Quad SPI</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>11</name>
                    <description>OCTA SPI</description>
                    <value>3</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- RESERVED2 -->
              <field>
                <name>RESERVED2</name>
                <description>reserved2</description>
                <bitRange>[15:14]</bitRange>
                <access>read-write</access>
              </field>
              <!-- wr_cmd-->
              <field>
                <name>WR_CMD</name>
                <description>Command to be used for writing</description>
                <bitRange>[23:16]</bitRange>
                <access>read-write</access>
              </field>
              <!-- RESERVED3 -->
              <field>
                <name>RESERVED3</name>
                <description>reserved3</description>
                <bitRange>[31:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- SEMI_AUTO_MODE_ADDR_REG -->
        <!-- REGISTER 45 -->
        <register>
          <name>SEMI_AUTO_MODE_ADDR_REG</name>
          <description>Byte address to read the data from flash in semi auto mode. 
					   It is valid only semi auto mode enable bit is asserted</description>
          <addressOffset>0x11C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>
        <!-- SEMI_AUTO_MODE_CONFIG_REG -->
        <!-- REGISTER 46 -->
        <register>
          <name>SEMI_AUTO_MODE_CONFIG_REG</name>
          <description>none</description>
          <addressOffset>0x120</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qspi_semi_auto_bsize-->
            <field>
              <name>QSPI_SEMI_AUTO_BSIZE</name>
              <description>This is burst size to read data from flash in semi auto mode</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_semi_auto_hsize-->
            <field>
              <name>QSPI_SEMI_AUTO_HSIZE</name>
              <description>Indicates number of bytes valid in each transaction</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>1 byte valid</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>2 bytes valid</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>4 bytes valid</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>none</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SEMI_AUTO_MODE_CONFIG2_REG -->
        <!-- REGISTER 47 -->
        <register>
          <name>SEMI_AUTO_MODE_CONFIG2_REG</name>
          <description>none</description>
          <addressOffset>0x124</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Qspi_semi_auto_rd_cnt-->
            <field>
              <name>QSPI_SEMI_AUTO_RD_CNT</name>
              <description>Total number of bytes to be read flash continuously from the address given by SEMI_AUTO_MODE_ADDR_REG</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_semi_auto_mode_en-->
            <field>
              <name>QSPI_SEMI_AUTO_MODE_EN</name>
              <description>Enable for semi auto mode read operation. Make sure manual mode read/write operation is completed before asserting this bit</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_semi_auto_rd_busy-->
            <field>
              <name>QSPI_SEMI_AUTO_RD_BUSY</name>
              <description>Indicates status of semi auto mode read status. If it is high, semi auto mode read operation is progressing</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:14]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_BUS_MODE2_REG -->
        <!-- REGISTER 48 -->
        <register>
          <name>QSPI_BUS_MODE2_REG</name>
          <description>none</description>
          <addressOffset>0x128</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- PREFETCH_ENBLD_MSTR_ID-->
            <field>
              <name>PREFETCH_ENBLD_MSTR_ID</name>
              <description>Holds the programmable prefetch enabled AHB master ID. This is commonly used for enabling prefetch for icache master.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PREFETCH_EN_FOR_ICACHE_MSTR-->
            <field>
              <name>PREFETCH_EN_FOR_ICACHE_MSTR</name>
              <description>Prefetch enable for icache AHB master.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[7:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qpsi_prefetch_enbld_trans_bytes-->
            <field>
              <name>QSPI_PREFETCH_ENBLD_TRANS_BYTES</name>
              <description>Programmable prefetch enabled AHB master transfer bytes.
						   Assume this is used for icache and dma ahb master access in auto mode.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved for future use</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_SEC_KEY_FRM_KH_REG -->
        <!-- REGISTER 49 -->
        <register>
          <name>QSPI_AES_SEC_KEY_FRM_KH_REG</name>
          <description>none</description>
          <addressOffset>0x12C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Start_loading_sec_key_frm_kh-->
            <field>
              <name>START_LOADING_SEC_KEY_FRM_KH</name>
              <description>Start Security key loading from KH.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Loading_sec_key_frm_kh-->
            <field>
              <name>LOADING_SEC_KEY_FRM_KH</name>
              <description>Indicates security key loading status from KH.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Sec_key_reading_interval-->
            <field>
              <name>SEC_KEY_READING_INTERVAL</name>
              <description>Security key reading interval</description>
              <bitRange>[5:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONITNUE_FETCH_CTRL_REG -->
        <!-- REGISTER 50 -->
        <register>
          <name>QSPI_AUTO_CONITNUE_FETCH_CTRL_REG</name>
          <description>none</description>
          <addressOffset>0x130</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- continue_fetch_wait_timeout_value_frm_reg-->
            <field>
              <name>CONTINUE_FETCH_WAIT_TIMEOUT_VALUE_FRM_REG</name>
              <description>Maximum Continue fetch wait time between two qspi auto reads.</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_fetch_en-->
            <field>
              <name>CONTINUE_FETCH_EN</name>
              <description>Continue fetch feature enable.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_MANUAL_RDWR_FIFO_REGS -->
        <!-- REGISTER 27 -->
      </registers>
    </peripheral>
    <!-- CYCLIC REDUNDANCY CODE  -->
    <peripheral>
      <name>CRC_Accelerator</name>
      <version>1.0</version>
      <description>CRC is used in all wireless communication as a first data integrity check</description>
      <groupName>CRC</groupName>
      <baseAddress>0x45080000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x3C</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- CRC_GEN_CTRL_SET  Register -->
        <register>
          <name>CRC_DIN_STS</name>
          <description>Input data status register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000003</resetValue>
          <fields>
            <!--FIFO_EMPTY-->
            <field>
              <name>FIFO_EMPTY</name>
              <description>FIFO empty indication status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--FIFO_AEMPTY-->
            <field>
              <name>FIFO_AEMPTY</name>
              <description>FIFO almost empty indication status.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--FIFO_AFULL-->
            <field>
              <name>FIFO_AFULL</name>
              <description>FIFO almost full indication status</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--FIFO_FULL-->
            <field>
              <name>FIFO_FULL</name>
              <description>FIFO full indication status</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--FIFO_OCC-->
            <field>
              <name>FIFO_OCC</name>
              <description>FIFO occupancy</description>
              <bitRange>[9:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- REGISTER 1 -->
        <register>
          <name>CRC_GEN_CTRL_SET_REG</name>
          <description>General control set register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- soft_rst -->
            <field>
              <name>SOFT_RST</name>
              <description> Soft reset. This clears the FIFO and settles all the state machines to their IDLE</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Soft reset will be triggered.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CRC_GEN_CTRL_RESET  Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>CRC_GEN_CTRL_RESET</name>
          <description>General control reset register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <fields>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CRC_GEN_STS  Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>CRC_GEN_STS</name>
          <description>General status register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <fields>
            <field>
              <name>CALC_DONE</name>
              <description>When the computation of final CRC with the data out of fifo, this will get set to 1 otherwise 0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DIN_NUM_BYTES_DONE</name>
              <description>When number of bytes requested for computation of final CRC is read from fifo by internal FSM, this will get set to 1 otherwise 0.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CRC_POLYNOMIAL  Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>CRC_POLYNOMIAL</name>
          <description>This register holds the polynomial with which the final CRC is computed.</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>POLYNOMIAL</name>
              <description>Polynomial register. This register holds the polynomial with which the final CRC is computed.When write
							Polynomial will be updated.When read read polynomial.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CRC_POLYNOMIAL_CTRL_SET  Register -->
        <!-- REGISTER 5 -->
        <register>
          <name>CRC_POLYNOMIAL_CTRL_SET</name>
          <description>Polynomial control set register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>POLYNOMIAL_WIDTH_SET</name>
              <description>Polynomial width set. Number of bits/width of the polynomial has to be written here for the computation of final CRC. If a new width has to be configured, clear the existing length first by writing 0x1f in polynomial_ctrl_reset register.
							When read, actual polynomial width is read.</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CRC_POLYNOMIAL_CTRL_RESET  Register -->
        <!-- REGISTER 6 -->
        <register>
          <name>CRC_POLYNOMIAL_CTRL_RESET</name>
          <description>Polynomial control set register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>POLYNOMIAL_WIDTH_SET</name>
              <description>Polynomial width reset. If a new width has to be configured, clear the existing length first by writing 0x1f.
						   When read, actual polynomial width is read.</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CRC_LFSR_INIT_VAL  Register -->
        <!-- REGISTER 7 -->
        <register>
          <name>CRC_LFSR_INIT_VAL</name>
          <description>LFSR initial value</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>LFSR_INIT</name>
              <description>This holds LFSR initialization value. When ever LFSR needs to be initialized, this has to be updated with the init value and trigger init_lfsr in LFSR_INIT_CTRL_SET register.
							For example, in WiFi case, 0xffffffff is used as init value of LFSR.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CRC_LFSR_INIT_CTRL_SET  Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>CRC_LFSR_INIT_CTRL_SET</name>
          <description>LFSR state initialization control set register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>CLEAR_LFSR</name>
              <description>Clear LFSR state. When this is set, LFSR state is cleared to 0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>LFSR state will be cleared in next cycle</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>INIT_LFSR</name>
              <description>Initialize LFSR state. When this is set LFSR state will be initialized with LFSR_INIT_VAL/bit swapped LFSR_INIT_VAL in the next cycle</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Initialization will be done in next cycle</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>USE_SWAPPED_INIT_VAL</name>
              <description>Use bit swapped init value. If this is set bit swapped version of LFSR init value will be loaded / initialized to LFSR state</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write 1  use_swapped_init_val will be enabled
							   read  1  use_swapped_init_val is enabled </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write 0 No effect
				               read  0 use_swapped_init_val is disabled.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CRC_LFSR_INIT_CTRL_RESET  Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>CRC_LFSR_INIT_CTRL_RESET</name>
          <description>LFSR state initialization control reset register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved for future use.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>USE_SWAPPED_INIT_VAL</name>
              <description>Use bit swapped init value. If this is set bit swapped version of LFSR init value will be loaded / initialized to LFSR state</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write 1  use_swapped_init_val will be enabled
							   read  1  use_swapped_init_val is enabled </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write 0 No effect
				               read  0 use_swapped_init_val is disabled.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved for future use.</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CRC_DIN_FIFO  Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>CRC_DIN_FIFO</name>
          <description>Data input FIFO register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>DIN_FIFO</name>
              <description>FIFO input port is mapped to this register. Data on which the final CRC has to be computed has to be loaded to this FIFO</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- CRC_DIN_CTRL_SET  Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>CRC_DIN_CTRL_SET</name>
          <description>Input data control set register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>DIN_WIDTH_REG</name>
              <description>Valid number of bits in the input data in din_width_from_reg set mode. Before writing a new value into this, 
							din_ctrl_reset_reg has to be written with 0x1f to clear this field as these are set/clear bits.</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DIN_WIDTH_FROM_REG</name>
              <description>Valid number of bits in the input data. In default, number of valid bits in the input data is taken from ULI (uli_be). If this is set,
							whatever is the input size, only din_ctrl_reg[4:0] is taken as valid length/width for inout data.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write 1  Din valid width will be taken from reg.
							   read  1  Din valid width is taken from reg. </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write 0 No effect
				               read  0 Din valid width is not taken from reg</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DIN_WIDTH_FROM_CNT</name>
              <description>Valid number of bits in the input data. In default, number of valid bits in the input data is taken from ULI (uli_be). 
							If this is set, a mix of ULI length and number of bytes remaining will form the valid bits (which ever is less that will be considered as valid bits).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write 1  Din width will be taken from both apb and cnt value.
							   read  1   Din width is from ULI and cnt value.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write 0 No effect
				               read  0 Din width does not consider cnt value.This overrides the din_width_from_reg</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>USE_SWAPPED_DIN</name>
              <description>Use bit swapped input data. If this is set, input data will be swapped and filled in to FIFO.
							Whatever read out from FIFO will be directly fed to LFSR engine.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write 1  Bit swapped data will be filled in to FIFO
							   read  1  Bit swapped data is filled in to FIFO</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write 0 No effect
				               read  0 Direct write data is filled in to FIFO.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESET_FIFO_PTRS</name>
              <description>Reset fifo pointer. This clears the FIFO.When this is set, FIFO will be cleared.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write 1 FIFO will be cleared in the next cycle.
							  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write 0 No effect
				             </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[23:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO_AEMPTY_THRESHOLD</name>
              <description>FIFO almost empty threshold value. This has to be cleared by writing 0x0f000000 into din_ctrl_reset before updating any new value.</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO_AFULL_THRESHOULD</name>
              <description>FIFO almost full threshold value. This has to be cleared by writing 0xf0000000 into din_ctrl_reset before updating any new value</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CRC_DIN_CTRL_RESET_REG  Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>CRC_DIN_CTRL_RESET_REG</name>
          <description>Input data control set register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>DIN_WIDTH_REG</name>
              <description>Valid number of bits in the input data in din_width_from_reg set mode. Before writing a new value into this, 
							din_ctrl_reset_reg has to be written with 0x1f to clear this field as these are set/clear bits.</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DIN_WIDTH_FROM_REG</name>
              <description>Valid number of bits in the input data. In default, number of valid bits in the input data is taken from ULI (uli_be). If this is set,
							whatever is the input size, only din_ctrl_reg[4:0] is taken as valid length/width for inout data.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write 1  Din valid width will be taken from reg.
							   read  1  Din valid width is taken from reg. </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write 0 No effect
				               read  0 Din valid width is not taken from reg</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DIN_WIDTH_FROM_CNT</name>
              <description>Valid number of bits in the input data. In default, number of valid bits in the input data is taken from ULI (uli_be). 
							If this is set, a mix of ULI length and number of bytes remaining will form the valid bits (which ever is less that will be considered as valid bits).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write 1  Din width will be taken from both apb and cnt value.
							   read  1   Din width is from ULI and cnt value.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write 0 No effect
				               read  0 Din width does not consider cnt value.This overrides the din_width_from_reg</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>USE_SWAPPED_DIN</name>
              <description>Use bit swapped input data. If this is set input data will be swapped and filled in to FIFO.
							Whatever read out from FIFO will be directly fed to LFSR engine.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write 1  Bit swapped data will be filled in to FIFO
							   read  1  Bit swapped data is filled in to FIFO</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write 0 No effect
				               read  0 Direct write data is filled in to FIFO.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved for future use.</description>
              <bitRange>[23:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO_AEMPTY_THRESHOLD</name>
              <description>FIFO almost empty threshold value. This has to be cleared by writing 0x0f000000 into din_ctrl_reset before updating any new value.</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO_AFULL_THRESHOULD</name>
              <description>FIFO almost full threshold value. This has to be cleared by writing 0xf0000000 into din_ctrl_reset before updating any new value</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CRC_DIN_NUM_BYTES  Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>CRC_DIN_NUM_BYTES</name>
          <description>Data input FIFO register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <field>
              <name>DIN_NUM_BYTES</name>
              <description>in out data number of bytes</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CRC_LFSR_STATE  Register -->
        <!-- REGISTER 15 -->
        <register>
          <name>CRC_LFSR_STATE</name>
          <description>LFSR state register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0003</resetValue>
          <fields>
            <field>
              <name>LFSR_STATE</name>
              <description>If LFSR dynamic loading is required this can be used for writing the LFSR state directly.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- EFUSE  -->
    <peripheral>
      <name>EFUSE_Controller</name>
      <version>1.0</version>
      <description>The EFUSE controller is used to provide an interface to one time program memory (EFUSE macro) to perform write and read operations</description>
      <groupName>EFUSE</groupName>
      <baseAddress>0x4600C000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x38</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- EFUSE_DA_ADDR_REG -->
        <!-- REGISTER 1 -->
        <register>
          <name>EFUSE_DA_ADDR_REG</name>
          <description>Direct Access Registers</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- ADDR_BITS -->
            <field>
              <name>ADDR_BITS</name>
              <description>These bits specifies the address to write or read from EFUSE macro model 
			  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_DA_CTRL_SET_REG -->
        <!-- REGISTER 2 -->
        <register>
          <name>EFUSE_DA_CTRL_SET_REG</name>
          <description>Direct Access Set Registers</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000003</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- PGENB -->
            <field>
              <name>PGENB</name>
              <description>Set Program enable  
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description> Sets EFUSE program enable (PGENB) pin when direct accessing is enabled</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description> no effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- CSB -->
            <field>
              <name>CSB</name>
              <description>Set Chip Enable 
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Sets EFUSE  Chip enable (CSB) pin when direct accessing  is enabled</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description> no effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- STROBE -->
            <field>
              <name>STROBE</name>
              <description>Set strobe enable 
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description> Sets EFUSE STROBE enable (STROBE) pin when direct accessing is enabled</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description> no effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- LOAD -->
            <field>
              <name>LOAD</name>
              <description>Set Load enable 
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description> Sets EFUSE load enable (LOAD) pin when direct accessing is enabled</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description> no effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[15:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2  
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_DA_CTRL_CLEAR_REG -->
        <!-- REGISTER 3 -->
        <register>
          <name>EFUSE_DA_CTRL_CLEAR_REG</name>
          <description>Direct Access Clear Registers</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000003</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- PGENB -->
            <field>
              <name>PGENB</name>
              <description>Clear Program enable   
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description> Clear EFUSE program enable (PGENB) pin when direct accessing is enabled</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description> no effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- CSB -->
            <field>
              <name>CSB</name>
              <description>Clear Chip Enable 
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Clear EFUSE Chip enable (CSB) pin when direct accessing  is enabled</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description> no effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- LOAD -->
            <field>
              <name>LOAD</name>
              <description>Clear Load enable 
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Clear EFUSE load enable (LOAD) pin when direct accessing is enabled</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description> no effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2  
			  </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_CTRL_REG -->
        <!-- REGISTER 4 -->
        <register>
          <name>EFUSE_CTRL_REG</name>
          <description>Control Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- EFUSE enable -->
            <field>
              <name>EFUSE_ENABLE</name>
              <description>This bit specifies whether the EFUSE module is enabled or not 
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description> EFUSE module enabled</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>EFUSE module disabled</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- EFUSE direct path enable -->
            <field>
              <name>EFUSE_DIRECT_PATH_ENABLE</name>
              <description>This bit specifies whether the EFUSE direct path is enabled or not for direct accessing of the EFUSE pins
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>EFUSE direct accessing enabled</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description> EFUSE direct accessing disabled</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ENABLE EFUSE WRITE -->
            <field>
              <name>ENABLE_EFUSE_WRITE</name>
              <description>Controls the switch on VDDIQ for eFuse read/write. 
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>VDDIQ is supplied</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description> VDDIQ is gated </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[15:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2  
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_READ_ADDR_REG -->
        <!-- REGISTER 5 -->
        <register>
          <name>EFUSE_READ_ADDR_REG</name>
          <description>Read address Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00008000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Read address bits -->
            <field>
              <name>READ_ADDR_BITS</name>
              <description>These bits specifies the address from which read operation has to be performed 
			  </description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[14:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- do_read -->
            <field>
              <name>DO_READ</name>
              <description>Enables read FSM after EFUSE is enabled
			  </description>
              <bitRange>[15:15]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2  
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_READ_DATA_REG -->
        <!-- REGISTER 6 -->
        <register>
          <name>EFUSE_READ_DATA_REG</name>
          <description>Read address Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Read data bits -->
            <field>
              <name>READ_DATA_BITS</name>
              <description>These bits specifies the data bits that are read from a given address specified in the  
							EFUSE_READ_ADDRESS_REGISTER bits [8:0] 
			  </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[14:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Read FSM done -->
            <field>
              <name>READ_FSM_DONE</name>
              <description>Indicates read fsm is done. After this read data is available in EFUSE_READ_DATA_REGISTER bits [7:0]
			  </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2   
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_STATUS_REG -->
        <register>
          <name>EFUSE_STATUS_REG</name>
          <description>Read address Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Read data bits -->
            <field>
              <name>EFUSE_ENABLED</name>
              <description>This bit specifies whether the EFUSE is enabled or not
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- efuse_dout_sync -->
            <field>
              <name>EFUSE_DOUT_SYNC</name>
              <description>This bit specifies the 8-bit data read out from the EFUSE macro. This is synchronized with pclk
			  </description>
              <bitRange>[9:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- STROBE_CLEAR_BIT -->
            <field>
              <name>STROBE_CLEAR_BIT</name>
              <description>This bit indicates STROBE signal goes low after strobe count value reached '0'
			  </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2  
			  </description>
              <bitRange>[15:11]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED3</name>
              <description>reserved3  
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_RD_TMNG_PARAM_REG -->
        <register>
          <name>EFUSE_RD_TMNG_PARAM_REG</name>
          <description>none</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000521</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- tSUR_CS  -->
            <field>
              <name>TSUR_CS</name>
              <description>CSB to STROBE setup time into read mode
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- tSQ -->
            <field>
              <name>TSQ</name>
              <description>Q7-Q0 access time from STROBE rising edge
			  </description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- tHRA  -->
            <field>
              <name>THRA</name>
              <description>for 32x8 macro: A4 A0 to STROBE hold time into Read mode
							5122x8 macro: A8 A0 to STROBE hold time into Read mode
			  </description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_MEM_MAP_LENGTH_REG -->
        <register>
          <name>EFUSE_MEM_MAP_LENGTH_REG</name>
          <description>none</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- efuse_mem_map_length  -->
            <field>
              <name>EFUSE_MEM_MAP_LEN</name>
              <description>0: 8 bit read 1: 16 bit read 
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[15:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2 
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_READ_BLOCK_STARTING_LOCATION -->
        <register>
          <name>EFUSE_READ_BLOCK_STARTING_LOCATION</name>
          <description>Starting address from which the read has to be blocked. Once the end address is written,
						it cannot be changed till power on reset is given</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- EFUSE_READ_BLOCK_STARTING_LOCATION  -->
            <field>
              <name>EFUSE_READ_BLOCK_STARTING_LOCATION</name>
              <description>Starting address from which the read has to be blocked. Once the end address is written,
                           it cannot be changed till power on reset is given.
			  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_READ_BLOCK_END_LOCATION -->
        <register>
          <name>EFUSE_READ_BLOCK_END_LOCATION</name>
          <description>Starting address from which the read has to be blocked. Once the end address is written,
						it cannot be changed till power on reset is given</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- EFUSE_READ_BLOCK_END_LOCATION  -->
            <field>
              <name>EFUSE_READ_BLOCK_END_LOCATION</name>
              <description>End address till which the read has to be blocked. Once the end address is
			               written , it cannot be changed till power on reset is given.
			  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_READ_BLOCK_ENABLE_REG -->
        <register>
          <name>EFUSE_READ_BLOCK_ENABLE_REG</name>
          <description>The Transmit Poll Demand register enables the Transmit DMA to check whether or not the current
						descriptor is owned by DMA</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- EFUSE_READ_BLOCK_ENABLE -->
            <field>
              <name>EFUSE_READ_BLOCK_ENABLE</name>
              <description>Enable for blocking the read access from a programmable memory location 
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[15:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2  
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- EFUSE_DA_CLR_STROBE_REG  -->
        <register>
          <name>EFUSE_DA_CLR_STROBE_REG</name>
          <description>none</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- eFuse_strobe_clr_cnt -->
            <field>
              <name>EFUSE_STROBE_CLR_CNT</name>
              <description>Strobe signal Clear count in direct access mode. value depends on APB
      			           clock frequency of eFuse controller</description>
              <bitRange>[8:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Strobe_en -->
            <field>
              <name>EFUSE_STROBE_ENABLE</name>
              <description>none</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1  
			  </description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- I2S Master/Slave Block -->
    <peripheral>
      <name>I2S_PCM</name>
      <version>1.0</version>
      <description>I2S(Inter-IC Sound) is transferring two-channel digital audio data from one IC device to another</description>
      <groupName>I2S</groupName>
      <baseAddress>0x47050000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x200</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>I2S0</name>
        <value>64</value>
      </interrupt>
      <registers>
        <!-- IER: I2S Enable Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>I2S_IER</name>
          <description>I2S Enable Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- IEN: I2S Enable -->
            <field>
              <name>IEN</name>
              <description>Inter Block Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable DWP_apb_i2s</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable DWP_apb_i2s</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- IRER: I2S Receiver Block Enable Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>I2S_IRER</name>
          <description>I2S Receiver Block Enable Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- RXEN: Receiver Block Enable  -->
            <field>
              <name>RXEN</name>
              <description> Receive Block Enable, Bit Overrides any Individual Receive Channel Enables</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable Receiver</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable Receiver</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ITER: I2S Transmitter Block Enable Register-->
        <!-- REGISTER 3 -->
        <register>
          <name>I2S_ITER</name>
          <description>Transmitter Block Enable</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- TXEN: Transmitter Block Enable Register-->
            <field>
              <name>TXEN</name>
              <description> Transmitter Block Enable, Bit Overrides any Individual Transmit Channel Enables
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit channel is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit channel is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CER:    Clock Enable Register-->
        <!-- REGISTER 3 -->
        <register>
          <name>I2S_CER</name>
          <description>Clock Enable Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- CLKEN -->
            <field>
              <name>CLKEN</name>
              <description> Clock generation enable/disable
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>none</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>none</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CCR:  Clock Configuration Register-->
        <!-- REGISTER 3 -->
        <register>
          <name>I2S_CCR</name>
          <description>Clock Configuration Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- SCLKG -->
            <field>
              <name>SCLKG</name>
              <description>These bits are used to program the gating of sclk
			  </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WSS</name>
              <description>These bits are used to program the number of sclk cycles
			  </description>
              <bitRange>[4:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- RXFFR: Receiver Block FIFO Reset Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>I2S_RXFFR</name>
          <description>Receiver Block FIFO Reset Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- RXFFR: Receiver FIFO Reset Register -->
            <field>
              <name>RXFFR</name>
              <description> Writing a 1 To This Register Flushes All The RX FIFO's Receiver Block 
			                Must be Disable Prior to Writing This Bit
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- TXFFR: Transmitter Block FIFO Reset Register -->
        <!-- REGISTER 5 -->
        <register>
          <name>I2S_TXFFR</name>
          <description>Transmitter Block FIFO Reset Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- TXFFR: Transmitter Block FIFO Reset Register -->
            <field>
              <name>TXFFR</name>
              <description>Writing a 1 To This Register Flushes All The RX FIFO's Receiver Block 
			                Must be Disable Prior to Writing This Bit
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- LRBR: Left Receive Buffer Register -->
        <!-- REGISTER 6 -->
        <cluster>
          <dim>4</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>CHANNEL_CONFIGn</name>
          <description>Channel config registers (0-3)</description>
          <addressOffset>0x20</addressOffset>
          <register>
            <name>I2S_LRBR_n_</name>
            <description>Left Receive Buffer Register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!-- LRBR: Left Receive Buffer Register -->
              <field>
                <name>LRBR</name>
                <description>Data received serially from the received channel input
			  </description>
                <bitRange>[23:0]</bitRange>
                <access>read-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:24]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- LTHR: Left Transmit Holding Register -->
          <register>
            <name>I2S_LTHR_n_</name>
            <description>Left Receive Buffer Register</description>
            <alternateRegister>LRBR</alternateRegister>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!-- LTHR: Left Transmit Holding Register -->
              <field>
                <name>LTHR</name>
                <description>The Left Stereo Data to be transmitted serially from the Transmitted channel output
			  </description>
                <bitRange>[23:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:24]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- RRBR:Right Receive Buffer Register -->
          <!-- REGISTER 7 -->
          <register>
            <name>I2S_RRBR_n_</name>
            <description>Right Receive Buffer Register</description>
            <addressOffset>0x4</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!-- RRBR:Right Receive Buffer Register -->
              <field>
                <name>RRBR</name>
                <description>The Right Stereo Data received serially from the received channel input through this register
			  </description>
                <bitRange>[23:0]</bitRange>
                <access>read-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:24]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- RTHR: Right Transmit Holding Register -->
          <register>
            <name>I2S_RTHR_n_</name>
            <description>Right Transmit Holding Register</description>
            <alternateRegister>RRBR</alternateRegister>
            <addressOffset>0x4</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!-- RTHR: Right Transmit Holding Register -->
              <field>
                <name>RTHR</name>
                <description>The Right Stereo Data to be transmitted serially from the Transmit channel output written through this register
			  </description>
                <bitRange>[23:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:24]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- RER: Receive Enable Register -->
          <!-- REGISTER 8 -->
          <register>
            <name>I2S_RER_n_</name>
            <description>Receive Enable Register</description>
            <addressOffset>0x8</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000001</resetValue>
            <resetMask>0x1</resetMask>
            <fields>
              <!-- RXCHEN: Receive Channel Enable Register -->
              <field>
                <name>RXCHEN</name>
                <description>This Bit enables/disables a receive channel independently of all other channels 
			  </description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Receive Channel is Disable</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Receive Channel is Disable</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- TER: Transmit Enable Register -->
          <!-- REGISTER 9 -->
          <register>
            <name>I2S_TER_n_</name>
            <description>Transmit Enable Register</description>
            <addressOffset>0xC</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000001</resetValue>
            <resetMask>0x1</resetMask>
            <fields>
              <!-- TXCHEN: Transmit Channel Enable Register -->
              <field>
                <name>TXCHEN</name>
                <description>This Bit enables/disables a transmit channel independently of all other channels </description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description> Transmit Channel is Disable</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Transmit Channel is Enable</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- RCR: Receive Configuration Register -->
          <!-- REGISTER 10 -->
          <register>
            <name>I2S_RCR_n_</name>
            <description>Receive Configuration Register</description>
            <addressOffset>0x10</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0000004</resetValue>
            <resetMask>0x7</resetMask>
            <fields>
              <!-- WLEN: -->
              <field>
                <name>WLEN</name>
                <description>This Bits are used to program the desired data resolution of the receiver
               			  and enables LSB of the incoming left or right word
			  </description>
                <bitRange>[2:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>000</name>
                    <description>Ignore Word Length</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>001</name>
                    <description>12 Bit Resolution</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>010</name>
                    <description>16 Bit Resolution</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>011</name>
                    <description>20 Bit Resolution</description>
                    <value>3</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>100</name>
                    <description>24 Bit Resolution</description>
                    <value>4</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>101</name>
                    <description>32 Bit Resolution</description>
                    <value>5</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:3]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- TCR: Transmit Configuration Register -->
          <!-- REGISTER 11 -->
          <register>
            <name>I2S_TCR_n_</name>
            <description>Transmit Configuration Register</description>
            <addressOffset>0x14</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000004</resetValue>
            <resetMask>0x7</resetMask>
            <fields>
              <!-- WLEN: Data Ready -->
              <field>
                <name>WLEN</name>
                <description>This Bits are used to program the desired data resolution of the transmitter
               			  and ensure that MSB of the data is transmitted first.
			  </description>
                <bitRange>[2:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>000</name>
                    <description>Ignore Word Length</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>001</name>
                    <description>12 Bit Resolution</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>010</name>
                    <description>16 Bit Resolution</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>011</name>
                    <description>20 Bit Resolution</description>
                    <value>3</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>100</name>
                    <description>24 Bit Resolution</description>
                    <value>4</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>101</name>
                    <description>32 Bit Resolution</description>
                    <value>5</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:3]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- ISR: Interrupt Status Register -->
          <!-- REGISTER 12 -->
          <register>
            <name>I2S_ISR_n_</name>
            <description>Interrupt Status Register</description>
            <addressOffset>0x18</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000010</resetValue>
            <resetMask>0x33</resetMask>
            <fields>
              <!-- RXDA: Receive Data Available  -->
              <field>
                <name>RXDA</name>
                <description> Receive Data Available </description>
                <bitRange>[0:0]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Reached</name>
                    <description>trigger level reached</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Not_reached</name>
                    <description>trigger level not reached</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- RXFO: Receive Data FIFO  -->
              <field>
                <name>RXFO</name>
                <description>Receive Data FIFO </description>
                <bitRange>[1:1]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Valid</name>
                    <description>RX FIFO Write valid</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Overrun</name>
                    <description>RX FIFO Write overrun</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[3:2]</bitRange>
                <access>read-only</access>
              </field>
              <!-- TXFE: Transmit FIFO Empty  -->
              <field>
                <name>TXFE</name>
                <description>Transmit FIFO Empty</description>
                <bitRange>[4:4]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Reached</name>
                    <description>trigger level reached</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Not_reached</name>
                    <description>trigger level not reached</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- TXFO: Transmit FIFO  -->
              <field>
                <name>TXFO</name>
                <description>Transmit FIFO</description>
                <bitRange>[5:5]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Valid</name>
                    <description>TX FIFO Write valid</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Overrun</name>
                    <description>TX FIFO Write overrun</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED2</name>
                <description>Reserved for future use</description>
                <bitRange>[31:6]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- IMR: Interrupt Mask Register -->
          <!-- REGISTER 13 -->
          <register>
            <name>I2S_IMR_n_</name>
            <description>Interrupt Mask Register</description>
            <addressOffset>0x1C</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000033</resetValue>
            <resetMask>0x33</resetMask>
            <fields>
              <!-- RXDAM: RX Data Available Mask Interrupt-->
              <field>
                <name>RXDAM</name>
                <description>RX Data Available Mask Interrupt</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Mask</name>
                    <description>Mask Interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Unmask</name>
                    <description>Unmask Interrupt</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- RXFOM: RX FIFO Overrun Mask Interrupt -->
              <field>
                <name>RXFOM</name>
                <description>RX FIFO Overrun Mask Interrupt</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Mask</name>
                    <description>Mask Interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Unmask</name>
                    <description>Unmask Interrupt</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[3:2]</bitRange>
                <access>read-write</access>
              </field>
              <!-- TXFEM: TX FIFO Empty Interrupt -->
              <field>
                <name>TXFEM</name>
                <description>TX FIFO Empty Interrupt</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Mask</name>
                    <description>Mask Interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Unmask</name>
                    <description>Unmask Interrupt</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- TXFOM: TX FIFO Overrun Interrupt -->
              <field>
                <name>TXFOM</name>
                <description>TX FIFO Overrun Interrupt</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Mask</name>
                    <description>Mask Interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Unmask</name>
                    <description>Unmask Interrupt</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED2</name>
                <description>Reserved for future use</description>
                <bitRange>[31:6]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- ROR: Receive Overrun Register -->
          <!-- REGISTER 14 -->
          <register>
            <name>I2S_ROR_n_</name>
            <description>Receive Overrun Register</description>
            <addressOffset>0x20</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x1</resetMask>
            <fields>
              <!-- RXCHO: RX Channel Overrun -->
              <field>
                <name>RXCHO</name>
                <description>Read this bit to  clear the RX FIFO data overrun interrupt</description>
                <bitRange>[0:0]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Overrun</name>
                    <description>RX FIFO Write Overrun</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Valid</name>
                    <description>RX FIFO Write Valid</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- TOR: Transmit Overrun Register -->
          <!-- REGISTER 15 -->
          <register>
            <name>I2S_TOR_n_</name>
            <description>Transmit Overrun Register</description>
            <addressOffset>0x24</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x1</resetMask>
            <fields>
              <!-- TXCHO: TX Channel Overrun -->
              <field>
                <name>TXCHO</name>
                <description>Read this bit to  clear the TX FIFO data overrun interrupt</description>
                <bitRange>[0:0]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Overrun</name>
                    <description>TX FIFO Write Overrun</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Valid</name>
                    <description>TX FIFO Write Valid</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- RFCR: Receive FIFO Configuration Register -->
          <!-- REGISTER 16 -->
          <register>
            <name>I2S_RFCR_n_</name>
            <description>Receive FIFO Configuration Register0</description>
            <addressOffset>0x28</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000003</resetValue>
            <resetMask>0xF</resetMask>
            <fields>
              <!-- RXCHDT: Receive Channel Data Trigger -->
              <field>
                <name>RXCHDT</name>
                <description>This bits program the trigger level in the RX FIFO 
			               at which the data available interrupt is generated
			  </description>
                <bitRange>[3:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:4]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- TXFCR: Transmit FIFO Configuration Register -->
          <!-- sREGISTER 17 -->
          <register>
            <name>I2S_TXFCR_n_</name>
            <description>Transmit FIFO Configuration Register</description>
            <addressOffset>0x2C</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000003</resetValue>
            <resetMask>0xF</resetMask>
            <fields>
              <!-- TXCHET: Transmit Channel Empty Trigger -->
              <field>
                <name>TXCHET</name>
                <description>This bits program the trigger level in the TX FIFO 
			               at which the Empty Threshold Reached interrupt is generated
			  </description>
                <bitRange>[3:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:4]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- RFF: Receive FIFO Flush -->
          <!-- REGISTER 18 -->
          <register>
            <name>I2S_RFF_n_</name>
            <description>Receive FIFO Flush</description>
            <addressOffset>0x30</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x01</resetMask>
            <fields>
              <!--  RXCHFR: Receive Channel FIFO Reset -->
              <field>
                <name>RXCHFR</name>
                <description>Writing a 1 to this register flushes an individual RX FIFO
                           RX channel or block must be disable prior to writing to this bit	</description>
                <bitRange>[0:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- TFF: Transmit FIFO Flush -->
          <!-- REGISTER 19 -->
          <register>
            <name>I2S_TFF_n_</name>
            <description>Transmit FIFO Flush</description>
            <addressOffset>0x34</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x01</resetMask>
            <fields>
              <!--  TXCHFR: Transmit Channel FIFO Reset -->
              <field>
                <name>TXCHFR</name>
                <description>Writing a 1 to this register flushes an individual TX FIFO
                           TX channel or block must be disable prior to writing to this bit			  
			  </description>
                <bitRange>[0:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!--#DD RSVD0,RSVD1 not there in HRM-->
          <register>
            <name>RSVD0</name>
            <description>none</description>
            <addressOffset>0x38</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x01</resetMask>
          </register>
          <register>
            <name>RSVD1</name>
            <description>none</description>
            <addressOffset>0x3C</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x01</resetMask>
          </register>
        </cluster>
        <!-- RXDMA: Receiver Block DMA Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>I2S_RXDMA</name>
          <description>Receiver Block DMA Register</description>
          <addressOffset>0x1C0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--  RXDMA: Receive DMA -->
            <field>
              <name>RXDMA</name>
              <description>Used to cycle repeatedly through the enabled receive channels 
			               Reading stereo data pairs
			    </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RRXDMA: Reset Receiver Block DMA Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>I2S_RRXDMA</name>
          <description>Reset Receiver Block DMA Register</description>
          <addressOffset>0x1C4</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--  RRXDMA: reset Receive DMA -->
            <field>
              <name>RRXDMA</name>
              <description>Writing a 1 to this self-clearing register resets the RXDMA register
			    </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- TXDMA: Transmitter Block DMA Register -->
        <!-- REGISTER 21 -->
        <register>
          <name>I2S_TXDMA</name>
          <description>Transmitter Block DMA Register</description>
          <addressOffset>0x1C8</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--  TXDMA: Transmit DMA -->
            <field>
              <name>TXDMA</name>
              <description>Used to cycle repeatedly through the enabled transmit channels 
			               allow to writing of stereo data pairs
			    </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- RTXDMA: Reset Transmitter Block DMA Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>I2S_RTXDMA</name>
          <description>Reset Transmitter Block DMA Register</description>
          <addressOffset>0x1CC</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--  RTXDMA: reset Receive DMA -->
            <field>
              <name>RTXDMA</name>
              <description>Writing a 1 to this self-clearing register resets the TXDMA register
			    </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- I2S_COMP_PARAM_2: Component Parameter 2 Register -->
        <!-- REGISTER 22 -->
        <register>
          <name>I2S_COMP_PARAM_2</name>
          <description>Component Parameter 2 Register</description>
          <addressOffset>0x1F0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000489</resetValue>
          <resetMask>0x1FBF</resetMask>
          <fields>
            <!--  I2S_RX_WORDSIZE_0 -->
            <field>
              <name>I2S_RX_WORDSIZE_0</name>
              <description>On Read returns the value of word size of receiver channel 0
			    </description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--  I2S_RX_WORDSIZE_1 -->
            <field>
              <name>I2S_RX_WORDSIZE_1</name>
              <description>On Read returns the value of word size of receiver channel 1
			    </description>
              <bitRange>[5:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- I2S_COMP_PARAM_1: Component Parameter 1 Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>I2S_COMP_PARAM_1</name>
          <description>Component Parameter 1 Register</description>
          <addressOffset>0x1F4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x02490069</resetValue>
          <resetMask>0xFFF07FF</resetMask>
          <fields>
            <!--  APB_DATA_WIDTH -->
            <field>
              <name>APB_DATA_WIDTH</name>
              <description>Width of APB data bus</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0x0</name>
                  <description>8 Bits</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x1</name>
                  <description>16 Bits</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x2</name>
                  <description>32 Bits</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x3</name>
                  <description>Reserved1</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_FIFO_DEPTH_GLOBAL -->
            <field>
              <name>I2S_FIFO_DEPTH_GLOBAL</name>
              <description>Determines FIFO depth for all channels</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0x0</name>
                  <description>2 Words deep</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x1</name>
                  <description>4 Words deep</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x2</name>
                  <description>8 Words deep</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x3</name>
                  <description>16 words deep</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_FIFO_MODE_EN -->
            <field>
              <name>I2S_MODE_EN</name>
              <description>Determines whether component act as Master or Slave </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Slave</name>
                  <description>Mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Master</name>
                  <description>Mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_TRANSMITTER_BLOCK -->
            <field>
              <name>I2S_TRANSMITTER_BLOCK</name>
              <description>Shows the presence of the transmitter block</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Absent</name>
                  <description>Block not present</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Present</name>
                  <description>Block is present</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_RECEIVER_BLOCK -->
            <field>
              <name>I2S_RECEIVER_BLOCK</name>
              <description>Shows the presence of the receiver block</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Absent</name>
                  <description>	Block not present</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Present</name>
                  <description>Block is present</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_RX_CHANNELS-->
            <field>
              <name>I2S_RX_CHANNELS</name>
              <description>Returns the number of receiver channels</description>
              <bitRange>[8:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>	1 Channel</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>2 Channels</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>3 Channels</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>4 Channels</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_TX_CHANNELS-->
            <field>
              <name>I2S_TX_CHANNELS</name>
              <description>Returns the number of transmitter channels</description>
              <bitRange>[10:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>	1 Channel</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>2 Channels</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>3 Channels</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>4 Channels</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:11]</bitRange>
              <access>read-only</access>
            </field>
            <!-- I2S_TX_WORDSIZE_0  -->
            <field>
              <name>I2S_TX_WORDSIZE_0</name>
              <description>Returns the value of word size of transmitter channel 0</description>
              <bitRange>[18:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- I2S_TX_WORDSIZE_1  -->
            <field>
              <name>I2S_TX_WORDSIZE_1</name>
              <description>Returns the value of word size of transmitter channel 1</description>
              <bitRange>[21:19]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- I2S_COMP_VERSION: Component Version ID -->
        <!-- REGISTER 24 -->
        <register>
          <name>I2S_COMP_VERSION_REG</name>
          <description>Component Version ID</description>
          <addressOffset>0x1F8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x3130362a</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- I2S_COMP_VERSION -->
            <field>
              <name>I2S_COMP_VERSION</name>
              <description>Return the component version(1.02)</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- I2S_COMP_TYPE: Design ware Component Type -->
        <!-- REGISTER 24 -->
        <register>
          <name>I2S_COMP_TYPE_REG</name>
          <description>Component Type</description>
          <addressOffset>0x1FC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x445701a0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- I2S_COMP_TYPE -->
            <field>
              <name>I2S_COMP_TYPE</name>
              <description>Return the component type</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- ULP_I2S  Block -->
    <peripheral>
      <name>ULP_I2S</name>
      <version>1.0</version>
      <description>I2S(Inter-IC Sound) is transferring two-channel digital audio data from one IC device to another</description>
      <groupName>I2S</groupName>
      <baseAddress>0x24040400</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x200</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>I2S1</name>
        <value>14</value>
      </interrupt>
      <registers>
        <!-- IER: I2S Enable Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>I2S_IER</name>
          <description>I2S Enable Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- IEN: I2S Enable -->
            <field>
              <name>IEN</name>
              <description>Inter Block Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable DWP_apb_i2s</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable DWP_apb_i2s</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- IRER: I2S Receiver Block Enable Register -->
        <!-- REGISTER 2 -->
        <register>
          <name>I2S_IRER</name>
          <description>I2S Receiver Block Enable Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- RXEN: Receiver Block Enable  -->
            <field>
              <name>RXEN</name>
              <description> Receive Block Enable, Bit Overrides any Individual Receive Channel Enables</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable Receiver</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable Receiver</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ITER: I2S Transmitter Block Enable Register-->
        <!-- REGISTER 3 -->
        <register>
          <name>I2S_ITER</name>
          <description>Transmitter Block Enable</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- TXEN: Transmitter Block Enable Register-->
            <field>
              <name>TXEN</name>
              <description> Transmitter Block Enable, Bit Overrides any Individual Transmit Channel Enables
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Transmit channel is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Transmit channel is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CER:    Clock Enable Register-->
        <!-- REGISTER 3 -->
        <register>
          <name>I2S_CER</name>
          <description>Clock Enable Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- CLKEN -->
            <field>
              <name>CLKEN</name>
              <description> Clock generation enable/disable
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>none</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>none</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CCR:  Clock Configuration Register-->
        <!-- REGISTER 3 -->
        <register>
          <name>I2S_CCR</name>
          <description>Clock Configuration Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- SCLKG -->
            <field>
              <name>SCLKG</name>
              <description>These bits are used to program the gating of sclk
        </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WSS</name>
              <description>These bits are used to program the number of sclk cycles
        </description>
              <bitRange>[4:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- RXFFR: Receiver Block FIFO Reset Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>I2S_RXFFR</name>
          <description>Receiver Block FIFO Reset Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- RXFFR: Receiver FIFO Reset Register -->
            <field>
              <name>RXFFR</name>
              <description> Writing a 1 To This Register Flushes All The RX FIFO's Receiver Block 
                      Must be Disable Prior to Writing This Bit
        </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- TXFFR: Transmitter Block FIFO Reset Register -->
        <!-- REGISTER 5 -->
        <register>
          <name>I2S_TXFFR</name>
          <description>Transmitter Block FIFO Reset Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <!-- TXFFR: Transmitter Block FIFO Reset Register -->
            <field>
              <name>TXFFR</name>
              <description>Writing a 1 To This Register Flushes All The RX FIFO's Receiver Block 
                      Must be Disable Prior to Writing This Bit
        </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- LRBR: Left Receive Buffer Register -->
        <!-- REGISTER 6 -->
        <cluster>
          <dim>4</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>CHANNEL_CONFIGn</name>
          <description></description>
          <addressOffset>0x20</addressOffset>
          <register>
            <name>I2S_LRBR_n_</name>
            <description>Left Receive Buffer Register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!-- LRBR: Left Receive Buffer Register -->
              <field>
                <name>LRBR</name>
                <description>Data received serially from the received channel input
        </description>
                <bitRange>[23:0]</bitRange>
                <access>read-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:24]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- LTHR: Left Transmit Holding Register -->
          <register>
            <name>I2S_LTHR_n_</name>
            <description>Left Receive Buffer Register</description>
            <alternateRegister>LRBR</alternateRegister>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!-- LTHR: Left Transmit Holding Register -->
              <field>
                <name>LTHR</name>
                <description>The Left Stereo Data to be transmitted serially from the Transmitted channel output
        </description>
                <bitRange>[23:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:24]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- RRBR:Right Receive Buffer Register -->
          <!-- REGISTER 7 -->
          <register>
            <name>I2S_RRBR_n_</name>
            <description>Right Receive Buffer Register</description>
            <addressOffset>0x4</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!-- RRBR:Right Receive Buffer Register -->
              <field>
                <name>RRBR</name>
                <description>The Right Stereo Data received serially from the received channel input through this register
        </description>
                <bitRange>[23:0]</bitRange>
                <access>read-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:24]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- RTHR: Right Transmit Holding Register -->
          <register>
            <name>I2S_RTHR_n_</name>
            <description>Right Transmit Holding Register</description>
            <alternateRegister>RRBR</alternateRegister>
            <addressOffset>0x4</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!-- RTHR: Right Transmit Holding Register -->
              <field>
                <name>RTHR</name>
                <description>The Right Stereo Data to be transmitted serially from the Transmit channel output written through this register
        </description>
                <bitRange>[23:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:24]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- RER: Receive Enable Register -->
          <!-- REGISTER 8 -->
          <register>
            <name>I2S_RER_n_</name>
            <description>Receive Enable Register</description>
            <addressOffset>0x8</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000001</resetValue>
            <resetMask>0x1</resetMask>
            <fields>
              <!-- RXCHEN: Receive Channel Enable Register -->
              <field>
                <name>RXCHEN</name>
                <description>This Bit enables/disables a receive channel independently of all other channels 
        </description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Receive Channel is Disable</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Receive Channel is Disable</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- TER: Transmit Enable Register -->
          <!-- REGISTER 9 -->
          <register>
            <name>I2S_TER_n_</name>
            <description>Transmit Enable Register</description>
            <addressOffset>0xC</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000001</resetValue>
            <resetMask>0x1</resetMask>
            <fields>
              <!-- TXCHEN: Transmit Channel Enable Register -->
              <field>
                <name>TXCHEN</name>
                <description>This Bit enables/disables a transmit channel independently of all other channels </description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description> Transmit Channel is Disable</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Transmit Channel is Enable</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- RCR: Receive Configuration Register -->
          <!-- REGISTER 10 -->
          <register>
            <name>I2S_RCR_n_</name>
            <description>Receive Configuration Register</description>
            <addressOffset>0x10</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0000002</resetValue>
            <resetMask>0x7</resetMask>
            <fields>
              <!-- WLEN: -->
              <field>
                <name>WLEN</name>
                <description>This Bits are used to program the desired data resolution of the receiver
                      and enables LSB of the incoming left or right word
        </description>
                <bitRange>[2:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>000</name>
                    <description>Ignore Word Length</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>001</name>
                    <description>12 Bit Resolution</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>010</name>
                    <description>16 Bit Resolution</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>011</name>
                    <description>20 Bit Resolution</description>
                    <value>3</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>100</name>
                    <description>24 Bit Resolution</description>
                    <value>4</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>101</name>
                    <description>32 Bit Resolution</description>
                    <value>5</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:3]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- TCR: Transmit Configuration Register -->
          <!-- REGISTER 11 -->
          <register>
            <name>I2S_TCR_n_</name>
            <description>Transmit Configuration Register</description>
            <addressOffset>0x14</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000002</resetValue>
            <resetMask>0x7</resetMask>
            <fields>
              <!-- WLEN: Data Ready -->
              <field>
                <name>WLEN</name>
                <description>This Bits are used to program the desired data resolution of the transmitter
                      and ensure that MSB of the data is transmitted first.
        </description>
                <bitRange>[2:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>000</name>
                    <description>Ignore Word Length</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>001</name>
                    <description>12 Bit Resolution</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>010</name>
                    <description>16 Bit Resolution</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>011</name>
                    <description>20 Bit Resolution</description>
                    <value>3</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>100</name>
                    <description>24 Bit Resolution</description>
                    <value>4</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>101</name>
                    <description>32 Bit Resolution</description>
                    <value>5</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:3]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- ISR: Interrupt Status Register -->
          <!-- REGISTER 12 -->
          <register>
            <name>I2S_ISR_n_</name>
            <description>Interrupt Status Register</description>
            <addressOffset>0x18</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000010</resetValue>
            <resetMask>0x33</resetMask>
            <fields>
              <!-- RXDA: Receive Data Available  -->
              <field>
                <name>RXDA</name>
                <description> Receive Data Available </description>
                <bitRange>[0:0]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Reached</name>
                    <description>trigger level reached</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Not_reached</name>
                    <description>trigger level not reached</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- RXFO: Receive Data FIFO  -->
              <field>
                <name>RXFO</name>
                <description>Receive Data FIFO </description>
                <bitRange>[1:1]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Valid</name>
                    <description>RX FIFO Write valid</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Overrun</name>
                    <description>RX FIFO Write overrun</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[3:2]</bitRange>
                <access>read-only</access>
              </field>
              <!-- TXFE: Transmit FIFO Empty  -->
              <field>
                <name>TXFE</name>
                <description>Transmit FIFO Empty</description>
                <bitRange>[4:4]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Reached</name>
                    <description>trigger level reached</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Not_reached</name>
                    <description>trigger level not reached</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- TXFO: Transmit FIFO  -->
              <field>
                <name>TXFO</name>
                <description>Transmit FIFO</description>
                <bitRange>[5:5]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Valid</name>
                    <description>TX FIFO Write valid</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Overrun</name>
                    <description>TX FIFO Write overrun</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED2</name>
                <description>Reserved for future use</description>
                <bitRange>[31:6]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- IMR: Interrupt Mask Register -->
          <!-- REGISTER 13 -->
          <register>
            <name>I2S_IMR_n_</name>
            <description>Interrupt Mask Register</description>
            <addressOffset>0x1C</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000033</resetValue>
            <resetMask>0x33</resetMask>
            <fields>
              <!-- RXDAM: RX Data Available Mask Interrupt-->
              <field>
                <name>RXDAM</name>
                <description>RX Data Available Mask Interrupt</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Mask</name>
                    <description>Mask Interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Unmask</name>
                    <description>Unmask Interrupt</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- RXFOM: RX FIFO Overrun Mask Interrupt -->
              <field>
                <name>RXFOM</name>
                <description>RX FIFO Overrun Mask Interrupt</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Mask</name>
                    <description>Mask Interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Unmask</name>
                    <description>Unmask Interrupt</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[3:2]</bitRange>
                <access>read-write</access>
              </field>
              <!-- TXFEM: TX FIFO Empty Interrupt -->
              <field>
                <name>TXFEM</name>
                <description>TX FIFO Empty Interrupt</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Mask</name>
                    <description>Mask Interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Unmask</name>
                    <description>Unmask Interrupt</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- TXFOM: TX FIFO Overrun Interrupt -->
              <field>
                <name>TXFOM</name>
                <description>TX FIFO Overrun Interrupt</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Mask</name>
                    <description>Mask Interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Unmask</name>
                    <description>Unmask Interrupt</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED2</name>
                <description>Reserved for future use</description>
                <bitRange>[31:6]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- ROR: Receive Overrun Register -->
          <!-- REGISTER 14 -->
          <register>
            <name>I2S_ROR_n_</name>
            <description>Receive Overrun Register</description>
            <addressOffset>0x20</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x1</resetMask>
            <fields>
              <!-- RXCHO: RX Channel Overrun -->
              <field>
                <name>RXCHO</name>
                <description>Read this bit to  clear the RX FIFO data overrun interrupt</description>
                <bitRange>[0:0]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Overrun</name>
                    <description>RX FIFO Write Overrun</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Valid</name>
                    <description>RX FIFO Write Valid</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- TOR: Transmit Overrun Register -->
          <!-- REGISTER 15 -->
          <register>
            <name>I2S_TOR_n_</name>
            <description>Transmit Overrun Register</description>
            <addressOffset>0x24</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x1</resetMask>
            <fields>
              <!-- TXCHO: TX Channel Overrun -->
              <field>
                <name>TXCHO</name>
                <description>Read this bit to  clear the TX FIFO data overrun interrupt</description>
                <bitRange>[0:0]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Overrun</name>
                    <description>TX FIFO Write Overrun</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Valid</name>
                    <description>TX FIFO Write Valid</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- RFCR: Receive FIFO Configuration Register -->
          <!-- REGISTER 16 -->
          <register>
            <name>I2S_RFCR_n_</name>
            <description>Receive FIFO Configuration Register0</description>
            <addressOffset>0x28</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000003</resetValue>
            <resetMask>0xF</resetMask>
            <fields>
              <!-- RXCHDT: Receive Channel Data Trigger -->
              <field>
                <name>RXCHDT</name>
                <description>This bits program the trigger level in the RX FIFO 
                     at which the data available interrupt is generated
        </description>
                <bitRange>[3:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:4]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- TXFCR: Transmit FIFO Configuration Register -->
          <!-- sREGISTER 17 -->
          <register>
            <name>I2S_TXFCR_n_</name>
            <description>Transmit FIFO Configuration Register</description>
            <addressOffset>0x2C</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000003</resetValue>
            <resetMask>0xF</resetMask>
            <fields>
              <!-- TXCHET: Transmit Channel Empty Trigger -->
              <field>
                <name>TXCHET</name>
                <description>This bits program the trigger level in the TX FIFO 
                     at which the Empty Threshold Reached interrupt is generated
        </description>
                <bitRange>[3:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:4]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- RFF: Receive FIFO Flush -->
          <!-- REGISTER 18 -->
          <register>
            <name>I2S_RFF_n_</name>
            <description>Receive FIFO Flush</description>
            <addressOffset>0x30</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x01</resetMask>
            <fields>
              <!--  RXCHFR: Receive Channel FIFO Reset -->
              <field>
                <name>RXCHFR</name>
                <description>Writing a 1 to this register flushes an individual RX FIFO
                           RX channel or block must be disable prior to writing to this bit </description>
                <bitRange>[0:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- TFF: Transmit FIFO Flush -->
          <!-- REGISTER 19 -->
          <register>
            <name>I2S_TFF_n_</name>
            <description>Transmit FIFO Flush</description>
            <addressOffset>0x34</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x01</resetMask>
            <fields>
              <!--  TXCHFR: Transmit Channel FIFO Reset -->
              <field>
                <name>TXCHFR</name>
                <description>Writing a 1 to this register flushes an individual TX FIFO
                           TX channel or block must be disable prior to writing to this bit       
        </description>
                <bitRange>[0:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved for future use</description>
                <bitRange>[31:1]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>RSVD0</name>
            <description>none</description>
            <addressOffset>0x38</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x01</resetMask>
          </register>
          <register>
            <name>RSVD1</name>
            <description>none</description>
            <addressOffset>0x3C</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x01</resetMask>
          </register>
        </cluster>
        <!-- RXDMA: Receiver Block DMA Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>I2S_RXDMA</name>
          <description>Receiver Block DMA Register</description>
          <addressOffset>0x1C0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--  RXDMA: Receive DMA -->
            <field>
              <name>RXDMA</name>
              <description>Used to cycle repeatedly through the enabled receive channels 
                     Reading stereo data pairs
        </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- RRXDMA: Reset Receiver Block DMA Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>I2S_RRXDMA</name>
          <description>Reset Receiver Block DMA Register</description>
          <addressOffset>0x1C4</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--  RRXDMA: reset Receive DMA -->
            <field>
              <name>RRXDMA</name>
              <description>Writing a 1 to this self-clearing register resets the RXDMA register
        </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved for future use</description>
              <bitRange>[31:1]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- TXDMA: Transmitter Block DMA Register -->
        <!-- REGISTER 21 -->
        <register>
          <name>I2S_TXDMA</name>
          <description>Transmitter Block DMA Register</description>
          <addressOffset>0x1C8</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--  TXDMA: Transmit DMA -->
            <field>
              <name>TXDMA</name>
              <description>Used to cycle repeatedly through the enabled transmit channels 
                     allow to writing of stereo data pairs
        </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- RTXDMA: Reset Transmitter Block DMA Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>I2S_RTXDMA</name>
          <description>Reset Transmitter Block DMA Register</description>
          <addressOffset>0x1CC</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!--  RTXDMA: reset Receive DMA -->
            <field>
              <name>RTXDMA</name>
              <description>Writing a 1 to this self-clearing register resets the TXDMA register
        </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- I2S_COMP_PARAM_2: Component Parameter 2 Register -->
        <!-- REGISTER 22 -->
        <register>
          <name>I2S_COMP_PARAM_2</name>
          <description>Component Parameter 2 Register</description>
          <addressOffset>0x1F0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000489</resetValue>
          <resetMask>0x1FBF</resetMask>
          <fields>
            <!--  I2S_RX_WORDSIZE_0 -->
            <field>
              <name>I2S_RX_WORDSIZE_0</name>
              <description>On Read returns the value of word size of receiver channel 0
        </description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--  I2S_RX_WORDSIZE_1 -->
            <field>
              <name>I2S_RX_WORDSIZE_1</name>
              <description>On Read returns the value of word size of receiver channel 1
        </description>
              <bitRange>[5:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--  I2S_RX_WORDSIZE_2 -->
            <field>
              <name>I2S_RX_WORDSIZE_2</name>
              <description>On Read returns the value of word size of receiver channel 2
        </description>
              <bitRange>[9:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--  I2S_RX_WORDSIZE_3 -->
            <field>
              <name>I2S_RX_WORDSIZE_3</name>
              <description>On Read returns the value of word size of receiver channel 3
        </description>
              <bitRange>[12:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- I2S_COMP_PARAM_1: Component Parameter 1 Register -->
        <!-- REGISTER 23 -->
        <register>
          <name>I2S_COMP_PARAM_1</name>
          <description>Component Parameter 1 Register</description>
          <addressOffset>0x1F4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x02490069</resetValue>
          <resetMask>0xFFF07FF</resetMask>
          <fields>
            <!--  APB_DATA_WIDTH -->
            <field>
              <name>APB_DATA_WIDTH</name>
              <description>Width of APB data bus</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0x0</name>
                  <description>8 Bits</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x1</name>
                  <description>16 Bits</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x2</name>
                  <description>32 Bits</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x3</name>
                  <description>Reserved1</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_FIFO_DEPTH_GLOBAL -->
            <field>
              <name>I2S_FIFO_DEPTH_GLOBAL</name>
              <description>Determines FIFO depth for all channels</description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0x0</name>
                  <description>2 Words deep</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x1</name>
                  <description>4 Words deep</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x2</name>
                  <description>8 Words deep</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>0x3</name>
                  <description>16 words deep</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_FIFO_MODE_EN -->
            <field>
              <name>I2S_FIFO_MODE_EN</name>
              <description>Determines whether component act as Master or Slave </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Slave</name>
                  <description>Mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Master</name>
                  <description>Mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_TRANSMITTER_BLOCK -->
            <field>
              <name>I2S_TRANSMITTER_BLOCK</name>
              <description>Shows the presence of the transmitter block</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Absent</name>
                  <description>Block not present</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Present</name>
                  <description>Block is present</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_RECEIVER_BLOCK -->
            <field>
              <name>I2S_RECEIVER_BLOCK</name>
              <description>Shows the presence of the receiver block</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Absent</name>
                  <description> Block not present</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Present</name>
                  <description>Block is present</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_RX_CHANNELS-->
            <field>
              <name>I2S_RX_CHANNELS</name>
              <description>Returns the number of receiver channels</description>
              <bitRange>[8:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description> 1 Channel</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>2 Channels</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>3 Channels</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>4 Channels</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--  I2S_TX_CHANNELS-->
            <field>
              <name>I2S_TX_CHANNELS</name>
              <description>Returns the number of transmitter channels</description>
              <bitRange>[10:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description> 1 Channel</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>2 Channels</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>3 Channels</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>4 Channels</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:11]</bitRange>
              <access>read-only</access>
            </field>
            <!-- I2S_TX_WORDSIZE_0  -->
            <field>
              <name>I2S_TX_WORDSIZE_0</name>
              <description>Returns the value of word size of transmitter channel 0</description>
              <bitRange>[18:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- I2S_TX_WORDSIZE_1  -->
            <field>
              <name>I2S_TX_WORDSIZE_1</name>
              <description>Returns the value of word size of transmitter channel 1</description>
              <bitRange>[21:19]</bitRange>
              <access>read-only</access>
            </field>
            <!-- I2S_TX_WORDSIZE_2  -->
            <field>
              <name>I2S_TX_WORDSIZE_2</name>
              <description>Returns the value of word size of transmitter channel 2</description>
              <bitRange>[24:22]</bitRange>
              <access>read-only</access>
            </field>
            <!-- I2S_TX_WORDSIZE_3  -->
            <field>
              <name>I2S_TX_WORDSIZE_3</name>
              <description>Returns the value of word size of transmitter channel 3</description>
              <bitRange>[27:25]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- I2S_COMP_VERSION: Component Version ID -->
        <!-- REGISTER 24 -->
        <register>
          <name>I2S_COMP_VERSION_REG</name>
          <description>Component Version ID</description>
          <addressOffset>0x1F8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x3130362a</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- I2S_COMP_VERSION -->
            <field>
              <name>I2S_COMP_VERSION</name>
              <description>Return the component version(1.02)</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- I2S_COMP_TYPE: Design ware Component Type -->
        <!-- REGISTER 24 -->
        <register>
          <name>I2S_COMP_TYPE_REG</name>
          <description>Component Type</description>
          <addressOffset>0x1FC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x445701a0</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- I2S_COMP_TYPE -->
            <field>
              <name>I2S_COMP_TYPE</name>
              <description>Return the component type</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- Intrinsic ID_AES  -->
    <peripheral>
      <name>IID_AES</name>
      <version>1.0</version>
      <description>The AES module provides AES encoding and decoding functionality. It can be used in a microprocessor based environment</description>
      <groupName>IIDEngine</groupName>
      <baseAddress>0x20480500</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x104</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- AES_KCR: AES Key Control register -->
        <!-- REGISTER 1 -->
        <register>
          <name>AES_KCR</name>
          <description>AES Key Control register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- aes_key_chng_req -->
            <field>
              <name>AES_KEY_CHNG_REQ</name>
              <description> Programming 1 clears the current key and starts a request a for a new key
							Auto-reverts to 0 as soon as the request is accepted
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- aes_key_size -->
            <field>
              <name>AES_KEY_SIZE</name>
              <description>Size of the AES key 0: 128-bit 1: 256-bit
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AES_KEY_SRC</name>
              <description>Source of the AES key 0: Interface 1: Register
			  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- AES_MODE: AES Mode register -->
        <!-- REGISTER 2 -->
        <register>
          <name>AES_MODE_REG</name>
          <description>AES Mode register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- aes_mode -->
            <field>
              <name>AES_MODE</name>
              <description> The AES Mode register defines which mode of AES is used.
			  </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- AES_ACT: AES Action register -->
        <!-- REGISTER 3 -->
        <register>
          <name>AES_ACT_REG</name>
          <description>AES Action register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- aes_ACTION -->
            <field>
              <name>AES_ACTION</name>
              <description> The AES Mode register defines which mode of AES is used.
			  </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>Idle</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>Encode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>Decode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>Clear</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <!-- AES_SR: AES Status register -->
        <!-- REGISTER 5 -->
        <register>
          <name>AES_SR_REG</name>
          <description>AES Status register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- aes_busy -->
            <field>
              <name>AES_BUSY</name>
              <description>Indicates that the AES core is processing data 
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Indicates that the AES core is processing data</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>none</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AES_CLEAR_DONE</name>
              <description>Indicates that the Clear action is finished
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Indicates that the Clear action is finished</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>none</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AES_KEY_PRESENT</name>
              <description>Indicates that the Clear action is finished
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Indicates that a complete key is present</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>none</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AES_KEY_REQ</name>
              <description>Indicates that a key must be provided
			  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Indicates that a key must be provided</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>none</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AES_DATA_REQ</name>
              <description>Indicates that data must be provided
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Indicates that data must be provided</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>none</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AES_DATA_AV</name>
              <description>Indicates that data is available
			  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Indicates that data is available</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>none</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <!-- AES_KEY: AES Key register -->
        <!-- REGISTER 6 -->
        <register>
          <name>AES_KEY_REG</name>
          <description>The AES Key register is used to program a key into the AES module.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- AES_KEY -->
            <field>
              <name>AES_KEY</name>
              <description>4 writes of 32 bits make up the 128-bit key for AES, 8 writes make up the 256-bit key
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- AES_DIN: AES Data In register -->
        <!-- REGISTER 7 -->
        <register>
          <name>AES_DIN_REG</name>
          <description>AES Data In register</description>
          <addressOffset>0x044</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- aes_din -->
            <field>
              <name>AES_DIN</name>
              <description>Data for encoding or decoding, 4 writes of 32 bits make up a 128-bit data word
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- AES_DOUT: AES Data In register -->
        <!-- REGISTER 8 -->
        <register>
          <name>AES_DOUT_REG</name>
          <description>AES Data out register</description>
          <addressOffset>0x048</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- AES_DOUT -->
            <field>
              <name>AES_DOUT</name>
              <description>Result from encoding or decoding, 4 reads of 32 bits make up a 128-bit data word
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- AES_IF_SR_C:AES Interface Status Clear register -->
        <!-- REGISTER 10 -->
        <register>
          <name>AES_IF_SR_C_REG</name>
          <description>AES Interface Status Clear register</description>
          <alternateRegister>AES_IF_SR_REG</alternateRegister>
          <addressOffset>0xDC</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- ifb_error -->
            <field>
              <name>IFB_ERROR</name>
              <description>Clears the if_error bit
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- AES_IF_SR:AES Interface Status register -->
        <!-- REGISTER 9 -->
        <register>
          <name>AES_IF_SR_REG</name>
          <description>AES Interface Status register</description>
          <addressOffset>0xE0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- if_error -->
            <field>
              <name>IF_ERROR</name>
              <description>Indicates that an interface error has occurred
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- AES_TEST:AES Test register -->
        <!-- REGISTER 11 -->
        <register>
          <name>AES_TEST_REG</name>
          <description>AES Test register</description>
          <addressOffset>0xE4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- aes_bist_enable -->
            <field>
              <name>AES_BIST_ENABLE</name>
              <description>Isolates the iid_aes module and runs a BIST
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- aes_bist_running -->
            <field>
              <name>AES_BIST_RUNNING</name>
              <description>BIST is in progress or finishing up
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AES_BIST_ACTIVE</name>
              <description>Indicates that the BIST is running
			  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AES_BIST_OK</name>
              <description>Indicates that the BIST has passed
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AES_BIST_ERROR</name>
              <description>Indicates that the BIST has failed
			  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- AES_VER:AES Version register -->
        <!-- REGISTER 12 -->
        <register>
          <name>AES_VER_REG</name>
          <description>AES Version register</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>AES_VERSION</name>
              <description>Version of iid_aes
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- Intrinsic ID_QK  -->
    <peripheral>
      <name>IID_QK</name>
      <version>1.0</version>
      <description>The purpose of Quiddikey is to provide secure key storage without storing the key.</description>
      <groupName>IIDEngine</groupName>
      <baseAddress>0x20480600</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x104</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- QK_CR: Quiddikey Control register, -->
        <!-- REGISTER 1 -->
        <register>
          <name>QK_CR_REG</name>
          <description>Quiddikey Control register.The Quiddikey Control register defines which command must be executed next.</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_zeroize -->
            <field>
              <name>QK_ZEROIZE</name>
              <description>Begin Zeroize operation and go to Error state
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- qk_enroll -->
            <field>
              <name>QK_ENROLL</name>
              <description>Begin Enroll operation
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>QK_START</name>
              <description>Begin Start operation
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>QK_SET_IK</name>
              <description>Begin Set Intrinsic Key operation
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>QK_SET_UK</name>
              <description>Begin Set User Key operation
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>QK_SET_XK</name>
              <description>Begin Set External Key operation
			  </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>QK_GET_KEY</name>
              <description>Begin Get Key operation
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- QK_KIDX: Quiddikey Key Index register -->
        <!-- REGISTER 2 -->
        <register>
          <name>QK_KIDX_REG</name>
          <description>The Quiddikey Key Index register defines the key index for the next set_key command</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_key_index -->
            <field>
              <name>QK_KEY_INDEX</name>
              <description>Key index for Set Key operations
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QK_KSZ: Quiddikey Key Index register -->
        <!-- REGISTER 3 -->
        <register>
          <name>QK_KSZ_REG</name>
          <description>Quiddikey Key Size register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_key_size -->
            <field>
              <name>QK_KEY_SIZE</name>
              <description>Key size for Set Key operations
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QK_KT: Quiddikey Key Target register -->
        <!-- REGISTER 4 -->
        <register>
          <name>QK_KT_REG</name>
          <description>Quiddikey Key Size register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_key_target -->
            <field>
              <name>QK_KEY_TARGET</name>
              <description>Target of reconstructed key
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QK_SR: Quiddikey Status register -->
        <!-- REGISTER 5 -->
        <register>
          <name>QK_SR_REG</name>
          <description>Quiddikey Status register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_busy -->
            <field>
              <name>QK_BUSY</name>
              <description>Indicates that operation is in progress
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- qk_ok -->
            <field>
              <name>QK_OK</name>
              <description>Last operation was successful
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>QK_ERROR</name>
              <description>Quiddikey is in the Error state and no operations can be performed
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>QK_XO_AV</name>
              <description>Next part of XKPD is available
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>QK_KI_REQ</name>
              <description>Request for next part of key
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>QK_KO_AV</name>
              <description>Next part of key is available
			  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>QK_CI_REQ</name>
              <description>Request for next part of AC/KC
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>QK_CO_AV</name>
              <description>Next part of AC/KC is available
			  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QK_AR: Quiddikey allow register -->
        <!-- REGISTER 6 -->
        <register>
          <name>QK_AR_REG</name>
          <description>Quiddikey allow register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- qk_allow_enroll -->
            <field>
              <name>QK_ALLOW_ENROLL</name>
              <description>Enroll operation is allowed
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- qk_allow_start -->
            <field>
              <name>QK_ALLOW_START</name>
              <description>Start operation is allowed
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- qk_allow_set_key -->
            <field>
              <name>QK_ALLOW_SET_KEY</name>
              <description>Set Key operations are allowed
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- qk_allow_get_key -->
            <field>
              <name>QK_ALLOW_GET_KEY</name>
              <description>Get Key operation is allowed
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- qk_allow_bist -->
            <field>
              <name>QK_ALLOW_BIST</name>
              <description>BIST is allowed to be started
			  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QK_KI: Quiddikey Key Input register -->
        <!-- REGISTER 7 -->
        <register>
          <name>QK_KI_REG</name>
          <description>Quiddikey Key Input register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_ki -->
            <field>
              <name>QK_KI</name>
              <description>Key input data
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QK_CI:Quiddikey Code Input register -->
        <!-- REGISTER 8 -->
        <register>
          <name>QK_CI_REG</name>
          <description>Quiddikey Code Input register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_ci -->
            <field>
              <name>QK_CI</name>
              <description>AC/KC input data
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QK_CO:Quiddikey Code ouput register -->
        <!-- REGISTER 9 -->
        <register>
          <name>QK_CO_REG</name>
          <description>Quiddikey Code Output register</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_co -->
            <field>
              <name>QK_CO</name>
              <description>AC/KC output data
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QK_XO:Quiddikey XKPD Output register -->
        <!-- REGISTER 10 -->
        <register>
          <name>QK_XO_REG</name>
          <description>Quiddikey XKPD Output register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_xo -->
            <field>
              <name>QK_XO</name>
              <description>XKPD output data
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QK_KO_IDX:Quiddikey Key Output Index register -->
        <!-- REGISTER 11 -->
        <register>
          <name>QK_KO_IDX_REG</name>
          <description>Quiddikey Key Output Index register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_ko_index -->
            <field>
              <name>qk_ko_index</name>
              <description>Key index for the key that is currently output via the Key Output register
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QK_KO:Quiddikey Key Output register -->
        <!-- REGISTER 12 -->
        <register>
          <name>QK_KO_REG</name>
          <description>Quiddikey Code Output register</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_ko -->
            <field>
              <name>QK_KO</name>
              <description>Key output data
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QK_IF_SR_C:Quiddikey Interface Status register -->
        <!-- REGISTER 14 -->
        <register>
          <name>QK_IF_SR_C_REG</name>
          <description>Quiddikey Interface Status register</description>
          <alternateRegister>QK_IF_SR_REG</alternateRegister>
          <addressOffset>0xDC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- if_error -->
            <field>
              <name>IF_ERROR</name>
              <description>Clears the if_error bit
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QK_IF_SR:Quiddikey Interface Status register -->
        <!-- REGISTER 13 -->
        <register>
          <name>QK_IF_SR_REG</name>
          <description>Quiddikey Interface Status register</description>
          <addressOffset>0xE0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- if_error -->
            <field>
              <name>IF_ERROR</name>
              <description>Indicates that an interface error has occurred
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QK_TEST:QK Test register -->
        <!-- REGISTER 15 -->
        <register>
          <name>QK_TEST_REG</name>
          <description>QK Test register</description>
          <addressOffset>0xE4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- qk_bist_enable -->
            <field>
              <name>QK_BIST_ENABLE</name>
              <description>Isolates the iid_quiddikey module and runs a BIST
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qk_bist_running -->
            <field>
              <name>QK_BIST_RUNNING</name>
              <description>BIST is in progress or finishing up
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>QK_BIST_ACTIVE</name>
              <description>Indicates that the BIST is running
			  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>QK_BIST_OK</name>
              <description>Indicates that the BIST has passed
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>QK_BIST_ERROR</name>
              <description>Indicates that the BIST has failed
			  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QK_VER:QK Version register -->
        <!-- REGISTER 16 -->
        <register>
          <name>QK_VER_REG</name>
          <description>QK Version register</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>QK_VERSION</name>
              <description>Version of iid_qk
			  </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- IID RPINE  -->
    <peripheral>
      <name>IID_RPINE</name>
      <version>1.0</version>
      <description>none</description>
      <groupName>IIDEngine</groupName>
      <baseAddress>0x20480400</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x2C</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- IID_BIST_CTRL_REG  -->
        <!-- REGISTER 1 -->
        <register>
          <name>IID_BIST_CTRL_REG</name>
          <description>Quiddikey Control register.The Quiddikey Control register defines which command must be executed next.</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qk_bist_enable -->
            <field>
              <name>QK_BIST_ENABLE</name>
              <description>none 
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- aes_bist_enable -->
            <field>
              <name>AES_BIST_ENABLE</name>
              <description>none 
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- kh_bist_enable -->
            <field>
              <name>KH_BIST_ENABLE</name>
              <description>none 
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- IID_BIST_STATUS_REG -->
        <!-- REGISTER 2 -->
        <register>
          <name>IID_BIST_STATUS_REG</name>
          <description>none</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- qk_bist_active -->
            <field>
              <name>QK_BIST_ACTIVE</name>
              <description>none 
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>QK_BIST_ERROR</name>
              <description>Indicates that the BIST has failed
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qk_bist_running -->
            <field>
              <name>QK_BIST_RUNNING</name>
              <description>Indicates that the BIST is running
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>QK_BIST_OK</name>
              <description>Indicates that the BIST has passed
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AES_BIST_ACTIVE</name>
              <description>none 
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AES_BIST_ERROR</name>
              <description>none 
			  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AES_BIST_OK</name>
              <description>Indicates that the BIST has passed
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>AES_BIST_RUNNING</name>
              <description>Indicates that the BIST is running
			  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>KH_BIST_STATUS</name>
              <description>none 
			  </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- IID_CTRL_REG -->
        <!-- REGISTER 3 -->
        <register>
          <name>IID_CTRL_REG</name>
          <description>none</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- aes_max_key_size -->
            <field>
              <name>AES_MAX_KEY_SIZE</name>
              <description>1  256 bit key, 0  128 bit key 
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SOURCE_KEY_KH</name>
              <description>When set KH will source the key to AES engine. When this is not QK key output is connected to AES key input
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LATCH_KEY_KH</name>
              <description>When set KH will latch the key given by QK. When this is not QK key output is connected to AES key input
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>KH_RESET_N</name>
              <description>0  KH will be in reset  1  Out of reset
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>KH_KEY_SIZE</name>
              <description>0  128 bit key 1  256 bit key This is used by KH
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>KH_CLOCK_RATIO</name>
              <description>Indicates the division factor to be used for generating kh_clk. 
			  </description>
              <bitRange>[7:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- WKE_CTRL_REG -->
        <!-- REGISTER 4 -->
        <register>
          <name>WKE_CTRL_REG</name>
          <description>none</description>
          <addressOffset>0x0c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- enable_wke -->
            <field>
              <name>ENABLE_WKE</name>
              <description>When WKE will be enabled. This is a self clearing bit. Once enabled WKE can not be disabled till process is done
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- wke_key_size -->
            <field>
              <name>WKE_KEY_SIZE</name>
              <description>0  128 bit size 1  256 bit size
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- wke_flush -->
            <field>
              <name>WKE_FLUSH</name>
              <description>When set, WKE will flush out the data from AES. When WEK is active, 
						   firmware reads to AES engine are masked. This gets cleared once four dwords are read from AES
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- wke_compare -->
            <field>
              <name>WKE_COMPARE</name>
              <description>When set, WKE will compare the data from AES engine with the data provided by firmware
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- wke_set_key -->
            <field>
              <name>WKE_SET_KEY</name>
              <description>This has to be set after key available from AES
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- key_code_done -->
            <field>
              <name>KEY_CODE_DONE</name>
              <description>This has to be set after reading key code
			  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- IID_AES_CTRL_REG -->
        <!-- REGISTER 5 -->
        <register>
          <name>IID_AES_CTRL_REG</name>
          <description>none</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!-- Key_req_in_dma_path -->
            <field>
              <name>KEY_REQ_IN_DMA_PATH</name>
              <description>Include key req in dma path. With this KEY Also can be loaded using DMA.
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Aes_max_key_size_frm_reg -->
            <field>
              <name>AES_MAX_KEY_SIZE_FRM_REG</name>
              <description>This is valid only when aes_max_key_size_frm_reg_en is set.
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Aes_max_key_size_frm_reg_en -->
            <field>
              <name>AES_MAX_KEY_SIZE_FRM_REG_EN</name>
              <description>When set, WKE will flush out the data from AES. When WEK is active, 
						   firmware reads to AES engine are masked. This gets cleared once four dwords are read from AES
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description> AES bit length prog enable.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>AES bit length prog disable.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OTP KEY Loading -->
            <field>
              <name>OTP_KEY_LOADING</name>
              <description>When set, WKE will compare the data from AES engine with the data provided by firmware
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Loads the OTP Key into the AES Engine, before setting this bit, 
								key should be read from the OTP by reading the otp registers, more information please refer the otp section</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>OTP Key will not be loaded</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <!-- IID_AES_STS_REG -->
        <!-- REGISTER 6 -->
        <register>
          <name>IID_AES_STS_REG</name>
          <description>none</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Din_fifo_full -->
            <field>
              <name>DIN_FIFO_FULL</name>
              <description>Input data fifo full indication
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DOUT_FIFO_EMPTY</name>
              <description>Output data fifo empty indication
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- WKE_STATUS_REG -->
        <!-- REGISTER 7 -->
        <register>
          <name>WKE_STATUS_REG</name>
          <description>none</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- wke_active -->
            <field>
              <name>WKE_ACTIVE</name>
              <description>Will be high when WKE is active 
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WKE_KEY_FEED_IN_PROGRESS</name>
              <description>Will be high when WKE is feeding key to AES engine
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- wke_flush_in_progress -->
            <field>
              <name>WKE_FLUSH_IN_PROGRESS</name>
              <description>Will be high when WKE flushing out the data from AES
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WKE_COMPARE_IN_PROGRESS</name>
              <description>Will be high when WKE is comparing the data from AES
			  </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WKE_SET_KEY_IN_PROGRESS</name>
              <description>Will be high when WKE is doing set key operation with QK 
			  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WKE_KEY_READY</name>
              <description>Firmware has to load the authentication, which will be compared with AES output, when this bit is low 
			  </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WKE_CMP_DATA_READY</name>
              <description>Firmware has to load the authentication, which will be compared with AES output, when this bit is low
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WKE_COMPARE_FAIL</name>
              <description>This bit will be set when authentication data comparison fails
			  </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- WKE_DATA_REG -->
        <!-- REGISTER 8 -->
        <register>
          <name>WKE_DATA_REG</name>
          <description>none</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
        </register>
      </registers>
    </peripheral>
    <!--CONFIGURABLE TIMERS -->
    <peripheral>
      <name>CT0</name>
      <version>1.0</version>
      <description>Configurable timer is used in counting clocks, events and states with reference clock
               	   external clock and system clock
	    </description>
      <groupName>CT</groupName>
      <baseAddress>0x45060000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0xB0</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>CT</name>
        <value>34</value>
      </interrupt>
      <registers>
        <!-- CT_GEN_CTRL_SET_REG: General control set register -->
        <!-- REGISTER 1 -->
        <register>
          <name>CT_GEN_CTRL_SET_REG</name>
          <description>General control set register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_in_32_bit_mode -->
            <field>
              <name>COUNTER_IN_32_BIT_MODE</name>
              <description> Counter_1 and Counter_0 will be merged and used as a single 32 bit counter
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: Counter will be 32 bit mode
				               If Read: Counter is in two 16 bit mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter will be 32 bit mode
				               If Read: Counter is in two 16 bit mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Soft_reset_counter_0_frm_reg -->
            <field>
              <name>SOFT_RESET_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
			               otherwise this will be applied to only lower 16 bits of counter
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read: Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be reset
				               If Read: Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Periodic_en_Counter_0_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
			               otherwise this will be applied to only lower 16 bits of counter
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read: Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be in periodic mode
				               If Read: Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_trig_frm_reg -->
            <field>
              <name>COUNTER_0_TRIG_FRM_REG</name>
              <description>This enables the counter to run/active</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active
				               If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_up -->
            <field>
              <name>COUNTER_0_UP_DOWN</name>
              <description>This enables the counter to run in up/down/up-down/down-up directions</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
				               If Read:Counter_0 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_0 will be up-counting
				               If Read:Counter_0 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
				               If Read:Counter_0 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
				               If Read:Counter_0 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_sync_trig -->
            <field>
              <name>COUNTER_0_SYNC_TRIG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode otherwise this will be applied to only lower 16 bits of counter.
							This enables the counter to run/active when sync is found.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_0 will be active.
				               If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Buf_reg_0_en -->
            <field>
              <name>BUF_REG_0_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
						   gets copied to MATCH REG.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
				               If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[16:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Soft_reset_Counter_1_frm_reg -->
            <field>
              <name>SOFT_RESET_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
				               If Read:Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be reset
				               If Read:Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Periodic_en_Counter_1_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
				               If Read:Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be in periodic mode
				               If Read:Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_trig_frm_reg -->
            <field>
              <name>COUNTER_1_TRIG_FRM</name>
              <description>This enables the counter to run/active</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
				               If Read:Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active
				               If Read:Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_up -->
            <field>
              <name>COUNTER_1_UP_DOWN</name>
              <description>This enables the counter to run in upward direction</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
				               If Read:Counter_1 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_1 will be up-counting
				               If Read:Counter_1 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
				               If Read:Counter_1 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
				               If Read:Counter_1 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_sync_trig -->
            <field>
              <name>COUNTER_1_SYNC_TRIG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode otherwise this will be applied to only lower 16 bits of counter.
							This enables the counter to run/active when sync is found.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active.
				               If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Buf_reg_1_en -->
            <field>
              <name>BUF_REG_1_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
						   gets copied to MATCH REG.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
				               If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_GEN_CTRL_RESET_REG:General control reset register -->
        <!-- REGISTER 2 -->
        <register>
          <name>CT_GEN_CTRL_RESET_REG</name>
          <description>General control reset register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_in_32_bit_mode -->
            <field>
              <name>COUNTER_IN_32_BIT_MODE</name>
              <description> Counter_1 and Counter_0 will be merged and used as a single 32 bit counter
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: Counter will be 32 bit mode
				               If Read: Counter is in two 16 bit mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter will be 32 bit mode
				               If Read: Counter is in two 16 bit mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Soft_reset_counter_0_frm_reg-->
            <field>
              <name>Soft_Reset_Counter_0_frm_reg</name>
              <description>This is a self clear bit in set register.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Periodic_en_Counter_0_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
			               otherwise this will be applied to only lower 16 bits of counter
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read: Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be in periodic mode
				               If Read: Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Counter_0_trig_frm_reg-->
            <field>
              <name>Counter_0_Trig_frm_reg</name>
              <description>This is a self clear bit in set register.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_up -->
            <field>
              <name>COUNTER_0_UP_DOWN</name>
              <description>This enables the counter to run in up/down/up-down/down-up directions</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
				               If Read:Counter_0 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_0 will be up-counting
				               If Read:Counter_0 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
				               If Read:Counter_0 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
				               If Read:Counter_0 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Counter_0_sync_trig-->
            <field>
              <name>Counter_0_Sync_Trig</name>
              <description>This is a self clear bit in set register.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Buf_reg_0_en -->
            <field>
              <name>BUF_REG_0_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
						   gets copied to MATCH REG.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
				               If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[16:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--Soft_Reset_Counter_1_frm_reg-->
            <field>
              <name>Soft_Reset_Counter_1_frm_reg</name>
              <description>This is a self clear bit in set register.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Periodic_en_Counter_1_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
				               If Read:Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be in periodic mode
				               If Read:Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Counter_1_trig_frm_reg-->
            <field>
              <name>Counter_1_Trig_frm_reg</name>
              <description>Self clear bit</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_up -->
            <field>
              <name>COUNTER_1_UP_DOWN</name>
              <description>This enables the counter to run in upward direction</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
				               If Read:Counter_1 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_1 will be up-counting
				               If Read:Counter_1 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
				               If Read:Counter_1 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
				               If Read:Counter_1 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Counter_1_sync_trig-->
            <field>
              <name>Counter_1_sync_trig</name>
              <description>self clear bit</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Buf_reg_1_en -->
            <field>
              <name>BUF_REG_1_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
						   gets copied to MATCH REG.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
				               If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_STS: Interrupt status -->
        <!-- REGISTER 3 -->
        <register>
          <name>CT_INTR_STS</name>
          <description>Interrupt status</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Indicates the FIFO full signal of channel-0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Indicates the FIFO full signal of channel-0</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Counter 0 hit zero in active mode.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Counter 0 hit peak (MATCH) in active mode.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Indicates the FIFO full signal of channel-1</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Indicates the FIFO full signal of channel-1</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Counter 1 hit zero in active mode.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Counter 1 hit peak (MATCH) in active mode.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_MASK: Interrupts mask -->
        <!-- REGISTER 4 -->
        <register>
          <name>CT_INTR_MASK</name>
          <description>Interrupts mask</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTER_UNMASK:  Interrupts unmask -->
        <!-- REGISTER 5 -->
        <register>
          <name>CT_INTER_UNMASK</name>
          <description>Interrupts unmask</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt unmask signal</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_ACK: Interrupt clear/ack register -->
        <!-- REGISTER 6 -->
        <register>
          <name>CT_INTR_ACK</name>
          <description>Interrupt clear/ack register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_MATCH_REG: Match value register -->
        <!-- REGISTER 7 -->
        <register>
          <name>CT_MATCH_REG</name>
          <description>Match value register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_0_match: Counter lower path match register -->
            <field>
              <name>COUNTER_0_MATCH</name>
              <description> This will be used as lower match</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Counter_1_match: Counter upper part match register -->
            <field>
              <name>COUNTER_1_MATCH</name>
              <description> This will be used as upper match</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_MATCH_BUF_REG: Match value register -->
        <!-- REGISTER 7 -->
        <register>
          <name>CT_MATCH_BUF_REG</name>
          <description>Match Buffer register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_0_match: Counter lower path match register -->
            <field>
              <name>COUNTER_0_MATCH_BUF</name>
              <description> This gets copied to MATCH register if bug_reg_0_en is set. 
							Copying is done when counter 0 is active and hits 0.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Counter_1_match: Counter upper part match register -->
            <field>
              <name>COUNTER_1_MATCH_BUF</name>
              <description> This gets copied to MATCH register if bug_reg_1_en is set.
							Copying is done when counter 1 is active and hits 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_REG: Capture Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>CT_CAPTURE_REG</name>
          <description>Capture Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Counter_0_capture -->
            <field>
              <name>COUNTER_0_CAPTURE</name>
              <description> This is a latched value of counter lower part when the selected capture_event occurs
			  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_capture -->
            <field>
              <name>COUNTER_1_CAPTURE</name>
              <description>This is a latched value of counter upper part when the selected capture_event occurs
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_COUNTER_REG: Counter Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>CT_COUNTER_REG</name>
          <description>Counter Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- COUNTER0 -->
            <field>
              <name>COUNTER0</name>
              <description>This holds the value of counter-0 </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- COUNTER1 -->
            <field>
              <name>COUNTER1</name>
              <description>This holds the value of counter-1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_CTRL_REG: OCU control register -->
        <!-- REGISTER 10 -->
        <register>
          <name>CT_OCU_CTRL_REG</name>
          <description>OCU control register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7FFFFF</resetMask>
          <fields>
            <!-- output_is_ocu_0 -->
            <field>
              <name>OUTPUT_IS_OCU_0</name>
              <description>Indicates whether the output is in OCU mode or not for channel-0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- sync_with_0 -->
            <field>
              <name>SYNC_WITH_0</name>
              <description>Indicates whether the other channel is in sync with this channel</description>
              <bitRange>[3:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_0_dma_mode -->
            <field>
              <name>OCU_0_DMA_MODE</name>
              <description>Indicates whether the OCU  DMA mode is active or not for channel 0</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_0_mode_8_16 -->
            <field>
              <name>OCU_0_MODE_8_16</name>
              <description>Indicates whether entire 16 bits or only 8-bits of the channel 0 are used in OCU mode</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_high_sel -->
            <field>
              <name>MAKE_OUTPUT_0_HIGH_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made high.</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_low_sel -->
            <field>
              <name>MAKE_OUTPUT_0_LOW_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made low.</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_1_is_ocu -->
            <field>
              <name>OUTPUT_1_IS_OCU</name>
              <description>Indicates whether the output is in OCU mode or not for channel 1</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- sync_with_1 -->
            <field>
              <name>SYNC_WITH_1</name>
              <description>Indicates whether the other channel is in sync with this channel</description>
              <bitRange>[19:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_dma_mode_1 -->
            <field>
              <name>OCU_1_DMA_MODE</name>
              <description>Indicates whether the OCU  DMA mode is active or not for channel 1</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_8_16_mode_1 -->
            <field>
              <name>OCU_1_MODE_8_16_MODE</name>
              <description>Indicates whether entire 16 bits or only 8-bits of the channel 1 are used in OCU mode</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_high_sel -->
            <field>
              <name>MAKE_OUTPUT_1_HIGH_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made high.</description>
              <bitRange>[24:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_low_sel -->
            <field>
              <name>MAKE_OUTPUT_1_LOW_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made low.</description>
              <bitRange>[27:25]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE_REG: OCU Compare Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>CT_OCU_COMPARE_REG</name>
          <description>OCU Compare Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- ocu_compare_reg -->
            <field>
              <name>OCU_COMPARE_0_REG</name>
              <description> Holds the threshold value of present OCU period which denotes the number of clock 
							cycles for which the OCU output should be considered (counter 0)
			  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OCU_COMPARE_1_REG</name>
              <description> Holds the threshold value of present OCU period which denotes the number of clock  
							cycles for which the OCU output should be considered (counter 1)
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE2_REG: OCU Compare Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>CT_OCU_COMPARE2_REG</name>
          <description>OCU Compare2 Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- ocu_compare_reg -->
            <field>
              <name>OCU_COMPARE2_0_REG</name>
              <description> Holds the threshold value of present OCU period2 which denotes the number of clock  
							cycles for which the OCU output should be considered (counter 0)
			  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OCU_COMPARE2_1_REG</name>
              <description> Holds the threshold value of present OCU period2 which denotes the number of clock  
							cycles for which the OCU output should be considered (counter 1)
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_SYNC_REG	 -->
        <!-- REGISTER 12 -->
        <register>
          <name>CT_OCU_SYNC_REG</name>
          <description>OCU Synchronization Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Timer start -->
            <field>
              <name>OCU_SYNC_REG_0</name>
              <description>Starting point of channel 0 for synchronization purpose</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_sync_reg -->
            <field>
              <name>OCU_SYNC_REG_1</name>
              <description>Starting point of channel 1 for synchronization purpose</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE_NXT_REG: OCU compare next register -->
        <!-- REGISTER 13 -->
        <register>
          <name>CT_OCU_COMPARE_NXT_REG</name>
          <description>PWM compare next register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE_NXT_COUNTER1</name>
              <description> OCU output should be high for counter 1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE_NXT_COUNTER0</name>
              <description>PWM output should be high for counter 0</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE2_NXT_REG: OCU compare next register -->
        <!-- REGISTER 13 -->
        <register>
          <name>CT_OCU_COMPARE2_NXT_REG</name>
          <description>PWM compare next register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- ocu_compare2_nxt_reg -->
            <field>
              <name>OCU_COMPARE2_NXT_COUNTER0</name>
              <description> OCU output should be high for counter 1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE2_NXT_COUNTER1</name>
              <description>PWM output should be high for counter 0</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_WFG_CTRL_REG: WFG control register -->
        <!-- REGISTER 14 -->
        <register>
          <name>CT_WFG_CTRL_REG</name>
          <description>WFG control register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7FFFFF</resetMask>
          <fields>
            <!-- Make_output_0_tgl_0_sel -->
            <field>
              <name>MAKE_OUTPUT_0_TGL_0_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 0.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_tgl_1_sel -->
            <field>
              <name>MAKE_OUTPUT_0_TGL_1_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 0.</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Wfg_tgl_cnt_0_peak -->
            <field>
              <name>WFG_TGL_CNT_0_PEAK</name>
              <description>WFG mode output toggle count clock for channel 0.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_1_tgl_0_sel -->
            <field>
              <name>MAKE_OUTPUT_1_TGL_0_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 1.</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_1_tgl_1_sel -->
            <field>
              <name>MAKE_OUTPUT_1_TGL_1_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 1.</description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Wfg_tgl_cnt_1_peak -->
            <field>
              <name>WFG_TGL_CNT_1_PEAK</name>
              <description>WFG mode output toggle count clock for channel 1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_EVENT_SEL: Start counter event select register -->
        <!-- REGISTER 15 -->
        <register>
          <name>CT_START_COUNTER_EVENT_SEL</name>
          <description>Start counter event select register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x3F003F</resetMask>
          <fields>
            <!-- Start_Counter_0_event_sel : Timer start -->
            <field>
              <name>START_COUNTER_0_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for starting the Counter 0 
			                For 32 bit counter mode: Event select for starting counter
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Start_Counter_1_event_sel  -->
            <field>
              <name>START_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for starting the Counter 1. 
			                For 32 bit counter mode: Invalid. Please refer to events table for description
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_AND_EVENT: Start counter AND event register -->
        <!-- REGISTER 16 -->
        <register>
          <name>CT_START_COUNTER_AND_EVENT</name>
          <description>Start counter AND event register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Start_Counter_0_AND_event -->
            <field>
              <name>START_COUNTER_0_AND_EVENT</name>
              <description> For two 16 bit counter mode: AND expression valids for AND event in start Counter 0 event
			                For 32 bit counter mode AND expression valids for AND event in start counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- start_counter_0_and_vld -->
            <field>
              <name>START_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Start_Counter_1_AND_event -->
            <field>
              <name>START_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in start counter event
			                For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- start_counter_1_and_vld -->
            <field>
              <name>START_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_OR_EVENT: Start counter OR event register -->
        <!-- REGISTER 17 -->
        <register>
          <name>CT_START_COUNTER_OR_EVENT</name>
          <description>Start counter OR event register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Start_Counter_0_OR_event -->
            <field>
              <name>START_COUNTER_0_OR_EVENT</name>
              <description> For two 16 bit counter mode: OR expression valids for OR event in start Counter 0 event
               			    For 32 bit counter mode OR expression valids for OR event in start counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- start_counter_0_or_vld -->
            <field>
              <name>START_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Start_Counter_1_OR_event -->
            <field>
              <name>START_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in start counter event
               			    For 32 bit counter mode : Invalid.
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- start_counter_1_or_vld -->
            <field>
              <name>START_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_EVENT_SEL: Continue counter event select register-->
        <!-- REGISTER 18 -->
        <register>
          <name>CT_CONTINUE_COUNTER_EVENT_SEL</name>
          <description>Continue counter event select register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Continue_Counter_0_event_sel -->
            <field>
              <name>CONTINUE_COUNTER_0_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for continuing the Counter 0
                			For 32 bit counter mode: Event select for continuing counter
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_event_sel -->
            <field>
              <name>CONTINUE_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for continuing the Counter 1 
			                For 32 bit counter mode: Invalid.
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_AND_EVENT: Continue counter AND event register -->
        <!-- REGISTER 19 -->
        <register>
          <name>CT_CONTINUE_COUNTER_AND_EVENT</name>
          <description>Continue counter AND event register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Continue_Counter_0_AND_event -->
            <field>
              <name>CONTINUE_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in continue Counter 0 event
			               For 32 bit counter mode AND expression valids for AND event in continue counter event.
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_0_AND_vld -->
            <field>
              <name>CONTINUE_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_AND_event -->
            <field>
              <name>CONTINUE_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in continue counter event
               			    For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Continue_Counter_1_AND_vld -->
            <field>
              <name>CONTINUE_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_OR_EVENT: Continue counter OR event register -->
        <!-- REGISTER 20 -->
        <register>
          <name>CT_CONTINUE_COUNTER_OR_EVENT</name>
          <description>Continue counter OR event register</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Continue_Counter_0_OR_event -->
            <field>
              <name>CONTINUE_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in continue Counter 0 event
             			   For 32 bit counter mode OR expression valids for OR event in continue counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_0_OR_vld -->
            <field>
              <name>CONTINUE_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_OR_event -->
            <field>
              <name>CONTINUE_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in continue counter event 
			                For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Continue_Counter_1_OR_vld -->
            <field>
              <name>CONTINUE_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_EVENT_SEL: Stop counter event select register -->
        <!-- REGISTER 21 -->
        <register>
          <name>CT_STOP_COUNTER_EVENT_SEL</name>
          <description>Stop counter event select register</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Stop_Counter_0_event_sel -->
            <field>
              <name>STOP_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Stopping the Counter 0
			               For 32 bit counter mode: Event select for Stopping counter
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_event_sel -->
            <field>
              <name>STOP_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for Stopping the Counter 1
                			For 32 bit counter mode: Invalid
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_AND_EVENT: Stop counter AND event register -->
        <!-- REGISTER 22 -->
        <register>
          <name>CT_STOP_COUNTER_AND_EVENT</name>
          <description>Stop counter AND event register</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Stop_Counter_0_AND_event -->
            <field>
              <name>STOP_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event 
			               For 32 bit counter mode AND expression valids for AND event in stop counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_0_AND_vld -->
            <field>
              <name>STOP_COUNTER_0_AND_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering AND event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_AND_event -->
            <field>
              <name>STOP_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in stop counter event
              			    For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Stop_Counter_1_AND_vld -->
            <field>
              <name>STOP_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_OR_EVENT: Stop counter OR event register -->
        <!-- REGISTER 23 -->
        <register>
          <name>CT_STOP_COUNTER_OR_EVENT</name>
          <description>Stop counter OR event register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Stop_Counter_0_OR_event -->
            <field>
              <name>STOP_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Stop Counter 0 event
			               For 32 bit counter mode OR expression valids for OR event in Stop counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_0_OR_vld -->
            <field>
              <name>STOP_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_OR_event -->
            <field>
              <name>STOP_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in Stop counter event
               			    For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Stop_Counter_1_OR_vld -->
            <field>
              <name>STOP_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_EVENT_SEL: Halt counter event select register -->
        <!-- REGISTER 24 -->
        <register>
          <name>CT_HALT_COUNTER_EVENT_SEL</name>
          <description>Halt counter event select register</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Halt_Counter_0_event_sel -->
            <field>
              <name>HALT_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
			               For 32 bit counter mode: Event select for Halting counter
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Resume from halt counter 0 -->
            <field>
              <name>RESUME_FROM_HALT_COUNTER_0</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
			               For 32 bit counter mode: Event select for Halting counter
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_event_sel -->
            <field>
              <name>HALT_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 1
			               For 32 bit counter mode: Invalid
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Resume from halt counter 1 -->
            <field>
              <name>RESUME_FROM_HALT_COUNTER_1</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
			               For 32 bit counter mode: Event select for Halting counter
			  </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_AND_EVENT: Halt counter AND event register -->
        <!-- REGISTER 25 -->
        <register>
          <name>CT_HALT_COUNTER_AND_EVENT</name>
          <description>Halt counter AND event register</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Halt_Counter_0_AND_event -->
            <field>
              <name>HALT_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
                  		   For 32 bit counter mode AND expression valids for AND event in stop counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Halt_Counter_0_AND_vld -->
            <field>
              <name>HALT_COUNTER_0_AND_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering AND event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_AND_event -->
            <field>
              <name>HALT_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
                		   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_AND_vld -->
            <field>
              <name>HALT_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_OR_EVENT: Halt counter OR event register -->
        <!-- REGISTER 26 -->
        <register>
          <name>CT_HALT_COUNTER_OR_EVENT</name>
          <description>Halt counter OR event register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Halt_Counter_0_OR_event -->
            <field>
              <name>HALT_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Halt Counter 0 event
			               For 32 bit counter mode OR expression valids for OR event in Halt counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Halt_Counter_0_OR_vld -->
            <field>
              <name>HALT_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_OR_event -->
            <field>
              <name>HALT_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Halt counter event
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_OR_vld -->
            <field>
              <name>HALT_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_EVENT_SEL: Increment counter event select register -->
        <!-- REGISTER 27 -->
        <register>
          <name>CT_INCREMENT_COUNTER_EVENT_SEL</name>
          <description>Increment counter event select register</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Increment_Counter_0_event_sel -->
            <field>
              <name>INCREMENT_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Incrementing the Counter 0
               			   For 32 bit counter mode: Event select for Incrementing counter
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_even -->
            <field>
              <name>INCREMENT_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Incrementing the Counter 1
            			   For 32 bit counter mode: Invalid
		      </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_AND_EVENT: Increment counter AND event register -->
        <!-- REGISTER 28 -->
        <register>
          <name>CT_INCREMENT_COUNTER_AND_EVENT</name>
          <description>Increment counter AND event register</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Increment_Counter_0_AND_event -->
            <field>
              <name>INCREMENT_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
			               For 32 bit counter mode AND expression valids for AND event in stop counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Increment_Counter_0_AND_vld -->
            <field>
              <name>INCREMENT_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_AND_event -->
            <field>
              <name>INCREMENT_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_AND_vld -->
            <field>
              <name>INCREMENT_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_OR_EVENT: Increment counter OR event register -->
        <!-- REGISTER 29 -->
        <register>
          <name>CT_INCREMENT_COUNTER_OR_EVENT</name>
          <description>Increment counter OR event register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Increment_Counter_0_OR_event -->
            <field>
              <name>INCREMENT_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Increment Counter 0 event
			               For 32 bit counter mode OR expression valids for OR event in Increment counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Increment_Counter_0_OR_vld -->
            <field>
              <name>INCREMENT_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_OR_event -->
            <field>
              <name>INCREMENT_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Increment counter event
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_OR_vld -->
            <field>
              <name>INCREMENT_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED5</name>
              <description>Reserved5</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_EVENT_SEL:Capture counter event select register -->
        <!-- REGISTER 30 -->
        <register>
          <name>CT_CAPTURE_COUNTER_EVENT_SEL</name>
          <description>Capture counter event select register</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Capture_Counter_0_event_sel -->
            <field>
              <name>CAPTURE_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Capturing the Counter 0
                		   For 32 bit counter mode: Event select for Capturing counter
		      </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_event_sel -->
            <field>
              <name>CAPTURE_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Capturing the Counter 1
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_AND_EVENT: Capture counter AND event register -->
        <!-- REGISTER 31 -->
        <register>
          <name>CT_CAPTURE_COUNTER_AND_EVENT</name>
          <description>Capture counter AND event register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Capture_Counter_0_AND_event -->
            <field>
              <name>CAPTURE_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
          			       For 32 bit counter mode AND expression valids for AND event in stop counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Capture_Counter_0_AND_vld -->
            <field>
              <name>CAPTURE_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_AND_event -->
            <field>
              <name>CAPTURE_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_AND_vld -->
            <field>
              <name>CAPTURE_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_OR_EVENT: Capture counter OR event register -->
        <!-- REGISTER 32 -->
        <register>
          <name>CT_CAPTURE_COUNTER_OR_EVENT</name>
          <description>Capture counter OR event register</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Capture_Counter_0_OR_event -->
            <field>
              <name>CAPTURE_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Capture Counter 0 event
     			           For 32 bit counter mode OR expression valids for OR event in Capture counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Capture_Counter_0_OR_vld -->
            <field>
              <name>CAPTURE_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_OR_event -->
            <field>
              <name>CAPTURE_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Capture counter event
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_OR_vld -->
            <field>
              <name>CAPTURE_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_EVENT_SEL: Output event select register -->
        <!-- REGISTER 33 -->
        <register>
          <name>CT_OUTPUT_EVENT_SEL</name>
          <description>Output event select register</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- output_event_sel -->
            <field>
              <name>OUTPUT_EVENT_SEL_0</name>
              <description>For two 16 bit counters mode: Event select for output event from Counter 0
			               For 32 bit counter mode: Event select for output event
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_event_sel -->
            <field>
              <name>OUTPUT_EVENT_SEL_1</name>
              <description>For two 16 bit counters mode: Event select for output event from counter 1
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_AND_EVENT:Output AND event Register-->
        <!-- REGISTER 34 -->
        <register>
          <name>CT_OUTPUT_AND_EVENT_REG</name>
          <description>Output AND event Register</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- output_0_AND_event -->
            <field>
              <name>OUTPUT_0_AND_EVENT</name>
              <description>AND expression for AND event in output Counter_0 event.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_0_and_vld -->
            <field>
              <name>OUTPUT_0_AND_VLD</name>
              <description>AND expression for AND event in output Counter_0 event.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_AND_event -->
            <field>
              <name>OUTPUT_1_AND_EVENT</name>
              <description>AND expression for AND event in output Counter_1 event.</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_and_vld -->
            <field>
              <name>OUTPUT_1_AND_VLD</name>
              <description>AND expression for AND event in output Counter_1 event.</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_OR_EVENT: Output OR event Register -->
        <!-- REGISTER 35 -->
        <register>
          <name>CT_OUTPUT_OR_EVENT</name>
          <description>Output OR event Register</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- output_0_OR_event -->
            <field>
              <name>OUTPUT_0_OR_EVENT</name>
              <description>OR expression for OR event in output Counter_0 event</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_0_or_vld -->
            <field>
              <name>OUTPUT_0_OR_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering OR event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_OR_event -->
            <field>
              <name>OUTPUT_1_OR_EVENT</name>
              <description>OR expression for OR event in output Counter_0 event</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_or_vld -->
            <field>
              <name>OUTPUT_1_OR_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering OR event</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_EVENT_SEL: Interrupt Event Select Register -->
        <!-- REGISTER 36 -->
        <register>
          <name>CT_INTR_EVENT_SEL</name>
          <description>Interrupt Event Select Register</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- intr_event_sel -->
            <field>
              <name>INTR_EVENT_SEL_0</name>
              <description>For two 16 bit counters mode: Event select for interrupt event from Counter 0
              			   For 32 bit counter mode: Event select for output event
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_event_sel -->
            <field>
              <name>INTR_EVENT_SEL_1</name>
              <description>For two 16 bit counters mode: Event select for interrupt event from counter 1
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_AND_EVENT: Interrupt AND Event Register -->
        <!-- REGISTER 37 -->
        <register>
          <name>CT_INTR_AND_EVENT</name>
          <description>Interrupt AND Event Register</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Intr_0_and_event -->
            <field>
              <name>INTR_0_AND_EVENT</name>
              <description>None</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_0_and_vld -->
            <field>
              <name>INTR_0_AND_VLD</name>
              <description>None</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_and_event -->
            <field>
              <name>INTR_1_AND_EVENT</name>
              <description>None</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_and_vld -->
            <field>
              <name>INTR_1_AND_VLD</name>
              <description>None</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_OR_EVENT: Interrupt OR Event Register-->
        <!-- REGISTER 38 -->
        <register>
          <name>CT_INTR_OR_EVENT_REG</name>
          <description>Interrupt OR Event Register</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Intr_0_OR_event -->
            <field>
              <name>INTR_0_OR_EVENT</name>
              <description>None</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_0_OR_vld -->
            <field>
              <name>INTR_0_OR_VLD</name>
              <description>None</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_or_event -->
            <field>
              <name>INTR_1_OR_EVENT</name>
              <description>None</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_or_vld -->
            <field>
              <name>INTR_1_OR_VLD</name>
              <description>None</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--CT_RE_FE_RFE_LEV0_LEV1_EVENT_ENABLE_REG-->
        <register>
          <name>CT_RE_FE_RFE_LEV0_LEV1_EVENT_ENABLE_REG</name>
          <description>Rising Edge Falling Edge Rising and Falling Edge level0 level1 event enable register</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000FFFFF</resetValue>
          <resetMask>0X000FFFFF</resetMask>
          <fields>
            <!--Input_Event_RE_Enable-->
            <field>
              <name>Input_Event_RE_Enable</name>
              <description>Input event rising edge enables</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_FE_Enable-->
            <field>
              <name>Input_Event_FE_Enable</name>
              <description>Input event falling edge enables:</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_RFE_Enable-->
            <field>
              <name>Input_Event_RFE_Enable</name>
              <description>Input event rising and falling edge enables</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_lev0_Enable-->
            <field>
              <name>Input_Event_lev0_Enable</name>
              <description>Input event level0 enables</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_lev1_Enable-->
            <field>
              <name>Input_Event_lev1_Enable</name>
              <description>Input event level1 enables</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--CONFIGURABLE TIMERS -->
    <peripheral>
      <name>CT1</name>
      <version>1.0</version>
      <description>Configurable timer is used in counting clocks, events and states with reference clock
                   external clock and system clock
      </description>
      <groupName>CT</groupName>
      <baseAddress>0x45060100</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0xB0</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>CT</name>
        <value>34</value>
      </interrupt>
      <registers>
        <!-- CT_GEN_CTRL_SET_REG: General control set register -->
        <!-- REGISTER 1 -->
        <register>
          <name>CT_GEN_CTRL_SET_REG</name>
          <description>General control set register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_in_32_bit_mode -->
            <field>
              <name>COUNTER_IN_32_BIT_MODE</name>
              <description> Counter_1 and Counter_0 will be merged and used as a single 32 bit counter
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: Counter will be 32 bit mode
				               If Read: Counter is in two 16 bit mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter will be 32 bit mode
				               If Read: Counter is in two 16 bit mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Soft_reset_counter_0_frm_reg -->
            <field>
              <name>SOFT_RESET_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
			               otherwise this will be applied to only lower 16 bits of counter
			  </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read: Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be reset
				               If Read: Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Periodic_en_Counter_0_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
			               otherwise this will be applied to only lower 16 bits of counter
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read: Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be in periodic mode
				               If Read: Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_trig_frm_reg -->
            <field>
              <name>COUNTER_0_TRIG_FRM_REG</name>
              <description>This enables the counter to run/active</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active
				               If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_up -->
            <field>
              <name>COUNTER_0_UP_DOWN</name>
              <description>This enables the counter to run in up/down/up-down/down-up directions</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
				               If Read:Counter_0 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_0 will be up-counting
				               If Read:Counter_0 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
				               If Read:Counter_0 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
				               If Read:Counter_0 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_sync_trig -->
            <field>
              <name>COUNTER_0_SYNC_TRIG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode otherwise this will be applied to only lower 16 bits of counter.
							This enables the counter to run/active when sync is found.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_0 will be active.
				               If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Buf_reg_0_en -->
            <field>
              <name>BUF_REG_0_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
						   gets copied to MATCH REG.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
				               If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[16:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Soft_reset_Counter_1_frm_reg -->
            <field>
              <name>SOFT_RESET_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
				               If Read:Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be reset
				               If Read:Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Periodic_en_Counter_1_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
				               If Read:Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be in periodic mode
				               If Read:Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_trig_frm_reg -->
            <field>
              <name>COUNTER_1_TRIG_FRM</name>
              <description>This enables the counter to run/active</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
				               If Read:Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active
				               If Read:Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_up -->
            <field>
              <name>COUNTER_1_UP_DOWN</name>
              <description>This enables the counter to run in upward direction</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
				               If Read:Counter_1 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_1 will be up-counting
				               If Read:Counter_1 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
				               If Read:Counter_1 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
				               If Read:Counter_1 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_sync_trig -->
            <field>
              <name>COUNTER_1_SYNC_TRIG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode otherwise this will be applied to only lower 16 bits of counter.
							This enables the counter to run/active when sync is found.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active.
				               If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Buf_reg_1_en -->
            <field>
              <name>BUF_REG_1_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
						   gets copied to MATCH REG.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
				               If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_GEN_CTRL_RESET_REG:General control reset register -->
        <!-- REGISTER 2 -->
        <register>
          <name>CT_GEN_CTRL_RESET_REG</name>
          <description>General control reset register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_in_32_bit_mode -->
            <field>
              <name>COUNTER_IN_32_BIT_MODE</name>
              <description> Counter_1 and Counter_0 will be merged and used as a single 32 bit counter
			  </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: Counter will be 32 bit mode
				               If Read: Counter is in two 16 bit mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter will be 32 bit mode
				               If Read: Counter is in two 16 bit mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Soft_reset_counter_0_frm_reg-->
            <field>
              <name>Soft_Reset_Counter_0_frm_reg</name>
              <description>This is a self clear bit in set register.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Periodic_en_Counter_0_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
			               otherwise this will be applied to only lower 16 bits of counter
			  </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read: Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be in periodic mode
				               If Read: Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Counter_0_trig_frm_reg-->
            <field>
              <name>Counter_0_Trig_frm_reg</name>
              <description>This is a self clear bit in set register.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_up -->
            <field>
              <name>COUNTER_0_UP_DOWN</name>
              <description>This enables the counter to run in up/down/up-down/down-up directions</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
				               If Read:Counter_0 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_0 will be up-counting
				               If Read:Counter_0 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
				               If Read:Counter_0 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
				               If Read:Counter_0 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Counter_0_sync_trig-->
            <field>
              <name>Counter_0_Sync_Trig</name>
              <description>This is a self clear bit in set register.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Buf_reg_0_en -->
            <field>
              <name>BUF_REG_0_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
						   gets copied to MATCH REG.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
				               If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[16:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--Soft_Reset_Counter_1_frm_reg-->
            <field>
              <name>Soft_Reset_Counter_1_frm_reg</name>
              <description>This is a self clear bit in set register.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Periodic_en_Counter_1_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
				               If Read:Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be in periodic mode
				               If Read:Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Counter_1_trig_frm_reg-->
            <field>
              <name>Counter_1_Trig_frm_reg</name>
              <description>Self clear bit</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_up -->
            <field>
              <name>COUNTER_1_UP_DOWN</name>
              <description>This enables the counter to run in upward direction</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
				               If Read:Counter_1 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_1 will be up-counting
				               If Read:Counter_1 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
				               If Read:Counter_1 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
				               If Read:Counter_1 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Counter_1_sync_trig-->
            <field>
              <name>Counter_1_sync_trig</name>
              <description>self clear bit</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Buf_reg_1_en -->
            <field>
              <name>BUF_REG_1_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
						   gets copied to MATCH REG.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
				               If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_STS: Interrupt status -->
        <!-- REGISTER 3 -->
        <register>
          <name>CT_INTR_STS</name>
          <description>Interrupt status</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Indicates the FIFO full signal of channel-0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Indicates the FIFO full signal of channel-0</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Counter 0 hit zero in active mode.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Counter 0 hit peak (MATCH) in active mode.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Indicates the FIFO full signal of channel-1</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Indicates the FIFO full signal of channel-1</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Counter 1 hit zero in active mode.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Counter 1 hit peak (MATCH) in active mode.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_MASK: Interrupts mask -->
        <!-- REGISTER 4 -->
        <register>
          <name>CT_INTR_MASK</name>
          <description>Interrupts mask</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTER_UNMASK:  Interrupts unmask -->
        <!-- REGISTER 5 -->
        <register>
          <name>CT_INTER_UNMASK</name>
          <description>Interrupts unmask</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt unmask signal</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
				               If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
				               If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_ACK: Interrupt clear/ack register -->
        <!-- REGISTER 6 -->
        <register>
          <name>CT_INTR_ACK</name>
          <description>Interrupt clear/ack register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
				               If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_MATCH_REG: Match value register -->
        <!-- REGISTER 7 -->
        <register>
          <name>CT_MATCH_REG</name>
          <description>Match value register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_0_match: Counter lower path match register -->
            <field>
              <name>COUNTER_0_MATCH</name>
              <description> This will be used as lower match</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Counter_1_match: Counter upper part match register -->
            <field>
              <name>COUNTER_1_MATCH</name>
              <description> This will be used as upper match</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_MATCH_BUF_REG: Match value register -->
        <!-- REGISTER 7 -->
        <register>
          <name>CT_MATCH_BUF_REG</name>
          <description>Match Buffer register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_0_match: Counter lower path match register -->
            <field>
              <name>COUNTER_0_MATCH_BUF</name>
              <description> This gets copied to MATCH register if bug_reg_0_en is set. 
							Copying is done when counter 0 is active and hits 0.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Counter_1_match: Counter upper part match register -->
            <field>
              <name>COUNTER_1_MATCH_BUF</name>
              <description> This gets copied to MATCH register if bug_reg_1_en is set.
							Copying is done when counter 1 is active and hits 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_REG: Capture Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>CT_CAPTURE_REG</name>
          <description>Capture Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Counter_0_capture -->
            <field>
              <name>COUNTER_0_CAPTURE</name>
              <description> This is a latched value of counter lower part when the selected capture_event occurs
			  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_capture -->
            <field>
              <name>COUNTER_1_CAPTURE</name>
              <description>This is a latched value of counter upper part when the selected capture_event occurs
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_COUNTER_REG: Counter Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>CT_COUNTER_REG</name>
          <description>Counter Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- COUNTER0 -->
            <field>
              <name>COUNTER0</name>
              <description>This holds the value of counter-0 </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- COUNTER1 -->
            <field>
              <name>COUNTER1</name>
              <description>This holds the value of counter-1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_CTRL_REG: OCU control register -->
        <!-- REGISTER 10 -->
        <register>
          <name>CT_OCU_CTRL_REG</name>
          <description>OCU control register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7FFFFF</resetMask>
          <fields>
            <!-- output_is_ocu_0 -->
            <field>
              <name>OUTPUT_IS_OCU_0</name>
              <description>Indicates whether the output is in OCU mode or not for channel-0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- sync_with_0 -->
            <field>
              <name>SYNC_WITH_0</name>
              <description>Indicates whether the other channel is in sync with this channel</description>
              <bitRange>[3:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_0_dma_mode -->
            <field>
              <name>OCU_0_DMA_MODE</name>
              <description>Indicates whether the OCU  DMA mode is active or not for channel 0</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_0_mode_8_16 -->
            <field>
              <name>OCU_0_MODE_8_16</name>
              <description>Indicates whether entire 16 bits or only 8-bits of the channel 0 are used in OCU mode</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_high_sel -->
            <field>
              <name>MAKE_OUTPUT_0_HIGH_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made high.</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_low_sel -->
            <field>
              <name>MAKE_OUTPUT_0_LOW_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made low.</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_1_is_ocu -->
            <field>
              <name>OUTPUT_1_IS_OCU</name>
              <description>Indicates whether the output is in OCU mode or not for channel 1</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- sync_with_1 -->
            <field>
              <name>SYNC_WITH_1</name>
              <description>Indicates whether the other channel is in sync with this channel</description>
              <bitRange>[19:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_dma_mode_1 -->
            <field>
              <name>OCU_1_DMA_MODE</name>
              <description>Indicates whether the OCU  DMA mode is active or not for channel 1</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_8_16_mode_1 -->
            <field>
              <name>OCU_1_MODE_8_16_MODE</name>
              <description>Indicates whether entire 16 bits or only 8-bits of the channel 1 are used in OCU mode</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_high_sel -->
            <field>
              <name>MAKE_OUTPUT_1_HIGH_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made high.</description>
              <bitRange>[24:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_low_sel -->
            <field>
              <name>MAKE_OUTPUT_1_LOW_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made low.</description>
              <bitRange>[27:25]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE_REG: OCU Compare Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>CT_OCU_COMPARE_REG</name>
          <description>OCU Compare Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- ocu_compare_reg -->
            <field>
              <name>OCU_COMPARE_0_REG</name>
              <description> Holds the threshold value of present OCU period which denotes the number of clock 
							cycles for which the OCU output should be considered (counter 0)
			  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OCU_COMPARE_1_REG</name>
              <description> Holds the threshold value of present OCU period which denotes the number of clock  
							cycles for which the OCU output should be considered (counter 1)
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE2_REG: OCU Compare Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>CT_OCU_COMPARE2_REG</name>
          <description>OCU Compare2 Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- ocu_compare_reg -->
            <field>
              <name>OCU_COMPARE2_0_REG</name>
              <description> Holds the threshold value of present OCU period2 which denotes the number of clock  
							cycles for which the OCU output should be considered (counter 0)
			  </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OCU_COMPARE2_1_REG</name>
              <description> Holds the threshold value of present OCU period2 which denotes the number of clock  
							cycles for which the OCU output should be considered (counter 1)
			  </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_SYNC_REG	 -->
        <!-- REGISTER 12 -->
        <register>
          <name>CT_OCU_SYNC_REG</name>
          <description>OCU Synchronization Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Timer start -->
            <field>
              <name>OCU_SYNC_REG_0</name>
              <description>Starting point of channel 0 for synchronization purpose</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_sync_reg -->
            <field>
              <name>OCU_SYNC_REG_1</name>
              <description>Starting point of channel 1 for synchronization purpose</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE_NXT_REG: OCU compare next register -->
        <!-- REGISTER 13 -->
        <register>
          <name>CT_OCU_COMPARE_NXT_REG</name>
          <description>PWM compare next register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE_NXT_COUNTER1</name>
              <description> OCU output should be high for counter 1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE_NXT_COUNTER0</name>
              <description>PWM output should be high for counter 0</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE2_NXT_REG: OCU compare next register -->
        <!-- REGISTER 13 -->
        <register>
          <name>CT_OCU_COMPARE2_NXT_REG</name>
          <description>PWM compare next register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- ocu_compare2_nxt_reg -->
            <field>
              <name>OCU_COMPARE2_NXT_COUNTER0</name>
              <description> OCU output should be high for counter 1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE2_NXT_COUNTER1</name>
              <description>PWM output should be high for counter 0</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_WFG_CTRL_REG: WFG control register -->
        <!-- REGISTER 14 -->
        <register>
          <name>CT_WFG_CTRL_REG</name>
          <description>WFG control register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7FFFFF</resetMask>
          <fields>
            <!-- Make_output_0_tgl_0_sel -->
            <field>
              <name>MAKE_OUTPUT_0_TGL_0_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 0.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_tgl_1_sel -->
            <field>
              <name>MAKE_OUTPUT_0_TGL_1_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 0.</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Wfg_tgl_cnt_0_peak -->
            <field>
              <name>WFG_TGL_CNT_0_PEAK</name>
              <description>WFG mode output toggle count clock for channel 0.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_1_tgl_0_sel -->
            <field>
              <name>MAKE_OUTPUT_1_TGL_0_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 1.</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_1_tgl_1_sel -->
            <field>
              <name>MAKE_OUTPUT_1_TGL_1_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 1.</description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Wfg_tgl_cnt_1_peak -->
            <field>
              <name>WFG_TGL_CNT_1_PEAK</name>
              <description>WFG mode output toggle count clock for channel 1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_EVENT_SEL: Start counter event select register -->
        <!-- REGISTER 15 -->
        <register>
          <name>CT_START_COUNTER_EVENT_SEL</name>
          <description>Start counter event select register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x3F003F</resetMask>
          <fields>
            <!-- Start_Counter_0_event_sel : Timer start -->
            <field>
              <name>START_COUNTER_0_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for starting the Counter 0 
			                For 32 bit counter mode: Event select for starting counter
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Start_Counter_1_event_sel  -->
            <field>
              <name>START_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for starting the Counter 1. 
			                For 32 bit counter mode: Invalid. Please refer to events table for description
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_AND_EVENT: Start counter AND event register -->
        <!-- REGISTER 16 -->
        <register>
          <name>CT_START_COUNTER_AND_EVENT</name>
          <description>Start counter AND event register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Start_Counter_0_AND_event -->
            <field>
              <name>START_COUNTER_0_AND_EVENT</name>
              <description> For two 16 bit counter mode: AND expression valids for AND event in start Counter 0 event
			                For 32 bit counter mode AND expression valids for AND event in start counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- start_counter_0_and_vld -->
            <field>
              <name>START_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Start_Counter_1_AND_event -->
            <field>
              <name>START_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in start counter event
			                For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- start_counter_1_and_vld -->
            <field>
              <name>START_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_OR_EVENT: Start counter OR event register -->
        <!-- REGISTER 17 -->
        <register>
          <name>CT_START_COUNTER_OR_EVENT</name>
          <description>Start counter OR event register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Start_Counter_0_OR_event -->
            <field>
              <name>START_COUNTER_0_OR_EVENT</name>
              <description> For two 16 bit counter mode: OR expression valids for OR event in start Counter 0 event
               			    For 32 bit counter mode OR expression valids for OR event in start counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- start_counter_0_or_vld -->
            <field>
              <name>START_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Start_Counter_1_OR_event -->
            <field>
              <name>START_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in start counter event
               			    For 32 bit counter mode : Invalid.
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- start_counter_1_or_vld -->
            <field>
              <name>START_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_EVENT_SEL: Continue counter event select register-->
        <!-- REGISTER 18 -->
        <register>
          <name>CT_CONTINUE_COUNTER_EVENT_SEL</name>
          <description>Continue counter event select register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Continue_Counter_0_event_sel -->
            <field>
              <name>CONTINUE_COUNTER_0_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for continuing the Counter 0
                			For 32 bit counter mode: Event select for continuing counter
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_event_sel -->
            <field>
              <name>CONTINUE_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for continuing the Counter 1 
			                For 32 bit counter mode: Invalid.
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_AND_EVENT: Continue counter AND event register -->
        <!-- REGISTER 19 -->
        <register>
          <name>CT_CONTINUE_COUNTER_AND_EVENT</name>
          <description>Continue counter AND event register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Continue_Counter_0_AND_event -->
            <field>
              <name>CONTINUE_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in continue Counter 0 event
			               For 32 bit counter mode AND expression valids for AND event in continue counter event.
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_0_AND_vld -->
            <field>
              <name>CONTINUE_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_AND_event -->
            <field>
              <name>CONTINUE_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in continue counter event
               			    For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Continue_Counter_1_AND_vld -->
            <field>
              <name>CONTINUE_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_OR_EVENT: Continue counter OR event register -->
        <!-- REGISTER 20 -->
        <register>
          <name>CT_CONTINUE_COUNTER_OR_EVENT</name>
          <description>Continue counter OR event register</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Continue_Counter_0_OR_event -->
            <field>
              <name>CONTINUE_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in continue Counter 0 event
             			   For 32 bit counter mode OR expression valids for OR event in continue counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_0_OR_vld -->
            <field>
              <name>CONTINUE_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_OR_event -->
            <field>
              <name>CONTINUE_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in continue counter event 
			                For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Continue_Counter_1_OR_vld -->
            <field>
              <name>CONTINUE_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_EVENT_SEL: Stop counter event select register -->
        <!-- REGISTER 21 -->
        <register>
          <name>CT_STOP_COUNTER_EVENT_SEL</name>
          <description>Stop counter event select register</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Stop_Counter_0_event_sel -->
            <field>
              <name>STOP_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Stopping the Counter 0
			               For 32 bit counter mode: Event select for Stopping counter
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_event_sel -->
            <field>
              <name>STOP_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for Stopping the Counter 1
                			For 32 bit counter mode: Invalid
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_AND_EVENT: Stop counter AND event register -->
        <!-- REGISTER 22 -->
        <register>
          <name>CT_STOP_COUNTER_AND_EVENT</name>
          <description>Stop counter AND event register</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Stop_Counter_0_AND_event -->
            <field>
              <name>STOP_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event 
			               For 32 bit counter mode AND expression valids for AND event in stop counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_0_AND_vld -->
            <field>
              <name>STOP_COUNTER_0_AND_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering AND event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_AND_event -->
            <field>
              <name>STOP_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in stop counter event
              			    For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Stop_Counter_1_AND_vld -->
            <field>
              <name>STOP_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_OR_EVENT: Stop counter OR event register -->
        <!-- REGISTER 23 -->
        <register>
          <name>CT_STOP_COUNTER_OR_EVENT</name>
          <description>Stop counter OR event register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Stop_Counter_0_OR_event -->
            <field>
              <name>STOP_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Stop Counter 0 event
			               For 32 bit counter mode OR expression valids for OR event in Stop counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_0_OR_vld -->
            <field>
              <name>STOP_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_OR_event -->
            <field>
              <name>STOP_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in Stop counter event
               			    For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Stop_Counter_1_OR_vld -->
            <field>
              <name>STOP_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_EVENT_SEL: Halt counter event select register -->
        <!-- REGISTER 24 -->
        <register>
          <name>CT_HALT_COUNTER_EVENT_SEL</name>
          <description>Halt counter event select register</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Halt_Counter_0_event_sel -->
            <field>
              <name>HALT_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
			               For 32 bit counter mode: Event select for Halting counter
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Resume from halt counter 0 -->
            <field>
              <name>RESUME_FROM_HALT_COUNTER_0</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
			               For 32 bit counter mode: Event select for Halting counter
			  </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_event_sel -->
            <field>
              <name>HALT_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 1
			               For 32 bit counter mode: Invalid
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Resume from halt counter 1 -->
            <field>
              <name>RESUME_FROM_HALT_COUNTER_1</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
			               For 32 bit counter mode: Event select for Halting counter
			  </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_AND_EVENT: Halt counter AND event register -->
        <!-- REGISTER 25 -->
        <register>
          <name>CT_HALT_COUNTER_AND_EVENT</name>
          <description>Halt counter AND event register</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Halt_Counter_0_AND_event -->
            <field>
              <name>HALT_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
                  		   For 32 bit counter mode AND expression valids for AND event in stop counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Halt_Counter_0_AND_vld -->
            <field>
              <name>HALT_COUNTER_0_AND_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering AND event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_AND_event -->
            <field>
              <name>HALT_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
                		   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_AND_vld -->
            <field>
              <name>HALT_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_OR_EVENT: Halt counter OR event register -->
        <!-- REGISTER 26 -->
        <register>
          <name>CT_HALT_COUNTER_OR_EVENT</name>
          <description>Halt counter OR event register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Halt_Counter_0_OR_event -->
            <field>
              <name>HALT_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Halt Counter 0 event
			               For 32 bit counter mode OR expression valids for OR event in Halt counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Halt_Counter_0_OR_vld -->
            <field>
              <name>HALT_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_OR_event -->
            <field>
              <name>HALT_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Halt counter event
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_OR_vld -->
            <field>
              <name>HALT_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_EVENT_SEL: Increment counter event select register -->
        <!-- REGISTER 27 -->
        <register>
          <name>CT_INCREMENT_COUNTER_EVENT_SEL</name>
          <description>Increment counter event select register</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Increment_Counter_0_event_sel -->
            <field>
              <name>INCREMENT_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Incrementing the Counter 0
               			   For 32 bit counter mode: Event select for Incrementing counter
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_even -->
            <field>
              <name>INCREMENT_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Incrementing the Counter 1
            			   For 32 bit counter mode: Invalid
		      </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_AND_EVENT: Increment counter AND event register -->
        <!-- REGISTER 28 -->
        <register>
          <name>CT_INCREMENT_COUNTER_AND_EVENT</name>
          <description>Increment counter AND event register</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Increment_Counter_0_AND_event -->
            <field>
              <name>INCREMENT_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
			               For 32 bit counter mode AND expression valids for AND event in stop counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Increment_Counter_0_AND_vld -->
            <field>
              <name>INCREMENT_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_AND_event -->
            <field>
              <name>INCREMENT_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_AND_vld -->
            <field>
              <name>INCREMENT_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_OR_EVENT: Increment counter OR event register -->
        <!-- REGISTER 29 -->
        <register>
          <name>CT_INCREMENT_COUNTER_OR_EVENT</name>
          <description>Increment counter OR event register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Increment_Counter_0_OR_event -->
            <field>
              <name>INCREMENT_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Increment Counter 0 event
			               For 32 bit counter mode OR expression valids for OR event in Increment counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Increment_Counter_0_OR_vld -->
            <field>
              <name>INCREMENT_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_OR_event -->
            <field>
              <name>INCREMENT_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Increment counter event
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_OR_vld -->
            <field>
              <name>INCREMENT_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED5</name>
              <description>Reserved5</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_EVENT_SEL:Capture counter event select register -->
        <!-- REGISTER 30 -->
        <register>
          <name>CT_CAPTURE_COUNTER_EVENT_SEL</name>
          <description>Capture counter event select register</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Capture_Counter_0_event_sel -->
            <field>
              <name>CAPTURE_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Capturing the Counter 0
                		   For 32 bit counter mode: Event select for Capturing counter
		      </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_event_sel -->
            <field>
              <name>CAPTURE_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Capturing the Counter 1
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_AND_EVENT: Capture counter AND event register -->
        <!-- REGISTER 31 -->
        <register>
          <name>CT_CAPTURE_COUNTER_AND_EVENT</name>
          <description>Capture counter AND event register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Capture_Counter_0_AND_event -->
            <field>
              <name>CAPTURE_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
          			       For 32 bit counter mode AND expression valids for AND event in stop counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Capture_Counter_0_AND_vld -->
            <field>
              <name>CAPTURE_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_AND_event -->
            <field>
              <name>CAPTURE_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_AND_vld -->
            <field>
              <name>CAPTURE_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_OR_EVENT: Capture counter OR event register -->
        <!-- REGISTER 32 -->
        <register>
          <name>CT_CAPTURE_COUNTER_OR_EVENT</name>
          <description>Capture counter OR event register</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Capture_Counter_0_OR_event -->
            <field>
              <name>CAPTURE_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Capture Counter 0 event
     			           For 32 bit counter mode OR expression valids for OR event in Capture counter event
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Capture_Counter_0_OR_vld -->
            <field>
              <name>CAPTURE_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_OR_event -->
            <field>
              <name>CAPTURE_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Capture counter event
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_OR_vld -->
            <field>
              <name>CAPTURE_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_EVENT_SEL: Output event select register -->
        <!-- REGISTER 33 -->
        <register>
          <name>CT_OUTPUT_EVENT_SEL</name>
          <description>Output event select register</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- output_event_sel -->
            <field>
              <name>OUTPUT_EVENT_SEL_0</name>
              <description>For two 16 bit counters mode: Event select for output event from Counter 0
			               For 32 bit counter mode: Event select for output event
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_event_sel -->
            <field>
              <name>OUTPUT_EVENT_SEL_1</name>
              <description>For two 16 bit counters mode: Event select for output event from counter 1
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_AND_EVENT:Output AND event Register-->
        <!-- REGISTER 34 -->
        <register>
          <name>CT_OUTPUT_AND_EVENT_REG</name>
          <description>Output AND event Register</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- output_0_AND_event -->
            <field>
              <name>OUTPUT_0_AND_EVENT</name>
              <description>AND expression for AND event in output Counter_0 event.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_0_and_vld -->
            <field>
              <name>OUTPUT_0_AND_VLD</name>
              <description>AND expression for AND event in output Counter_0 event.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_AND_event -->
            <field>
              <name>OUTPUT_1_AND_EVENT</name>
              <description>AND expression for AND event in output Counter_1 event.</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_and_vld -->
            <field>
              <name>OUTPUT_1_AND_VLD</name>
              <description>AND expression for AND event in output Counter_1 event.</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_OR_EVENT: Output OR event Register -->
        <!-- REGISTER 35 -->
        <register>
          <name>CT_OUTPUT_OR_EVENT</name>
          <description>Output OR event Register</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- output_0_OR_event -->
            <field>
              <name>OUTPUT_0_OR_EVENT</name>
              <description>OR expression for OR event in output Counter_0 event</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_0_or_vld -->
            <field>
              <name>OUTPUT_0_OR_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering OR event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_OR_event -->
            <field>
              <name>OUTPUT_1_OR_EVENT</name>
              <description>OR expression for OR event in output Counter_0 event</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_or_vld -->
            <field>
              <name>OUTPUT_1_OR_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering OR event</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_EVENT_SEL: Interrupt Event Select Register -->
        <!-- REGISTER 36 -->
        <register>
          <name>CT_INTR_EVENT_SEL</name>
          <description>Interrupt Event Select Register</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- intr_event_sel -->
            <field>
              <name>INTR_EVENT_SEL_0</name>
              <description>For two 16 bit counters mode: Event select for interrupt event from Counter 0
              			   For 32 bit counter mode: Event select for output event
			  </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_event_sel -->
            <field>
              <name>INTR_EVENT_SEL_1</name>
              <description>For two 16 bit counters mode: Event select for interrupt event from counter 1
            			   For 32 bit counter mode : Invalid
			  </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_AND_EVENT: Interrupt AND Event Register -->
        <!-- REGISTER 37 -->
        <register>
          <name>CT_INTR_AND_EVENT</name>
          <description>Interrupt AND Event Register</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Intr_0_and_event -->
            <field>
              <name>INTR_0_AND_EVENT</name>
              <description>None</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_0_and_vld -->
            <field>
              <name>INTR_0_AND_VLD</name>
              <description>None</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_and_event -->
            <field>
              <name>INTR_1_AND_EVENT</name>
              <description>None</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_and_vld -->
            <field>
              <name>INTR_1_AND_VLD</name>
              <description>None</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_OR_EVENT: Interrupt OR Event Register-->
        <!-- REGISTER 38 -->
        <register>
          <name>CT_INTR_OR_EVENT_REG</name>
          <description>Interrupt OR Event Register</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Intr_0_OR_event -->
            <field>
              <name>INTR_0_OR_EVENT</name>
              <description>None</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_0_OR_vld -->
            <field>
              <name>INTR_0_OR_VLD</name>
              <description>None</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_or_event -->
            <field>
              <name>INTR_1_OR_EVENT</name>
              <description>None</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_or_vld -->
            <field>
              <name>INTR_1_OR_VLD</name>
              <description>None</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--CT_RE_FE_RFE_LEV0_LEV1_EVENT_ENABLE_REG-->
        <register>
          <name>CT_RE_FE_RFE_LEV0_LEV1_EVENT_ENABLE_REG</name>
          <description>Rising Edge Falling Edge Rising and Falling Edge level0 level1 event enable register</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000FFFFF</resetValue>
          <resetMask>0X000FFFFF</resetMask>
          <fields>
            <!--Input_Event_RE_Enable-->
            <field>
              <name>Input_Event_RE_Enable</name>
              <description>Input event rising edge enables</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_FE_Enable-->
            <field>
              <name>Input_Event_FE_Enable</name>
              <description>Input event falling edge enables:</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_RFE_Enable-->
            <field>
              <name>Input_Event_RFE_Enable</name>
              <description>Input event rising and falling edge enables</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_lev0_Enable-->
            <field>
              <name>Input_Event_lev0_Enable</name>
              <description>Input event level0 enables</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_lev1_Enable-->
            <field>
              <name>Input_Event_lev1_Enable</name>
              <description>Input event level1 enables</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--CONFIGURABLE TIMERS -->
    <peripheral>
      <name>CT2</name>
      <version>1.0</version>
      <description>Configurable timer is used in counting clocks, events and states with reference clock
                   external clock and system clock
      </description>
      <groupName>CT</groupName>
      <baseAddress>0x45061000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0xB0</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>CT</name>
        <value>34</value>
      </interrupt>
      <registers>
        <!-- CT_GEN_CTRL_SET_REG: General control set register -->
        <!-- REGISTER 1 -->
        <register>
          <name>CT_GEN_CTRL_SET_REG</name>
          <description>General control set register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_in_32_bit_mode -->
            <field>
              <name>COUNTER_IN_32_BIT_MODE</name>
              <description> Counter_1 and Counter_0 will be merged and used as a single 32 bit counter
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: Counter will be 32 bit mode
                       If Read: Counter is in two 16 bit mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter will be 32 bit mode
                       If Read: Counter is in two 16 bit mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Soft_reset_counter_0_frm_reg -->
            <field>
              <name>SOFT_RESET_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
                     otherwise this will be applied to only lower 16 bits of counter
        </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read: Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be reset
                       If Read: Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Periodic_en_Counter_0_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
                     otherwise this will be applied to only lower 16 bits of counter
        </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read: Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be in periodic mode
                       If Read: Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_trig_frm_reg -->
            <field>
              <name>COUNTER_0_TRIG_FRM_REG</name>
              <description>This enables the counter to run/active</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active
                       If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_up -->
            <field>
              <name>COUNTER_0_UP_DOWN</name>
              <description>This enables the counter to run in up/down/up-down/down-up directions</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
                       If Read:Counter_0 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_0 will be up-counting
                       If Read:Counter_0 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
                       If Read:Counter_0 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
                       If Read:Counter_0 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_sync_trig -->
            <field>
              <name>COUNTER_0_SYNC_TRIG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode otherwise this will be applied to only lower 16 bits of counter.
              This enables the counter to run/active when sync is found.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_0 will be active.
                       If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Buf_reg_0_en -->
            <field>
              <name>BUF_REG_0_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
               gets copied to MATCH REG.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
                       If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[16:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Soft_reset_Counter_1_frm_reg -->
            <field>
              <name>SOFT_RESET_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
                       If Read:Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be reset
                       If Read:Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Periodic_en_Counter_1_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
                       If Read:Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be in periodic mode
                       If Read:Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_trig_frm_reg -->
            <field>
              <name>COUNTER_1_TRIG_FRM</name>
              <description>This enables the counter to run/active</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
                       If Read:Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active
                       If Read:Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_up -->
            <field>
              <name>COUNTER_1_UP_DOWN</name>
              <description>This enables the counter to run in upward direction</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
                       If Read:Counter_1 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_1 will be up-counting
                       If Read:Counter_1 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
                       If Read:Counter_1 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
                       If Read:Counter_1 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_sync_trig -->
            <field>
              <name>COUNTER_1_SYNC_TRIG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode otherwise this will be applied to only lower 16 bits of counter.
              This enables the counter to run/active when sync is found.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active.
                       If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Buf_reg_1_en -->
            <field>
              <name>BUF_REG_1_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
               gets copied to MATCH REG.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
                       If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_GEN_CTRL_RESET_REG:General control reset register -->
        <!-- REGISTER 2 -->
        <register>
          <name>CT_GEN_CTRL_RESET_REG</name>
          <description>General control reset register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_in_32_bit_mode -->
            <field>
              <name>COUNTER_IN_32_BIT_MODE</name>
              <description> Counter_1 and Counter_0 will be merged and used as a single 32 bit counter
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: Counter will be 32 bit mode
                       If Read: Counter is in two 16 bit mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter will be 32 bit mode
                       If Read: Counter is in two 16 bit mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Periodic_en_Counter_0_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
                     otherwise this will be applied to only lower 16 bits of counter
        </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read: Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be in periodic mode
                       If Read: Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_up -->
            <field>
              <name>COUNTER_0_UP_DOWN</name>
              <description>This enables the counter to run in up/down/up-down/down-up directions</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
                       If Read:Counter_0 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_0 will be up-counting
                       If Read:Counter_0 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
                       If Read:Counter_0 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
                       If Read:Counter_0 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Buf_reg_0_en -->
            <field>
              <name>BUF_REG_0_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
               gets copied to MATCH REG.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
                       If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[16:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED5</name>
              <description>Reserved5</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Periodic_en_Counter_1_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
                       If Read:Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be in periodic mode
                       If Read:Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED6</name>
              <description>Reserved6</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_up -->
            <field>
              <name>COUNTER_1_UP_DOWN</name>
              <description>This enables the counter to run in upward direction</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
                       If Read:Counter_1 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_1 will be up-counting
                       If Read:Counter_1 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
                       If Read:Counter_1 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
                       If Read:Counter_1 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED7</name>
              <description>Reserved7</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Buf_reg_1_en -->
            <field>
              <name>BUF_REG_1_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
               gets copied to MATCH REG.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
                       If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED8</name>
              <description>Reserved8</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_STS: Interrupt status -->
        <!-- REGISTER 3 -->
        <register>
          <name>CT_INTR_STS</name>
          <description>Interrupt status</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Indicates the FIFO full signal of channel-0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Indicates the FIFO full signal of channel-0</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Counter 0 hit zero in active mode.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Counter 0 hit peak (MATCH) in active mode.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Indicates the FIFO full signal of channel-1</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Indicates the FIFO full signal of channel-1</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Counter 1 hit zero in active mode.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Counter 1 hit peak (MATCH) in active mode.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_MASK: Interrupts mask -->
        <!-- REGISTER 4 -->
        <register>
          <name>CT_INTR_MASK</name>
          <description>Interrupts mask</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTER_UNMASK:  Interrupts unmask -->
        <!-- REGISTER 5 -->
        <register>
          <name>CT_INTER_UNMASK</name>
          <description>Interrupts unmask</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt unmask signal</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_ACK: Interrupt clear/ack register -->
        <!-- REGISTER 6 -->
        <register>
          <name>CT_INTR_ACK</name>
          <description>Interrupt clear/ack register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_MATCH_REG: Match value register -->
        <!-- REGISTER 7 -->
        <register>
          <name>CT_MATCH_REG</name>
          <description>Match value register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_0_match: Counter lower path match register -->
            <field>
              <name>COUNTER_0_MATCH</name>
              <description> This will be used as lower match</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Counter_1_match: Counter upper part match register -->
            <field>
              <name>COUNTER_1_MATCH</name>
              <description> This will be used as upper match</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_MATCH_BUF_REG: Match value register -->
        <!-- REGISTER 7 -->
        <register>
          <name>CT_MATCH_BUF_REG</name>
          <description>Match Buffer register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_0_match: Counter lower path match register -->
            <field>
              <name>COUNTER_0_MATCH_BUF</name>
              <description> This gets copied to MATCH register if bug_reg_0_en is set. 
              Copying is done when counter 0 is active and hits 0.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Counter_1_match: Counter upper part match register -->
            <field>
              <name>COUNTER_1_MATCH_BUF</name>
              <description> This gets copied to MATCH register if bug_reg_1_en is set.
              Copying is done when counter 1 is active and hits 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_REG: Capture Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>CT_CAPTURE_REG</name>
          <description>Capture Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Counter_0_capture -->
            <field>
              <name>COUNTER_0_CAPTURE</name>
              <description> This is a latched value of counter lower part when the selected capture_event occurs
        </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_capture -->
            <field>
              <name>COUNTER_1_CAPTURE</name>
              <description>This is a latched value of counter upper part when the selected capture_event occurs
        </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_COUNTER_REG: Counter Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>CT_COUNTER_REG</name>
          <description>Counter Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- COUNTER0 -->
            <field>
              <name>COUNTER0</name>
              <description>This holds the value of counter-0 </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- COUNTER1 -->
            <field>
              <name>COUNTER1</name>
              <description>This holds the value of counter-1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_CTRL_REG: OCU control register -->
        <!-- REGISTER 10 -->
        <register>
          <name>CT_OCU_CTRL_REG</name>
          <description>OCU control register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7FFFFF</resetMask>
          <fields>
            <!-- output_is_ocu_0 -->
            <field>
              <name>OUTPUT_IS_OCU_0</name>
              <description>Indicates whether the output is in OCU mode or not for channel-0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- sync_with_0 -->
            <field>
              <name>SYNC_WITH_0</name>
              <description>Indicates whether the other channel is in sync with this channel</description>
              <bitRange>[3:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_0_dma_mode -->
            <field>
              <name>OCU_0_DMA_MODE</name>
              <description>Indicates whether the OCU  DMA mode is active or not for channel 0</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_0_mode_8_16 -->
            <field>
              <name>OCU_0_MODE_8_16</name>
              <description>Indicates whether entire 16 bits or only 8-bits of the channel 0 are used in OCU mode</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_high_sel -->
            <field>
              <name>MAKE_OUTPUT_0_HIGH_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made high.</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_low_sel -->
            <field>
              <name>MAKE_OUTPUT_0_LOW_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made low.</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_1_is_ocu -->
            <field>
              <name>OUTPUT_1_IS_OCU</name>
              <description>Indicates whether the output is in OCU mode or not for channel 1</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- sync_with_1 -->
            <field>
              <name>SYNC_WITH_1</name>
              <description>Indicates whether the other channel is in sync with this channel</description>
              <bitRange>[19:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_dma_mode_1 -->
            <field>
              <name>OCU_1_DMA_MODE</name>
              <description>Indicates whether the OCU  DMA mode is active or not for channel 1</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_8_16_mode_1 -->
            <field>
              <name>OCU_1_MODE_8_16_MODE</name>
              <description>Indicates whether entire 16 bits or only 8-bits of the channel 1 are used in OCU mode</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_high_sel -->
            <field>
              <name>MAKE_OUTPUT_1_HIGH_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made high.</description>
              <bitRange>[24:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_low_sel -->
            <field>
              <name>MAKE_OUTPUT_1_LOW_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made low.</description>
              <bitRange>[27:25]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE_REG: OCU Compare Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>CT_OCU_COMPARE_REG</name>
          <description>OCU Compare Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- ocu_compare_reg -->
            <field>
              <name>OCU_COMPARE_0_REG</name>
              <description> Holds the threshold value of present OCU period which denotes the number of clock 
              cycles for which the OCU output should be considered (counter 0)
        </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OCU_COMPARE_1_REG</name>
              <description> Holds the threshold value of present OCU period which denotes the number of clock  
              cycles for which the OCU output should be considered (counter 1)
        </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE2_REG: OCU Compare Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>CT_OCU_COMPARE2_REG</name>
          <description>OCU Compare2 Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- ocu_compare_reg -->
            <field>
              <name>OCU_COMPARE2_0_REG</name>
              <description> Holds the threshold value of present OCU period2 which denotes the number of clock  
              cycles for which the OCU output should be considered (counter 0)
        </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OCU_COMPARE2_1_REG</name>
              <description> Holds the threshold value of present OCU period2 which denotes the number of clock  
              cycles for which the OCU output should be considered (counter 1)
        </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_SYNC_REG   -->
        <!-- REGISTER 12 -->
        <register>
          <name>CT_OCU_SYNC_REG</name>
          <description>OCU Synchronization Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Timer start -->
            <field>
              <name>OCU_SYNC_CHANNEL0_REG</name>
              <description>Starting point of channel 0 for synchronization purpose</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_sync_reg -->
            <field>
              <name>OCU_SYNC_CHANNEL1_REG</name>
              <description>Starting point of channel 1 for synchronization purpose</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE_NXT_REG: OCU compare next register -->
        <!-- REGISTER 13 -->
        <register>
          <name>CT_OCU_COMPARE_NXT_REG</name>
          <description>PWM compare next register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE_NXT_COUNTER1</name>
              <description> OCU output should be high for counter 1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE_NXT_COUNTER0</name>
              <description>PWM output should be high for counter 0</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE2_NXT_REG: OCU compare next register -->
        <!-- REGISTER 13 -->
        <register>
          <name>CT_OCU_COMPARE2_NXT_REG</name>
          <description>PWM compare next register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- ocu_compare2_nxt_reg -->
            <field>
              <name>OCU_COMPARE2_NXT_COUNTER0</name>
              <description> OCU output should be high for counter 1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE2_NXT_COUNTER1</name>
              <description>PWM output should be high for counter 0</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_WFG_CTRL_REG: WFG control register -->
        <!-- REGISTER 14 -->
        <register>
          <name>CT_WFG_CTRL_REG</name>
          <description>WFG control register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7FFFFF</resetMask>
          <fields>
            <!-- Make_output_0_tgl_0_sel -->
            <field>
              <name>MAKE_OUTPUT_0_TGL_0_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 0.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_tgl_1_sel -->
            <field>
              <name>MAKE_OUTPUT_0_TGL_1_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 0.</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Wfg_tgl_cnt_0_peak -->
            <field>
              <name>WFG_TGL_CNT_0_PEAK</name>
              <description>WFG mode output toggle count clock for channel 0.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_1_tgl_0_sel -->
            <field>
              <name>MAKE_OUTPUT_1_TGL_0_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 1.</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_1_tgl_1_sel -->
            <field>
              <name>MAKE_OUTPUT_1_TGL_1_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 1.</description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Wfg_tgl_cnt_1_peak -->
            <field>
              <name>WFG_TGL_CNT_1_PEAK</name>
              <description>WFG mode output toggle count clock for channel 1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_EVENT_SEL: Start counter event select register -->
        <!-- REGISTER 15 -->
        <register>
          <name>CT_START_COUNTER_EVENT_SEL</name>
          <description>Start counter event select register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x3F003F</resetMask>
          <fields>
            <!-- Start_Counter_0_event_sel : Timer start -->
            <field>
              <name>START_COUNTER_0_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for starting the Counter 0 
                      For 32 bit counter mode: Event select for starting counter
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Start_Counter_1_event_sel  -->
            <field>
              <name>START_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for starting the Counter 1. 
                      For 32 bit counter mode: Invalid. Please refer to events table for description
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_AND_EVENT: Start counter AND event register -->
        <!-- REGISTER 16 -->
        <register>
          <name>CT_START_COUNTER_AND_EVENT</name>
          <description>Start counter AND event register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Start_Counter_0_AND_event -->
            <field>
              <name>START_COUNTER_0_AND_EVENT</name>
              <description> For two 16 bit counter mode: AND expression valids for AND event in start Counter 0 event
                      For 32 bit counter mode AND expression valids for AND event in start counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- start_counter_0_and_vld -->
            <field>
              <name>START_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Start_Counter_1_AND_event -->
            <field>
              <name>START_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in start counter event
                      For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- start_counter_1_and_vld -->
            <field>
              <name>START_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_OR_EVENT: Start counter OR event register -->
        <!-- REGISTER 17 -->
        <register>
          <name>CT_START_COUNTER_OR_EVENT</name>
          <description>Start counter OR event register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Start_Counter_0_OR_event -->
            <field>
              <name>START_COUNTER_0_OR_EVENT</name>
              <description> For two 16 bit counter mode: OR expression valids for OR event in start Counter 0 event
                        For 32 bit counter mode OR expression valids for OR event in start counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- start_counter_0_or_vld -->
            <field>
              <name>START_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Start_Counter_1_OR_event -->
            <field>
              <name>START_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in start counter event
                        For 32 bit counter mode : Invalid.
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- start_counter_1_or_vld -->
            <field>
              <name>START_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_EVENT_SEL: Continue counter event select register-->
        <!-- REGISTER 18 -->
        <register>
          <name>CT_CONTINUE_COUNTER_EVENT_SEL</name>
          <description>Continue counter event select register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Continue_Counter_0_event_sel -->
            <field>
              <name>CONTINUE_COUNTER_0_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for continuing the Counter 0
                      For 32 bit counter mode: Event select for continuing counter
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_event_sel -->
            <field>
              <name>CONTINUE_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for continuing the Counter 1 
                      For 32 bit counter mode: Invalid.
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_AND_EVENT: Continue counter AND event register -->
        <!-- REGISTER 19 -->
        <register>
          <name>CT_CONTINUE_COUNTER_AND_EVENT</name>
          <description>Continue counter AND event register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Continue_Counter_0_AND_event -->
            <field>
              <name>CONTINUE_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in continue Counter 0 event
                     For 32 bit counter mode AND expression valids for AND event in continue counter event.
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_0_AND_vld -->
            <field>
              <name>CONTINUE_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_AND_event -->
            <field>
              <name>CONTINUE_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in continue counter event
                        For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Continue_Counter_1_AND_vld -->
            <field>
              <name>CONTINUE_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_OR_EVENT: Continue counter OR event register -->
        <!-- REGISTER 20 -->
        <register>
          <name>CT_CONTINUE_COUNTER_OR_EVENT</name>
          <description>Continue counter OR event register</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Continue_Counter_0_OR_event -->
            <field>
              <name>CONTINUE_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in continue Counter 0 event
                     For 32 bit counter mode OR expression valids for OR event in continue counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_0_OR_vld -->
            <field>
              <name>CONTINUE_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_OR_event -->
            <field>
              <name>CONTINUE_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in continue counter event 
                      For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Continue_Counter_1_OR_vld -->
            <field>
              <name>CONTINUE_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_EVENT_SEL: Stop counter event select register -->
        <!-- REGISTER 21 -->
        <register>
          <name>CT_STOP_COUNTER_EVENT_SEL</name>
          <description>Stop counter event select register</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Stop_Counter_0_event_sel -->
            <field>
              <name>STOP_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Stopping the Counter 0
                     For 32 bit counter mode: Event select for Stopping counter
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_event_sel -->
            <field>
              <name>STOP_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for Stopping the Counter 1
                      For 32 bit counter mode: Invalid
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_AND_EVENT: Stop counter AND event register -->
        <!-- REGISTER 22 -->
        <register>
          <name>CT_STOP_COUNTER_AND_EVENT</name>
          <description>Stop counter AND event register</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Stop_Counter_0_AND_event -->
            <field>
              <name>STOP_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event 
                     For 32 bit counter mode AND expression valids for AND event in stop counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_0_AND_vld -->
            <field>
              <name>STOP_COUNTER_0_AND_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering AND event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_AND_event -->
            <field>
              <name>STOP_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in stop counter event
                        For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Stop_Counter_1_AND_vld -->
            <field>
              <name>STOP_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_OR_EVENT: Stop counter OR event register -->
        <!-- REGISTER 23 -->
        <register>
          <name>CT_STOP_COUNTER_OR_EVENT</name>
          <description>Stop counter OR event register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Stop_Counter_0_OR_event -->
            <field>
              <name>STOP_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Stop Counter 0 event
                     For 32 bit counter mode OR expression valids for OR event in Stop counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_0_OR_vld -->
            <field>
              <name>STOP_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_OR_event -->
            <field>
              <name>STOP_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in Stop counter event
                        For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Stop_Counter_1_OR_vld -->
            <field>
              <name>STOP_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_EVENT_SEL: Halt counter event select register -->
        <!-- REGISTER 24 -->
        <register>
          <name>CT_HALT_COUNTER_EVENT_SEL</name>
          <description>Halt counter event select register</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Halt_Counter_0_event_sel -->
            <field>
              <name>HALT_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
                     For 32 bit counter mode: Event select for Halting counter
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Resume from halt counter 0 -->
            <field>
              <name>RESUME_FROM_HALT_COUNTER_0</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
                     For 32 bit counter mode: Event select for Halting counter
        </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_event_sel -->
            <field>
              <name>HALT_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 1
                     For 32 bit counter mode: Invalid
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Resume from halt counter 1 -->
            <field>
              <name>RESUME_FROM_HALT_COUNTER_1</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
                     For 32 bit counter mode: Event select for Halting counter
        </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_AND_EVENT: Halt counter AND event register -->
        <!-- REGISTER 25 -->
        <register>
          <name>CT_HALT_COUNTER_AND_EVENT</name>
          <description>Halt counter AND event register</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Halt_Counter_0_AND_event -->
            <field>
              <name>HALT_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
                         For 32 bit counter mode AND expression valids for AND event in stop counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Halt_Counter_0_AND_vld -->
            <field>
              <name>HALT_COUNTER_0_AND_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering AND event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_AND_event -->
            <field>
              <name>HALT_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
                       For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_AND_vld -->
            <field>
              <name>HALT_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_OR_EVENT: Halt counter OR event register -->
        <!-- REGISTER 26 -->
        <register>
          <name>CT_HALT_COUNTER_OR_EVENT</name>
          <description>Halt counter OR event register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Halt_Counter_0_OR_event -->
            <field>
              <name>HALT_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Halt Counter 0 event
                     For 32 bit counter mode OR expression valids for OR event in Halt counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Halt_Counter_0_OR_vld -->
            <field>
              <name>HALT_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_OR_event -->
            <field>
              <name>HALT_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Halt counter event
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_OR_vld -->
            <field>
              <name>HALT_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_EVENT_SEL: Increment counter event select register -->
        <!-- REGISTER 27 -->
        <register>
          <name>CT_INCREMENT_COUNTER_EVENT_SEL</name>
          <description>Increment counter event select register</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Increment_Counter_0_event_sel -->
            <field>
              <name>INCREMENT_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Incrementing the Counter 0
                       For 32 bit counter mode: Event select for Incrementing counter
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_even -->
            <field>
              <name>INCREMENT_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Incrementing the Counter 1
                     For 32 bit counter mode: Invalid
          </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_AND_EVENT: Increment counter AND event register -->
        <!-- REGISTER 28 -->
        <register>
          <name>CT_INCREMENT_COUNTER_AND_EVENT</name>
          <description>Increment counter AND event register</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Increment_Counter_0_AND_event -->
            <field>
              <name>INCREMENT_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
                     For 32 bit counter mode AND expression valids for AND event in stop counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Increment_Counter_0_AND_vld -->
            <field>
              <name>INCREMENT_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_AND_event -->
            <field>
              <name>INCREMENT_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_AND_vld -->
            <field>
              <name>INCREMENT_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_OR_EVENT: Increment counter OR event register -->
        <!-- REGISTER 29 -->
        <register>
          <name>CT_INCREMENT_COUNTER_OR_EVENT</name>
          <description>Increment counter OR event register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Increment_Counter_0_OR_event -->
            <field>
              <name>INCREMENT_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Increment Counter 0 event
                     For 32 bit counter mode OR expression valids for OR event in Increment counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Increment_Counter_0_OR_vld -->
            <field>
              <name>INCREMENT_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_OR_event -->
            <field>
              <name>INCREMENT_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Increment counter event
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_OR_vld -->
            <field>
              <name>INCREMENT_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED5</name>
              <description>Reserved5</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_EVENT_SEL:Capture counter event select register -->
        <!-- REGISTER 30 -->
        <register>
          <name>CT_CAPTURE_COUNTER_EVENT_SEL</name>
          <description>Capture counter event select register</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Capture_Counter_0_event_sel -->
            <field>
              <name>CAPTURE_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Capturing the Counter 0
                       For 32 bit counter mode: Event select for Capturing counter
          </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_event_sel -->
            <field>
              <name>CAPTURE_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Capturing the Counter 1
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_AND_EVENT: Capture counter AND event register -->
        <!-- REGISTER 31 -->
        <register>
          <name>CT_CAPTURE_COUNTER_AND_EVENT</name>
          <description>Capture counter AND event register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Capture_Counter_0_AND_event -->
            <field>
              <name>CAPTURE_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
                       For 32 bit counter mode AND expression valids for AND event in stop counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Capture_Counter_0_AND_vld -->
            <field>
              <name>CAPTURE_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_AND_event -->
            <field>
              <name>CAPTURE_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_AND_vld -->
            <field>
              <name>CAPTURE_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_OR_EVENT: Capture counter OR event register -->
        <!-- REGISTER 32 -->
        <register>
          <name>CT_CAPTURE_COUNTER_OR_EVENT</name>
          <description>Capture counter OR event register</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Capture_Counter_0_OR_event -->
            <field>
              <name>CAPTURE_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Capture Counter 0 event
                     For 32 bit counter mode OR expression valids for OR event in Capture counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Capture_Counter_0_OR_vld -->
            <field>
              <name>CAPTURE_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_OR_event -->
            <field>
              <name>CAPTURE_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Capture counter event
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_OR_vld -->
            <field>
              <name>CAPTURE_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_EVENT_SEL: Output event select register -->
        <!-- REGISTER 33 -->
        <register>
          <name>CT_OUTPUT_EVENT_SEL</name>
          <description>Output event select register</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- output_event_sel -->
            <field>
              <name>OUTPUT_EVENT_SEL_0</name>
              <description>For two 16 bit counters mode: Event select for output event from Counter 0
                     For 32 bit counter mode: Event select for output event
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_event_sel -->
            <field>
              <name>OUTPUT_EVENT_SEL_1</name>
              <description>For two 16 bit counters mode: Event select for output event from counter 1
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_AND_EVENT:Output AND event Register-->
        <!-- REGISTER 34 -->
        <register>
          <name>CT_OUTPUT_AND_EVENT_REG</name>
          <description>Output AND event Register</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- output_0_AND_event -->
            <field>
              <name>OUTPUT_0_AND_EVENT</name>
              <description>AND expression for AND event in output Counter_0 event.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_0_and_vld -->
            <field>
              <name>OUTPUT_0_AND_VLD</name>
              <description>AND expression for AND event in output Counter_0 event.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_AND_event -->
            <field>
              <name>OUTPUT_1_AND_EVENT</name>
              <description>AND expression for AND event in output Counter_1 event.</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_and_vld -->
            <field>
              <name>OUTPUT_1_AND_VLD</name>
              <description>AND expression for AND event in output Counter_1 event.</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_OR_EVENT: Output OR event Register -->
        <!-- REGISTER 35 -->
        <register>
          <name>CT_OUTPUT_OR_EVENT</name>
          <description>Output OR event Register</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- output_0_OR_event -->
            <field>
              <name>OUTPUT_0_OR_EVENT</name>
              <description>OR expression for OR event in output Counter_0 event</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_0_or_vld -->
            <field>
              <name>OUTPUT_0_OR_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering OR event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_OR_event -->
            <field>
              <name>OUTPUT_1_OR_EVENT</name>
              <description>OR expression for OR event in output Counter_0 event</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_or_vld -->
            <field>
              <name>OUTPUT_1_OR_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering OR event</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_EVENT_SEL: Interrupt Event Select Register -->
        <!-- REGISTER 36 -->
        <register>
          <name>CT_INTR_EVENT_SEL</name>
          <description>Interrupt Event Select Register</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- intr_event_sel -->
            <field>
              <name>INTR_EVENT_SEL_0</name>
              <description>For two 16 bit counters mode: Event select for interrupt event from Counter 0
                       For 32 bit counter mode: Event select for output event
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_event_sel -->
            <field>
              <name>INTR_EVENT_SEL_1</name>
              <description>For two 16 bit counters mode: Event select for interrupt event from counter 1
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_AND_EVENT: Interrupt AND Event Register -->
        <!-- REGISTER 37 -->
        <register>
          <name>CT_INTR_AND_EVENT</name>
          <description>Interrupt AND Event Register</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Intr_0_and_event -->
            <field>
              <name>INTR_0_AND_EVENT</name>
              <description>None</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_0_and_vld -->
            <field>
              <name>INTR_0_AND_VLD</name>
              <description>None</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_and_event -->
            <field>
              <name>INTR_1_AND_EVENT</name>
              <description>None</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_and_vld -->
            <field>
              <name>INTR_1_AND_VLD</name>
              <description>None</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_OR_EVENT: Interrupt OR Event Register-->
        <!-- REGISTER 38 -->
        <register>
          <name>CT_INTR_OR_EVENT_REG</name>
          <description>Interrupt OR Event Register</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Intr_0_OR_event -->
            <field>
              <name>INTR_0_OR_EVENT</name>
              <description>None</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_0_OR_vld -->
            <field>
              <name>INTR_0_OR_VLD</name>
              <description>None</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_or_event -->
            <field>
              <name>INTR_1_OR_EVENT</name>
              <description>None</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_or_vld -->
            <field>
              <name>INTR_1_OR_VLD</name>
              <description>None</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--CT_RE_FE_RFE_LEV0_LEV1_EVENT_ENABLE_REG-->
        <register>
          <name>CT_RE_FE_RFE_LEV0_LEV1_EVENT_ENABLE_REG</name>
          <description>Rising Edge Falling Edge Rising and Falling Edge level0 level1 event enable register</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000FFFFF</resetValue>
          <resetMask>0X000FFFFF</resetMask>
          <fields>
            <!--Input_Event_RE_Enable-->
            <field>
              <name>Input_Event_RE_Enable</name>
              <description>Input event rising edge enables</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_FE_Enable-->
            <field>
              <name>Input_Event_FE_Enable</name>
              <description>Input event falling edge enables:</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_RFE_Enable-->
            <field>
              <name>Input_Event_RFE_Enable</name>
              <description>Input event rising and falling edge enables</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_lev0_Enable-->
            <field>
              <name>Input_Event_lev0_Enable</name>
              <description>Input event level0 enables</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_lev1_Enable-->
            <field>
              <name>Input_Event_lev1_Enable</name>
              <description>Input event level1 enables</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--CONFIGURABLE TIMERS -->
    <peripheral>
      <name>CT3</name>
      <version>1.0</version>
      <description>Configurable timer is used in counting clocks, events and states with reference clock
                   external clock and system clock
      </description>
      <groupName>CT</groupName>
      <baseAddress>0x45061100</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0xB0</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>CT</name>
        <value>34</value>
      </interrupt>
      <registers>
        <!-- CT_GEN_CTRL_SET_REG: General control set register -->
        <!-- REGISTER 1 -->
        <register>
          <name>CT_GEN_CTRL_SET_REG</name>
          <description>General control set register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_in_32_bit_mode -->
            <field>
              <name>COUNTER_IN_32_BIT_MODE</name>
              <description> Counter_1 and Counter_0 will be merged and used as a single 32 bit counter
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: Counter will be 32 bit mode
                       If Read: Counter is in two 16 bit mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter will be 32 bit mode
                       If Read: Counter is in two 16 bit mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Soft_reset_counter_0_frm_reg -->
            <field>
              <name>SOFT_RESET_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
                     otherwise this will be applied to only lower 16 bits of counter
        </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read: Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be reset
                       If Read: Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Periodic_en_Counter_0_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
                     otherwise this will be applied to only lower 16 bits of counter
        </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read: Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be in periodic mode
                       If Read: Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_trig_frm_reg -->
            <field>
              <name>COUNTER_0_TRIG_FRM_REG</name>
              <description>This enables the counter to run/active</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active
                       If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_up -->
            <field>
              <name>COUNTER_0_UP_DOWN</name>
              <description>This enables the counter to run in up/down/up-down/down-up directions</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
                       If Read:Counter_0 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_0 will be up-counting
                       If Read:Counter_0 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
                       If Read:Counter_0 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
                       If Read:Counter_0 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_sync_trig -->
            <field>
              <name>COUNTER_0_SYNC_TRIG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode otherwise this will be applied to only lower 16 bits of counter.
              This enables the counter to run/active when sync is found.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_0 will be active.
                       If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Buf_reg_0_en -->
            <field>
              <name>BUF_REG_0_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
               gets copied to MATCH REG.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
                       If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[16:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Soft_reset_Counter_1_frm_reg -->
            <field>
              <name>SOFT_RESET_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
                       If Read:Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be reset
                       If Read:Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Periodic_en_Counter_1_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
                       If Read:Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be in periodic mode
                       If Read:Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_trig_frm_reg -->
            <field>
              <name>COUNTER_1_TRIG_FRM</name>
              <description>This enables the counter to run/active</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
                       If Read:Always should return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active
                       If Read:Always should return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_up -->
            <field>
              <name>COUNTER_1_UP_DOWN</name>
              <description>This enables the counter to run in upward direction</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
                       If Read:Counter_1 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_1 will be up-counting
                       If Read:Counter_1 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
                       If Read:Counter_1 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
                       If Read:Counter_1 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_sync_trig -->
            <field>
              <name>COUNTER_1_SYNC_TRIG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode otherwise this will be applied to only lower 16 bits of counter.
              This enables the counter to run/active when sync is found.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Read should always return 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be active.
                       If Read:Read should always return 0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Buf_reg_1_en -->
            <field>
              <name>BUF_REG_1_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
               gets copied to MATCH REG.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
                       If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_GEN_CTRL_RESET_REG:General control reset register -->
        <!-- REGISTER 2 -->
        <register>
          <name>CT_GEN_CTRL_RESET_REG</name>
          <description>General control reset register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_in_32_bit_mode -->
            <field>
              <name>COUNTER_IN_32_BIT_MODE</name>
              <description> Counter_1 and Counter_0 will be merged and used as a single 32 bit counter
        </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: Counter will be 32 bit mode
                       If Read: Counter is in two 16 bit mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter will be 32 bit mode
                       If Read: Counter is in two 16 bit mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Periodic_en_Counter_0_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_0_FRM_REG</name>
              <description>This is applied to 32 bits of counter only when the counter is in 32 bit counter mode 
                     otherwise this will be applied to only lower 16 bits of counter
        </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read: Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Counter_1 will be in periodic mode
                       If Read: Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_up -->
            <field>
              <name>COUNTER_0_UP_DOWN</name>
              <description>This enables the counter to run in up/down/up-down/down-up directions</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
                       If Read:Counter_0 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_0 will be up-counting
                       If Read:Counter_0 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
                       If Read:Counter_0 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
                       If Read:Counter_0 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Buf_reg_0_en -->
            <field>
              <name>BUF_REG_0_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
               gets copied to MATCH REG.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
                       If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[16:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED5</name>
              <description>Reserved5</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Periodic_en_Counter_1_frm_reg -->
            <field>
              <name>PERIODIC_EN_COUNTER_1_FRM_REG</name>
              <description>This resets the counter on the write</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write:No effect
                       If Read:Counter_1 is not in periodic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Counter_1 will be in periodic mode
                       If Read:Counter_1 is in periodic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED6</name>
              <description>Reserved6</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_up -->
            <field>
              <name>COUNTER_1_UP_DOWN</name>
              <description>This enables the counter to run in upward direction</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>00</name>
                  <description>If Write:No effect
                       If Read:Counter_1 is in down-up counting mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>01</name>
                  <description>If Write:Counter_1 will be up-counting
                       If Read:Counter_1 is in up-counting mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>10</name>
                  <description>If Write:Counter down direction enable
                       If Read:Counter_1 is in down counting mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>11</name>
                  <description>If Write:Both up and down directions enable.
                       If Read:Counter_1 is in up-down counting mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED7</name>
              <description>Reserved7</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Buf_reg_1_en -->
            <field>
              <name>BUF_REG_1_EN</name>
              <description>Buffer register gets enabled for MATCH REG. MATCH_BUF_REG is always available and whenever this bit is set only, 
               gets copied to MATCH REG.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Buffer is not enabled and not in path.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write:Buffer will be enabled and in path
                       If Read:Buffer is enabled and in path</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED8</name>
              <description>Reserved8</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_STS: Interrupt status -->
        <!-- REGISTER 3 -->
        <register>
          <name>CT_INTR_STS</name>
          <description>Interrupt status</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Indicates the FIFO full signal of channel-0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Indicates the FIFO full signal of channel-0</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Counter 0 hit zero in active mode.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Counter 0 hit peak (MATCH) in active mode.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Indicates the FIFO full signal of channel-1</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Indicates the FIFO full signal of channel-1</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Counter 1 hit zero in active mode.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Counter 1 hit peak (MATCH) in active mode.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_MASK: Interrupts mask -->
        <!-- REGISTER 4 -->
        <register>
          <name>CT_INTR_MASK</name>
          <description>Interrupts mask</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt mask signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be masked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTER_UNMASK:  Interrupts unmask -->
        <!-- REGISTER 5 -->
        <register>
          <name>CT_INTER_UNMASK</name>
          <description>Interrupts unmask</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt unmask signal</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt unmask signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect
                       If Read:Interrupt is masked.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be unmasked.
                       If Read: Interrupt is unmasked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_ACK: Interrupt clear/ack register -->
        <!-- REGISTER 6 -->
        <register>
          <name>CT_INTR_ACK</name>
          <description>Interrupt clear/ack register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0</resetMask>
          <fields>
            <!-- intr_0_l : Indicates the FIFO full signal of channel-0 -->
            <field>
              <name>INTR_0_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_0_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_0_FULL_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_ZERO_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_0_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_0_IS_PEAK_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>INTR_1_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- fifo_1_full_l : Interrupt Signal of channel-1 -->
            <field>
              <name>FIFO_1_FULL_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_zero_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_ZERO_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Counter_1_is_peak_l : Indicates the FIFO full signal of channel-1 -->
            <field>
              <name>COUNTER_1_IS_PEAK_L</name>
              <description>Interrupt ack signal.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>If Write: No effect.
                       If Read: should be returned as this is self clear bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>If Write: Interrupt will be de asserted.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_MATCH_REG: Match value register -->
        <!-- REGISTER 7 -->
        <register>
          <name>CT_MATCH_REG</name>
          <description>Match value register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_0_match: Counter lower path match register -->
            <field>
              <name>COUNTER_0_MATCH</name>
              <description> This will be used as lower match</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Counter_1_match: Counter upper part match register -->
            <field>
              <name>COUNTER_1_MATCH</name>
              <description> This will be used as upper match</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_MATCH_BUF_REG: Match value register -->
        <!-- REGISTER 7 -->
        <register>
          <name>CT_MATCH_BUF_REG</name>
          <description>Match Buffer register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Counter_0_match: Counter lower path match register -->
            <field>
              <name>COUNTER_0_MATCH_BUF</name>
              <description> This gets copied to MATCH register if bug_reg_0_en is set. 
              Copying is done when counter 0 is active and hits 0.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Counter_1_match: Counter upper part match register -->
            <field>
              <name>COUNTER_1_MATCH_BUF</name>
              <description> This gets copied to MATCH register if bug_reg_1_en is set.
              Copying is done when counter 1 is active and hits 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_REG: Capture Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>CT_CAPTURE_REG</name>
          <description>Capture Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Counter_0_capture -->
            <field>
              <name>COUNTER_0_CAPTURE</name>
              <description> This is a latched value of counter lower part when the selected capture_event occurs
        </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Counter_1_capture -->
            <field>
              <name>COUNTER_1_CAPTURE</name>
              <description>This is a latched value of counter upper part when the selected capture_event occurs
        </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_COUNTER_REG: Counter Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>CT_COUNTER_REG</name>
          <description>Counter Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- COUNTER0 -->
            <field>
              <name>COUNTER0</name>
              <description>This holds the value of counter-0 </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- COUNTER1 -->
            <field>
              <name>COUNTER1</name>
              <description>This holds the value of counter-1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_CTRL_REG: OCU control register -->
        <!-- REGISTER 10 -->
        <register>
          <name>CT_OCU_CTRL_REG</name>
          <description>OCU control register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7FFFFF</resetMask>
          <fields>
            <!-- output_is_ocu_0 -->
            <field>
              <name>OUTPUT_IS_OCU_0</name>
              <description>Indicates whether the output is in OCU mode or not for channel-0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- sync_with_0 -->
            <field>
              <name>SYNC_WITH_0</name>
              <description>Indicates whether the other channel is in sync with this channel</description>
              <bitRange>[3:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_0_dma_mode -->
            <field>
              <name>OCU_0_DMA_MODE</name>
              <description>Indicates whether the OCU  DMA mode is active or not for channel 0</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_0_mode_8_16 -->
            <field>
              <name>OCU_0_MODE_8_16</name>
              <description>Indicates whether entire 16 bits or only 8-bits of the channel 0 are used in OCU mode</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_high_sel -->
            <field>
              <name>MAKE_OUTPUT_0_HIGH_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made high.</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_low_sel -->
            <field>
              <name>MAKE_OUTPUT_0_LOW_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made low.</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_1_is_ocu -->
            <field>
              <name>OUTPUT_1_IS_OCU</name>
              <description>Indicates whether the output is in OCU mode or not for channel 1</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- sync_with_1 -->
            <field>
              <name>SYNC_WITH_1</name>
              <description>Indicates whether the other channel is in sync with this channel</description>
              <bitRange>[19:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_dma_mode_1 -->
            <field>
              <name>OCU_1_DMA_MODE</name>
              <description>Indicates whether the OCU  DMA mode is active or not for channel 1</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ocu_8_16_mode_1 -->
            <field>
              <name>OCU_1_MODE_8_16_MODE</name>
              <description>Indicates whether entire 16 bits or only 8-bits of the channel 1 are used in OCU mode</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_high_sel -->
            <field>
              <name>MAKE_OUTPUT_1_HIGH_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made high.</description>
              <bitRange>[24:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_low_sel -->
            <field>
              <name>MAKE_OUTPUT_1_LOW_SEL</name>
              <description>Check counter ocus for possibilities. When this is hit output will be made low.</description>
              <bitRange>[27:25]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE_REG: OCU Compare Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>CT_OCU_COMPARE_REG</name>
          <description>OCU Compare Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- ocu_compare_reg -->
            <field>
              <name>OCU_COMPARE_0_REG</name>
              <description> Holds the threshold value of present OCU period which denotes the number of clock 
              cycles for which the OCU output should be considered (counter 0)
        </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OCU_COMPARE_1_REG</name>
              <description> Holds the threshold value of present OCU period which denotes the number of clock  
              cycles for which the OCU output should be considered (counter 1)
        </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE2_REG: OCU Compare Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>CT_OCU_COMPARE2_REG</name>
          <description>OCU Compare2 Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFF</resetMask>
          <fields>
            <!-- ocu_compare_reg -->
            <field>
              <name>OCU_COMPARE2_0_REG</name>
              <description> Holds the threshold value of present OCU period2 which denotes the number of clock  
              cycles for which the OCU output should be considered (counter 0)
        </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OCU_COMPARE2_1_REG</name>
              <description> Holds the threshold value of present OCU period2 which denotes the number of clock  
              cycles for which the OCU output should be considered (counter 1)
        </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_SYNC_REG   -->
        <!-- REGISTER 12 -->
        <register>
          <name>CT_OCU_SYNC_REG</name>
          <description>OCU Synchronization Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Timer start -->
            <field>
              <name>OCU_SYNC_CHANNEL0_REG</name>
              <description>Starting point of channel 0 for synchronization purpose</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_sync_reg -->
            <field>
              <name>OCU_SYNC_CHANNEL1_REG</name>
              <description>Starting point of channel 1 for synchronization purpose</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE_NXT_REG: OCU compare next register -->
        <!-- REGISTER 13 -->
        <register>
          <name>CT_OCU_COMPARE_NXT_REG</name>
          <description>PWM compare next register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE_NXT_COUNTER1</name>
              <description> OCU output should be high for counter 1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE_NXT_COUNTER0</name>
              <description>PWM output should be high for counter 0</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OCU_COMPARE2_NXT_REG: OCU compare next register -->
        <!-- REGISTER 13 -->
        <register>
          <name>CT_OCU_COMPARE2_NXT_REG</name>
          <description>PWM compare next register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- ocu_compare2_nxt_reg -->
            <field>
              <name>OCU_COMPARE2_NXT_COUNTER0</name>
              <description> OCU output should be high for counter 1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- pwm_compare_nxt_reg -->
            <field>
              <name>OCU_COMPARE2_NXT_COUNTER1</name>
              <description>PWM output should be high for counter 0</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_WFG_CTRL_REG: WFG control register -->
        <!-- REGISTER 14 -->
        <register>
          <name>CT_WFG_CTRL_REG</name>
          <description>WFG control register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7FFFFF</resetMask>
          <fields>
            <!-- Make_output_0_tgl_0_sel -->
            <field>
              <name>MAKE_OUTPUT_0_TGL_0_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 0.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_0_tgl_1_sel -->
            <field>
              <name>MAKE_OUTPUT_0_TGL_1_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 0.</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Wfg_tgl_cnt_0_peak -->
            <field>
              <name>WFG_TGL_CNT_0_PEAK</name>
              <description>WFG mode output toggle count clock for channel 0.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_1_tgl_0_sel -->
            <field>
              <name>MAKE_OUTPUT_1_TGL_0_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 1.</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Make_output_1_tgl_1_sel -->
            <field>
              <name>MAKE_OUTPUT_1_TGL_1_SEL</name>
              <description>Check the counter ocus possibilities for description for channel 1.</description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Wfg_tgl_cnt_1_peak -->
            <field>
              <name>WFG_TGL_CNT_1_PEAK</name>
              <description>WFG mode output toggle count clock for channel 1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_EVENT_SEL: Start counter event select register -->
        <!-- REGISTER 15 -->
        <register>
          <name>CT_START_COUNTER_EVENT_SEL</name>
          <description>Start counter event select register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x3F003F</resetMask>
          <fields>
            <!-- Start_Counter_0_event_sel : Timer start -->
            <field>
              <name>START_COUNTER_0_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for starting the Counter 0 
                      For 32 bit counter mode: Event select for starting counter
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Start_Counter_1_event_sel  -->
            <field>
              <name>START_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for starting the Counter 1. 
                      For 32 bit counter mode: Invalid. Please refer to events table for description
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_AND_EVENT: Start counter AND event register -->
        <!-- REGISTER 16 -->
        <register>
          <name>CT_START_COUNTER_AND_EVENT</name>
          <description>Start counter AND event register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Start_Counter_0_AND_event -->
            <field>
              <name>START_COUNTER_0_AND_EVENT</name>
              <description> For two 16 bit counter mode: AND expression valids for AND event in start Counter 0 event
                      For 32 bit counter mode AND expression valids for AND event in start counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- start_counter_0_and_vld -->
            <field>
              <name>START_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Start_Counter_1_AND_event -->
            <field>
              <name>START_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in start counter event
                      For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- start_counter_1_and_vld -->
            <field>
              <name>START_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_START_COUNTER_OR_EVENT: Start counter OR event register -->
        <!-- REGISTER 17 -->
        <register>
          <name>CT_START_COUNTER_OR_EVENT</name>
          <description>Start counter OR event register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Start_Counter_0_OR_event -->
            <field>
              <name>START_COUNTER_0_OR_EVENT</name>
              <description> For two 16 bit counter mode: OR expression valids for OR event in start Counter 0 event
                        For 32 bit counter mode OR expression valids for OR event in start counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- start_counter_0_or_vld -->
            <field>
              <name>START_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Start_Counter_1_OR_event -->
            <field>
              <name>START_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in start counter event
                        For 32 bit counter mode : Invalid.
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- start_counter_1_or_vld -->
            <field>
              <name>START_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_EVENT_SEL: Continue counter event select register-->
        <!-- REGISTER 18 -->
        <register>
          <name>CT_CONTINUE_COUNTER_EVENT_SEL</name>
          <description>Continue counter event select register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Continue_Counter_0_event_sel -->
            <field>
              <name>CONTINUE_COUNTER_0_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for continuing the Counter 0
                      For 32 bit counter mode: Event select for continuing counter
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_event_sel -->
            <field>
              <name>CONTINUE_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for continuing the Counter 1 
                      For 32 bit counter mode: Invalid.
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_AND_EVENT: Continue counter AND event register -->
        <!-- REGISTER 19 -->
        <register>
          <name>CT_CONTINUE_COUNTER_AND_EVENT</name>
          <description>Continue counter AND event register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Continue_Counter_0_AND_event -->
            <field>
              <name>CONTINUE_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in continue Counter 0 event
                     For 32 bit counter mode AND expression valids for AND event in continue counter event.
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_0_AND_vld -->
            <field>
              <name>CONTINUE_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_AND_event -->
            <field>
              <name>CONTINUE_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in continue counter event
                        For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Continue_Counter_1_AND_vld -->
            <field>
              <name>CONTINUE_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CONTINUE_COUNTER_OR_EVENT: Continue counter OR event register -->
        <!-- REGISTER 20 -->
        <register>
          <name>CT_CONTINUE_COUNTER_OR_EVENT</name>
          <description>Continue counter OR event register</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Continue_Counter_0_OR_event -->
            <field>
              <name>CONTINUE_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in continue Counter 0 event
                     For 32 bit counter mode OR expression valids for OR event in continue counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_0_OR_vld -->
            <field>
              <name>CONTINUE_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Continue_Counter_1_OR_event -->
            <field>
              <name>CONTINUE_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in continue counter event 
                      For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Continue_Counter_1_OR_vld -->
            <field>
              <name>CONTINUE_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_EVENT_SEL: Stop counter event select register -->
        <!-- REGISTER 21 -->
        <register>
          <name>CT_STOP_COUNTER_EVENT_SEL</name>
          <description>Stop counter event select register</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Stop_Counter_0_event_sel -->
            <field>
              <name>STOP_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Stopping the Counter 0
                     For 32 bit counter mode: Event select for Stopping counter
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_event_sel -->
            <field>
              <name>STOP_COUNTER_1_EVENT_SEL</name>
              <description> For two 16 bit counters mode: Event select for Stopping the Counter 1
                      For 32 bit counter mode: Invalid
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_AND_EVENT: Stop counter AND event register -->
        <!-- REGISTER 22 -->
        <register>
          <name>CT_STOP_COUNTER_AND_EVENT</name>
          <description>Stop counter AND event register</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Stop_Counter_0_AND_event -->
            <field>
              <name>STOP_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event 
                     For 32 bit counter mode AND expression valids for AND event in stop counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_0_AND_vld -->
            <field>
              <name>STOP_COUNTER_0_AND_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering AND event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_AND_event -->
            <field>
              <name>STOP_COUNTER_1_AND_EVENT</name>
              <description> For two 16 bit counters mode: AND expression valids for AND event in stop counter event
                        For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Stop_Counter_1_AND_vld -->
            <field>
              <name>STOP_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_STOP_COUNTER_OR_EVENT: Stop counter OR event register -->
        <!-- REGISTER 23 -->
        <register>
          <name>CT_STOP_COUNTER_OR_EVENT</name>
          <description>Stop counter OR event register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Stop_Counter_0_OR_event -->
            <field>
              <name>STOP_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Stop Counter 0 event
                     For 32 bit counter mode OR expression valids for OR event in Stop counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_0_OR_vld -->
            <field>
              <name>STOP_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Stop_Counter_1_OR_event -->
            <field>
              <name>STOP_COUNTER_1_OR_EVENT</name>
              <description> For two 16 bit counters mode: OR expression valids for OR event in Stop counter event
                        For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Stop_Counter_1_OR_vld -->
            <field>
              <name>STOP_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_EVENT_SEL: Halt counter event select register -->
        <!-- REGISTER 24 -->
        <register>
          <name>CT_HALT_COUNTER_EVENT_SEL</name>
          <description>Halt counter event select register</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Halt_Counter_0_event_sel -->
            <field>
              <name>HALT_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
                     For 32 bit counter mode: Event select for Halting counter
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Resume from halt counter 0 -->
            <field>
              <name>RESUME_FROM_HALT_COUNTER_0</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
                     For 32 bit counter mode: Event select for Halting counter
        </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_event_sel -->
            <field>
              <name>HALT_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 1
                     For 32 bit counter mode: Invalid
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Resume from halt counter 1 -->
            <field>
              <name>RESUME_FROM_HALT_COUNTER_1</name>
              <description>For two 16 bit counters mode: Event select for Halting the Counter 0
                     For 32 bit counter mode: Event select for Halting counter
        </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_AND_EVENT: Halt counter AND event register -->
        <!-- REGISTER 25 -->
        <register>
          <name>CT_HALT_COUNTER_AND_EVENT</name>
          <description>Halt counter AND event register</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Halt_Counter_0_AND_event -->
            <field>
              <name>HALT_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
                         For 32 bit counter mode AND expression valids for AND event in stop counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Halt_Counter_0_AND_vld -->
            <field>
              <name>HALT_COUNTER_0_AND_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering AND event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_AND_event -->
            <field>
              <name>HALT_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
                       For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_AND_vld -->
            <field>
              <name>HALT_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_HALT_COUNTER_OR_EVENT: Halt counter OR event register -->
        <!-- REGISTER 26 -->
        <register>
          <name>CT_HALT_COUNTER_OR_EVENT</name>
          <description>Halt counter OR event register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Halt_Counter_0_OR_event -->
            <field>
              <name>HALT_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Halt Counter 0 event
                     For 32 bit counter mode OR expression valids for OR event in Halt counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Halt_Counter_0_OR_vld -->
            <field>
              <name>HALT_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_OR_event -->
            <field>
              <name>HALT_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Halt counter event
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Halt_Counter_1_OR_vld -->
            <field>
              <name>HALT_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_EVENT_SEL: Increment counter event select register -->
        <!-- REGISTER 27 -->
        <register>
          <name>CT_INCREMENT_COUNTER_EVENT_SEL</name>
          <description>Increment counter event select register</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Increment_Counter_0_event_sel -->
            <field>
              <name>INCREMENT_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Incrementing the Counter 0
                       For 32 bit counter mode: Event select for Incrementing counter
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_even -->
            <field>
              <name>INCREMENT_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Incrementing the Counter 1
                     For 32 bit counter mode: Invalid
          </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_AND_EVENT: Increment counter AND event register -->
        <!-- REGISTER 28 -->
        <register>
          <name>CT_INCREMENT_COUNTER_AND_EVENT</name>
          <description>Increment counter AND event register</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Increment_Counter_0_AND_event -->
            <field>
              <name>INCREMENT_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
                     For 32 bit counter mode AND expression valids for AND event in stop counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Increment_Counter_0_AND_vld -->
            <field>
              <name>INCREMENT_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_AND_event -->
            <field>
              <name>INCREMENT_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_AND_vld -->
            <field>
              <name>INCREMENT_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INCREMENT_COUNTER_OR_EVENT: Increment counter OR event register -->
        <!-- REGISTER 29 -->
        <register>
          <name>CT_INCREMENT_COUNTER_OR_EVENT</name>
          <description>Increment counter OR event register</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Increment_Counter_0_OR_event -->
            <field>
              <name>INCREMENT_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Increment Counter 0 event
                     For 32 bit counter mode OR expression valids for OR event in Increment counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Increment_Counter_0_OR_vld -->
            <field>
              <name>INCREMENT_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_OR_event -->
            <field>
              <name>INCREMENT_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Increment counter event
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Increment_Counter_1_OR_vld -->
            <field>
              <name>INCREMENT_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED5</name>
              <description>Reserved5</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_EVENT_SEL:Capture counter event select register -->
        <!-- REGISTER 30 -->
        <register>
          <name>CT_CAPTURE_COUNTER_EVENT_SEL</name>
          <description>Capture counter event select register</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Capture_Counter_0_event_sel -->
            <field>
              <name>CAPTURE_COUNTER_0_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Capturing the Counter 0
                       For 32 bit counter mode: Event select for Capturing counter
          </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_event_sel -->
            <field>
              <name>CAPTURE_COUNTER_1_EVENT_SEL</name>
              <description>For two 16 bit counters mode: Event select for Capturing the Counter 1
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_AND_EVENT: Capture counter AND event register -->
        <!-- REGISTER 31 -->
        <register>
          <name>CT_CAPTURE_COUNTER_AND_EVENT</name>
          <description>Capture counter AND event register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Capture_Counter_0_AND_event -->
            <field>
              <name>CAPTURE_COUNTER_0_AND_EVENT</name>
              <description>For two 16 bit counter mode: AND expression valids for AND event in stop Counter 0 event
                       For 32 bit counter mode AND expression valids for AND event in stop counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Capture_Counter_0_AND_vld -->
            <field>
              <name>CAPTURE_COUNTER_0_AND_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_AND_event -->
            <field>
              <name>CAPTURE_COUNTER_1_AND_EVENT</name>
              <description>For two 16 bit counters mode: AND expression valids for AND event in stop counter event
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_AND_vld -->
            <field>
              <name>CAPTURE_COUNTER_1_AND_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_CAPTURE_COUNTER_OR_EVENT: Capture counter OR event register -->
        <!-- REGISTER 32 -->
        <register>
          <name>CT_CAPTURE_COUNTER_OR_EVENT</name>
          <description>Capture counter OR event register</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0XF000F</resetMask>
          <fields>
            <!-- Capture_Counter_0_OR_event -->
            <field>
              <name>CAPTURE_COUNTER_0_OR_EVENT</name>
              <description>For two 16 bit counter mode: OR expression valids for OR event in Capture Counter 0 event
                     For 32 bit counter mode OR expression valids for OR event in Capture counter event
        </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Capture_Counter_0_OR_vld -->
            <field>
              <name>CAPTURE_COUNTER_0_OR_VLD</name>
              <description>none</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_OR_event -->
            <field>
              <name>CAPTURE_COUNTER_1_OR_EVENT</name>
              <description>For two 16 bit counters mode: OR expression valids for OR event in Capture counter event
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Capture_Counter_1_OR_vld -->
            <field>
              <name>CAPTURE_COUNTER_1_OR_VLD</name>
              <description>none</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_EVENT_SEL: Output event select register -->
        <!-- REGISTER 33 -->
        <register>
          <name>CT_OUTPUT_EVENT_SEL</name>
          <description>Output event select register</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- output_event_sel -->
            <field>
              <name>OUTPUT_EVENT_SEL_0</name>
              <description>For two 16 bit counters mode: Event select for output event from Counter 0
                     For 32 bit counter mode: Event select for output event
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_event_sel -->
            <field>
              <name>OUTPUT_EVENT_SEL_1</name>
              <description>For two 16 bit counters mode: Event select for output event from counter 1
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_AND_EVENT:Output AND event Register-->
        <!-- REGISTER 34 -->
        <register>
          <name>CT_OUTPUT_AND_EVENT_REG</name>
          <description>Output AND event Register</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- output_0_AND_event -->
            <field>
              <name>OUTPUT_0_AND_EVENT</name>
              <description>AND expression for AND event in output Counter_0 event.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_0_and_vld -->
            <field>
              <name>OUTPUT_0_AND_VLD</name>
              <description>AND expression for AND event in output Counter_0 event.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_AND_event -->
            <field>
              <name>OUTPUT_1_AND_EVENT</name>
              <description>AND expression for AND event in output Counter_1 event.</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_and_vld -->
            <field>
              <name>OUTPUT_1_AND_VLD</name>
              <description>AND expression for AND event in output Counter_1 event.</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_OR_EVENT: Output OR event Register -->
        <!-- REGISTER 35 -->
        <register>
          <name>CT_OUTPUT_OR_EVENT</name>
          <description>Output OR event Register</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- output_0_OR_event -->
            <field>
              <name>OUTPUT_0_OR_EVENT</name>
              <description>OR expression for OR event in output Counter_0 event</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- output_0_or_vld -->
            <field>
              <name>OUTPUT_0_OR_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering OR event</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_OR_event -->
            <field>
              <name>OUTPUT_1_OR_EVENT</name>
              <description>OR expression for OR event in output Counter_0 event</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- output_1_or_vld -->
            <field>
              <name>OUTPUT_1_OR_VLD</name>
              <description>Indicates which bits in [3:0] are valid for considering OR event</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_EVENT_SEL: Interrupt Event Select Register -->
        <!-- REGISTER 36 -->
        <register>
          <name>CT_INTR_EVENT_SEL</name>
          <description>Interrupt Event Select Register</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- intr_event_sel -->
            <field>
              <name>INTR_EVENT_SEL_0</name>
              <description>For two 16 bit counters mode: Event select for interrupt event from Counter 0
                       For 32 bit counter mode: Event select for output event
        </description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_event_sel -->
            <field>
              <name>INTR_EVENT_SEL_1</name>
              <description>For two 16 bit counters mode: Event select for interrupt event from counter 1
                     For 32 bit counter mode : Invalid
        </description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_AND_EVENT: Interrupt AND Event Register -->
        <!-- REGISTER 37 -->
        <register>
          <name>CT_INTR_AND_EVENT</name>
          <description>Interrupt AND Event Register</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Intr_0_and_event -->
            <field>
              <name>INTR_0_AND_EVENT</name>
              <description>None</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_0_and_vld -->
            <field>
              <name>INTR_0_AND_VLD</name>
              <description>None</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_and_event -->
            <field>
              <name>INTR_1_AND_EVENT</name>
              <description>None</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_and_vld -->
            <field>
              <name>INTR_1_AND_VLD</name>
              <description>None</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CT_INTR_OR_EVENT: Interrupt OR Event Register-->
        <!-- REGISTER 38 -->
        <register>
          <name>CT_INTR_OR_EVENT_REG</name>
          <description>Interrupt OR Event Register</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0X3F003F</resetMask>
          <fields>
            <!-- Intr_0_OR_event -->
            <field>
              <name>INTR_0_OR_EVENT</name>
              <description>None</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intr_0_OR_vld -->
            <field>
              <name>INTR_0_OR_VLD</name>
              <description>None</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_or_event -->
            <field>
              <name>INTR_1_OR_EVENT</name>
              <description>None</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- intr_1_or_vld -->
            <field>
              <name>INTR_1_OR_VLD</name>
              <description>None</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>Reserved4</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--CT_RE_FE_RFE_LEV0_LEV1_EVENT_ENABLE_REG-->
        <register>
          <name>CT_RE_FE_RFE_LEV0_LEV1_EVENT_ENABLE_REG</name>
          <description>Rising Edge Falling Edge Rising and Falling Edge level0 level1 event enable register</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000FFFFF</resetValue>
          <resetMask>0X000FFFFF</resetMask>
          <fields>
            <!--Input_Event_RE_Enable-->
            <field>
              <name>Input_Event_RE_Enable</name>
              <description>Input event rising edge enables</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_FE_Enable-->
            <field>
              <name>Input_Event_FE_Enable</name>
              <description>Input event falling edge enables:</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_RFE_Enable-->
            <field>
              <name>Input_Event_RFE_Enable</name>
              <description>Input event rising and falling edge enables</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_lev0_Enable-->
            <field>
              <name>Input_Event_lev0_Enable</name>
              <description>Input event level0 enables</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input_Event_lev1_Enable-->
            <field>
              <name>Input_Event_lev1_Enable</name>
              <description>Input event level1 enables</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- CT MUX SELECT REGISTERS -->
    <peripheral>
      <name>CT_MUX_REG</name>
      <version>1.0</version>
      <description>Configurable timer is used in counting clocks, events and states with reference clock
               	   external clock and system clock
	    </description>
      <groupName>CT</groupName>
      <baseAddress>0x4506F000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x20</size>
        <usage>registers</usage>
      </addressBlock>
      <!-- CT_MUX_SEL_0_REG: MUX_SEL_0_REG Register -->
      <!-- REGISTER 39 -->
      <registers>
        <register>
          <name>CT_MUX_SEL_0_REG</name>
          <description>MUX_SEL_0_REG Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- mux_sel_0 -->
            <field>
              <name>MUX_SEL_0</name>
              <description>Select value to select first output value fifo_0_full[0] 
			               out of all the fifo_0_full_muxed signals of counter 0
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_MUX_SEL_1_REG: MUX_SEL_1_REG Register -->
        <!-- REGISTER 40 -->
        <register>
          <name>CT_MUX_SEL_1_REG</name>
          <description>MUX_SEL_1_REG Register</description>
          <addressOffset>0x004</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- mux_sel_1 -->
            <field>
              <name>MUX_SEL_1</name>
              <description>Select value to select first output value fifo_0_full[1] 
			               out of all the fifo_0_full_muxed signals of counter 0
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_MUX_SEL_2_REG: MUX_SEL_2_REG Register -->
        <!-- REGISTER 41 -->
        <register>
          <name>CT_MUX_SEL_2_REG</name>
          <description>MUX_SEL_2_REG Register</description>
          <addressOffset>0x008</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- mux_sel_2 -->
            <field>
              <name>MUX_SEL_2</name>
              <description>Select value to select first output value fifo_1_full[0] 
			               out of all the fifo_1_full_muxed signals of counter 1
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_MUX_SEL_3_REG: MUX_SEL_3_REG Register -->
        <!-- REGISTER 42 -->
        <register>
          <name>CT_MUX_SEL_3_REG</name>
          <description>MUX_SEL_3_REG Register</description>
          <addressOffset>0x00C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000FFFF</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- mux_sel_3 -->
            <field>
              <name>MUX_SEL_3</name>
              <description>Select value to select first output value fifo_1_full[1] 
			               out of all the fifo_1_full_muxed signals of counter 1
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_EVENT1_ADC_SEL Register -->
        <!-- REGISTER 43 -->
        <register>
          <name>CT_OUTPUT_EVENT1_ADC_SEL</name>
          <description>OUTPUT_EVENT_ADC_SEL Register</description>
          <addressOffset>0x018</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000FFFF</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- output_event_adc_sel -->
            <field>
              <name>OUTPUT_EVENT_ADC_SEL</name>
              <description>Select signals to select one output event out of all the output events output_event_0
			               output_event_1, output_event_2, output_event_3 to enable ADC module
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CT_OUTPUT_EVENT2_ADC_SEL Register -->
        <!-- REGISTER 43 -->
        <register>
          <name>CT_OUTPUT_EVENT2_ADC_SEL</name>
          <description>OUTPUT_EVENT_ADC_SEL Register</description>
          <addressOffset>0x01C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000FFFF</resetValue>
          <resetMask>0xF</resetMask>
          <fields>
            <!-- output_event_adc_sel -->
            <field>
              <name>OUTPUT_EVENT_ADC_SEL</name>
              <description>Select signals to select one output event out of all the output events output_event_0
			               output_event_1, output_event_2, output_event_3 to enable ADC module
			  </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- ENHANCED GENERAL PERPOSE INPUT/OUTPUT(EGPIO) -->
    <peripheral>
      <name>EGPIO</name>
      <version>1.0</version>
      <description>ENHANCED GENERAL PERPOSE INPUT/OUTPUT</description>
      <groupName>EGPIO</groupName>
      <baseAddress>0x46130000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0000</offset>
        <size>0x1260</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>EGPIO_GROUP_0</name>
        <value>50</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_GROUP_1</name>
        <value>51</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_0</name>
        <value>52</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_1</name>
        <value>53</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_2</name>
        <value>54</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_3</name>
        <value>55</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_4</name>
        <value>56</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_5</name>
        <value>57</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_6</name>
        <value>58</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_7</name>
        <value>59</value>
      </interrupt>
      <registers>
        <!-- GPIO_CONFIG_REG -->
        <!--REGISTER 1-->
        <cluster>
          <dim>80</dim>
          <dimIncrement>0x10</dimIncrement>
          <name>PIN_CONFIGn</name>
          <description>Pin configuration registers(0-79)</description>
          <addressOffset>0x0000</addressOffset>
          <register>
            <name>GPIO_CONFIG_REG__n_</name>
            <description>GPIO Configuration Register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!-- Direction  -->
              <field>
                <name>DIRECTION</name>
                <description>Direction of the GPIO pin</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Output</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Input</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- Port Mask  -->
              <field>
                <name>PORTMASK</name>
                <description>Port mask value</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <!-- Mode  -->
              <field>
                <name>MODE</name>
                <description>GPIO Pin Mode Used for GPIO Pin Muxing</description>
                <bitRange>[5:2]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Mode0</name>
                    <description>000: Mode 0</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode1</name>
                    <description>001:Mode 1</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode2</name>
                    <description>010:Mode 2</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode3</name>
                    <description>011:Mode 3</description>
                    <value>3</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode4</name>
                    <description>100:Mode 4</description>
                    <value>4</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode5</name>
                    <description>101: Mode 5</description>
                    <value>5</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode6</name>
                    <description>110:Mode 6</description>
                    <value>6</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode7</name>
                    <description>111:Mode 7</description>
                    <value>7</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[7:6]</bitRange>
                <access>read-write</access>
              </field>
              <!-- Group Interrupt 1 enable  -->
              <field>
                <name>GROUP_INTERRUPT1_ENABLE</name>
                <description>When set, the corresponding GPIO is pin is selected for group intr 1 generation</description>
                <bitRange>[8:8]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>enable the gpio group interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disable the gpio group interrupt1</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- Group Interrupt 1 Polarity  -->
              <field>
                <name>GROUP_INTERRUPT1_POLARITY</name>
                <description>Decides the active value of the pin to be considered for group interrupt 1 generation</description>
                <bitRange>[9:9]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>group interrupt gets generated when gpio input pin status is zero</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>grp interrupt gets generated when gpio input pin status is 1</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- Group Interrupt 2 enable  -->
              <field>
                <name>GROUP_INTERRUPT2_ENABLE</name>
                <description>When set, the corresponding GPIO is pin is selected for group intr 2 generation</description>
                <bitRange>[10:10]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>enable the gpio group interrupt2</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disable the gpio group interrupt2</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- Group Interrupt 2 Polarity  -->
              <field>
                <name>GROUP_INTERRUPT2_POLARITY</name>
                <description>Decides the active value of the pin to be considered for group interrupt 2 generation</description>
                <bitRange>[11:11]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>group interrupt gets generated when gpio input pin status is zero</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>grp interrupt gets generated when gpio input pin status is 1</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Group Interrupt 3 enable  -->
              <field>
                <name>GROUP_INTERRUPT3_ENABLE</name>
                <description>When set, the corresponding GPIO is pin is selected for group intr 3 generation</description>
                <bitRange>[12:12]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>enable the gpio group interrupt2</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disable the gpio group interrupt2</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Group Interrupt 3 Polarity  -->
              <field>
                <name>GROUP_INTERRUPT3_POLARITY</name>
                <description>Decides the active value of the pin to be considered for group interrupt 3 generation</description>
                <bitRange>[13:13]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>group interrupt gets generated when gpio input pin status is zero</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>grp interrupt gets generated when gpio input pin status is 1</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Group Interrupt 4 enable  -->
              <field>
                <name>GROUP_INTERRUPT4_ENABLE</name>
                <description>When set, the corresponding GPIO is pin is selected for group intr 4 generation</description>
                <bitRange>[14:14]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>enable the gpio group interrupt2</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disable the gpio group interrupt2</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Group Interrupt 4 Polarity  -->
              <field>
                <name>GROUP_INTERRUPT4_POLARITY</name>
                <description>Decides the active value of the pin to be considered for group interrupt 4 generation</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>group interrupt gets generated when gpio input pin status is zero</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>grp interrupt gets generated when gpio input pin status is 1</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <field>
                <name>RESERVED3</name>
                <description>Reserved3</description>
                <bitRange>[31:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>BIT_LOAD_REG__n_</name>
            <description>Bit Load</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Bit Load -->
              <field>
                <name>BIT_LOAD</name>
                <description>Loads 0th bit on to the pin on write. And reads the value on pin on read into 0th bit</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:1]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>WORD_LOAD_REG__n_</name>
            <description>Word Load</description>
            <addressOffset>0x08</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Word Load -->
              <field>
                <name>WORD_LOAD</name>
                <description>Loads 1 on the pin when any of the bit in load value is 1. On read pass the bit status into all bits.</description>
                <bitRange>[15:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- PORT_LOAD_REG -->
        <!-- REGISTER 0 to 10 -->
        <cluster>
          <dim>6</dim>
          <dimIncrement>0x40</dimIncrement>
          <name>PORT_CONFIGn</name>
          <description>Port configuration registers (0-5)</description>
          <addressOffset>0x1000</addressOffset>
          <register>
            <name>PORT_LOAD_REG__n_</name>
            <description>Port Load</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Port Load -->
              <field>
                <name>PORT_LOAD</name>
                <description>Loads the value on to pin on write. And reads the value of load register on read</description>
                <bitRange>[15:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--RESERVED -->
              <field>
                <name>RES</name>
                <description>RES</description>
                <bitRange>[31:16]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- PORT_SET_REG -->
          <!-- REGISTERS 0 to 10-->
          <register>
            <name>PORT_SET_REG__n_</name>
            <description>Port Set Register</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!--Port Set -->
              <field>
                <name>PORT_SET</name>
                <description>Sets the pin when corresponding bit is high. Writing zero has no effect. </description>
                <bitRange>[15:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--RESERVED -->
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- PORT_CLEAR_REG -->
          <!-- REGISTER 0 to 10 -->
          <register>
            <name>PORT_CLEAR_REG__n_</name>
            <description>Port Clear Register</description>
            <addressOffset>0x08</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Port Clear -->
              <field>
                <name>PORT_CLEAR</name>
                <description>Clears the pin when corresponding bit is high. Writing zero has no effect.</description>
                <bitRange>[15:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- PORT_MASKED_LOAD_REG -->
          <!-- REGISTER 0 to 10 -->
          <register>
            <name>PORT_MASKED_LOAD_REG__n_</name>
            <description>Port Masked Load Register</description>
            <addressOffset>0x0C</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Port Clear -->
              <field>
                <name>PORT_MASKED_LOAD</name>
                <description>Only loads into pins which are not masked. On read, pass only status unmasked pins</description>
                <bitRange>[15:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- PORT_TOGGLE_REG_0 -->
          <!-- REGISTER 0 to 10 -->
          <register>
            <name>PORT_TOGGLE_REG__n_</name>
            <description>Port Toggle Register</description>
            <addressOffset>0x10</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Port Toggle -->
              <field>
                <name>PORT_TOGGLE</name>
                <description>Toggles the pin when corresponding bit is high. Writing zero has not effect.</description>
                <bitRange>[15:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- PORT_READ_REG_0 -->
          <!-- REGISTER 0 to 10 -->
          <register>
            <name>PORT_READ_REG__n_</name>
            <description>Port Read Register</description>
            <addressOffset>0x14</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!--Port Read -->
              <field>
                <name>PORT_READ</name>
                <description>Reads the value on GPIO pins irrespective of the pin mode.</description>
                <bitRange>[15:0]</bitRange>
                <access>read-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- GPIO_INTR_CTRL_REG -->
        <!-- REGISTER 0 to 7 -->
        <cluster>
          <dim>6</dim>
          <dimIncrement>0x08</dimIncrement>
          <name>INTRn</name>
          <description>GPIO Interrupt related registers (0-5)</description>
          <addressOffset>0x1200</addressOffset>
          <register>
            <name>GPIO_INTR_CTRL__n_</name>
            <description>GPIO Interrupt Control Register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000010</resetValue>
            <resetMask>0x3F1F</resetMask>
            <fields>
              <!--Level High Enable -->
              <field>
                <name>LEVEL_HIGH_ENABLE</name>
                <description>enables interrupt generation when pin level is 1</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disabled</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Interrupt enabled</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Level Low Enable -->
              <field>
                <name>LEVEL_LOW_ENABLE</name>
                <description>enables interrupt generation when pin level is 0</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disabled</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Interrupt enabled</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Rise Edge Enable -->
              <field>
                <name>RISE_EDGE_ENABLE</name>
                <description>enables interrupt generation when rising edge is detected on pin</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disabled</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Interrupt enabled</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Fall Edge Enable -->
              <field>
                <name>FALL_EDGE_ENABLE</name>
                <description>enables interrupt generation when Falling edge is detected on pin</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disabled</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Interrupt enabled</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Mask -->
              <field>
                <name>MASK</name>
                <description>Masks the interrupt. Interrupt will still be seen in status register when enabled</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Interrupt masked</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Interrupt unmasked</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[7:5]</bitRange>
                <access>read-write</access>
              </field>
              <!--Pin Number-->
              <field>
                <name>PIN_NUMBER</name>
                <description>GPIO Pin to be chosen for interrupt generation</description>
                <bitRange>[11:8]</bitRange>
                <access>read-write</access>
              </field>
              <!--Port Number-->
              <field>
                <name>PORT_NUMBER</name>
                <description>GPIO Port to be chosen for interrupt generation</description>
                <bitRange>[13:12]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED2</name>
                <description>Reserved2</description>
                <bitRange>[31:14]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- GPIO_INTR_STATUS -->
          <!-- REGISTER 0 to 7 -->
          <register>
            <name>GPIO_INTR_STATUS__n_</name>
            <description>GPIO Interrupt Status Register</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x1F</resetMask>
            <fields>
              <!--Interrupt Status-->
              <field>
                <name>INTERRUPT_STATUS</name>
                <description>Gets set when interrupt is enabled and occurs.</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Writing 0 has not effect</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>When 1 is written it gets cleared. Also clears rise edge and fall edge status bits</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Rise Edge Status-->
              <field>
                <name>RISE_EDGE_STATUS</name>
                <description>Gets set when rise edge is enabled and occurs.</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Writing 0 has not effect</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>When 1 is written it gets cleared.</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Fall Edge Status-->
              <field>
                <name>FALL_EDGE_STATUS</name>
                <description>Gets set when Fall edge is enabled and occurs.</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Writing 0 has not effect</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>When 1 is written it gets cleared.</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Mask Set-->
              <field>
                <name>MASK_SET</name>
                <description>Mask set</description>
                <bitRange>[3:3]</bitRange>
                <access>write-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>On read, this bit should result it in 0</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>When 1 is written mask bit will get set</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Mask Clear-->
              <field>
                <name>MASK_CLEAR</name>
                <description>Mask Clear</description>
                <bitRange>[4:4]</bitRange>
                <access>write-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>On read, this bit should result it in 0</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>When 1 is written mask bit gets cleared</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:5]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- GPIO_GRP_INTR_0_CTRL_REG -->
        <!-- REGISTER 1 -->
        <cluster>
          <dim>4</dim>
          <dimIncrement>0x08</dimIncrement>
          <name>GPIO_GRP_INTRn</name>
          <description>GPIO Group interrupt related registers (0-3)</description>
          <addressOffset>0x1240</addressOffset>
          <register>
            <name>GPIO_GRP_INTR_CTRL_REG__n_</name>
            <description>GPIO Interrupt 0 Control Register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000010</resetValue>
            <resetMask>0x1F</resetMask>
            <fields>
              <!--AND/OR-->
              <field>
                <name>AND_OR</name>
                <description>AND/OR</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>AND</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>OR</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Level/Edge-->
              <field>
                <name>LEVEL_EDGE</name>
                <description>Level/Edge</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Level</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Edge</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Enable Wakeup-->
              <field>
                <name>ENABLE_WAKEUP</name>
                <description>For wakeup generation, actual pin status has to be seen(before double ranking point)</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <!--Enable Interrupt-->
              <field>
                <name>ENABLE_INTERRUPT</name>
                <description>Enable Interrupt</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Disable</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Enable</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Mask -->
              <field>
                <name>MASK</name>
                <description>Mask </description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Mask</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>unmask</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:5]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- GPIO_GRP_INTR_0_STATUS_REG -->
          <!-- REGISTER 1 -->
          <register>
            <name>GPIO_GRP_INTR_STS__n_</name>
            <description>GPIO Interrupt 0 Status Register</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000010</resetValue>
            <resetMask>0x1B</resetMask>
            <fields>
              <!--Interrupt Status-->
              <field>
                <name>INTERRUPT_STATUS</name>
                <description>Interrupt status is available in this bit when interrupt is enabled and generated. 
							When 1 is written, interrupt gets cleared.</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--Wakeup-->
              <field>
                <name>WAKEUP</name>
                <description>Double ranked version of wakeup. Gets set when wakeup is enabled and occurs. 
							When 1 is written it gets cleared</description>
                <bitRange>[1:1]</bitRange>
                <access>read-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <!--Mask set -->
              <field>
                <name>MASK_SET</name>
                <description>Gives zero on read</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <!--Mask Clear -->
              <field>
                <name>MASK_CLEAR</name>
                <description>Gives zero on read</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED2</name>
                <description>Reserved2</description>
                <bitRange>[31:5]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
      </registers>
    </peripheral>
    <!--ULP EGPIO -->
    <peripheral>
      <name>ULP_EGPIO</name>
      <version>1.0</version>
      <description>ENHANCED GENERAL PERPOSE INPUT/OUTPUT</description>
      <groupName>EGPIO</groupName>
      <baseAddress>0x2404C000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0000</offset>
        <size>0x1260</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>ULP_EGPIO_GROUP</name>
        <value>19</value>
      </interrupt>
      <interrupt>
        <name>ULP_EGPIO_PIN</name>
        <value>18</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_0</name>
        <value>52</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_1</name>
        <value>53</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_2</name>
        <value>54</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_3</name>
        <value>55</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_4</name>
        <value>56</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_5</name>
        <value>57</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_6</name>
        <value>58</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_PIN_7</name>
        <value>59</value>
      </interrupt>
      <registers>
        <!-- GPIO_CONFIG_REG -->
        <!--REGISTER 1-->
        <cluster>
          <dim>11</dim>
          <dimIncrement>0x10</dimIncrement>
          <name>PIN_CONFIGn</name>
          <description>GPIO Pint configuration related registers(0-79)</description>
          <addressOffset>0x0000</addressOffset>
          <register>
            <name>GPIO_CONFIG_REG__n_</name>
            <description>GPIO Configuration Register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000001</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <!-- Direction  -->
              <field>
                <name>DIRECTION</name>
                <description>Direction of the GPIO pin</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Output</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Input</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- Port Mask  -->
              <field>
                <name>PORTMASK</name>
                <description>Port mask value</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <!-- Mode  -->
              <field>
                <name>MODE</name>
                <description>GPIO Pin Mode Used for GPIO Pin Muxing</description>
                <bitRange>[5:2]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Mode0</name>
                    <description>000: Mode 0</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode1</name>
                    <description>001:Mode 1</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode2</name>
                    <description>010:Mode 2</description>
                    <value>2</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode3</name>
                    <description>011:Mode 3</description>
                    <value>3</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode4</name>
                    <description>100:Mode 4</description>
                    <value>4</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode5</name>
                    <description>101: Mode 5</description>
                    <value>5</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode6</name>
                    <description>110:Mode 6</description>
                    <value>6</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Mode7</name>
                    <description>111:Mode 7</description>
                    <value>7</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[7:6]</bitRange>
                <access>read-write</access>
              </field>
              <!-- Group Interrupt 1 enable  -->
              <field>
                <name>GROUP_INTERRUPT1_ENABLE</name>
                <description>When set, the corresponding GPIO is pin is selected for group intr 1 generation</description>
                <bitRange>[8:8]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>enable the gpio group interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disable the gpio group interrupt1</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- Group Interrupt 1 Polarity  -->
              <field>
                <name>GROUP_INTERRUPT1_POLARITY</name>
                <description>Decides the active value of the pin to be considered for group interrupt 1 generation</description>
                <bitRange>[9:9]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>group interrupt gets generated when gpio input pin status is zero</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>grp interrupt gets generated when gpio input pin status is 1</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- Group Interrupt 2 enable  -->
              <field>
                <name>GROUP_INTERRUPT2_ENABLE</name>
                <description>When set, the corresponding GPIO is pin is selected for group intr 2 generation</description>
                <bitRange>[10:10]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>enable the gpio group interrupt2</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disable the gpio group interrupt2</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- Group Interrupt 2 Polarity  -->
              <field>
                <name>GROUP_INTERRUPT2_POLARITY</name>
                <description>Decides the active value of the pin to be considered for group interrupt 2 generation</description>
                <bitRange>[11:11]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>group interrupt gets generated when gpio input pin status is zero</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>grp interrupt gets generated when gpio input pin status is 1</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED2</name>
                <description>Reserved2</description>
                <bitRange>[15:12]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED3</name>
                <description>Reserved3</description>
                <bitRange>[31:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>BIT_LOAD_REG__n_</name>
            <description>Bit Load</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Bit Load -->
              <field>
                <name>BIT_LOAD</name>
                <description>Loads 0th bit on to the pin on write. And reads the value on pin on read into 0th bit</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:1]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>WORD_LOAD_REG__n_</name>
            <description>Word Load</description>
            <addressOffset>0x08</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Word Load -->
              <field>
                <name>WORD_LOAD</name>
                <description>Loads 1 on the pin when any of the bit in load value is 1. On read pass the bit status into all bits.</description>
                <bitRange>[15:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- PORT_LOAD_REG -->
        <!-- REGISTER 0 to 10 -->
        <cluster>
          <dim>6</dim>
          <dimIncrement>0x18</dimIncrement>
          <name>PORT_CONFIGn</name>
          <description>GPIO port configuration related registers (0-5)</description>
          <addressOffset>0x1000</addressOffset>
          <register>
            <name>PORT_LOAD_REG__n_</name>
            <description>Port Load</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Port Load -->
              <field>
                <name>PORT_LOAD</name>
                <description>Loads the value on to pin on write. And reads the value of load register on read</description>
                <bitRange>[15:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--RESERVED -->
              <field>
                <name>RES</name>
                <description>RES</description>
                <bitRange>[31:16]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <!-- PORT_SET_REG -->
          <!-- REGISTERS 0 to 10-->
          <register>
            <name>PORT_SET_REG__n_</name>
            <description>Port Set Register</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!--Port Set -->
              <field>
                <name>PORT_SET</name>
                <description>Sets the pin when corresponding bit is high. Writing zero has no effect. </description>
                <bitRange>[15:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--RESERVED -->
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- PORT_CLEAR_REG -->
          <!-- REGISTER 0 to 10 -->
          <register>
            <name>PORT_CLEAR_REG__n_</name>
            <description>Port Clear Register</description>
            <addressOffset>0x08</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Port Clear -->
              <field>
                <name>PORT_CLEAR</name>
                <description>Clears the pin when corresponding bit is high. Writing zero has no effect.</description>
                <bitRange>[15:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- PORT_MASKED_LOAD_REG -->
          <!-- REGISTER 0 to 10 -->
          <register>
            <name>PORT_MASKED_LOAD_REG__n_</name>
            <description>Port Masked Load Register</description>
            <addressOffset>0x0C</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Port Clear -->
              <field>
                <name>PORT_MASKED_LOAD</name>
                <description>Only loads into pins which are not masked. On read, pass only status unmasked pins</description>
                <bitRange>[15:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- PORT_TOGGLE_REG_0 -->
          <!-- REGISTER 0 to 10 -->
          <register>
            <name>PORT_TOGGLE_REG__n_</name>
            <description>Port Toggle Register</description>
            <addressOffset>0x10</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetMask>0xFFFF</resetMask>
            <fields>
              <!--Port Toggle -->
              <field>
                <name>PORT_TOGGLE</name>
                <description>Toggles the pin when corresponding bit is high. Writing zero has not effect.</description>
                <bitRange>[15:0]</bitRange>
                <access>write-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <!-- PORT_READ_REG_0 -->
          <!-- REGISTER 0 to 10 -->
          <register>
            <name>PORT_READ_REG__n_</name>
            <description>Port Read Register</description>
            <addressOffset>0x14</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!--Port Read -->
              <field>
                <name>PORT_READ</name>
                <description>Reads the value on GPIO pins irrespective of the pin mode.</description>
                <bitRange>[15:0]</bitRange>
                <access>read-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- GPIO_INTR_CTRL_REG -->
        <!-- REGISTER 0 to 7 -->
        <cluster>
          <dim>6</dim>
          <dimIncrement>0x08</dimIncrement>
          <name>INTRn</name>
          <description>GPIO interrupt related registers(0-5)</description>
          <addressOffset>0x1200</addressOffset>
          <register>
            <name>GPIO_INTR_CTRL__n_</name>
            <description>GPIO Interrupt Control Register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000010</resetValue>
            <resetMask>0x3F1F</resetMask>
            <fields>
              <!--Level High Enable -->
              <field>
                <name>LEVEL_HIGH_ENABLE</name>
                <description>enables interrupt generation when pin level is 1</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disabled</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Interrupt enabled</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Level Low Enable -->
              <field>
                <name>LEVEL_LOW_ENABLE</name>
                <description>enables interrupt generation when pin level is 0</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disabled</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Interrupt enabled</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Rise Edge Enable -->
              <field>
                <name>RISE_EDGE_ENABLE</name>
                <description>enables interrupt generation when rising edge is detected on pin</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disabled</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Interrupt enabled</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Fall Edge Enable -->
              <field>
                <name>FALL_EDGE_ENABLE</name>
                <description>enables interrupt generation when Falling edge is detected on pin</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>disabled</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Interrupt enabled</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Mask -->
              <field>
                <name>MASK</name>
                <description>Masks the interrupt. Interrupt will still be seen in status register when enabled</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Interrupt masked</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Interrupt unmasked</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[7:5]</bitRange>
                <access>read-write</access>
              </field>
              <!--Pin Number-->
              <field>
                <name>PIN_NUMBER</name>
                <description>GPIO Pin to be chosen for interrupt generation</description>
                <bitRange>[11:8]</bitRange>
                <access>read-write</access>
              </field>
              <!--Port Number-->
              <field>
                <name>PORT_NUMBER</name>
                <description>GPIO Port to be chosen for interrupt generation</description>
                <bitRange>[13:12]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED2</name>
                <description>Reserved2</description>
                <bitRange>[31:14]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- GPIO_INTR_STATUS -->
          <!-- REGISTER 0 to 7 -->
          <register>
            <name>GPIO_INTR_STATUS__n_</name>
            <description>GPIO Interrupt Status Register</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x1F</resetMask>
            <fields>
              <!--Interrupt Status-->
              <field>
                <name>INTERRUPT_STATUS</name>
                <description>Gets set when interrupt is enabled and occurs.</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Writing 0 has not effect</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>When 1 is written it gets cleared. Also clears rise edge and fall edge status bits</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Rise Edge Status-->
              <field>
                <name>RISE_EDGE_STATUS</name>
                <description>Gets set when rise edge is enabled and occurs.</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Writing 0 has not effect</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>When 1 is written it gets cleared.</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Fall Edge Status-->
              <field>
                <name>FALL_EDGE_STATUS</name>
                <description>Gets set when Fall edge is enabled and occurs.</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Writing 0 has not effect</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>When 1 is written it gets cleared.</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Mask Set-->
              <field>
                <name>MASK_SET</name>
                <description>Mask set</description>
                <bitRange>[3:3]</bitRange>
                <access>write-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>On read, this bit should result it in 0</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>When 1 is written mask bit will get set</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Mask Clear-->
              <field>
                <name>MASK_CLEAR</name>
                <description>Mask Clear</description>
                <bitRange>[4:4]</bitRange>
                <access>write-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>On read, this bit should result it in 0</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>When 1 is written mask bit gets cleared</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:5]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- GPIO_GRP_INTR_0_CTRL_REG -->
        <!-- REGISTER 1 -->
        <cluster>
          <dim>4</dim>
          <dimIncrement>0x08</dimIncrement>
          <name>GPIO_GRP_INTRn</name>
          <description>GPIO Group related registers (0-3)</description>
          <addressOffset>0x1240</addressOffset>
          <register>
            <name>GPIO_GRP_INTR_CTRL_REG__n_</name>
            <description>GPIO Interrupt 0 Control Register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000010</resetValue>
            <resetMask>0x1F</resetMask>
            <fields>
              <!--AND/OR-->
              <field>
                <name>AND_OR</name>
                <description>AND/OR</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>AND</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>OR</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Level/Edge-->
              <field>
                <name>LEVEL_EDGE</name>
                <description>Level/Edge</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Level</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Edge</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Enable Wakeup-->
              <field>
                <name>ENABLE_WAKEUP</name>
                <description>For wakeup generation, actual pin status has to be seen(before double ranking point)</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <!--Enable Interrupt-->
              <field>
                <name>ENABLE_INTERRUPT</name>
                <description>Enable Interrupt</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Disable</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>Enable</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--Mask -->
              <field>
                <name>MASK</name>
                <description>Mask </description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>Disable</name>
                    <description>Mask</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Enable</name>
                    <description>unmask</description>
                    <value>1</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:5]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <!-- GPIO_GRP_INTR_0_STATUS_REG -->
          <!-- REGISTER 1 -->
          <register>
            <name>GPIO_GRP_INTR_STS__n_</name>
            <description>GPIO Interrupt 0 Status Register</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000010</resetValue>
            <resetMask>0x1B</resetMask>
            <fields>
              <!--Interrupt Status-->
              <field>
                <name>INTERRUPT_STATUS</name>
                <description>Interrupt status is available in this bit when interrupt is enabled and generated. 
              When 1 is written, interrupt gets cleared.</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--Wakeup-->
              <field>
                <name>WAKEUP</name>
                <description>Double ranked version of wakeup. Gets set when wakeup is enabled and occurs. 
              When 1 is written it gets cleared</description>
                <bitRange>[1:1]</bitRange>
                <access>read-only</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <!--Mask set -->
              <field>
                <name>MASK_SET</name>
                <description>Gives zero on read</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <!--Mask Clear -->
              <field>
                <name>MASK_CLEAR</name>
                <description>Gives zero on read</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED2</name>
                <description>Reserved2</description>
                <bitRange>[31:5]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
      </registers>
    </peripheral>
    <!--SDIO Slave-->
    <peripheral>
      <!-- SDIO0 DECODER -->
      <name>SDIO_Slave</name>
      <version>1.0</version>
      <description>The Secure Digital I/O (SDIO) Slave module implements the functionality of the SDIO card based on the SDIO specifications version 2.0.</description>
      <baseAddress>0x20200000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x502</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!--SDIO_INTR_FN1_STATUS_CLEAR_REG -->
        <!-- REGISTER 1 -->
        <register>
          <name>SDIO_INTR_FN1_REG</name>
          <description>SDIO Function1 Interrupt Enable Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_CLR -->
            <field>
              <name>SDIO_WR_INT_CLR</name>
              <description>This bit is used to enable CMD53 write interrupt. =1 Interrupt is enabled =0 - Interrupt is disabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_RD_INT_CLR-->
            <field>
              <name>SDIO_RD_INT_CLR</name>
              <description>This bit is used to enable CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CSA_INT_CLR-->
            <field>
              <name>SDIO_CSA_INT_CLR</name>
              <description>This bit is used to enable CMD53 CSA interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CMD52_INT_CLR-->
            <field>
              <name>SDIO_CMD52_INT_CLR</name>
              <description>This bit is used to enable CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_PWR_LEV_INT_CLR-->
            <field>
              <name>SDIO_PWR_LEV_INT_CLR</name>
              <description>This bit is used to enable power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CRC_ERR_INT_CLR-->
            <field>
              <name>SDIO_CRC_ERR_INT_CLR</name>
              <description>This bit is used to enable CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_ABORT_INT_CLR-->
            <field>
              <name>SDIO_ABORT_INT_CLR</name>
              <description>This bit is used to enable abort interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_TOUT_INT_CLR-->
            <field>
              <name>SDIO_TOUT_INT_CLR</name>
              <description>This bit is used to enable ?read FIFO wait time over? interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_WR_RDZ-->
            <field>
              <name>SDIO_WR_RDZ</name>
              <description>SDIO_WR_RDZ</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CSA_ACCESS-->
            <field>
              <name>SDIO_CSA_ACCESS</name>
              <description>csa_window_access When set, indicates that current request is for CSA window register. This is only status signal</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN1_ENABLE_REG -->
        <!-- REGISTER 2 -->
        <register>
          <name>SDIO_INTR_FN1_ENABLE_REG</name>
          <description>SDIO Function1 Interrupt Enable Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_EN -->
            <field>
              <name>SDIO_WR_INT_EN</name>
              <description>This bit is used to enable CMD53 write interrupt.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_RD_INT_EN-->
            <field>
              <name>SDIO_RD_INT_EN</name>
              <description>This bit is used to enable CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CSA_INT_EN-->
            <field>
              <name>SDIO_CSA_INT_EN</name>
              <description>This bit is used to enable CMD53 CSA interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CMD52_INT_EN-->
            <field>
              <name>SDIO_CMD52_INT_EN</name>
              <description>This bit is used to enable CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_PWR_LEV_INT_EN-->
            <field>
              <name>SDIO_PWR_LEV_INT_EN</name>
              <description>This bit is used to enable power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CRC_ERR_INT_EN-->
            <field>
              <name>SDIO_CRC_ERR_INT_EN</name>
              <description>This bit is used to enable CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_ABORT_INT_EN-->
            <field>
              <name>SDIO_ABORT_INT_EN</name>
              <description>This bit is used to enable abort interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_TOUT_INT_EN-->
            <field>
              <name>SDIO_TOUT_INT_EN</name>
              <description>This bit is used to enable ?read FIFO wait time over? interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN1_MASK_REG -->
        <!-- REGISTER 3 -->
        <register>
          <name>SDIO_INTR_FN1_MASK_REG</name>
          <description>SDIO Function1 Interrupt Mask Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_MSK -->
            <field>
              <name>SDIO_WR_INT_MSK</name>
              <description>This bit is used to mask CMD53 write interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_RD_INT_MSK-->
            <field>
              <name>SDIO_RD_INT_MSK</name>
              <description>This bit is used to mask CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CSA_MSK-->
            <field>
              <name>SDIO_CSA_MSK</name>
              <description>This bit is used to mask CMD53 CSA interrupt.Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CMD52_MSK-->
            <field>
              <name>SDIO_CMD52_MSK</name>
              <description>This bit is used to mask CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_PWR_LEV_MSK-->
            <field>
              <name>SDIO_PWR_LEV_MSK</name>
              <description>This bit is used to mask power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CRC_ERR_MSK-->
            <field>
              <name>SDIO_CRC_ERR_MSK</name>
              <description>This bit is used to mask CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_ABORT_MSK-->
            <field>
              <name>SDIO_ABORT_MSK</name>
              <description>This bit is used to mask abort interrupt Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_TOUT_MSK-->
            <field>
              <name>SDIO_TOUT_MSK</name>
              <description>This bit is used to mask read FIFO wait time over interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN1_UNMASK_REG -->
        <!-- REGISTER 4 -->
        <register>
          <name>SDIO_INTR_FN1_UNMASK_REG</name>
          <description>SDIO Function1 Interrupt UnMask Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_UNMSK -->
            <field>
              <name>SDIO_WR_INT_UNMSK</name>
              <description>This bit is used to unmask CMD53 write interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_RD_INT_UNMSK-->
            <field>
              <name>SDIO_RD_INT_UNMSK</name>
              <description>This bit is used to unmask CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CSA_UNMSK-->
            <field>
              <name>SDIO_CSA_UNMSK</name>
              <description>This bit is used to unmask CMD53 CSA interrupt.Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CMD52_UNMSK-->
            <field>
              <name>SDIO_CMD52_UNMSK</name>
              <description>This bit is used to unmask CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_PWR_LEV_UNMSK-->
            <field>
              <name>SDIO_PWR_LEV_UNMSK</name>
              <description>This bit is used to unmask power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_CRC_ERR_UNMSK-->
            <field>
              <name>SDIO_CRC_ERR_UNMSK</name>
              <description>This bit is used to unmask CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_ABORT_UNMSK-->
            <field>
              <name>SDIO_ABORT_UNMSK</name>
              <description>This bit is used to unmask abort interrupt Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_TOUT_UNMSK-->
            <field>
              <name>SDIO_TOUT_UNMSK</name>
              <description>This bit is used to unmask read FIFO wait time over interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_BLK_LEN_REG -->
        <!-- REGISTER 5 -->
        <register>
          <name>SDIO_BLK_LEN_REG</name>
          <description>SDIO Block Length Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <!-- SDIO_BLK_LEN -->
            <field>
              <name>SDIO_BLK_LEN</name>
              <description>Length of each block for the last received CMD53</description>
              <bitRange>[11:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SDIO_BLK_CNT_REG -->
        <!-- REGISTER 6 -->
        <register>
          <name>SDIO_BLK_CNT_REG</name>
          <description>SDIO Block Length Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <!-- SDIO_BLK_CNT -->
            <field>
              <name>SDIO_BLK_CNT</name>
              <description>Block count for the last received CMD53</description>
              <bitRange>[8:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SDIO_ADDRESS_REG -->
        <!-- REGISTER 7 -->
        <register>
          <name>SDIO_ADDRESS_REG</name>
          <description>SDIO Address Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <!-- SDIO_ADDR -->
            <field>
              <name>SDIO_ADDR</name>
              <description>Lower 16-bits of the 17-bit address field in the last received CMD53</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SDIO_CMD52_RDATA_REGISTER -->
        <!-- REGISTER 8 -->
        <register>
          <name>SDIO_CMD52_RDATA_REGISTER</name>
          <description>SDIO CMD52 Read data Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <!-- SDIO_INT_ERROR -->
            <field>
              <name>RDATA</name>
              <description>Data to be given to host for CMD52 slave mode access read command has to written into this register</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SDIO_CMD52_WDATA_REGISTER -->
        <!-- REGISTER 9 -->
        <register>
          <name>SDIO_CMD52_WDATA_REGISTER</name>
          <description>SDIO CMD52 Write data Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <resetValue>0XFF</resetValue>
          <access>read-only</access>
          <fields>
            <!-- SDIO_INT_ERROR -->
            <field>
              <name>WDATA</name>
              <description>Data from host in CMD52 slave mode access write command is available in this register</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_STATUS_REG -->
        <!-- REGISTER 10 -->
        <register>
          <name>SDIO_INTR_REG</name>
          <description>SDIO Interrupt Status Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <!-- SDIO_INT_ERROR -->
            <field>
              <name>SDIO_INT_ERROR</name>
              <description>Interrupt is pending because of error condition from any of the functions</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDIO_INT_FN1 -->
            <field>
              <name>SDIO_INT_FN1</name>
              <description>Interrupt is pending for function1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDIO_INT_FN2 -->
            <field>
              <name>SDIO_INT_FN2</name>
              <description>Interrupt is pending for function2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDIO_INT_FN3 -->
            <field>
              <name>SDIO_INT_FN3</name>
              <description>Interrupt is pending for function3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDIO_INT_FN4 -->
            <field>
              <name>SDIO_INT_FN4</name>
              <description>Interrupt is pending for function4</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDIO_INT_FN5 -->
            <field>
              <name>SDIO_INT_FN5</name>
              <description>Interrupt is pending for function5</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved5</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN_NUMBER_REG -->
        <!-- REGISTER 11 -->
        <register>
          <name>SDIO_INTR_FN_NUMBER_REG</name>
          <description>SDIO Interrupt Function Number Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <!-- SDIO_INTR_FN_NUM -->
            <field>
              <name>SDIO_INTR_FN_NUM</name>
              <description>Indicates the function number to which interrupt is pending.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SDIO_FIFO_STATUS_REG -->
        <!-- REGISTER 12 -->
        <register>
          <name>SDIO_FIFO_STATUS_REG</name>
          <description>SDIO FIFO Status Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <!-- SDIO_WFIFO_FULL -->
            <field>
              <name>SDIO_WFIFO_FULL</name>
              <description>When set, indicates that WFIFO is full WFIFO is used in SDIO reads from host for sending data from AHB to Host</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDIO_WFIFO_AFULL -->
            <field>
              <name>SDIO_WFIFO_AFULL</name>
              <description>When set, indicates that WFIFO is almost full</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDIO_RFIFO_EMPTY -->
            <field>
              <name>SDIO_RFIFO_EMPTY</name>
              <description>When set, indicates that RFIFO is empty RFIFO is used in SDIO writes from host for sending data from host to AHB</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDIO_RFIFO_AEMPTY -->
            <field>
              <name>SDIO_RFIFO_AEMPTY</name>
              <description>When set, indicates that RFIFO is almost empty</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDIO_CURRENT_FN_NUM -->
            <field>
              <name>SDIO_CURRENT_FN_NUM</name>
              <description>Indicates the function number of the last received command</description>
              <bitRange>[6:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDIO_BUS_CONTROL_STATE -->
            <field>
              <name>SDIO_BUS_CONTROL_STATE</name>
              <description>Indicates the function number of the last received command</description>
              <bitRange>[11:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SDIO_FIFO_OCC_REG -->
        <!-- REGISTER 13 -->
        <register>
          <name>SDIO_FIFO_OCC_REG</name>
          <description>SDIO FIFO Occupancy Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <!-- SDIO_WFIFO_OCC -->
            <field>
              <name>SDIO_WFIFO_OCC</name>
              <description>Indicates the occupancy level of the write FIFO</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SDIO_RFIFO_AVAIL -->
            <field>
              <name>SDIO_RFIFO_AVAIL</name>
              <description>Indicates the available space in the read FIFO</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SDIO_HOST_INTR_SET_REG -->
        <!-- REGISTER 14 -->
        <register>
          <name>SDIO_HOST_INTR_SET_REG</name>
          <description>SDIO Host Interrupt Set Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_INTSET_FN2 -->
            <field>
              <name>SDIO_INTSET_FN2</name>
              <description>This bit is used to raise an interrupt to host for function2.
                           Setting this bit will raise the interrupt
                           Clearing this bit has no effect</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_INTSET_FN3 -->
            <field>
              <name>SDIO_INTSET_FN3</name>
              <description>This bit is used to raise an interrupt to host for function3.
                           Setting this bit will raise the interrupt
                           Clearing this bit has no effect</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_INTSET_FN4-->
            <field>
              <name>SDIO_INTSET_FN4</name>
              <description>This bit is used to raise an interrupt to host for function4.
                           Setting this bit will raise the interrupt
                           Clearing this bit has no effect</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_INTSET_FN5-->
            <field>
              <name>SDIO_INTSET_FN5</name>
              <description>This bit is used to raise an interrupt to host for function5.
                           Setting this bit will raise the interrupt
                           Clearing this bit has no effect</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_HOST_INTR_CLEAR_REG -->
        <!-- REGISTER 15 -->
        <register>
          <name>SDIO_HOST_INTR_CLEAR_REG</name>
          <description>SDIO Host Interrupt Clear Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_INTCLR_FN2 -->
            <field>
              <name>SDIO_INTCLR_FN2</name>
              <description>This bit is used to clear the interrupt to host for function2.
                           Setting this bit will clear the interrupt
                           Clearing this bit has no effect</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_INTCLR_FN3 -->
            <field>
              <name>SDIO_INTCLR_FN3</name>
              <description>This bit is used to clear the interrupt to host for function3.
                           Setting this bit will clear the interrupt
                           Clearing this bit has no effect</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_INTCLR_FN4-->
            <field>
              <name>SDIO_INTCLR_FN4</name>
              <description>This bit is used to clear the interrupt to host for function4.
                           Setting this bit will clear the interrupt
                           Clearing this bit has no effectt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_INTCLR_FN5-->
            <field>
              <name>SDIO_INTCLR_FN5</name>
              <description>This bit is used to clear the interrupt to host for function5.
                           Setting this bit will clear the interrupt
                           Clearing this bit has no effect</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SDIO_RFIFO_DATA_REG : SDIO Read FIFO Data Register -->
        <!-- REGISTER 16 -->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <dimIndex>0-15</dimIndex>
          <name>SDIO_RFIFO_DATA_REGn</name>
          <description>SDIO Read FIFO Data Register (0-15) </description>
          <addressOffset>0x40</addressOffset>
          <register>
            <name>SDIO_RFIFO_DATA_REG_n_</name>
            <description>SDIO Read FIFO Data Register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>write-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <!--SDIO_RFIFO-->
              <field>
                <name>SDIO_RFIFO</name>
                <description>Data to be written into SDIO Read FIFO has to be written in this register.</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- SDIO_WFIFO_DATA_REG : SDIO Write FIFO Data Register -->
        <!-- REGISTER 17 -->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <dimIndex>0-15</dimIndex>
          <name>SDIO_WFIFO_DATA_REGn</name>
          <description>SDIO Write FIFO Data Register (0-15) </description>
          <addressOffset>0x80</addressOffset>
          <register>
            <name>SDIO_WFIFO_DATA_REG_n_</name>
            <description>SDIO Write FIFO Data Register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0xFFFFFFFF</resetMask>
            <fields>
              <!--SDIO_WFIFO-->
              <field>
                <name>SDIO_WFIFO</name>
                <description>SDIO Write FIFO data can be read through this register.</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!--SDIO_INTR_FN2_STATUS_CLEAR_REG -->
        <!-- REGISTER 18 -->
        <register>
          <name>SDIO_INTR_FN2_REG</name>
          <description>SDIO interrupt Function2</description>
          <addressOffset>0xC0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT-->
            <field>
              <name>SDIO_WR_INT</name>
              <description> This bit is used to enable CMD53 write interrupt. =1 Interrupt is enabled =0 - Interrupt is disabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT-->
            <field>
              <name>SDIO_RD_INT</name>
              <description>This bit is used to enable CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_INT -->
            <field>
              <name>SDIO_CSA_INT</name>
              <description>This bit is used to enable CMD53 CSA interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_INT-->
            <field>
              <name>SDIO_CMD52_INT</name>
              <description>This bit is used to enable CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_INT -->
            <field>
              <name>SDIO_PWR_LEV_INT</name>
              <description>This bit is used to enable power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_INT-->
            <field>
              <name>SDIO_CRC_ERR_INT</name>
              <description>This bit is used to enable CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_INT-->
            <field>
              <name>SDIO_ABORT_INT</name>
              <description>This bit is used to enable abort interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_INT-->
            <field>
              <name>SDIO_TOUT_INT</name>
              <description>This bit is used to enable ?read FIFO wait time over? interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDIO_WR_RDz</name>
              <description>wr_rdz, This is not an interrupt signal. This is only status signal</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDIO_CSA_ACCESS</name>
              <description>csa_window_access
When set, indicates that current request is for CSA window register. This is only status signal</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN2_ENABLE_REG -->
        <!-- REGISTER 19 -->
        <register>
          <name>SDIO_INTR_FN2_ENABLE_REG</name>
          <description>SDIO Function1 Interrupt Enable Register</description>
          <addressOffset>0xC4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_EN -->
            <field>
              <name>SDIO_WR_INT_EN</name>
              <description>This bit is used to enable CMD53 write interrupt.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_EN -->
            <field>
              <name>SDIO_RD_INT_EN</name>
              <description>This bit is used to enable CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_INT_EN -->
            <field>
              <name>SDIO_CSA_INT_EN</name>
              <description>This bit is used to enable CMD53 CSA interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_INT_EN -->
            <field>
              <name>SDIO_CMD52_INT_EN</name>
              <description>This bit is used to enable CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_INT_EN -->
            <field>
              <name>SDIO_PWR_LEV_INT_EN</name>
              <description>This bit is used to enable power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_INT_EN -->
            <field>
              <name>SDIO_CRC_ERR_INT_EN</name>
              <description>This bit is used to enable CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_INT_EN -->
            <field>
              <name>SDIO_ABORT_INT_EN</name>
              <description>This bit is used to enable abort interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_INT_EN -->
            <field>
              <name>SDIO_TOUT_INT_EN</name>
              <description>This bit is used to enable ?read FIFO wait time over? interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN2_MASK_REG -->
        <!-- REGISTER 20 -->
        <register>
          <name>SDIO_INTR_FN2_MASK_REG</name>
          <description>SDIO Function2 Interrupt Mask Register</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_MSK -->
            <field>
              <name>SDIO_WR_INT_MSK</name>
              <description>This bit is used to mask CMD53 write interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_MSK -->
            <field>
              <name>SDIO_RD_INT_MSK</name>
              <description>This bit is used to mask CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_MSK -->
            <field>
              <name>SDIO_CSA_MSK</name>
              <description>This bit is used to mask CMD53 CSA interrupt.Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_MSK -->
            <field>
              <name>SDIO_CMD52_MSK</name>
              <description>This bit is used to mask CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_MSK -->
            <field>
              <name>SDIO_PWR_LEV_MSK</name>
              <description>This bit is used to mask power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_MSK -->
            <field>
              <name>SDIO_CRC_ERR_MSK</name>
              <description>This bit is used to mask CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_MSK -->
            <field>
              <name>SDIO_ABORT_MSK</name>
              <description>This bit is used to mask abort interrupt Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_MSK -->
            <field>
              <name>SDIO_TOUT_MSK</name>
              <description>This bit is used to mask read FIFO wait time over interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN2_UNMASK_REG -->
        <!-- REGISTER 21 -->
        <register>
          <name>SDIO_INTR_FN2_UNMASK_REG</name>
          <description>SDIO Function2 Interrupt Mask Register</description>
          <addressOffset>0xCC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_UNMSK -->
            <field>
              <name>SDIO_WR_INT_UNMSK</name>
              <description>This bit is used to unmask CMD53 write interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_UNMSK -->
            <field>
              <name>SDIO_RD_INT_UNMSK</name>
              <description>This bit is used to unmask CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_UNMSK -->
            <field>
              <name>SDIO_CSA_UNMSK</name>
              <description>This bit is used to unmask CMD53 CSA interrupt.Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_UNMSK -->
            <field>
              <name>SDIO_CMD52_UNMSK</name>
              <description>This bit is used to unmask CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_UNMSK -->
            <field>
              <name>SDIO_PWR_LEV_UNMSK</name>
              <description>This bit is used to unmask power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_UNMSK -->
            <field>
              <name>SDIO_CRC_ERR_UNMSK</name>
              <description>This bit is used to unmask CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_UNMSK -->
            <field>
              <name>SDIO_ABORT_UNMSK</name>
              <description>This bit is used to unmask abort interrupt Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_UNMSK -->
            <field>
              <name>SDIO_TOUT_UNMSK</name>
              <description>This bit is used to unmask read FIFO wait time over interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN3_STATUS_CLEAR_REG -->
        <!-- REGISTER 22 -->
        <register>
          <name>SDIO_INTR_FN3_REG</name>
          <description>SDIO interrupt Function3</description>
          <addressOffset>0xD0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT-->
            <field>
              <name>SDIO_WR_INT</name>
              <description> This bit is used to enable CMD53 write interrupt. =1 Interrupt is enabled =0 - Interrupt is disabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT-->
            <field>
              <name>SDIO_RD_INT</name>
              <description>This bit is used to enable CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_INT -->
            <field>
              <name>SDIO_CSA_INT</name>
              <description>This bit is used to enable CMD53 CSA interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_INT-->
            <field>
              <name>SDIO_CMD52_INT</name>
              <description>This bit is used to enable CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_INT -->
            <field>
              <name>SDIO_PWR_LEV_INT</name>
              <description>This bit is used to enable power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_INT-->
            <field>
              <name>SDIO_CRC_ERR_INT</name>
              <description>This bit is used to enable CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_INT-->
            <field>
              <name>SDIO_ABORT_INT</name>
              <description>This bit is used to enable abort interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_TOUT_INT-->
            <field>
              <name>SDIO_RD_TOUT_INT</name>
              <description>This bit is used to enable ?read FIFO wait time over? interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDIO_WR_RDz</name>
              <description>wr_rdz, This is not an interrupt signal. This is only status signal</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDIO_CSA_ACCESS</name>
              <description>csa_window_access
When set, indicates that current request is for CSA window register. This is only status signal</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN3_ENABLE_REG -->
        <!-- REGISTER 23 -->
        <register>
          <name>SDIO_INTR_FN3_ENABLE_REG</name>
          <description>SDIO Function3 Interrupt Enable Register</description>
          <addressOffset>0xD4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_EN -->
            <field>
              <name>SDIO_WR_INT_EN</name>
              <description>This bit is used to enable CMD53 write interrupt.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_EN -->
            <field>
              <name>SDIO_RD_INT_EN</name>
              <description>This bit is used to enable CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_INT_EN -->
            <field>
              <name>SDIO_CSA_INT_EN</name>
              <description>This bit is used to enable CMD53 CSA interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_INT_EN -->
            <field>
              <name>SDIO_CMD52_INT_EN</name>
              <description>This bit is used to enable CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_INT_EN -->
            <field>
              <name>SDIO_PWR_LEV_INT_EN</name>
              <description>This bit is used to enable power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_INT_EN -->
            <field>
              <name>SDIO_CRC_ERR_INT_EN</name>
              <description>This bit is used to enable CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_INT_EN -->
            <field>
              <name>SDIO_ABORT_INT_EN</name>
              <description>This bit is used to enable abort interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_INT_EN -->
            <field>
              <name>SDIO_TOUT_INT_EN</name>
              <description>This bit is used to enable ?read FIFO wait time over? interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN3_MASK_REG -->
        <!-- REGISTER 24 -->
        <register>
          <name>SDIO_INTR_FN3_MASK_REG</name>
          <description>SDIO Function3 Interrupt Mask Register</description>
          <addressOffset>0xD8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_MSK -->
            <field>
              <name>SDIO_WR_INT_MSK</name>
              <description>This bit is used to mask CMD53 write interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_MSK -->
            <field>
              <name>SDIO_RD_INT_MSK</name>
              <description>This bit is used to mask CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_MSK -->
            <field>
              <name>SDIO_CSA_MSK</name>
              <description>This bit is used to mask CMD53 CSA interrupt.Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_MSK -->
            <field>
              <name>SDIO_CMD52_MSK</name>
              <description>This bit is used to mask CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_MSK -->
            <field>
              <name>SDIO_PWR_LEV_MSK</name>
              <description>This bit is used to mask power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_MSK -->
            <field>
              <name>SDIO_CRC_ERR_MSK</name>
              <description>This bit is used to mask CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_MSK -->
            <field>
              <name>SDIO_ABORT_MSK</name>
              <description>This bit is used to mask abort interrupt Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_MSK -->
            <field>
              <name>SDIO_TOUT_MSK</name>
              <description>This bit is used to mask read FIFO wait time over interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN3_UNMASK_REG -->
        <!-- REGISTER 25 -->
        <register>
          <name>SDIO_INTR_FN3_UNMASK_REG</name>
          <description>SDIO Function3 Interrupt Mask Register</description>
          <addressOffset>0xDC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_UNMSK -->
            <field>
              <name>SDIO_WR_INT_UNMSK</name>
              <description>This bit is used to unmask CMD53 write interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_UNMSK -->
            <field>
              <name>SDIO_RD_INT_UNMSK</name>
              <description>This bit is used to unmask CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_UNMSK -->
            <field>
              <name>SDIO_CSA_UNMSK</name>
              <description>This bit is used to unmask CMD53 CSA interrupt.Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_UNMSK -->
            <field>
              <name>SDIO_CMD52_UNMSK</name>
              <description>This bit is used to unmask CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_UNMSK -->
            <field>
              <name>SDIO_PWR_LEV_UNMSK</name>
              <description>This bit is used to unmask power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_UNMSK -->
            <field>
              <name>SDIO_CRC_ERR_UNMSK</name>
              <description>This bit is used to unmask CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_UNMSK -->
            <field>
              <name>SDIO_ABORT_UNMSK</name>
              <description>This bit is used to unmask abort interrupt Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_UNMSK -->
            <field>
              <name>SDIO_TOUT_UNMSK</name>
              <description>This bit is used to unmask read FIFO wait time over interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN4_STATUS_CLEAR_REG -->
        <!-- REGISTER 26 -->
        <register>
          <name>SDIO_INTR_FN4_REG</name>
          <description>SDIO interrupt Function4</description>
          <addressOffset>0xE0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT-->
            <field>
              <name>SDIO_WR_INT</name>
              <description> This bit is used to enable CMD53 write interrupt. =1 Interrupt is enabled =0 - Interrupt is disabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT-->
            <field>
              <name>SDIO_RD_INT</name>
              <description>This bit is used to enable CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_INT -->
            <field>
              <name>SDIO_CSA_INT</name>
              <description>This bit is used to enable CMD53 CSA interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_INT-->
            <field>
              <name>SDIO_CMD52_INT</name>
              <description>This bit is used to enable CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_INT -->
            <field>
              <name>SDIO_PWR_LEV_INT</name>
              <description>This bit is used to enable power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_INT-->
            <field>
              <name>SDIO_CRC_ERR_INT</name>
              <description>This bit is used to enable CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_INT-->
            <field>
              <name>SDIO_ABORT_INT</name>
              <description>This bit is used to enable abort interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_TOUT_INT-->
            <field>
              <name>SDIO_RD_TOUT_INT</name>
              <description>This bit is used to enable ?read FIFO wait time over? interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDIO_WR_RDz</name>
              <description>wr_rdz, This is not an interrupt signal. This is only status signal</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDIO_CSA_ACCESS</name>
              <description>csa_window_access
When set, indicates that current request is for CSA window register. This is only status signal</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN4_ENABLE_REG -->
        <!-- REGISTER 27 -->
        <register>
          <name>SDIO_INTR_FN4_ENABLE_REG</name>
          <description>SDIO Function4 Interrupt Enable Register</description>
          <addressOffset>0xE4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_EN -->
            <field>
              <name>SDIO_WR_INT_EN</name>
              <description>This bit is used to enable CMD53 write interrupt.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_EN -->
            <field>
              <name>SDIO_RD_INT_EN</name>
              <description>This bit is used to enable CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_INT_EN -->
            <field>
              <name>SDIO_CSA_INT_EN</name>
              <description>This bit is used to enable CMD53 CSA interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_INT_EN -->
            <field>
              <name>SDIO_CMD52_INT_EN</name>
              <description>This bit is used to enable CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_INT_EN -->
            <field>
              <name>SDIO_PWR_LEV_INT_EN</name>
              <description>This bit is used to enable power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_INT_EN -->
            <field>
              <name>SDIO_CRC_ERR_INT_EN</name>
              <description>This bit is used to enable CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_INT_EN -->
            <field>
              <name>SDIO_ABORT_INT_EN</name>
              <description>This bit is used to enable abort interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_INT_EN -->
            <field>
              <name>SDIO_TOUT_INT_EN</name>
              <description>This bit is used to enable ?read FIFO wait time over? interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN4_MASK_REG -->
        <!-- REGISTER 28 -->
        <register>
          <name>SDIO_INTR_FN4_MASK_REG</name>
          <description>SDIO Function4 Interrupt Mask Register</description>
          <addressOffset>0xE8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_MSK -->
            <field>
              <name>SDIO_WR_INT_MSK</name>
              <description>This bit is used to mask CMD53 write interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_MSK -->
            <field>
              <name>SDIO_RD_INT_MSK</name>
              <description>This bit is used to mask CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_MSK -->
            <field>
              <name>SDIO_CSA_MSK</name>
              <description>This bit is used to mask CMD53 CSA interrupt.Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_MSK -->
            <field>
              <name>SDIO_CMD52_MSK</name>
              <description>This bit is used to mask CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_MSK -->
            <field>
              <name>SDIO_PWR_LEV_MSK</name>
              <description>This bit is used to mask power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_MSK -->
            <field>
              <name>SDIO_CRC_ERR_MSK</name>
              <description>This bit is used to mask CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_MSK -->
            <field>
              <name>SDIO_ABORT_MSK</name>
              <description>This bit is used to mask abort interrupt Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_MSK -->
            <field>
              <name>SDIO_TOUT_MSK</name>
              <description>This bit is used to mask read FIFO wait time over interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN4_UNMASK_REG -->
        <!-- REGISTER 29 -->
        <register>
          <name>SDIO_INTR_FN4_UNMASK_REG</name>
          <description>SDIO Function4 Interrupt Mask Register</description>
          <addressOffset>0xEC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_UNMSK -->
            <field>
              <name>SDIO_WR_INT_UNMSK</name>
              <description>This bit is used to unmask CMD53 write interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_UNMSK -->
            <field>
              <name>SDIO_RD_INT_UNMSK</name>
              <description>This bit is used to unmask CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_UNMSK -->
            <field>
              <name>SDIO_CSA_UNMSK</name>
              <description>This bit is used to unmask CMD53 CSA interrupt.Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_UNMSK -->
            <field>
              <name>SDIO_CMD52_UNMSK</name>
              <description>This bit is used to unmask CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_UNMSK -->
            <field>
              <name>SDIO_PWR_LEV_UNMSK</name>
              <description>This bit is used to unmask power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_UNMSK -->
            <field>
              <name>SDIO_CRC_ERR_UNMSK</name>
              <description>This bit is used to unmask CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_UNMSK -->
            <field>
              <name>SDIO_ABORT_UNMSK</name>
              <description>This bit is used to unmask abort interrupt Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_UNMSK -->
            <field>
              <name>SDIO_TOUT_UNMSK</name>
              <description>This bit is used to unmask read FIFO wait time over interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN5_STATUS_CLEAR_REG -->
        <!-- REGISTER 30 -->
        <register>
          <name>SDIO_INTR_FN5_REG</name>
          <description>SDIO interrupt Function5 Register</description>
          <addressOffset>0xF0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT-->
            <field>
              <name>SDIO_WR_INT</name>
              <description> This bit is used to enable CMD53 write interrupt. =1 Interrupt is enabled =0 - Interrupt is disabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT-->
            <field>
              <name>SDIO_RD_INT</name>
              <description>This bit is used to enable CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_INT -->
            <field>
              <name>SDIO_CSA_INT</name>
              <description>This bit is used to enable CMD53 CSA interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_INT-->
            <field>
              <name>SDIO_CMD52_INT</name>
              <description>This bit is used to enable CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_INT -->
            <field>
              <name>SDIO_PWR_LEV_INT</name>
              <description>This bit is used to enable power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_INT-->
            <field>
              <name>SDIO_CRC_ERR_INT</name>
              <description>This bit is used to enable CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_INT-->
            <field>
              <name>SDIO_ABORT_INT</name>
              <description>This bit is used to enable abort interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_TOUT_INT-->
            <field>
              <name>SDIO_RD_TOUT_INT</name>
              <description>This bit is used to enable ?read FIFO wait time over? interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDIO_WR_RDz</name>
              <description>wr_rdz, This is not an interrupt signal. This is only status signal</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDIO_CSA_ACCESS</name>
              <description>csa_window_access
When set, indicates that current request is for CSA window register. This is only status signal</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN5_ENABLE_REG -->
        <!-- REGISTER 31 -->
        <register>
          <name>SDIO_INTR_FN5_ENABLE_REG</name>
          <description>SDIO Function5 Interrupt Enable Register</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_EN -->
            <field>
              <name>SDIO_WR_INT_EN</name>
              <description>This bit is used to enable CMD53 write interrupt.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_EN -->
            <field>
              <name>SDIO_RD_INT_EN</name>
              <description>This bit is used to enable CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_INT_EN -->
            <field>
              <name>SDIO_CSA_INT_EN</name>
              <description>This bit is used to enable CMD53 CSA interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_INT_EN -->
            <field>
              <name>SDIO_CMD52_INT_EN</name>
              <description>This bit is used to enable CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_INT_EN -->
            <field>
              <name>SDIO_PWR_LEV_INT_EN</name>
              <description>This bit is used to enable power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_INT_EN -->
            <field>
              <name>SDIO_CRC_ERR_INT_EN</name>
              <description>This bit is used to enable CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_INT_EN -->
            <field>
              <name>SDIO_ABORT_INT_EN</name>
              <description>This bit is used to enable abort interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_INT_EN -->
            <field>
              <name>SDIO_TOUT_INT_EN</name>
              <description>This bit is used to enable ?read FIFO wait time over? interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN5_MASK_REG -->
        <!-- REGISTER 32 -->
        <register>
          <name>SDIO_INTR_FN5_MASK_REG</name>
          <description>SDIO Function5 Interrupt Mask Register</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_MSK -->
            <field>
              <name>SDIO_WR_INT_MSK</name>
              <description>This bit is used to mask CMD53 write interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_MSK -->
            <field>
              <name>SDIO_RD_INT_MSK</name>
              <description>This bit is used to mask CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_MSK -->
            <field>
              <name>SDIO_CSA_MSK</name>
              <description>This bit is used to mask CMD53 CSA interrupt.Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_MSK -->
            <field>
              <name>SDIO_CMD52_MSK</name>
              <description>This bit is used to mask CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_MSK -->
            <field>
              <name>SDIO_PWR_LEV_MSK</name>
              <description>This bit is used to mask power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_MSK -->
            <field>
              <name>SDIO_CRC_ERR_MSK</name>
              <description>This bit is used to mask CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_MSK -->
            <field>
              <name>SDIO_ABORT_MSK</name>
              <description>This bit is used to mask abort interrupt Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_MSK -->
            <field>
              <name>SDIO_TOUT_MSK</name>
              <description>This bit is used to mask read FIFO wait time over interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_INTR_FN5_UNMASK_REG -->
        <!-- REGISTER 33 -->
        <register>
          <name>SDIO_INTR_FN5_UNMASK_REG</name>
          <description>SDIO Function5 Interrupt Mask Register</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_WR_INT_UNMSK -->
            <field>
              <name>SDIO_WR_INT_UNMSK</name>
              <description>This bit is used to unmask CMD53 write interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_RD_INT_UNMSK -->
            <field>
              <name>SDIO_RD_INT_UNMSK</name>
              <description>This bit is used to unmask CMD53 read interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CSA_UNMSK -->
            <field>
              <name>SDIO_CSA_UNMSK</name>
              <description>This bit is used to unmask CMD53 CSA interrupt.Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CMD52_UNMSK -->
            <field>
              <name>SDIO_CMD52_UNMSK</name>
              <description>This bit is used to unmask CMD52 interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_PWR_LEV_UNMSK -->
            <field>
              <name>SDIO_PWR_LEV_UNMSK</name>
              <description>This bit is used to unmask power level change interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_CRC_ERR_UNMSK -->
            <field>
              <name>SDIO_CRC_ERR_UNMSK</name>
              <description>This bit is used to unmask CRC error interrupt</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_UNMSK -->
            <field>
              <name>SDIO_ABORT_UNMSK</name>
              <description>This bit is used to unmask abort interrupt Setting this bit will mask the interrupt Clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_TOUT_UNMSK -->
            <field>
              <name>SDIO_TOUT_UNMSK</name>
              <description>This bit is used to unmask read FIFO wait time over interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_ERROR_COND_CHK_ENABLE_REG -->
        <!-- REGISTER 34 -->
        <register>
          <name>SDIO_ERROR_COND_CTRL_ENABLE_REG</name>
          <description>SDIO error condition Control enable register</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_CRC_EN -->
            <field>
              <name>SDIO_CRC_EN</name>
              <description>When set, stops the DMA from doing data accesses till CRC error interrupt is cleared</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ABORT_EN -->
            <field>
              <name>SDIO_ABORT_EN</name>
              <description>When set, stops the DMA from doing data accesses till ABORT interrupt is cleared</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_SPI_RD_DATA_ERROR_EN -->
            <field>
              <name>SDIO_SPI_RD_DATA_ERROR_EN</name>
              <description>When set, stops the DMA from doing data accesses till read data error interrupt is cleared in SPI mode</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_ERROR_COND_STATE_REG -->
        <!-- REGISTER 35 -->
        <register>
          <name>SDIO_ERROR_COND_BLK_CNT</name>
          <description>SDIO error condition block count register</description>
          <addressOffset>0x104</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- SDIO_ERROR_BYTE_CNT -->
            <field>
              <name>SDIO_ERROR_BYTE_CNT</name>
              <description>Indicates byte count when one of the error condition occurred</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>RESERVED1</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_ERROR_BLK_CNT -->
            <field>
              <name>SDIO_ERROR_BLK_CNT</name>
              <description>Indicates block count when one of error condition occurred</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>RESERVED2</description>
              <bitRange>[31:23]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SDIO_BOOT_CONFIG_VALS_0_REG -->
        <!-- REGISTER 37 -->
        <register>
          <name>SDIO_BOOT_CONFIG_VALS_0_REG</name>
          <description>SDIO Boot Config Values Register 0</description>
          <addressOffset>0x108</addressOffset>
          <size>32</size>
          <resetValue>0xFF800009</resetValue>
          <access>read-only</access>
          <fields>
            <!-- OCR_R -->
            <field>
              <name>OCR_R</name>
              <description>Operating conditions. The value written by bootloader can be read here.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--CSA_MSBYTE-->
            <field>
              <name>CSA_MSBYTE</name>
              <description>MS byre of CSA address. 
			               Lower 24 bits of CSA will come through SDIO CSA registers. 
						   Whenever CSA access is done, 32-bit address will be prepared using these fields.</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SDIO_BOOT_CONFIG_VALS_1_REG -->
        <!-- REGISTER 38 -->
        <register>
          <name>SDIO_BOOT_CONFIG_VALS_1_REG</name>
          <description>SDIO Boot Config Values Register 1</description>
          <addressOffset>0x10C</addressOffset>
          <size>32</size>
          <resetValue>0X00000001</resetValue>
          <access>read-only</access>
          <fields>
            <!-- NO_OF_IO_FUNCTIONS -->
            <field>
              <name>NO_OF_IO_FUNCTIONS</name>
              <description>Indicates number functions supported. The value written by bootloader can be read here.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- COMBOCARD -->
            <field>
              <name>COMBOCARD</name>
              <description>When set, combo mode will be enabled.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--SDMEM_IGNOTRE_SDMEM_PRESENT-->
            <field>
              <name>SDMEM_IGNOTRE_SDMEM_PRESENT</name>
              <description>When set, sdmem_present signal, coming from GPIO, will be ignored.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--SDMEM_DRIVE_HIZ_MB_READ-->
            <field>
              <name>SDMEM_DRIVE_HIZ_MB_READ</name>
              <description>When set, High will be driven in the second cycle of interrupt period during sd memory mb read transfer</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--SDMEM_DISABLE_INTERRUPT_MB_READ-->
            <field>
              <name>SDMEM_DISABLE_INTERRUPT_MB_READ</name>
              <description>When set, interrupt will be not be driven during sd memory mb read transfer</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--IGNORE_DISABLE_HS-->
            <field>
              <name>IGNORE_DISABLE_HS</name>
              <description>if ignore_disable_hs is set, sdmem_disable_high_speed_switching coming from combo mode module is ignored</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>RESERVED2</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--High Speed SPI Slave-->
    <peripheral>
      <!--HSPI-->
      <name>HSPI</name>
      <version>1.0</version>
      <description>The SPI Interface is a full duplex serial host interface, which supports 8-bit and 32-bit data granularity. 
	               It also supports gated mode of SPI clock and both the low and the high frequency modes</description>
      <baseAddress>0x20200000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x802</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!--SPI_HOST_INTR -->
        <!-- REGISTER 1 -->
        <register>
          <name>SPI_HOST_INTR</name>
          <description>SPI Host interupt resgister.</description>
          <addressOffset>0x00</addressOffset>
          <size>8</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <fields>
            <!--SPI_HOST_INTR-->
            <field>
              <name>SPI_HOST_INTR</name>
              <description>These bits indicate the interrupt vector value coming from system side.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SPI_RFIFO_START -->
        <!-- REGISTER 2 -->
        <register>
          <name>SPI_RFIFO_START</name>
          <description>SPI FIFO start Level Register.</description>
          <addressOffset>0x02</addressOffset>
          <size>8</size>
          <access>read-write</access>
          <resetValue>0x10</resetValue>
          <fields>
            <!--SPI_RFIFO_ST-->
            <field>
              <name>SPI_RFIFO_ST</name>
              <description>These bits indicate the interrupt vector value coming from system side.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SPI_RFIFO_AFULL_LEV -->
        <!-- REGISTER 3 -->
        <register>
          <name>SPI_RFIFO_AFULL_LEV</name>
          <description>SPI RFIFO AFULL Level Register.</description>
          <addressOffset>0x04</addressOffset>
          <size>8</size>
          <access>read-write</access>
          <resetValue>0x8</resetValue>
          <fields>
            <!--SPI_RFIFO_AFULL_LEV-->
            <field>
              <name>SPI_RFIFO_AFULL_LEV</name>
              <description>These bits are used to program the FIFO occupancy level to trigger the Almost Full indication.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SPI_RFIFO_AEMPTY_LEV -->
        <!-- REGISTER 4 -->
        <register>
          <name>SPI_RFIFO_AEMPTY_LEV</name>
          <description>SPI WFIFO Almost Empty Register.</description>
          <addressOffset>0x06</addressOffset>
          <size>8</size>
          <access>read-write</access>
          <resetValue>0x8</resetValue>
          <fields>
            <!--SPI_RFIFO_AEMPTY_LEV-->
            <field>
              <name>SPI_RFIFO_AEMPTY_LEV</name>
              <description>These bits are used to program the occupancy level to trigger the Almost Empty indication.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SPI_MODE -->
        <!-- REGISTER 5 -->
        <register>
          <name>SPI_MODE</name>
          <description>SPI Mode Register.</description>
          <addressOffset>0x08</addressOffset>
          <size>8</size>
          <access>read-write</access>
          <resetValue>0x8</resetValue>
          <fields>
            <!--SPI_OP_MODE-->
            <field>
              <name>SPI_OP_MODE</name>
              <description>This bit is used to program the mode of working of SPI Interface.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SPI_FIX_EN-->
            <field>
              <name>SPI_FIX_EN</name>
              <description>This bit is used to enable the fix made for bus_ctrl_busy being asserted 
			               when success_state is being asserted getting deasserted when FSM has decided to move to BUSY_STATE or not.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--VHS_EN-->
            <field>
              <name>VHS_EN</name>
              <description>This bit is used to enable Very high speed mode (120Mhz).</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--bypass_init-->
            <field>
              <name>BYPASS_INIT</name>
              <description>This bit is used to bypass the SPI initialization.0 - Doesn't bypass,1 - bypasses SPI initialization</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SPI_INTR_STATUS -->
        <!-- REGISTER 6 -->
        <register>
          <name>SPI_INTR_STATUS</name>
          <description>SPI interrupt status register.</description>
          <addressOffset>0x0A</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_WR_REQ-->
            <field>
              <name>SPI_WR_REQ</name>
              <description>Write request received.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SPI_RD_REQ-->
            <field>
              <name>SPI_RD_REQ</name>
              <description>Read request received.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--SPI_CS_DEASSERT-->
            <field>
              <name>SPI_CS_DEASSERT</name>
              <description>SPI chip deassert interrupt.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SPI_INTR_EN -->
        <!-- REGISTER 7 -->
        <register>
          <name>SPI_INTR_EN</name>
          <description>SPI interrupt enable register.</description>
          <addressOffset>0x0C</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_WR_INT_EN-->
            <field>
              <name>SPI_WR_INT_EN</name>
              <description>This bit is used to enable the write interrupt.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SPI_RD_INT_EN-->
            <field>
              <name>SPI_RD_INT_EN</name>
              <description>This bit is used to enable the read interrupt.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--SPI_CS_DEASSERT_INT_EN-->
            <field>
              <name>SPI_CS_DEASSERT_INT_EN</name>
              <description>This bit is used to enable the interrupt due to wrong deassertion of CS.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SPI_INTR_MASK -->
        <!-- REGISTER 8 -->
        <register>
          <name>SPI_INTR_MASK</name>
          <description>SPI interrupt Mask register</description>
          <addressOffset>0x0E</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_WR_INTR_MSK-->
            <field>
              <name>SPI_WR_INTR_MSK</name>
              <description>This bit is used to mask the write interrupt.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SPI_RD_INTR_MSK-->
            <field>
              <name>SPI_RD_INTR_MSK</name>
              <description>This bit is used to mask the read interrupt.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--SPI_CS_DEASSERT_INT_MSK-->
            <field>
              <name>SPI_CS_DEASSERT_INT_MSK</name>
              <description>This bit is used to mask the CS deassertion interrupt.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SPI_INTR_UNMASK -->
        <!-- REGISTER 9 -->
        <register>
          <name>SPI_INTR_UNMASK</name>
          <description>SPI interrupt unmask register</description>
          <addressOffset>0x10</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_WR_INT_UNMASK-->
            <field>
              <name>SPI_WR_INT_UNMASK</name>
              <description>This bit is used to unmask the write interrupt.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SPI_RD_INTR_UNMSK-->
            <field>
              <name>SPI_RD_INTR_UNMSK</name>
              <description>This bit is used to unmask the read interrupt.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--SPI_CS_DEASSERT_INT_UNMSK-->
            <field>
              <name>SPI_CS_DEASSERT_INT_UNMSK</name>
              <description>This bit is used to unmask the CS deassertion interrupt.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SPI_LENGTH -->
        <!-- REGISTER 10 -->
        <register>
          <name>SPI_LENGTH</name>
          <description>SPI Length Register</description>
          <addressOffset>0x12</addressOffset>
          <size>16</size>
          <access>read-only</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_LEN-->
            <field>
              <name>SPI_LEN</name>
              <description>These bit indicate the length of the transfer as transmitted in the Commands C3 and C4.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SPI_COMMAND -->
        <!-- REGISTER 11 -->
        <register>
          <name>SPI_COMMAND</name>
          <description>SPI Command Register</description>
          <addressOffset>0x14</addressOffset>
          <size>16</size>
          <access>read-only</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_C1-->
            <field>
              <name>SPI_C1</name>
              <description>These bits store the received command C1.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--SPI_C2-->
            <field>
              <name>SPI_C2</name>
              <description>These bits store the received command C2.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SPI Device ID Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>SPI_DEV_ID</name>
          <description>SPI Device ID Register</description>
          <addressOffset>0x16</addressOffset>
          <size>16</size>
          <access>read-only</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_DEVID-->
            <field>
              <name>SPI_DEVID</name>
              <description>These bits store the Device ID information.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SPI Version Number Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>SPI_VERSION</name>
          <description>SPI Device ID Register</description>
          <addressOffset>0x18</addressOffset>
          <size>16</size>
          <access>read-only</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_VERNO-->
            <field>
              <name>SPI_VERNO</name>
              <description>These bits store the version number.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SPI Status Register -->
        <!-- REGISTER 15 -->
        <register>
          <name>SPI_STATUS</name>
          <description>SPI Status Register</description>
          <addressOffset>0x1A</addressOffset>
          <size>16</size>
          <access>read-only</access>
          <resetValue>0xC</resetValue>
          <fields>
            <!--SPI_RFIFO_FULL-->
            <field>
              <name>SPI_RFIFO_FULL</name>
              <description>This bit indicates if the read FIFO is almost full.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--SPI_RFIFO_AFULL-->
            <field>
              <name>SPI_RFIFO_AFULL</name>
              <description>This bit indicates if the read FIFO is almost full.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--SPI_WFIFO_EMPTY-->
            <field>
              <name>SPI_WFIFO_EMPTY</name>
              <description>This bit indicates if write FIFO is empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--SPI_WFIFO_AEMPTY-->
            <field>
              <name>SPI_WFIFO_AEMPTY</name>
              <description>This bit indicates if write FIFO is almost empty.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--SPI_RFIFO_EMPTY-->
            <field>
              <name>SPI_RFIFO_EMPTY</name>
              <description>This bit indicates if read FIFO is empty  (Read from SOC to host).</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--SPI_RFIFO_AEMPTY-->
            <field>
              <name>SPI_RFIFO_AEMPTY</name>
              <description>This bit indicates if read FIFO is empty  (Read from SOC to host).</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--SPI_WFIFO_FULL-->
            <field>
              <name>SPI_WFIFO_FULL</name>
              <description>This bit indicates if write FIFO is full (Write from Host to SOC).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--SPI_WFIFO_AFULL-->
            <field>
              <name>SPI_WFIFO_AFULL</name>
              <description>This bit indicates if write FIFO is full (Write from Host to SOC).</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SPI_BC_STATE Register -->
        <!-- REGISTER 16 -->
        <register>
          <name>SPI_BC_STATE</name>
          <description>SPI Bus Controller State Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>16</size>
          <access>read-only</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_BC-->
            <field>
              <name>SPI_BC</name>
              <description>These bits indicate the Bus Controller FSM state.</description>
              <bitRange>[13:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SPI_RFIFO_DATA Register -->
        <!-- REGISTER 17 -->
        <register>
          <name>SPI_RFIFO_DATA</name>
          <description>SPI RFIFO Data Register</description>
          <addressOffset>0x380</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_RFIFO-->
            <field>
              <name>SPI_RFIFO</name>
              <description>These bits store the data received from the host</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--SPI_WFIFO_DATA Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>SPI_WFIFO_DATA</name>
          <description>SPI WFIFO Data Register</description>
          <addressOffset>0x3C0</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_WFIFO-->
            <field>
              <name>SPI_WFIFO</name>
              <description> These bits are used to write, the data to be sent to the host.</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!--SPI_SYS_RESET_REQ Register -->
        <!-- REGISTER 19 -->
        <register>
          <name>SPI_SYS_RESET_REQ</name>
          <description>SPI SYS Reset Req Register</description>
          <addressOffset>0x7C</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_SYS_RESET_REQ-->
            <field>
              <name>SPI_SYS_RESET_REQ</name>
              <description>When set generates system reset request to reset controller. This gets reset once, reset controller generates reset. 
			               Host should not reset this bit. With this reset request, reset controller generates non por reset.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SPI_WAKE_UP Register -->
        <!-- REGISTER 20 -->
        <register>
          <name>SPI_WAKE_UP</name>
          <description>SPI Wakeup Register</description>
          <addressOffset>0x7E</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x0</resetValue>
          <fields>
            <!--SPI_WAKEUP-->
            <field>
              <name>SPI_WAKEUP</name>
              <description>Wakeup Interrupt,Interrupt for waking up the system from Deep Sleep.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SPI_DEEP_SLEEP_ST-->
            <field>
              <name>SPI_DEEP_SLEEP_ST</name>
              <description>Deep Sleep Start,Indicates the device to enter Deep Sleep state for maximum power save.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--M4SS_CLOCK -->
    <peripheral>
      <name>M4CLK</name>
      <version>1.0</version>
      <description>MCU HP (High Performance) domain contains the Cortex-M4F Processor, FPU, Debugger, MCU High Speed Interfaces, MCU HP Peripherals, MCU HP DMA and MCU/SZP shareable Interfaces
				   </description>
      <groupName>M4CLK</groupName>
      <baseAddress>0x46000000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x88</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- CLK ENABLE SET REGISTER1 -->
        <!-- REGISTER 1 -->
        <register>
          <name>CLK_ENABLE_SET_REG1</name>
          <description>	Clock Enable Set Register 1</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00002000</resetValue>
          <fields>
            <!--USART1 PCLK ENABLE -->
            <field>
              <name>USART1_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for usart1 pclk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- USART1 SCLK ENABLE -->
            <field>
              <name>USART1_SCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for usart1 sclk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- USART2 PCLK ENABLE -->
            <field>
              <name>USART2_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for usart2 pclk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART2 SCLK ENABLE-->
            <field>
              <name>USART2_SCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for usart2 sclk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[8:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CT CLK ENABLE-->
            <field>
              <name>CT_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for sct clk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CT PCLK ENABLE-->
            <field>
              <name>CT_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for sct pclk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ICACHE_CLK_ENABLE_b-->
            <field>
              <name>ICACHE_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for icache clk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ICACHE_CLK_2X_ENABLE_b-->
            <field>
              <name>ICACHE_CLK_2X_ENABLE_b</name>
              <description>Static Clock gating Enable for icache 2x clk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RPDMA_HCLK_ENABLE_b-->
            <field>
              <name>RPDMA_HCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for rpdma hclk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SOC_PLL_SPI_CLK_ENABLE_b-->
            <field>
              <name>SOC_PLL_SPI_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for soc pll spi clk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2 -->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- IID_CLK_ENABLE_b -->
            <field>
              <name>IID_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for iid clk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_SYS_HCLK_ENABLE_b -->
            <field>
              <name>SDIO_SYS_HCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for sdio sys hclk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CRC_CLK_ENABLE_b -->
            <field>
              <name>CRC_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for crc clk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved3 -->
            <field>
              <name>Reserved3</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- HWRNG_PCLK_ENABLE_b -->
            <field>
              <name>HWRNG_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for HWRNG pclk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GNSS_MEM_CLK_ENABLE_b -->
            <field>
              <name>GNSS_MEM_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for GNSS mem clk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved4 -->
            <field>
              <name>Reserved4</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MASK_HOST_CLK_WAIT_FIX_b-->
            <field>
              <name>MASK_HOST_CLK_WAIT_FIX_b</name>
              <description>This bit decides whether to wait for a fixed number of xtal clock cycles(based on mask31_host_clk_cnt) or wait for a internally generated signal to come out of WAIT state in host mux FSM
                           1'b1 =&gt; Wait for fixed number of xtal clk cycles
                           1'b0 =&gt; Invalid
                           This bit along with mask_host_clk_available_fix and mask31_host_clk_cnt are to take care in case of any bugs.</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MASK31_HOST_CLK_CNT_b-->
            <field>
              <name>MASK31_HOST_CLK_CNT_b</name>
              <description>When mask_host_clk_wait_fix is 1'b1, this bit decides whether to count for 32 0r 16 xtal clock cycles to come out of WAIT state in host mux FSM
                           1'b1 =&gt; Wait for 32 clock cycles
                           1'b0 =&gt; Invalid
                           This bit along with mask_host_clk_available_fix and mask_host_clk_wait_fix are to take care in case of any bugs.</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved5 -->
            <field>
              <name>Reserved5</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <!--  MASK_HOST_CLK_AVAILABLE_FIX_b -->
            <field>
              <name>MASK_HOST_CLK_AVAILABLE_FIX_b</name>
              <description>This bit decides whether to consider negedge of host_clk_available in the generation of clock enable for host_clk gate in host mux
                           1'b1 =&gt; Don't consider
                           1'b0 =&gt; Invalid
                           This bit along with mask_host_clk_wait_fix and mask31_host_clk_cnt are to take care in case of any bugs.</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ULPSS_CLK_ENABLE_b-->
            <field>
              <name>ULPSS_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for m4 soc_clk to ulpss1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_ENABLE_CLEAR_REG1 -->
        <!-- REGISTER 2 -->
        <register>
          <name>CLK_ENABLE_CLEAR_REG1</name>
          <description>	Clock Enable Clear Register 1</description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00002000</resetValue>
          <fields>
            <!--USART1 PCLK ENABLE -->
            <field>
              <name>USART1_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for usart1 pclk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- USART1 SCLK ENABLE -->
            <field>
              <name>USART1_SCLK_ENABLE_b</name>
              <description>Static Clock Clear for usart1 sclk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- USART2 PCLK ENABLE -->
            <field>
              <name>USART2_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for usart2 pclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART2 SCLK ENABLE-->
            <field>
              <name>USART2_SCLK_ENABLE_b</name>
              <description>Static Clock Clear for usart2 sclk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[8:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CT CLK ENABLE-->
            <field>
              <name>CT_CLK_ENABLE_b</name>
              <description>Static Clock Clear for sct clk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CT PCLK ENABLE-->
            <field>
              <name>CT_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for sct pclk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ICACHE_CLK_ENABLE_b-->
            <field>
              <name>ICACHE_CLK_ENABLE_b</name>
              <description>Static Clock Clear for icache clk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ICACHE_CLK_2X_ENABLE_b-->
            <field>
              <name>ICACHE_CLK_2X_ENABLE_b</name>
              <description>Static Clock Clear for icache 2x clk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RPDMA_HCLK_ENABLE_b-->
            <field>
              <name>RPDMA_HCLK_ENABLE_b</name>
              <description>Static Clock Clear for rpdma hclk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SOC_PLL_SPI_CLK_ENABLE_b-->
            <field>
              <name>SOC_PLL_SPI_CLK_ENABLE_b</name>
              <description>Static Clock Clear for soc pll spi clk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2 -->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- IID_CLK_ENABLE_b -->
            <field>
              <name>IID_CLK_ENABLE_b</name>
              <description>Static Clock Clear for iid clk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SDIO_SYS_HCLK_ENABLE_b -->
            <field>
              <name>SDIO_SYS_HCLK_ENABLE_b</name>
              <description>Static Clock Clear for sdio sys hclk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CRC_CLK_ENABLE_b -->
            <field>
              <name>CRC_CLK_ENABLE_b</name>
              <description>Static Clock Clear for crc clk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved3 -->
            <field>
              <name>Reserved3</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- HWRNG_PCLK_ENABLE_b -->
            <field>
              <name>HWRNG_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for HWRNG pclk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GNSS_MEM_CLK_ENABLE_b -->
            <field>
              <name>GNSS_MEM_CLK_ENABLE_b</name>
              <description>Static Clock Clear for GNSS mem clk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved4 -->
            <field>
              <name>Reserved4</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MASK_HOST_CLK_WAIT_FIX_b-->
            <field>
              <name>MASK_HOST_CLK_WAIT_FIX_b</name>
              <description>This bit decides whether to wait for a fixed number of xtal clock cycles(based on mask31_host_clk_cnt) or wait for a internally generated signal to come out of WAIT state in host mux FSM
                           1'b1 =&gt; Wait for fixed number of xtal clk cycles
                           1'b0 =&gt; Invalid
                           This bit along with mask_host_clk_available_fix and mask31_host_clk_cnt are to take care in case of any bugs.</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MASK31_HOST_CLK_CNT_b-->
            <field>
              <name>MASK31_HOST_CLK_CNT_b</name>
              <description>When mask_host_clk_wait_fix is 1'b1, this bit decides whether to count for 32 0r 16 xtal clock cycles to come out of WAIT state in host mux FSM
                           1'b1 =&gt; Wait for 32 clock cycles
                           1'b0 =&gt; Invalid
                           This bit along with mask_host_clk_available_fix and mask_host_clk_wait_fix are to take care in case of any bugs.</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved5 -->
            <field>
              <name>Reserved5</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <!--  MASK_HOST_CLK_AVAILABLE_FIX_b -->
            <field>
              <name>MASK_HOST_CLK_AVAILABLE_FIX_b</name>
              <description>This bit decides whether to consider negedge of host_clk_available in the generation of clock enable for host_clk gate in host mux
                           1'b1 =&gt; Don't consider
                           1'b0 =&gt; Invalid
                           This bit along with mask_host_clk_wait_fix and mask31_host_clk_cnt are to take care in case of any bugs.</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ULPSS_CLK_ENABLE_b-->
            <field>
              <name>ULPSS_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for m4 soc_clk to ulpss1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_ENABLE_SET_REG2 -->
        <!-- REGISTER 3 -->
        <register>
          <name>CLK_ENABLE_SET_REG2</name>
          <description>	Clock Enable Set Register 2</description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00001800</resetValue>
          <fields>
            <!--USART1 PCLK ENABLE -->
            <field>
              <name>GEN_SPI_MST1_HCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for gen spi master1 hclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[5:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- UDMA_HCLK_ENABLE_b-->
            <field>
              <name>UDMA_HCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for udma hclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2C_BUS_CLK_ENABLE_b-->
            <field>
              <name>I2C_BUS_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for i2c-1 bus clk1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2C_2_BUS_CLK_ENABLE_b-->
            <field>
              <name>I2C_2_BUS_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for i2c-2 bus clk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SSI_SLV_PCLK_ENABLE_b-->
            <field>
              <name>SSI_SLV_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for ssi slave pclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SSI_SLV_SCLK_ENABLE_b-->
            <field>
              <name>SSI_SLV_SCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for ssi slave sclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_CLK_ENABLE_b-->
            <field>
              <name>QSPI_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for qspi clk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_HCLK_ENABLE_b-->
            <field>
              <name>QSPI_HCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for qspi hclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2SM_SCLK_ENABLE_b-->
            <field>
              <name>I2SM_SCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for sclk of I2S at Root Clock generation 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2SM_INTF_SCLK_ENABLE_b-->
            <field>
              <name>I2SM_INTF_SCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for i2s interface sclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2SM_PCLK_ENABLE_b-->
            <field>
              <name>I2SM_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for i2s master pclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2 -->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QE_PCLK_ENABLE_b -->
            <field>
              <name>QE_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for qe pclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MCPWM_PCLK_ENABLE_b -->
            <field>
              <name>MCPWM_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for mcpwm pclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved3 -->
            <field>
              <name>Reserved3</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SGPIO_PCLK_ENABLE_b -->
            <field>
              <name>SGPIO_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for sgpio pclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- EGPIO_PCLK_ENABLE_b -->
            <field>
              <name>EGPIO_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for egpio pclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ARM_CLK_ENABLE_b -->
            <field>
              <name>ARM_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for arm clk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SSI_MST_PCLK_ENABLE_b -->
            <field>
              <name>SSI_MST_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for ssi master pclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SSI_MST_SCLK_ENABLE_b -->
            <field>
              <name>SSI_MST_SCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for ssi master sclk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved4 -->
            <field>
              <name>Reserved4</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MEM_CLK_ULP_ENABLE_b-->
            <field>
              <name>MEM_CLK_ULP_ENABLE_b</name>
              <description>Static Clock gating Enable for mem ulp clk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ROM_CLK_ENABLE_b-->
            <field>
              <name>ROM_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for rom clk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PLL_INTF_CLK_ENABLE_b-->
            <field>
              <name>PLL_INTF_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for pll intf clk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved5 -->
            <field>
              <name>Reserved5</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_ENABLE_CLEAR_REG2 -->
        <!-- REGISTER 4 -->
        <register>
          <name>CLK_ENABLE_CLEAR_REG2</name>
          <description>	Clock Enable Clear Register 2</description>
          <addressOffset>0xC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00001800</resetValue>
          <fields>
            <!--USART1 PCLK ENABLE -->
            <field>
              <name>GEN_SPI_MST1_HCLK_ENABLE_b</name>
              <description>Static Clock Clear for gen spi master1 hclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[5:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- UDMA_HCLK_ENABLE_b-->
            <field>
              <name>UDMA_HCLK_ENABLE_b</name>
              <description>Static Clock Clear for udma hclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2C_BUS_CLK_ENABLE_b-->
            <field>
              <name>I2C_BUS_CLK_ENABLE_b</name>
              <description>Static Clock Clear for i2c-1 bus clk1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2C_2_BUS_CLK_ENABLE_b-->
            <field>
              <name>I2C_2_BUS_CLK_ENABLE_b</name>
              <description>Static Clock Clear for i2c-2 bus clk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SSI_SLV_PCLK_ENABLE_b-->
            <field>
              <name>SSI_SLV_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for ssi slave pclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SSI_SLV_SCLK_ENABLE_b-->
            <field>
              <name>SSI_SLV_SCLK_ENABLE_b</name>
              <description>Static Clock Clear for ssi slave sclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_CLK_ENABLE_b-->
            <field>
              <name>QSPI_CLK_ENABLE_b</name>
              <description>Static Clock Clear for qspi clk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_HCLK_ENABLE_b-->
            <field>
              <name>QSPI_HCLK_ENABLE_b</name>
              <description>Static Clock Clear for qspi hclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2SM_SCLK_ENABLE_b-->
            <field>
              <name>I2SM_SCLK_ENABLE_b</name>
              <description>Static Clock Clear for sclk of I2S at Root Clock generation 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2SM_INTF_SCLK_ENABLE_b-->
            <field>
              <name>I2SM_INTF_SCLK_ENABLE_b</name>
              <description>Static Clock Clear for i2s interface sclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2SM_PCLK_ENABLE_b-->
            <field>
              <name>I2SM_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for i2s master pclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2 -->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QE_PCLK_ENABLE_b -->
            <field>
              <name>QE_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for qe pclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MCPWM_PCLK_ENABLE_b -->
            <field>
              <name>MCPWM_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for mcpwm pclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved3 -->
            <field>
              <name>Reserved3</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SGPIO_PCLK_ENABLE_b -->
            <field>
              <name>SGPIO_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for sgpio pclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- EGPIO_PCLK_ENABLE_b -->
            <field>
              <name>EGPIO_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for egpio pclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ARM_CLK_ENABLE_b -->
            <field>
              <name>ARM_CLK_ENABLE_b</name>
              <description>Static Clock Clear for arm clk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SSI_MST_PCLK_ENABLE_b -->
            <field>
              <name>SSI_MST_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for ssi master pclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SSI_MST_SCLK_ENABLE_b -->
            <field>
              <name>SSI_MST_SCLK_ENABLE_b</name>
              <description>Static Clock Clear for ssi master sclk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved4 -->
            <field>
              <name>Reserved4</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MEM_CLK_ULP_ENABLE_b-->
            <field>
              <name>MEM_CLK_ULP_ENABLE_b</name>
              <description>Static Clock Clear for mem ulp clk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ROM_CLK_ENABLE_b-->
            <field>
              <name>ROM_CLK_ENABLE_b</name>
              <description>Static Clock Clear for rom clk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PLL_INTF_CLK_ENABLE_b-->
            <field>
              <name>PLL_INTF_CLK_ENABLE_b</name>
              <description>Static Clock Clear for pll intf clk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved5 -->
            <field>
              <name>Reserved5</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_ENABLE_SET_REG3 -->
        <!-- REGISTER 5 -->
        <register>
          <name>CLK_ENABLE_SET_REG3</name>
          <description>	Clock Enable Set Register 3</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x08E02022</resetValue>
          <fields>
            <!--BUS_CLK_ENABLE_b-->
            <field>
              <name>BUS_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for bus clk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4_CORE_CLK_ENABLE_b-->
            <field>
              <name>M4_CORE_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for M4 Core clk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--CM_BUS_CLK_ENABLE_b-->
            <field>
              <name>CM_BUS_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for cm bus clk1'b1 =&gt; Clock is enabled1'b0 =&gt; Invalid.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--MISC_CONFIG_PCLK_ENABLE_b-->
            <field>
              <name>MISC_CONFIG_PCLK_ENABLE_b</name>
              <description>Static Clock gating Enable for misc config regs clk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--EFUSE_CLK_ENABLE_b-->
            <field>
              <name>EFUSE_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for efuse clk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--ICM_CLK_ENABLE_b-->
            <field>
              <name>ICM_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for icm clk 1'b1 =&gt; Clock is enabled 1'b0 =&gt; Invalid.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[12:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_CLK_ONEHOT_ENABLE_b-->
            <field>
              <name>QSPI_CLK_ONEHOT_ENABLE_b</name>
              <description>Static Clock gating Enable for QSPI clock generated from the dynamic mux
                           1b1 - Clock is enabled
                           1b0 - Invalid.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_M4_SOC_SYNC_b-->
            <field>
              <name>QSPI_M4_SOC_SYNC_b</name>
              <description>Specifies whether QSPI clock is in sync with Soc clock. Before enabling this make sure that qspi_clk_onehot_enable is 1b0 to enable glitch free switching
                           1b1 - QSPI clock is in sync with M4 clock
                           1b0 - Invalid.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved3-->
            <field>
              <name>Reserved3</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- EGPIO_CLK_ENABLE_b-->
            <field>
              <name>EGPIO_CLK_ENABLE_b</name>
              <description>Static Clock gating enable for Enhanced-GPIO
                           1b1 - Clock is enabled
                           1b0 - Invalid.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2C_CLK_ENABLE_b-->
            <field>
              <name>I2C_CLK_ENABLE_b</name>
              <description>Static Clock gating enable for I2C-1 Module
                           1b1 - Clock is enabled
                           1b0 - Invalid.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2C_2_CLK_ENABLE_b-->
            <field>
              <name>I2C_2_CLK_ENABLE_b</name>
              <description>Static Clock gating enable for I2C-2 Module
                           1b1 - Clock is enabled
                           1b0 - Invalid.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- EFUSE_PCLK_ENABLE_b-->
            <field>
              <name>EFUSE_PCLK_ENABLE_b</name>
              <description>Static Clock gating enable for EFUSE APB Interface
                           1b1 - Clock is enabled
                           1b0 - Invalid.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SGPIO_CLK_ENABLE_b-->
            <field>
              <name>SGPIO_CLK_ENABLE_b</name>
              <description>Static Clock gating enable for SIO Module
                           1b1 - Clock is enabled
                           1b0 - Invalid.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TASS_M4SS_64K_SWITCH_CLK_ENABLE_b-->
            <field>
              <name>TASS_M4SS_64K_SWITCH_CLK_ENABLE_b</name>
              <description>Unused.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TASS_M4SS_128K_SWITCH_CLK_ENABLE_b-->
            <field>
              <name>TASS_M4SS_128K_SWITCH_CLK_ENABLE_b</name>
              <description>Unused.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TASS_M4SS_SDIO_SWITCH_CLK_ENABLE_b-->
            <field>
              <name>TASS_M4SS_SDIO_SWITCH_CLK_ENABLE_b</name>
              <description>Unused.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved4-->
            <field>
              <name>Reserved4</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ROM_MISC_STATIC_ENABLE_b-->
            <field>
              <name>ROM_MISC_STATIC_ENABLE_b</name>
              <description>Static Clock gating enable for rom ahb Clock
                           1b1 - Clock is enabled
                           1b0 - Invalid.</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M4_SOC_CLK_FOR_OTHER_ENABLE_b-->
            <field>
              <name>M4_SOC_CLK_FOR_OTHER_ENABLE_b</name>
              <description>Static Clock gating enable for M4-SOC Other Clock
                           1b1 - Clock is enabled
                           1b0 - Invalid.</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ICACHE_ENABLE_b-->
            <field>
              <name>ICACHE_ENABLE_b</name>
              <description>Static Clock gating enable for Icache. This has to be enable for Icache operations.
                           1b1 - Clock is enabled
                           1b0 - Invalid.</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved5 -->
            <field>
              <name>Reserved5</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_ENABLE_CLEAR_REG3 -->
        <!-- REGISTER 6 -->
        <register>
          <name>CLK_ENABLE_CLEAR_REG3</name>
          <description>	Clock Enable Clear Register 3</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x08E02022</resetValue>
          <fields>
            <!--BUS_CLK_ENABLE_b-->
            <field>
              <name>BUS_CLK_ENABLE_b</name>
              <description>Static Clock Clear for bus clk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4_CORE_CLK_ENABLE_b-->
            <field>
              <name>M4_CORE_CLK_ENABLE_b</name>
              <description>Static Clock Clear for M4 Core clk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--CM_BUS_CLK_ENABLE_b-->
            <field>
              <name>CM_BUS_CLK_ENABLE_b</name>
              <description>Static Clock gating Enable for cm bus clk1'b1 =&gt; Clock is enabled1'b0 =&gt; Invalid.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--MISC_CONFIG_PCLK_ENABLE_b-->
            <field>
              <name>MISC_CONFIG_PCLK_ENABLE_b</name>
              <description>Static Clock Clear for misc config regs clk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--EFUSE_CLK_ENABLE_b-->
            <field>
              <name>EFUSE_CLK_ENABLE_b</name>
              <description>Static Clock Clear for efuse clk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--ICM_CLK_ENABLE_b-->
            <field>
              <name>ICM_CLK_ENABLE_b</name>
              <description>Static Clock Clear for icm clk 1'b1 =&gt; Clock is Clear 1'b0 =&gt; Invalid.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[12:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_CLK_ONEHOT_ENABLE_b-->
            <field>
              <name>QSPI_CLK_ONEHOT_ENABLE_b</name>
              <description>Static Clock Clear for QSPI clock generated from the dynamic mux
                           1b1 - Clock is Gated
                           1b0 - Invalid.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_M4_SOC_SYNC_b-->
            <field>
              <name>QSPI_M4_SOC_SYNC_b</name>
              <description>Specifies whether QSPI clock is in sync with Soc clock. Before enabling this make sure that qspi_clk_onehot_enable is 1b0 to enable glitch free switching
                           1b1 - QSPI clock is in sync with M4 clock
                           1b0 - Invalid.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved3-->
            <field>
              <name>Reserved3</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- EGPIO_CLK_ENABLE_b-->
            <field>
              <name>EGPIO_CLK_ENABLE_b</name>
              <description>Static Clock Disable for Enhanced-GPIO
                           1b1 - Clock is Disable
                           1b0 - Invalid.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2C_CLK_ENABLE_b-->
            <field>
              <name>I2C_CLK_ENABLE_b</name>
              <description>Static Clock Disable for I2C-1 Module
                           1b1 - Clock is Disable
                           1b0 - Invalid.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2C_2_CLK_ENABLE_b-->
            <field>
              <name>I2C_2_CLK_ENABLE_b</name>
              <description>Static Clock Disable for I2C-2 Module
                           1b1 - Clock is Disable
                           1b0 - Invalid.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- EFUSE_PCLK_ENABLE_b-->
            <field>
              <name>EFUSE_PCLK_ENABLE_b</name>
              <description>Static Clock Disable for EFUSE APB Interface
                           1b1 - Clock is Disable
                           1b0 - Invalid.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SGPIO_CLK_ENABLE_b-->
            <field>
              <name>SGPIO_CLK_ENABLE_b</name>
              <description>Static Clock gating enable for SIO Module
                           1b1 - Clock is enabled
                           1b0 - Invalid.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TASS_M4SS_64K_SWITCH_CLK_ENABLE_b-->
            <field>
              <name>TASS_M4SS_64K_SWITCH_CLK_ENABLE_b</name>
              <description>Unused.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TASS_M4SS_128K_SWITCH_CLK_ENABLE_b-->
            <field>
              <name>TASS_M4SS_128K_SWITCH_CLK_ENABLE_b</name>
              <description>Unused.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TASS_M4SS_SDIO_SWITCH_CLK_ENABLE_b-->
            <field>
              <name>TASS_M4SS_SDIO_SWITCH_CLK_ENABLE_b</name>
              <description>Unused.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved4-->
            <field>
              <name>Reserved4</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ROM_MISC_STATIC_ENABLE_b-->
            <field>
              <name>ROM_MISC_STATIC_ENABLE_b</name>
              <description>Static Clock Disable for rom ahb Clock
                           1b1 - Clock is Disable
                           1b0 - Invalid.</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M4_SOC_CLK_FOR_OTHER_ENABLE_b-->
            <field>
              <name>M4_SOC_CLK_FOR_OTHER_ENABLE_b</name>
              <description>Static Clock Disable for M4-SOC Other Clock
                           1b1 - Clock is Disable
                           1b0 - Invalid.</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ICACHE_ENABLE_b-->
            <field>
              <name>ICACHE_ENABLE_b</name>
              <description>Static Clock Disable for Icache. This has to be enable for Icache operations.
                           1b1 - Clock is Disable
                           1b0 - Invalid.</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved5 -->
            <field>
              <name>Reserved5</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_CONFIG_REG1 -->
        <!-- REGISTER 7 -->
        <register>
          <name>CLK_CONFIG_REG1</name>
          <description>	Clock Config Register 1</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x07138808</resetValue>
          <fields>
            <!--QSPI_CLK_SEL-->
            <field>
              <name>QSPI_CLK_SEL</name>
              <description>Selects one of the following clocks for ssi master
                           000 - ULP Ref Clock(generated inside M4SS based on m4ss_ref_clk_sel from NPSS)
                           001 - Intf PLL Clock Clock (program bypass_intf_pll_clk if the bypass clock has to be selected)
                           010 - Modem PLL Clock2(Not Intended for the programmer)
                           (program bypass_modem_pll_clk if the bypass clock has to be selected)
                           011 - SoC PLL Clock Clock (program bypass_soc_pll_clk if the bypass clock has to be selected)
                           100 to 110 - Invalid
                           111 - Gated</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_CLK_DIV_FAC-->
            <field>
              <name>QSPI_CLK_DIV_FAC</name>
              <description>Clock divison factor for QSPI.
                           If qspi_clk_enable is 1b0 clock is gated.
                           Else
                           1)when qspi_clk_swallow_sel is 1b1 and qspi_odd_div_sel is 1b0
                             output clock is a swallowed clock with the following frequency.
                             6h0,6h1 =&gt; clk_out = clk_in &gt;6h1 =&gt; clk_out = clk_in/ qspi_clk_div_fac
                           2)when qspi_clk_swallow_sel is 1b0
                             and qspi_odd_div_sel is 1b0 output clock is a 50% duty cycle clock with the following frequency.
                             6h0 =&gt; clk_out = clk_in/2 &gt;6h0 =&gt; clk_out = clk_in/ (2*qspi_clk_div_fac)
                           3)When qspi_odd_div_sel is 1b1, output clock is a 50% duty cycle clock with the following frequency.
                             clk_out = clk_in/qspi_clk_div_fac when qspi_clk_div_fac is an odd number &gt;=3, else output clock is gated</description>
              <bitRange>[8:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_CLK_SWALLOW_SEL-->
            <field>
              <name>QSPI_CLK_SWALLOW_SEL</name>
              <description>Clock select for clock swallow or clock divider for QSPI
                           1b0 =&gt; 50% divider is selected with division factor qspi_clk_div_fac
                           1b1 =&gt; Swallowed clock is selected with division factor qspi_clk_div_fac
                           Before Changing this ensure that the input clocks are gated</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--SLP_RF_CLK_SEL-->
            <field>
              <name>SLP_RF_CLK_SEL</name>
              <description>clock select for m4_soc_rf_ref_clk
                           0  -  m4_soc_clk
                           1  -  rf_ref_clk.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--SSI_MST_SCLK_DIV_FAC-->
            <field>
              <name>SSI_MST_SCLK_DIV_FAC</name>
              <description>Clock division factor for ssi_mst_sclk. If ssi_mst_sclk_enable is 1b0 clock is gated.
                           Else output clock is a swallowed clock with the following frequency.
                           4h0,4h1 =&gt; Divider is bypassed &gt;4h1 =&gt; clk_out = clk_in/ ssi_mst_sclk_div_fac.</description>
              <bitRange>[14:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--SSI_MST_SCLK_SEL-->
            <field>
              <name>SSI_MST_SCLK_SEL</name>
              <description>Selects one of the following clocks for ssi master
                           000 - ULP Ref Clock(generated inside M4SS based on m4ss_ref_clk_sel from NPSS)
                           001 - SoC PLL Clock(program bypass_soc_pll_clk if the bypass clock has to be selected)
                           010 - Modem PLL Clock1(Not Intended for the programmer) (program bypass_modem_pll_clk if the bypass clock has to be selected)
                           011 - Intf PLL Clock(program bypass_intf_pll_clk if the bypass clock has to be selected)
                           100 - Modem PLL Clock2(Not Intended for the pragrammer)
                           (program bypass_modem_pll_clk if the bypass clock has to be selected)
                           101 - m4_soc_clk_for_other_clks
                           110 - Invalid
                           111 - Gated.</description>
              <bitRange>[17:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--PLL_INTF_CLK_SEL-->
            <field>
              <name>PLL_INTF_CLK_SEL</name>
              <description>Selects one of the following clocks for pll intf clock
                           0 - Intf Pll Clock(program bypass_intf_pll_clk if the bypass clock has to be selected)
                           1 - SoC Pll Clock(program bypass_soc_pll_clk if the bypass clock has to be selected)</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--PLL_INTF_CLK_DIV_FAC-->
            <field>
              <name>PLL_INTF_CLK_DIV_FAC</name>
              <description>Clock division factor for pll_intf_clk.
                           If pll_intf_clk_enable is 1b0 clock is gated. Else,
                           when pll_intf_clk_swallow_sel is 1b1, output clock is a swallowed clock.
                           when pll_intf_clk_swallow_sel is 1b0, output clock is a 50 Per duty cycle clock.</description>
              <bitRange>[22:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--PLL_INTF_CLK_SWALLOW_SEL-->
            <field>
              <name>PLL_INTF_CLK_SWALLOW_SEL</name>
              <description>Clock select for clock swallow or clock divider for PLL INTF Clk
                           1b0 - 50% divider is selected with division factor 2;
                           1b1 - Swallowed clock is selected with division factor pll_intf_clk_div_fac</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!--GEN_SPI_MST1_SCLK_SEL-->
            <field>
              <name>GEN_SPI_MST1_SCLK_SEL</name>
              <description>Selects one of the following clocks for USART1 clk
                           000 - m4_soc_clk_for_other_clocks
                           001 - ulp ref Clock(generated inside M4SS based on m4ss_ref_clk_sel from NPSS)
                           010 - SoC PLL Clock(program bypass_soc_pll_clk if the bypass clock has to be selected)
                           011 - Modem PLL Clock2(Not Intended for the pragrammer)
                           (program bypass_modem_pll_clk if the bypass clock has to be selected)
                           100 - Intf PLL Clock(program bypass_intf_pll_clk if the bypass clock has to be selected)
                           101 to 110 - Invalid
                           111 - Gated</description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:27]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_CONFIG_REG2 -->
        <!-- REGISTER 8 -->
        <register>
          <name>CLK_CONFIG_REG2</name>
          <description>	Clock Config Register 1</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0002078F</resetValue>
          <fields>
            <!--USART1_SCLK_SEL-->
            <field>
              <name>USART1_SCLK_SEL</name>
              <description>Selects one of the following clocks for USART1 clk
                           000 - ulp ref Clock(generated inside M4SS based on m4ss_ref_clk_sel from NPSS)
                           001 - SoC PLL Clock(program bypass_soc_pll_clk if the bypass clock has to be selected)
                           010 - Modem PLL Clock2(Not Intended for the pragrammer)(program bypass_modem_pll_clk if the bypass clock has to be selected)
                           011 - Intf PLL Clock(program bypass_intf_pll_clk if the bypass clock has to be selected)
                           100 - m4_soc_clk_for_other_clocks
						   101 to 110 - Invalid
						   111 - Gated</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART1_SCLK_DIV_FAC-->
            <field>
              <name>USART1_SCLK_DIV_FAC</name>
              <description>Clock division factor for USART1 Clock.
                           If usart1_sclk_enable is 1b0 clock is gated. Else output clock is a swallowed clock.</description>
              <bitRange>[6:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART2_SCLK_SEL-->
            <field>
              <name>USART2_SCLK_SEL</name>
              <description>Selects one of the following clocks for USART2 clk
                           000 - ulp ref Clock(generated inside M4SS based on m4ss_ref_clk_sel from NPSS)
                           001 - SoC PLL Clock(program bypass_soc_pll_clk if the bypass clock has to be selected)
                           010 - Modem PLL Clock2(Not Intended for the pragrammer)(program bypass_modem_pll_clk if the bypass clock has to be selected)
                           011 - Intf PLL Clock(program bypass_intf_pll_clk if the bypass clock has to be selected)
                           100 - m4_soc_clk_for_other_clocks
                           101 to 110 - Invalid
                           111 - Gated</description>
              <bitRange>[9:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART2_SCLK_DIV_FAC-->
            <field>
              <name>USART2_SCLK_DIV_FAC</name>
              <description>Clock division factor for USART2 Clock.
                           If usart2_sclk_enable is 1b0 clock is gated. Else output clock is a swallowed clock.</description>
              <bitRange>[13:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[27:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_ODD_DIV_SEL-->
            <field>
              <name>QSPI_ODD_DIV_SEL</name>
              <description>Clock select for clock swallow or 50% even clock divider or 50% odd divider clock for QSPI
                           1b1 - 50% odd clock divider output is selected with division factor qspi_clk_div_fac
                           1b0 - 50% even clock divider output or swallowed is selected with division factor qspi_clk_div_fac based on qspi_clk_swallow_sel.</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART1_SCLK_FRAC_SEL-->
            <field>
              <name>USART1_SCLK_FRAC_SEL</name>
              <description>Selects the type of divider for uart1_clk
                           1b0 - Clock Swallow is selected
                           1b1 - Fractional Divider is selected.</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART2_SCLK_FRAC_SEL-->
            <field>
              <name>USART2_SCLK_FRAC_SEL</name>
              <description>Selects the type of divider for uart2_clk
                           1b0 - Clock Swallow is selected
                           1b1 - Fractional Divider is selected.</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART3_SCLK_FRAC_SEL-->
            <field>
              <name>USART3_SCLK_FRAC_SEL</name>
              <description>Selects the type of divider for uart3_clk
                           1b0 - Clock Swallow is selected
                           1b1 - Fractional Divider is selected.</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_CONFIG_REG3 -->
        <!-- REGISTER 9 -->
        <register>
          <name>CLK_CONFIG_REG3</name>
          <description>	Clock Config Register 3</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_CLKOUT_SEL-->
            <field>
              <name>MCU_CLKOUT_SEL</name>
              <description>Clock Select for the clock on mcu_clkout (Mapped to GPIO)</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_CLKOUT_DIV_FAC-->
            <field>
              <name>MCU_CLKOUT_DIV_FAC</name>
              <description>Division factor for mcu_clkout (Mapped to GPIO)</description>
              <bitRange>[17:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_CLKOUT_ENABLE-->
            <field>
              <name>MCU_CLKOUT_ENABLE</name>
              <description>Clock Enable for the clock on nwp_clkout (Mapped to GPIO)
                           1b0 - Clock is Gated
                           1b1 - Clock is Enabled</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:19]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_CONFIG_REG4 -->
        <!-- REGISTER 10 -->
        <register>
          <name>CLK_CONFIG_REG4</name>
          <description>	Clock Config Register 4</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0800AA1C</resetValue>
          <fields>
            <!-- SOC_PLL_CLK_BYP_SEL-->
            <field>
              <name>SOC_PLL_CLK_BYP_SEL</name>
              <description>Selects one of the bypass clocks for SoC PLL Clock</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--I2S_PLL_CLK_BYP_SEL-->
            <field>
              <name>I2S_PLL_CLK_BYP_SEL</name>
              <description>Selects one of the bypass clocks for I2S PLL Clock</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--MODEM_PLL_CLK_BYP_SEL-->
            <field>
              <name>MODEM_PLL_CLK_BYP_SEL</name>
              <description>Selects one of the bypass clocks for Modem PLL Clock</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--INTF_PLL_CLK_BYP_SEL-->
            <field>
              <name>INTF_PLL_CLK_BYP_SEL</name>
              <description>Selects one of the bypass clocks for Intf PLL Clock</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--SOC_INTF_PLL_BYPCLK_CLKCLNR_ON-->
            <field>
              <name>SOC_INTF_PLL_BYPCLK_CLKCLNR_ON</name>
              <description>Clock cleaner ON Control for SoC PLL Bypass Clock</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--SOC_INTF_PLL_BYPCLK_CLKCLNR_OFF-->
            <field>
              <name>SOC_INTF_PLL_BYPCLK_CLKCLNR_OFF</name>
              <description>Clock cleaner OFF Control for SoC PLL Bypass Clock</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2S_PLL_BYPCLK_CLKCLNR_ON-->
            <field>
              <name>I2S_PLL_BYPCLK_CLKCLNR_ON</name>
              <description>Clock cleaner ON Control for I2S PLL Bypass Clock.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2S_PLL_BYPCLK_CLKCLNR_OFF-->
            <field>
              <name>I2S_PLL_BYPCLK_CLKCLNR_OFF</name>
              <description>Clock cleaner OFF Control for I2S PLL Bypass Clock.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MODEM_PLL_BYPCLK_CLKCLNR_ON-->
            <field>
              <name>MODEM_PLL_BYPCLK_CLKCLNR_ON</name>
              <description>Clock cleaner ON Control for Modem PLL Bypass Clock.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MODEM_PLL_BYPCLK_CLKCLNR_OFF-->
            <field>
              <name>MODEM_PLL_BYPCLK_CLKCLNR_OFF</name>
              <description>Clock cleaner OFF Control for Modem PLL Bypass Clock.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_SOC_PLL_CLK-->
            <field>
              <name>BYPASS_SOC_PLL_CLK</name>
              <description>Select to choose bypass clock or PLL clock 
			               1b0 - soc_pll_clk
						   1b1 - One of the bypass clocks based on soc_pll_clk_byp_sel.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_I2S_PLL_CLK-->
            <field>
              <name>BYPASS_I2S_PLL_CLK</name>
              <description>Select to choose bypass clock or PLL clock 
			               1b0 - i2s_pll_clk
						   1b1 - One of the bypass clocks based on soc_pll_clk_byp_sel.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_MODEM_PLL_CLK1-->
            <field>
              <name>BYPASS_MODEM_PLL_CLK1</name>
              <description>Select to choose bypass clock or PLL clock
         			       1b0 - modem_pll_clk1
						   1b1 - One of the bypass clocks based on modem_pll_clk_byp_sel.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_MODEM_PLL_CLK2-->
            <field>
              <name>BYPASS_MODEM_PLL_CLK2</name>
              <description>Select to choose bypass clock or PLL clock 
			               1b0 - modem_pll_clk2
						   1b1 - One of the bypass clocks based on modem_pll_clk_byp_sel.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_INTF_PLL_CLK-->
            <field>
              <name>BYPASS_INTF_PLL_CLK</name>
              <description>Select to choose bypass clock or PLL clock 
			               1b0 - intf_pll_clk
						   1b1 - One of the bypass clocks based on soc_pll_clk_byp_sel.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SLEEP_CLK_SEL-->
            <field>
              <name>SLEEP_CLK_SEL</name>
              <description>Select to choose sleep clk
                           00 - ulp_32khz_rc_clk
                           01 - ulp_32khz_xtal_clk
                           10 - Gated
                           11 - ulp_32khz_ro_clk.</description>
              <bitRange>[22:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[24:23]</bitRange>
              <access>read-write</access>
            </field>
            <!--ULPSS_CLK_DIV_FAC-->
            <field>
              <name>ULPSS_CLK_DIV_FAC</name>
              <description>Clock division factor for clock to ULPSS.
                           If ulpss_clk_enable is 1b0 clock is gated. Else output clock is a divided clock with the following frequency.
                           6h0 - Divider is bypassed &gt; 6h0 - clk_out = clk_in/ 2* ulpss_clk_div_fac</description>
              <bitRange>[30:25]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved3-->
            <field>
              <name>Reserved3</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_CONFIG_REG5 -->
        <!-- REGISTER 11 -->
        <register>
          <name>CLK_CONFIG_REG5</name>
          <description>	Clock Config Register 5</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x001E0810</resetValue>
          <fields>
            <!-- M4_SOC_CLK_SEL-->
            <field>
              <name>M4_SOC_CLK_SEL</name>
              <description>Selects one of the clock sources for M4 SoC clock. These clocks are selected for m4_soc_clk when
                           1)m4_soc_host_clk_sel is 1b0 or
                           2)when m4_soc_host_clk_sel is 1b1,  xtal is ON(xtal_off from slp_fsm should be zero) and host_clk_available(from host logic) is 1b0.
                             0000 - ULP Ref Clock (generated inside M4SS based on m4ss_ref_clk_sel from NPSS)
                             0001 - Reserved
                             0010 - Soc PLL Clock (program bypass_soc_pll_clk if the bypass clock has to be selected)
                             0011 - Modem PLL Clock1 (Not Intended for the pragrammer) (program bypass_modem_pll_clk if the bypass clock has to be selected)
                             0100 - Intf PLL Clock (program bypass_intf_pll_clk if the bypass clock has to be selected)
                             0101 - Sleep Clock(generated inside M4SS based on sleep_clk_sel. Please select the proper sleep clock select before using this)
                             0110 to 1111 - Invalid</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4_SOC_CLK_DIV_FAC-->
            <field>
              <name>M4_SOC_CLK_DIV_FAC</name>
              <description>Clock divison factor for TA SoC Clock
                           If ta_soc_clk_enable(from NPSS) is 1b0 clock is gated. Else output clock is a swallowed clock with the following frequency.
                           6h0,6h1 - Divider is bypassed &gt;6h1 - clk_out = clk_in/ ta_soc_clk_div_fac</description>
              <bitRange>[9:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--I2S_CLK_SEL-->
            <field>
              <name>I2S_CLK_SEL</name>
              <description>Selects one of the following clocks for config timer I2S interface
                           00/11 - I2S PLL Clock (program bypass_i2s_pll_clk if the bypass clock has to be selected)
                           01 - I2S PLL Clock_1 (program bypass_i2s_pll_clk_1 if the bypass clock has to be selected)
                           10 - m4_soc_clk_for_other_clocks</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--I2S_CLK_DIV_FAC-->
            <field>
              <name>I2S_CLK_DIV_FAC</name>
              <description>Clock division factor for i2s_clk.
                           Else output clock is a 50% divided clock with the following frequency.
                           6h0 - Divider is bypassed &gt;6h0 - clk_out = clk_in/ 2*i2s_clk_div_fac</description>
              <bitRange>[16:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--CT_CLK_SEL-->
            <field>
              <name>CT_CLK_SEL</name>
              <description>Selects one of the following clocks for config timer
                           000 - ulp ref Clock(generated inside M4SS based on m4ss_ref_clk_sel from NPSS)
                           001 - Intf PLL Clock(program bypass_intf_pll_clk if the bypass clock has to be selected)
                           010 - SoC PLL Clock(program bypass_soc_pll_clk if the bypass clock has to be selected)
                           011 - m4_soc_clk_for_other_clocks
                           100,110 - Invalid
                           111 - Gated</description>
              <bitRange>[19:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--CT_CLK_DIV_FAC-->
            <field>
              <name>CT_CLK_DIV_FAC</name>
              <description>Clock division factor for sct_clk. If sct_clk_enable is 1b0 clock is gated.
                           Else output clock is a 50% divided clock with the following frequency.
                           6h0 - Divider is bypassed &gt;6h0 - clk_out = clk_in/ 2*sct_clk_div_fac</description>
              <bitRange>[25:20]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4_SOC_HOST_CLK_SEL-->
            <field>
              <name>M4_SOC_HOST_CLK_SEL</name>
              <description>Selects the previous muxed output(xtal_clk) or host_clk as the clock source for M4 SoC clock based on the following combinations of {xtal_off(from slp fsm), host_clk_available(from host logic),m4_soc_host_clk_sel}
                           XX0 - xtal_clk
                           001 - After wait time based on mask_host_clk_wait_fix ; xtal_clk
                           X11 - host_clk
                           101 - No Clock</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ULPSS_ODD_DIV_SEL-->
            <field>
              <name>ULPSS_ODD_DIV_SEL</name>
              <description>Selects the type of divider for m4_soc_clk_2ulpss
                           1b0 - Clock Divider(even) is selected
                           1b1 - Odd Divider is selected.</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[30:29]</bitRange>
              <access>read-write</access>
            </field>
            <!--I2S_CLK_SEL_1-->
            <field>
              <name>I2S_CLK_SEL_1</name>
              <description>Selects one of the following clocks for config timer for I2S interface
                           00/11 - I2S PLL Clock (program bypass_i2s_pll_clk if the bypass clock has to be selected)
                           01 - I2S PLL Clock_1 (program bypass_i2s_pll_clk_1 if the bypass clock has to be selected)
                           10 - m4_soc_clk_for_other_clocks</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- DYN_CLK_GATE_DISABLE_REG -->
        <!-- REGISTER 12 -->
        <register>
          <name>DYN_CLK_GATE_DISABLE_REG</name>
          <description>	Dynamic Clock Gate Disable Register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- SDIO_SYS_HCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>SDIO_SYS_HCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control sdio sys clk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BUS_CLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>BUS_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control bus clk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- GPDMA_HCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>GPDMA_HCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control gpdma clk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- EGPIO_PCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>EGPIO_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control egpio clk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SGPIO_PCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>SGPIO_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control sgpio clk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TOT_CLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>TOT_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control tot clk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART1_SCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>USART1_SCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control usart1 sclk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART1_PCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>USART1_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control usart1 pclk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART2_SCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>USART2_SCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control usart2 sclk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--USART2_PCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>USART2_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control usart2 pclk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved3-->
            <field>
              <name>Reserved3</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[14:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--SSI_SLV_SCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>SSI_SLV_SCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control ssi slave sclk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--SSI_SLV_PCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>SSI_SLV_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control ssi slave pclk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved4-->
            <field>
              <name>Reserved4</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[18:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SEMAPHORE_CLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>SEMAPHORE_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control semaphore clk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ARM_CLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>ARM_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control arm clk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SSI_MST_SCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>SSI_MST_SCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control ssi mst sclk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved5-->
            <field>
              <name>Reserved5</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MEM_CLK_ULP_DYN_CTRL_DISABLE_b-->
            <field>
              <name>MEM_CLK_ULP_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control mem clk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved6-->
            <field>
              <name>Reserved6</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[27:25]</bitRange>
              <access>read-write</access>
            </field>
            <!--SSI_MST_PCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>SSI_MST_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control ssi mst pclk 1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!--ICACHE_DYN_GATING_DISABLE_b-->
            <field>
              <name>ICACHE_DYN_GATING_DISABLE_b</name>
              <description>Dynamic clock gate disable control icache clk1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved7-->
            <field>
              <name>Reserved7</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MISC_CONFIG_PCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>MISC_CONFIG_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control miscn config pclk 1'b0 =&gt; Dynamic control of the clock is disbaled 1'b1 =&gt; Dynamic control of the clock is enabled.</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PLL_ENABLE_SET_REG -->
        <!-- REGISTER 13 -->
        <register>
          <name>PLL_ENABLE_SET_REG</name>
          <description>PLL Enable Set Register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- SOCPLL_SPI_SW_RESET-->
            <field>
              <name>SOCPLL_SPI_SW_RESET</name>
              <description>SPI soft reset for SoC PLL1'b1 =&gt; soft reset is enabled1'b0 =&gt; Invalid</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PLL_ENABLE_CLEAR_REG -->
        <!-- REGISTER 14 -->
        <register>
          <name>PLL_ENABLE_CLEAR_REG</name>
          <description>PLL Enable Clear Register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- SOCPLL_SPI_SW_RESET-->
            <field>
              <name>SOCPLL_SPI_SW_RESET</name>
              <description>SPI soft reset for SoC PLL1'b1 =&gt; soft reset is disabled1'b0 =&gt; Invalid</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PLL_STAT_REG -->
        <!-- REGISTER 15 -->
        <register>
          <name>PLL_STAT_REG</name>
          <description>PLL Status Register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0xFFFFFF78</resetValue>
          <fields>
            <!-- LCDPLL_LOCK-->
            <field>
              <name>LCDPLL_LOCK</name>
              <description>Lock Signal from LCD PLL</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DDRPLL_LOCK-->
            <field>
              <name>DDRPLL_LOCK</name>
              <description>Lock Signal from DDR PLL</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- APPLL_LOCK-->
            <field>
              <name>APPLL_LOCK</name>
              <description>Lock Signal from AP PLL</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- INTFPLL_LOCK-->
            <field>
              <name>INTFPLL_LOCK</name>
              <description>Lock Signal from INTF PLL</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- I2SPLL_LOCK-->
            <field>
              <name>I2SPLL_LOCK</name>
              <description>Lock Signal from I2S PLL</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SOCPLL_LOCK-->
            <field>
              <name>SOCPLL_LOCK</name>
              <description>Lock Signal from SoC PLL</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- MODEMPLL_LOCK-->
            <field>
              <name>MODEMPLL_LOCK</name>
              <description>Lock Signal from Modem PLL</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- PLL_LOCK_DATA_TRIG-->
            <field>
              <name>PLL_LOCK_DATA_TRIG</name>
              <description>This is set to 1'b1 when the PLL Locks are equal to pll_lock_int_data_reg</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4_SOC_CLK_SWITCHED-->
            <field>
              <name>M4_SOC_CLK_SWITCHED</name>
              <description>Indication from M4 SoC Clock Dynamic mux that the switching happened</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- QSPI_CLK_SWITCHED-->
            <field>
              <name>QSPI_CLK_SWITCHED</name>
              <description>Indication from QSPI Clock Dynamic mux that the switching happened</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- USART1_SCLK_SWITCHED-->
            <field>
              <name>USART1_SCLK_SWITCHED</name>
              <description>Indication from USART1 Clock Dynamic mux that the switching happened</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- USART2_SCLK_SWITCHED-->
            <field>
              <name>USART2_SCLK_SWITCHED</name>
              <description>Indication from USART1 Clock Dynamic mux that the switching happened</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!-- GEN_SPI_MST1_SCLK_SWITCHED-->
            <field>
              <name>GEN_SPI_MST1_SCLK_SWITCHED</name>
              <description>Indication from USART2 Clock Dynamic mux that the switching happened</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SSI_MST_SCLK_SWITCHED-->
            <field>
              <name>SSI_MST_SCLK_SWITCHED</name>
              <description>Indication from SSi Master SClock Dynamic mux that the switching happened</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!-- CT_CLK_SWITCHED-->
            <field>
              <name>CT_CLK_SWITCHED</name>
              <description>Indication from SCT Clock Dynamic mux that the switching happened</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4_TA_SOC_CLK_SWITCHED_SDIO-->
            <field>
              <name>M4_TA_SOC_CLK_SWITCHED_SDIO</name>
              <description>Indication from M4-TA Soc SDIO Clock Dynamic mux that the switching happened(TBD)</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- I2S_CLK_SWITCHED-->
            <field>
              <name>I2S_CLK_SWITCHED</name>
              <description>Indication from I2S Clock Dynamic mux that the switching happened</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!-- PLL_INTF_CLK_SWITCHED-->
            <field>
              <name>PLL_INTF_CLK_SWITCHED</name>
              <description>Indication from Pll Intf Clock Dynamic mux that the switching happened</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[20:19]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SLEEP_CLK_SWITCHED-->
            <field>
              <name>SLEEP_CLK_SWITCHED</name>
              <description>Indication from Sleep clcok Dynamic mux that the switching happened</description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
            </field>
            <!-- MCU_CLKOUT_SWITCHED-->
            <field>
              <name>MCU_CLKOUT_SWITCHED</name>
              <description>Indication from mcu_clkout Dynamic mux that the switching happened</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Reserved3-->
            <field>
              <name>Reserved3</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TASS_M4SS_64K_CLK_SWITCHED-->
            <field>
              <name>TASS_M4SS_64K_CLK_SWITCHED</name>
              <description>Indication when TA accessing 2nd memory chunk of M4, clock to Dynamic mux switching happened</description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <!-- CC_CLOCK_MUX_SWITCHED-->
            <field>
              <name>CC_CLOCK_MUX_SWITCHED</name>
              <description>Indication from cc clock  Dynamic mux that the switching happened</description>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
            </field>
            <!-- tass_m4ss_192k_clk_switched-->
            <field>
              <name>TASS_M4SS_192K_CLK_SWITCHED</name>
              <description>Indication when TA accessing 0th memory chunk of M4, clock to Dynamic mux switching happened</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <!-- USART1_CLK_SWITCHED-->
            <field>
              <name>USART1_CLK_SWITCHED</name>
              <description>Indication from usart1 sclk or pclk  Dynamic mux that the switching happened</description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
            </field>
            <!-- USART2_CLK_SWITCHED-->
            <field>
              <name>USART2_CLK_SWITCHED</name>
              <description>Indication from usart2 sclk or pclk  Dynamic mux that the switching happened</description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
            </field>
            <!-- TASS_M4SS_64K0_CLK_SWITCHED-->
            <field>
              <name>TASS_M4SS_64K0_CLK_SWITCHED</name>
              <description>Indication when TA accessing 1st memory chunk of M4, clock to Dynamic mux switching happened</description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
            </field>
            <!-- CLK_FREE_OR_SLP_SWITCHED-->
            <field>
              <name>CLK_FREE_OR_SLP_SWITCHED</name>
              <description>Indication from clk_free_or_slp  Dynamic mux that the switching happened</description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ULP_REF_CLK_SWITCHED-->
            <field>
              <name>ULP_REF_CLK_SWITCHED</name>
              <description>Indication from ulp_ref_clk  Dynamic mux that the switching happened</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- PLL_LOCK_INT_MASK_REG -->
        <!-- REGISTER 16 -->
        <register>
          <name>PLL_LOCK_INT_MASK_REG</name>
          <description>PLL Lock Interrupt Mask Register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000FFFF</resetValue>
          <fields>
            <!-- LCD_PLL_LOCK_MASK_BIT_OF_RISING_EDGE-->
            <field>
              <name>LCD_PLL_LOCK_MASK_BIT_OF_RISING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- DDR_PLL_LOCK_MASK_BIT_OF_RISING_EDGE-->
            <field>
              <name>DDR_PLL_LOCK_MASK_BIT_OF_RISING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AP_PLL_LOCK_MASK_BIT_OF_RISING_EDGE-->
            <field>
              <name>AP_PLL_LOCK_MASK_BIT_OF_RISING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- INTF_PLL_LOCK_MASK_BIT_OF_RISING_EDGE-->
            <field>
              <name>INTF_PLL_LOCK_MASK_BIT_OF_RISING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2S_PLL_LOCK_MASK_BIT_OF_RISING_EDGE-->
            <field>
              <name>I2S_PLL_LOCK_MASK_BIT_OF_RISING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SOC_PLL_LOCK_MASK_BIT_OF_RISING_EDGE-->
            <field>
              <name>SOC_PLL_LOCK_MASK_BIT_OF_RISING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MODEM_PLL_LOCK_MASK_BIT_OF_RISING_EDGE-->
            <field>
              <name>MODEM_PLL_LOCK_MASK_BIT_OF_RISING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PLL_LOCK_DATA_TRIGGER_MASK_BIT_OF_RISING_EDGE-->
            <field>
              <name>PLL_LOCK_DATA_TRIGGER_MASK_BIT_OF_RISING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LCD_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE-->
            <field>
              <name>LCD_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- DDR_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE-->
            <field>
              <name>DDR_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AP_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE-->
            <field>
              <name>AP_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- INTF_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE-->
            <field>
              <name>INTF_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2S_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE-->
            <field>
              <name>I2S_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SOC_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE-->
            <field>
              <name>SOC_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MODEM_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE-->
            <field>
              <name>MODEM_PLL_LOCK_MASK_BIT_OF_FALLING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PLL_LOCK_DATA_TRIGGER_MASK_BIT_OF_FALLING_EDGE-->
            <field>
              <name>PLL_LOCK_DATA_TRIGGER_MASK_BIT_OF_FALLING_EDGE</name>
              <description>1'b1 =&gt; Masked;1'b0 =&gt; Not Masked</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PLL_LOCK_INT_CLR_REG -->
        <!-- REGISTER 17 -->
        <register>
          <name>PLL_LOCK_INT_CLR_REG</name>
          <description>PLL Lock Interrupt Clear Register</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- LCD_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE-->
            <field>
              <name>LCD_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- DDR_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE-->
            <field>
              <name>DDR_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AP_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE-->
            <field>
              <name>AP_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- INTF_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE-->
            <field>
              <name>INTF_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2S_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE-->
            <field>
              <name>I2S_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SOC_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE-->
            <field>
              <name>SOC_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MODEM_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE-->
            <field>
              <name>MODEM_PLL_LOCK_CLEAR_BIT_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PLL_LOCK_DATA_TRIGGER_CLEAR_BIT_OF_RISING_EDGE-->
            <field>
              <name>PLL_LOCK_DATA_TRIGGER_CLEAR_BIT_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LCD_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE-->
            <field>
              <name>LCD_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- DDR_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE-->
            <field>
              <name>DDR_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AP_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE-->
            <field>
              <name>AP_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- INTF_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE-->
            <field>
              <name>INTF_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2S_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE-->
            <field>
              <name>I2S_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SOC_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE-->
            <field>
              <name>SOC_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MODEM_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE-->
            <field>
              <name>MODEM_PLL_LOCK_CLEAR_BIT_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PLL_LOCK_DATA_TRIGGER_CLEAR_BIT_OF_FALLING_EDGE-->
            <field>
              <name>PLL_LOCK_DATA_TRIGGER_CLEAR_BIT_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; Not Cleared
                           1'b1 =&gt; Cleared</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PLL_LOCK_INT_DATA_REG -->
        <!-- REGISTER 18 -->
        <register>
          <name>PLL_LOCK_INT_DATA_REG</name>
          <description>PLL Lock Interrupt DATA Register</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- LCD_PLL_LOCK-->
            <field>
              <name>LCD_PLL_LOCK</name>
              <description>1'b1 =&gt; LCD PLL Lock has to be used as trigger1'b0 =&gt; LCD PLL Lock not to be used as trigger</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- DDR_PLL_LOCK-->
            <field>
              <name>DDR_PLL_LOCK</name>
              <description>1'b1 =&gt; DDR PLL Lock has to be used as trigger1'b0 =&gt; DDR PLL Lock not to be used as trigger</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AP_PLL_LOCK-->
            <field>
              <name>AP_PLL_LOCK</name>
              <description>1'b1 =&gt; AP PLL Lock has to be used as trigger1'b0 =&gt; Ap PLL Lock not to be used as trigger</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- INTF_PLL_LOCK-->
            <field>
              <name>INTF_PLL_LOCK</name>
              <description>1'b1 =&gt; INTF PLL Lock has to be used as trigger1'b0 =&gt; INTF PLL Lock not to be used as trigger</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2S_PLL_LOCK-->
            <field>
              <name>I2S_PLL_LOCK</name>
              <description>1'b1 =&gt; I2S PLL Lock has to be used as trigger1'b0 =&gt; I2S PLL Lock not to be used as trigger</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SOC_PLL_LOCK-->
            <field>
              <name>SOC_PLL_LOCK</name>
              <description>1'b1 =&gt; SoC PLL Lock has to be used as trigger1'b0 =&gt; SoC PLL Lock not to be used as trigger</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MODEM_PLL_LOCK-->
            <field>
              <name>MODEM_PLL_LOCK</name>
              <description>1'b1 =&gt; Modem PLL Lock has to be used as trigger1'b0 =&gt; Modem PLL Lock not to be used as trigger</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SLEEP_CALIB_REG -->
        <!-- REGISTER 19 -->
        <register>
          <name>SLEEP_CALIB_REG</name>
          <description>Sleep Calib Register</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- SLP_CALIB_START_b-->
            <field>
              <name>SLP_CALIB_START_b</name>
              <description>This bit is used to start the calibration.
                           1b1 - Start calibration.
                           slp_calib_duration should be loaded before this bit is set.
                           This bit is self-clearing.
                           When read, if high indicates the completion of calibration process.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SLP_CALIB_CYCLES-->
            <field>
              <name>SLP_CALIB_CYCLES</name>
              <description>These bits are used to program the number of clock cycles over which clock calibration is to be done.</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SLP_CALIB_DURATION_b-->
            <field>
              <name>SLP_CALIB_DURATION_b</name>
              <description>Duration of the sleep clock in terms of processor clocks. This has to be divided with number of calibration cycles to get number of clock cycles(reference clock) in single clock period).
                           1b1 - AP PLL Lock has to be used as trigger1b0 - Ap PLL Lock not to be used as trigger</description>
              <bitRange>[18:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SLP_CALIB_DONE_b-->
            <field>
              <name>SLP_CALIB_DONE_b</name>
              <description>Indicates the end of calibration</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_CALIB_CTRL_REG1 -->
        <!-- REGISTER 19 -->
        <register>
          <name>CLK_CALIB_CTRL_REG1</name>
          <description>Clock Calib Control Register1</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- CC_SOFT_RST_b-->
            <field>
              <name>CC_SOFT_RST_b</name>
              <description>Soft Reset for clock calibrator
			               1b1 - reset enabled
						   1b0 - reset disabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CC_START_b-->
            <field>
              <name>CC_START_b</name>
              <description>start clk calibration 1b1 - start</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CC_CHANGE_TEST_CLK_b-->
            <field>
              <name>CC_CHANGE_TEST_CLK_b</name>
              <description>change test clk. Set this bit to 1'b1 only when test_clk is being changed, else this should be 1'b0.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CC_CLKIN_SEL_b-->
            <field>
              <name>CC_CLKIN_SEL_b</name>
              <description>select the clock to be calibrated
                           4d0 - ulp_ref_clk
                           4d1 - mems_ref_clk
                           4d2 - ulp_20mhz_ringosc_clk
                           4d3 - modem_pll_clk1
                           4d4 - modem_pll_clk2
                           4d5 - intf_pll_clk
                           4d6 - soc_pll_clk
                           4d7 - i2s_pll_clk
                           4d8 - sleep_clk
                           4d9 - bus_clkby2_apss2m4ss_sram
                           4d10, 4d14 - Invalid
                           4d15 - Gated</description>
              <bitRange>[6:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_CALIB_CTRL_REG2 -->
        <!-- REGISTER 20 -->
        <register>
          <name>CLK_CALIB_CTRL_REG2</name>
          <description>Clock Calib Control Register2</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- CC_NUM_REF_CLKS-->
            <field>
              <name>CC_NUM_REF_CLKS</name>
              <description> number of ref_clk cycles to be considered for calibrating.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_CALIB_STS_REG1 -->
        <!-- REGISTER 21 -->
        <register>
          <name>CLK_CALIB_STS_REG1</name>
          <description>Clock Calib Status Register1</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- CC_DONE_b-->
            <field>
              <name>CC_DONE_b</name>
              <description> indicates clock calibratioon done1'b1 =&gt; done1'b0 =&gt; none</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CC_ERROR_b-->
            <field>
              <name>CC_ERROR_b</name>
              <description>indicates clock calibration error1'b1 =&gt; error1'b0 =&gt; none</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_CALIB_STS_REG2 -->
        <!-- REGISTER 22 -->
        <register>
          <name>CLK_CALIB_STS_REG2</name>
          <description>Clock Calib Status Register2</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- CC_NUM_TEST_CLKS-->
            <field>
              <name>CC_NUM_TEST_CLKS</name>
              <description>number of test clk cycles occurred for the specified number of ref_clk cycles</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CLK_CONFIG_REG6 -->
        <!-- REGISTER 23 -->
        <register>
          <name>CLK_CONFIG_REG6</name>
          <description>Clock Config Register6</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000080</resetValue>
          <fields>
            <!-- IID_KH_CLK_DIV_FAC-->
            <field>
              <name>IID_KH_CLK_DIV_FAC</name>
              <description>Clock division factor for iid_clk.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[4:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PADCFG_PCLK_DIV_FAC-->
            <field>
              <name>PADCFG_PCLK_DIV_FAC</name>
              <description>Clock division factor for pclk_pad_config_m4ss</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:9]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- DYN_CLK_GATE_DISABLE_REG2 -->
        <!-- REGISTER 24 -->
        <register>
          <name>DYN_CLK_GATE_DISABLE_REG2</name>
          <description>Dynamic Clock Gate Disable Register2</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- SOC_PLL_SPI_CLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>SOC_PLL_SPI_CLK_DYN_CTRL_DISABLE_b</name>
              <description>	Dynamic clock gate disable control soc pll spi clk 
			                1b1 - Dynamic control of the clock is disbaled 
							1b0 - Dynamic control of the clock is enabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- CT_PCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>CT_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control SCT pclk 
			               1b1 - Dynamic control of the clock is disbaled 
						   1b0 - Dynamic control of the clock is enabled</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- EFUSE_CLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>EFUSE_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control efuse clk 
			               1b1 - Dynamic control of the clock is disbaled 
						   1b0 - Dynamic control of the clock is enabled</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- EFUSE_PCLK_DYN_CTRL_DISABLE_b-->
            <field>
              <name>EFUSE_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock gate disable control efuse pclk 
			               1b1 - Dynamic control of the clock is disbaled 
						   1b0 - Dynamic control of the clock is enabled</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved3-->
            <field>
              <name>Reserved3</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PLL_LOCK_INT_STATUS_REG -->
        <!-- REGISTER 25 -->
        <register>
          <name>PLL_LOCK_INT_STATUS_REG</name>
          <description>PLL Lock Interrupt Status Register</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- LCD_PLL_LOCK_OF_RISING_EDGE-->
            <field>
              <name>LCD_PLL_LOCK_OF_RISING_EDGE</name>
              <description>1b0 - No Interrupt;
			               1b1 - Interrupt encountered.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- DDR_PLL_LOCK_OF_RISING_EDGE-->
            <field>
              <name>DDR_PLL_LOCK_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AP_PLL_LOCK_OF_RISING_EDGE-->
            <field>
              <name>AP_PLL_LOCK_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- INTF_PLL_LOCK_OF_RISING_EDGE-->
            <field>
              <name>INTF_PLL_LOCK_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2S_PLL_LOCK_OF_RISING_EDGE-->
            <field>
              <name>I2S_PLL_LOCK_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SOC_PLL_LOCK_OF_RISING_EDGE-->
            <field>
              <name>SOC_PLL_LOCK_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MODEM_PLL_LOCK_OF_RISING_EDGE-->
            <field>
              <name>MODEM_PLL_LOCK_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PLL_LOCK_DATA_TRIGGER_INTR_OF_RISING_EDGE-->
            <field>
              <name>PLL_LOCK_DATA_TRIGGER_INTR_OF_RISING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LCD_PLL_LOCK_OF_FALLING_EDGE-->
            <field>
              <name>LCD_PLL_LOCK_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- DDR_PLL_LOCK_OF_FALLING_EDGE-->
            <field>
              <name>DDR_PLL_LOCK_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AP_PLL_LOCK_OF_FALLING_EDGE-->
            <field>
              <name>AP_PLL_LOCK_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- INTF_PLL_LOCK_OF_FALLING_EDGE-->
            <field>
              <name>INTF_PLL_LOCK_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- I2S_PLL_LOCK_OF_FALLING_EDGE-->
            <field>
              <name>I2S_PLL_LOCK_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- SOC_PLL_LOCK_OF_FALLING_EDGE-->
            <field>
              <name>SOC_PLL_LOCK_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- MODEM_PLL_LOCK_OF_FALLING_EDGE-->
            <field>
              <name>MODEM_PLL_LOCK_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PLL_LOCK_DATA_TRIGGER_INTR_OF_FALLING_EDGE-->
            <field>
              <name>PLL_LOCK_DATA_TRIGGER_INTR_OF_FALLING_EDGE</name>
              <description>1'b0 =&gt; No Interrupt;1'b1 =&gt; Interrupt encountered.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--Sleep_Clock_Calibrator-->
    <peripheral>
      <name>Sleep_Clock_Calibrator</name>
      <version>1.0</version>
      <description>In this the time periods of 32KHz RC clock, 32KHz RO clock and 32KHz XTAL clock can be calibrated 
				   </description>
      <groupName>TIMEPERIOD_CALIBRATION</groupName>
      <baseAddress>0x24048200</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x1C</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- MCU_CAL_RO_TIMEPERIOD_READ: RO timeperiod read register -->
        <!-- REGISTER 1 -->
        <register>
          <name>MCU_CAL_RO_TIMEPERIOD_READ</name>
          <description>RO timeperiod read register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TIMEPERIOD_RO -->
            <field>
              <name>TIMEPERIOD_RO</name>
              <description>Calibrated RO timeperiod</description>
              <bitRange>[24:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED1  -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[31:25]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCU_CAL_TIMER_CLOCK_PERIOD : MCU calender timer clock period register -->
        <!-- REGISTER 2-->
        <register>
          <name>MCU_CAL_TIMER_CLOCK_PERIOD</name>
          <description>MCU calender timer clock period register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RTC_TIMER_CLK_PERIOD -->
            <field>
              <name>RTC_TIMER_CLK_PERIOD</name>
              <description>RTC timer clock period programmed by SOC</description>
              <bitRange>[24:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[30:25]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SPI_RTC_TIMER_CLK_PERIOD_APPLIED -->
            <field>
              <name>SPI_RTC_TIMER_CLK_PERIOD_APPLIED_b</name>
              <description>Indicated SOC programmed rtc_timer clock period is applied at KHz clock domain</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--  MCU_CAL_TEMP_PROG_REG:temprature program register -->
        <!-- REGISTER 3-->
        <register>
          <name>MCU_CAL_TEMP_PROG_REG</name>
          <description>temprature program register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00050000</resetValue>
          <fields>
            <!-- BYPASS_CALIB_PG -->
            <field>
              <name>BYPASS_CALIB_PG</name>
              <description>To bypass power gating and keep all the blocks always on</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[15:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- MAX_TEMP_CHANGE -->
            <field>
              <name>MAX_TEMP_CHANGE</name>
              <description>maximum temperature change after which rc calibration must be trigger</description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- TEMP_TRIGGER_TIME_SEL -->
            <field>
              <name>TEMP_TRIGGER_TIME_SEL</name>
              <description>temperature trigger time select</description>
              <bitRange>[22:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PERIODIC_TEMP_CALIB_EN -->
            <field>
              <name>PERIODIC_TEMP_CALIB_EN</name>
              <description>Enable periodic checking of temperature</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RTC_TIMER_PERIOD_MUX_SEL -->
            <field>
              <name>RTC_TIMER_PERIOD_MUX_SEL</name>
              <description>rtc timer period mux select</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reser</description>
              <bitRange>[31:25]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCU_CAL_START_REG:mcu cal start register  -->
        <!-- REGISTER 4-->
        <register>
          <name>MCU_CAL_START_REG</name>
          <description>mcu cal start register</description>
          <addressOffset>0x0c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000AE92</resetValue>
          <fields>
            <!-- ALPHA_RO -->
            <field>
              <name>ALPHA_RO</name>
              <description>alpha = 1/2^alpha_ro , averaging factor of RO timeperiod T = alpha(t_inst) + (1- alpha )t_prev</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ALPHA_RC -->
            <field>
              <name>ALPHA_RC</name>
              <description>alpha = 1/2^alpha_rc , averaging factor of RC timeperiod T = alpha(t_inst) + (1- alpha )t_prev</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- NO_OF_RO_CLKS -->
            <field>
              <name>NO_OF_RO_CLKS</name>
              <description>2^no_of_ro_clks no of clocks of ro clock counts for no of rc clocks in that time to measure timeperiod</description>
              <bitRange>[9:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- NO_OF_RC_CLKS -->
            <field>
              <name>NO_OF_RC_CLKS</name>
              <description>2^no_of_rc_clocks = no of rc clocks used in calibration</description>
              <bitRange>[12:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RC_SETTLE_TIME -->
            <field>
              <name>RC_SETTLE_TIME</name>
              <description>no of clocks of RO for the RC clk to settle when enabled</description>
              <bitRange>[15:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RO_TRIGGER_TIME_SEL -->
            <field>
              <name>RO_TRIGGER_TIME_SEL</name>
              <description>ro trigger time select</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RC_TRIGGER_TIME_SEL -->
            <field>
              <name>RC_TRIGGER_TIME_SEL</name>
              <description>rc trigger time select</description>
              <bitRange>[20:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--PERIODIC_RO_CALIB_EN -->
            <field>
              <name>PERIODIC_RO_CALIB_EN</name>
              <description>periodically calibrate RO timeperiod based ro trigger time sel</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PERIODIC_RC_CALIB_EN -->
            <field>
              <name>PERIODIC_RC_CALIB_EN</name>
              <description>periodically calibrate RC timeperiod based rc trigger time sel</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- START_CALIB_RO -->
            <field>
              <name>START_CALIB_RO</name>
              <description>to initiate RO calibration</description>
              <bitRange>[23:23]</bitRange>
              <access>write-only</access>
            </field>
            <!-- START_CALIB_RC  -->
            <field>
              <name>START_CALIB_RC</name>
              <description>to initiate RC calibration</description>
              <bitRange>[24:24]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RC_XTAL_MUX_SEL -->
            <field>
              <name>RC_XTAL_MUX_SEL</name>
              <description>xtal mux select</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!-- LOW_POWER_TRIGGER_SEL -->
            <field>
              <name>LOW_POWER_TRIGGER_SEL</name>
              <description>power trigger select</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!-- VBATT_TRIGGER_TIME_SEL	 -->
            <field>
              <name>VBATT_TRIGGER_TIME_SEL</name>
              <description>trigger to ipmu block for checking vbatt status periodicaly</description>
              <bitRange>[29:27]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--  MCU_CAL_REF_CLK_SETTLE_REG:reference clock settle register  -->
        <!-- REGISTER 5-->
        <register>
          <name>MCU_CAL_REF_CLK_SETTLE_REG</name>
          <description>reference clock settle register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000040</resetValue>
          <fields>
            <!-- XTAL_SETTLE-->
            <field>
              <name>XTAL_SETTLE</name>
              <description>no of 32khz clocks for xtal 40mhz clk to settle</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[15:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- VALID_RC_TIMEPERIOD -->
            <field>
              <name>VALID_RC_TIMEPERIOD</name>
              <description>Valid signal for reading RC timeperiod calibrated</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- VALID_RO_TIMEPERIOD -->
            <field>
              <name>VALID_RO_TIMEPERIOD</name>
              <description>Valid signal for reading RO timeperiod</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reser</description>
              <bitRange>[31:18]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--MCU_CAL_RC_TIMEPERIOD_READ:rc timeperiod read register -->
        <!-- REGISTER 6-->
        <register>
          <name>MCU_CAL_RC_TIMEPERIOD_READ</name>
          <description>rc timeperiod read register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TIMEPERIOD_RC -->
            <field>
              <name>TIMEPERIOD_RC</name>
              <description>Calibrated RC timeperiod</description>
              <bitRange>[24:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[31:25]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--MCU_CAL_REF_CLK_TIEMPERIOD_REG:reference clock timeperiod register -->
        <!-- REGISTER 7 -->
        <register>
          <name>MCU_CAL_REF_CLK_TIEMPERIOD_REG</name>
          <description>reference clock timeperiod register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00333333</resetValue>
          <fields>
            <!-- TIMEPERIOD_REF_CLK	 -->
            <field>
              <name>TIMEPERIOD_REF_CLK</name>
              <description>timeperiod of reference clk with each bit corresponding to granularity of 2^27 = 1us</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--MCU_WDT -->
    <peripheral>
      <name>WDT</name>
      <version>1.0</version>
      <description>A dedicated window watch dog timer for MCU applications 
				   </description>
      <groupName>WDT</groupName>
      <baseAddress>0x24048300</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x1C</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- MCU_WWD_INTERRUPT_TIMER: WATCHDOG interrupt timer register -->
        <!-- REGISTER 1 -->
        <register>
          <name>MCU_WWD_INTERRUPT_TIMER</name>
          <description>WATCHDOG interrupt timer register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--WWD_INTERRUPT_TIMER-->
            <field>
              <name>WWD_INTERRUPT_TIMER</name>
              <description>Watchdog Timer programming values</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1  -->
            <field>
              <name>RESERVED1</name>
              <description>reserved,It is recommended to write these bits to 0</description>
              <bitRange>[31:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_WWD_SYSTEM_RESET_TIMER: MCU watchdog system reset register -->
        <!-- REGISTER 2-->
        <register>
          <name>MCU_WWD_SYSTEM_RESET_TIMER</name>
          <description>MCU watchdog system reset register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- WWD_SYSTEM_RESET_TIMER -->
            <field>
              <name>WWD_SYSTEM_RESET_TIMER</name>
              <description>Watch dog soc reset delay timer programming values</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved,It is recommended to write these bits to 0</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--  MCU_WWD_WINDOW_TIMER:watchdog window timer register -->
        <!-- REGISTER 3-->
        <register>
          <name>MCU_WWD_WINDOW_TIMER</name>
          <description>watchdog window timer register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- WINDOW_TIMER -->
            <field>
              <name>WINDOW_TIMER</name>
              <description>watchdog window timer</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCU_WWD_ARM_STUCK_EN:watchdog arm stuck enable register  -->
        <!-- REGISTER 4-->
        <register>
          <name>MCU_WWD_PROC_STUCK_EN</name>
          <description>watchdog arm stuck enable register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved,It is recommended to write these bit to 0</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROCESSOR_STUCK_RESET_EN -->
            <field>
              <name>PROCESSOR_STUCK_RESET_EN</name>
              <description>Enable to reset M4 core on seeing LOCKUP signal</description>
              <bitRange>[16:16]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved,It is recommended to write these bit to 0</description>
              <bitRange>[31:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--  MCU_WWD_MODE_AND_RSTART:WATCHDOG mode and restart register  -->
        <!-- REGISTER 5-->
        <register>
          <name>MCU_WWD_TIMER_ENABLE</name>
          <description>WDT Enable register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- WWD_MODE_RSTART-->
            <field>
              <name>WWD_TIMER_RSTART</name>
              <description>Writing 1 restarts WDT ,writing 0 no effect</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved,It is recommended to write these bits to 0</description>
              <bitRange>[15:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- WWD_MODE_EN_STATUS -->
            <field>
              <name>WWD_TIMER_EN</name>
              <description>OXAA Enables WDT, OXF0 Disables WDT</description>
              <bitRange>[23:16]</bitRange>
              <access>write-only</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved,It is recommended to write these bits 0</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_WWD_KEY_ENABLE:WATCHDOG KEY ENABLE register -->
        <!-- REGISTER 6-->
        <register>
          <name>MCU_WWD_KEY_ENABLE</name>
          <description>watchdog key enable register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x877F38E9</resetValue>
          <fields>
            <!-- WWD_KEY_ENABLE -->
            <field>
              <name>WWD_KEY_ENABLE</name>
              <description>Writing 0x877F38E9 enables Read access,0x0AAAAAAA disables it of WDT TIMERS</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- MCU RTC -->
    <peripheral>
      <name>Calendar</name>
      <version>1.0</version>
      <description>The MCU calendar acts as RTC  with time in seconds, minutes, hours, days, months, years and centuries 
				   </description>
      <groupName>RTC</groupName>
      <baseAddress>0x24048200</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x28</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- MCU_CAL_ALARM_PROG_1: MCU calender alarm prog register 1 -->
        <!-- REGISTER 1 -->
        <register>
          <name>MCU_CAL_ALARM_PROG_1</name>
          <description>MCU calender alarm prog register 1</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- PROG_ALARM_MSEC -->
            <field>
              <name>PROG_ALARM_MSEC</name>
              <description>milli seconds value of alarm time</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROG_ALARM_SEC -->
            <field>
              <name>PROG_ALARM_SEC</name>
              <description>seconds value of alarm time</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROG_ALARM_MIN -->
            <field>
              <name>PROG_ALARM_MIN</name>
              <description>mins value of alarm time</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROG_ALARM_HOUR -->
            <field>
              <name>PROG_ALARM_HOUR</name>
              <description>hours value of alarm time</description>
              <bitRange>[26:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1  -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[31:27]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCU_CAL_ALARM_PROG_2: MCU calender alarm prog register 2 -->
        <!-- REGISTER 2-->
        <register>
          <name>MCU_CAL_ALARM_PROG_2</name>
          <description>MCU calender alarm prog register 2</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- PROG_ALARM_DAY -->
            <field>
              <name>PROG_ALARM_DAY</name>
              <description>day count in alarm time 1-31</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[7:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- PROG_ALARM_MONTH-->
            <field>
              <name>PROG_ALARM_MONTH</name>
              <description>month count in alarm time</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reser</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- PROG_ALARM_YEAR  -->
            <field>
              <name>PROG_ALARM_YEAR</name>
              <description>year count in alarm time 0 - 99</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROG_ALARM_CENTURTY  -->
            <field>
              <name>PROG_ALARM_CENTURY</name>
              <description>century count in alarm time</description>
              <bitRange>[24:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED3  -->
            <field>
              <name>RESERVED3</name>
              <description>reser</description>
              <bitRange>[30:25]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ALARM_EN  -->
            <field>
              <name>ALARM_EN</name>
              <description>alarm function enable for calendar</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_CAL_POWERGATE_REG:MCU calendar powergate register  -->
        <!-- REGISTER 3-->
        <register>
          <name>MCU_CAL_POWERGATE_REG</name>
          <description>MCU calender powergate register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!-- PG_EN_CALENDER -->
            <field>
              <name>PG_EN_CALENDER</name>
              <description>Start calender block</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ENABLE_CALENDER_COMBI-->
            <field>
              <name>ENABLE_CALENDER_COMBI</name>
              <description>Enable calender combitional logic block</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- DISABLE_COMBI_DYN_PWRGATE_EN-->
            <field>
              <name>DISABLE_COMBI_DYN_PWRGATE_EN</name>
              <description>Disable option for dynamic combo RTC power gate</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- STATIC_COMBI_RTC_PG_EN-->
            <field>
              <name>STATIC_COMBI_RTC_PG_EN</name>
              <description>Enable static combo RTC power gate</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>RESERVED1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCU_CAL_PROG_TIME_1:MCU calendar prog time 1 register  -->
        <!-- REGISTER 4-->
        <register>
          <name>MCU_CAL_PROG_TIME_1</name>
          <description>MCU calendar prog time 1 register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- PROG_MSEC -->
            <field>
              <name>PROG_MSEC</name>
              <description>Milli seconds value to be programmed to real time in calendar when pro_time_trig is 1</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROG_SEC-->
            <field>
              <name>PROG_SEC</name>
              <description>seconds value to be programmed to real time in calendar when pro_time_trig is 1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROG_MIN-->
            <field>
              <name>PROG_MIN</name>
              <description>minutes value to be programmed to real time in calendar when pro_time_trig is 1</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROG_HOUR-->
            <field>
              <name>PROG_HOUR</name>
              <description>hours value to be programmed to real time in calendar when pro_time_trig is 1</description>
              <bitRange>[26:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED2</name>
              <description>reser</description>
              <bitRange>[31:27]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCU_CAL_PROG_TIME_2:MCU calendar prog time 2 register  -->
        <!-- REGISTER 5-->
        <register>
          <name>MCU_CAL_PROG_TIME_2</name>
          <description>MCU calendar prog time 2 register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- PROG_DAY -->
            <field>
              <name>PROG_DAY</name>
              <description>day count value to be programmed to real time in calendar when pro_time_trig is 1</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROG_WEEK_DAY-->
            <field>
              <name>PROG_WEEK_DAY</name>
              <description>program which week day it is</description>
              <bitRange>[7:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROG_MONTH-->
            <field>
              <name>PROG_MONTH</name>
              <description>month value to be programmed to real time in calendar when pro_time_trig is 1</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RES</name>
              <description>reser</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- PROG_YEAR-->
            <field>
              <name>PROG_YEAR</name>
              <description>year value to be programmed to real time in calendar when pro_time_trig is 1</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROG_CENTURY-->
            <field>
              <name>PROG_CENTURY</name>
              <description>century value to be programmed to real time in calendar when pro_time_trig is 1</description>
              <bitRange>[24:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[30:25]</bitRange>
              <access>read-only</access>
            </field>
            <!-- PROG_TIME_TRIG-->
            <field>
              <name>PROG_TIME_TRIG</name>
              <description>load the programmed to the real time in calendar block</description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- MCU_CAL_READ_TIME_MSB:MCU calendar read time msb  register-->
        <!-- REGISTER 6-->
        <register>
          <name>MCU_CAL_READ_TIME_MSB</name>
          <description>MCU calendar read time msb</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- WEEK_DAY -->
            <field>
              <name>WEEK_DAY</name>
              <description>week day</description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- MONTHS_COUNT -->
            <field>
              <name>MONTHS_COUNT</name>
              <description>months count</description>
              <bitRange>[6:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- YEAR_COUNT -->
            <field>
              <name>YEAR_COUNT</name>
              <description>years count</description>
              <bitRange>[13:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- CENTURY_COUNT -->
            <field>
              <name>CENTURY_COUNT</name>
              <description>century count</description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCU_CAL_READ_TIME_LSB:MCU calendar read time lsb  register-->
        <!-- REGISTER 7-->
        <register>
          <name>MCU_CAL_READ_TIME_LSB</name>
          <description>MCU calendar read time lsb</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- MILLISECONDS_COUNT -->
            <field>
              <name>MILLISECONDS_COUNT</name>
              <description>milliseconds count</description>
              <bitRange>[9:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- SECONDS_COUNT -->
            <field>
              <name>SECONDS_COUNT</name>
              <description>seconds count</description>
              <bitRange>[15:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- MINS_COUNT -->
            <field>
              <name>MINS_COUNT</name>
              <description>mins count</description>
              <bitRange>[21:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- HOURS_COUNT -->
            <field>
              <name>HOURS_COUNT</name>
              <description>hours count</description>
              <bitRange>[26:22]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DAYS_COUNT -->
            <field>
              <name>DAYS_COUNT</name>
              <description>days count</description>
              <bitRange>[31:27]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCU_CAL_READ_COUNT_TIMER:MCU calendar read count  timer register-->
        <!-- REGISTER 8-->
        <register>
          <name>MCU_CAL_READ_COUNT_TIMER</name>
          <description>MCU calendar read count timer</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- READ_COUNT_TIMER -->
            <field>
              <name>READ_COUNT_TIMER</name>
              <description>Read timer which increments by time period value to reach to count milliseconds</description>
              <bitRange>[26:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[31:27]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCU_CAL_SLEEP_CLK_COUNTERS:MCU calendar sleep clock counter register-->
        <!-- REGISTER 9-->
        <register>
          <name>MCU_CAL_SLEEP_CLK_COUNTERS</name>
          <description>MCU calendar sleep clock counter</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- SLEEP_CLK_DURATION  -->
            <field>
              <name>SLEEP_CLK_DURATION</name>
              <description>No of sleep clks with respect to APB clock so far from the posedge of sleep clk</description>
              <bitRange>[11:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- PCLK_COUNT_WRT_SLEEP_CLK  -->
            <field>
              <name>PCLK_COUNT_WRT_SLEEP_CLK</name>
              <description>no. of APB clks in 1 sleep clock duration</description>
              <bitRange>[27:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reser</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--MCU_CAL_KEY_EANBLE:MCU calendar key enable register-->
        <!-- REGISTER 10-->
        <register>
          <name>MCU_CAL_KEY_EANBLE</name>
          <description>MCU calendar key enable</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x55555555</resetValue>
          <fields>
            <!-- RTC_KEY -->
            <field>
              <name>RTC_KEY</name>
              <description>enable access to program Watch dog registers</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- MCU_battery_flip_flops -->
    <peripheral>
      <name>High_Power_Domain</name>
      <version>1.0</version>
      <description>The use of this is to store some information in ULP over wake-ups to reduce wake-up time 
				   </description>
      <groupName>High_Power_Domain</groupName>
      <baseAddress>0x24048400</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- M4SS_BYPASS_PWRCTRL_REG1: M4SS bypass power control register 1 -->
        <!-- REGISTER 1 -->
        <register>
          <name>M4SS_BYPASS_PWRCTRL_REG1</name>
          <description>M4ss bypass power control register 1</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RESERVED1  -->
            <field>
              <name>RES</name>
              <description>reserved1</description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- BYPASS_M4SS_PWRCTL_ULP_M4_ULP_AON_b -->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_M4_ULP_AON_b</name>
              <description>Enables software based control of isolation and reset for ULP AON M4ss</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_M4SS_PWRCTL_ULP_EFUSE_b -->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_EFUSE_b</name>
              <description>Enables software based control of isolation and reset for ULP EFUSE</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_M4SS_PWRCTL_ULP_RPDMA_b -->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_RPDMA_b</name>
              <description>Enables software based control of isolation and reset for RPDMA</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED3 -->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_M4SS_PWRCTL_ULP_HIF_SDIO_SPI_b -->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_HIF_SDIO_SPI_b</name>
              <description>Enables software based control of isolation and reset for HIF SDIO SPI</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED4 -->
            <field>
              <name>RESERVED4</name>
              <description>reserved4</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_M4SS_PWRCTL_ULP_QSPI_ICACHE_b -->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_QSPI_ICACHE_b</name>
              <description>Enables software based control of isolation and reset for ULP quad SPI and ICACHE</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_M4SS_PWRCTL_ULP_IID_b -->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_IID_b</name>
              <description>Enables software based control of isolation and reset for ULP IID</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED5 -->
            <field>
              <name>RESERVED5</name>
              <description>reserved5</description>
              <bitRange>[16:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_M4SS_PWRCTL_ULP_M4_DEBUG_b -->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_M4_DEBUG_b</name>
              <description>Enables software based control of isolation and reset for M4ss DEBUG</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_M4SS_PWRCTL_ULP_M4_CORE_b -->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_M4_CORE_b</name>
              <description>Enables software based control of isolation and reset for M4ss CORE</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPASS_M4SS_PWRCTL_ULP_AON_b -->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_AON_b</name>
              <description>Enables software based control of isolation and reset for ULP AON</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED6  -->
            <field>
              <name>RESERVED6</name>
              <description>reserved6</description>
              <bitRange>[21:20]</bitRange>
              <access>read-only</access>
            </field>
            <!-- BYPASS_M4SS_PWRCTL_ULP_ROM_b  -->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_ROM_b</name>
              <description>Enables software based control of isolation and reset for M4ss ROM</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED7  -->
            <field>
              <name>RESERVED7</name>
              <description>reserved7</description>
              <bitRange>[31:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- M4SS_BYPASS_PWRCTRL_REG2: M4SS bypass power control register 2 -->
        <!-- REGISTER 2-->
        <register>
          <name>M4SS_BYPASS_PWRCTRL_REG2</name>
          <description>M4SS bypass power control register 2</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- bypass_m4ss_pwrctl_ulp_SRAM_1 -->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_SRAM_1</name>
              <description>Enables software based control of isolation and reset for M4ss SRAM 1</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- bypass_m4ss_pwrctl_ulp_SRAM_2-->
            <field>
              <name>BYPASS_M4SS_PWRCTL_ULP_SRAM_2</name>
              <description>Enables software based control of isolation and reset for M4ss SRAM 2</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved1</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- M4SS_PWRCTRL_SET_REG:M4SS power control set register  -->
        <!-- REGISTER 3-->
        <register>
          <name>M4SS_PWRCTRL_SET_REG</name>
          <description>M4SS power control set register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00466A10</resetValue>
          <fields>
            <!-- RESERVED1 -->
            <field>
              <name>RES</name>
              <description>reserved1</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_EFUSE_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_EFUSE_b</name>
              <description>Power Gate control  for EFUSE</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[8:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_RPDMA_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_RPDMA_b</name>
              <description>Power Gate control  for RPDMA</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED3 -->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_HIF_SDIO_SPI_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_HIF_SDIO_SPI_b</name>
              <description>Power Gate control  for HIF SDIO SPI</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED4 -->
            <field>
              <name>RESERVED4</name>
              <description>reserved4</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_QSPI_ICACHE_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_QSPI_ICACHE_b</name>
              <description>Power Gate control  for QSPI and ICACHE</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_IID_b -->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_IID_b</name>
              <description>Power Gate control  for IID Block.If set, powered ON Clearing this bit has no effect</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED5 -->
            <field>
              <name>RESERVED5</name>
              <description>reserved5</description>
              <bitRange>[16:15]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_M4_DEBUG_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_M4_DEBUG_b</name>
              <description>Power Gate control for M4 DEBUG</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_M4_CORE_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_M4_CORE_b</name>
              <description>Power Gate control for M4 CORE</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED6 -->
            <field>
              <name>RESERVED6</name>
              <description>reserved6</description>
              <bitRange>[21:19]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_EXT_PWRGATE_EN_N_ULP_ROM_b-->
            <field>
              <name>M4SS_EXT_PWRGATE_EN_N_ULP_ROM_b</name>
              <description>External power gate enable signal for ROM</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED7 -->
            <field>
              <name>RESERVED7</name>
              <description>reserved7</description>
              <bitRange>[31:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- M4SS_PWRCTRL_CLEAR_REG:M4SS power control clear register  -->
        <!-- REGISTER 4-->
        <register>
          <name>M4SS_PWRCTRL_CLEAR_REG</name>
          <description>M4SS power control clear register</description>
          <addressOffset>0x0c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00466A10</resetValue>
          <fields>
            <!-- RESERVED1 -->
            <field>
              <name>RES</name>
              <description>reserved1</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_EFUSE_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_EFUSE_b</name>
              <description>Power Gate control  for EFUSE</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[8:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_RPDMA_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_RPDMA_b</name>
              <description>Power Gate control  for RPDMA</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED3 -->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_HIF_SDIO_SPI_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_HIF_SDIO_SPI_b</name>
              <description>Power Gate control  for HIF SDIO SPI</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED4 -->
            <field>
              <name>RESERVED4</name>
              <description>reserved4</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_QSPI_ICACHE_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_QSPI_ICACHE_b</name>
              <description>Power Gate control  for QSPI and ICACHE</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_IID_b -->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_IID_b</name>
              <description>Power Gate control  for IID Block.If set, powered ON Clearing this bit has no effect</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED5 -->
            <field>
              <name>RESERVED5</name>
              <description>reserved5</description>
              <bitRange>[16:15]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_M4_DEBUG_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_M4_DEBUG_b</name>
              <description>Power Gate control for M4 DEBUG</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- M4SS_PWRGATE_EN_N_ULP_M4_CORE_b-->
            <field>
              <name>M4SS_PWRGATE_EN_N_ULP_M4_CORE_b</name>
              <description>Power Gate control for M4 CORE</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED6 -->
            <field>
              <name>RESERVED6</name>
              <description>reserved6</description>
              <bitRange>[21:19]</bitRange>
              <access>read-only</access>
            </field>
            <!-- M4SS_EXT_PWRGATE_EN_N_ULP_ROM_b-->
            <field>
              <name>M4SS_EXT_PWRGATE_EN_N_ULP_ROM_b</name>
              <description>External power gate enable signal for ROM</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED7 -->
            <field>
              <name>RESERVED7</name>
              <description>reserved7</description>
              <bitRange>[31:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- M4_SRAM_PWRCTRL_SET_REG1:M4SS power control set register 1  -->
        <!-- REGISTER 5-->
        <register>
          <name>M4_SRAM_PWRCTRL_SET_REG1</name>
          <description>M4SS power control set register 1</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00ff03ff</resetValue>
          <fields>
            <!-- m4ss_ext_pwrgate_en_n_ulp_SRAM_1-->
            <field>
              <name>M4SS_EXT_PWRGATE_EN_N_ULP_SRAM_1</name>
              <description>Functional Control signal for M4SS SRAM</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- m4ss_ext_pwrgate_en_n_ulp_SRAM_2-->
            <field>
              <name>M4SS_EXT_PWRGATE_EN_N_ULP_SRAM_2</name>
              <description>Functional Control signal for TASS SRAM shared with M4SS</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved1</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- M4_SRAM_PWRCTRL_CLEAR_REG1:M4SS power control clear register 1  -->
        <!-- REGISTER 6-->
        <register>
          <name>M4_SRAM_PWRCTRL_CLEAR_REG1</name>
          <description>M4SS power control clear register 1</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00ff03ff</resetValue>
          <fields>
            <!-- m4ss_ext_pwrgate_en_n_ulp_SRAM_1-->
            <field>
              <name>M4SS_EXT_PWRGATE_EN_N_ULP_SRAM_1</name>
              <description>Functional Control signal for M4SS SRAM</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4ss_ext_pwrgate_en_n_ulp_SRAM_2-->
            <field>
              <name>M4SS_EXT_PWRGATE_EN_N_ULP_SRAM_2</name>
              <description>Functional Control signal for TASS SRAM shared with M4SS</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved1</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- M4_SRAM_PWRCTRL_SET_REG2:M4SS power control set register 2  -->
        <!-- REGISTER 7-->
        <register>
          <name>M4_SRAM_PWRCTRL_SET_REG2</name>
          <description>M4SS power control set register 2</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00ff03ff</resetValue>
          <fields>
            <!--m4ss_ext_pwrgate_en_n_ulp_SRAM_peri_1-->
            <field>
              <name>M4SS_EXT_PWRGATE_EN_N_ULP_SRAM_PERI_1</name>
              <description>Functional Control signal for M4SS SRAM Dual Rail pins</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4ss_ext_pwrgate_en_n_ulp_SRAM_peri_2-->
            <field>
              <name>M4SS_EXT_PWRGATE_EN_N_ULP_SRAM_PERI_2</name>
              <description>Functional Control signal for TASS SRAM Dual Rail pins shared with M4SS</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved1</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- M4_SRAM_PWRCTRL_CLEAR_REG2:M4SS power control clear register 2  -->
        <!-- REGISTER 8-->
        <register>
          <name>M4_SRAM_PWRCTRL_CLEAR_REG2</name>
          <description>M4SS power control clear register 2</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00ff03ff</resetValue>
          <fields>
            <!-- m4ss_ext_pwrgate_en_n_ulp_SRAM_peri_1-->
            <field>
              <name>M4SS_EXT_PWRGATE_EN_N_ULP_SRAM_PERI_1</name>
              <description>Functional Control signal for M4SS SRAM Dual Rail pins</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4ss_ext_pwrgate_en_n_ulp_SRAM_peri_2-->
            <field>
              <name>M4SS_EXT_PWRGATE_EN_N_ULP_SRAM_PERI_2</name>
              <description>Functional Control signal for TASS SRAM Dual Rail pins shared with M4SS</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved1</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- M4_SRAM_PWRCTRL_SET_REG3:M4SS power control set register 3  -->
        <!-- REGISTER 9-->
        <register>
          <name>M4_SRAM_PWRCTRL_SET_REG3</name>
          <description>M4SS power control set register 3</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00ff03ff</resetValue>
          <fields>
            <!--m4ss_SRAM_input_disable_isolation_ulp_1-->
            <field>
              <name>M4SS_SRAM_INPUT_DISABLE_ISOLATION_ULP_1</name>
              <description>Input isolation control for M4SS SRAM</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4ss_SRAM_input_disable_isolation_ulp_2-->
            <field>
              <name>M4SS_SRAM_INPUT_DISABLE_ISOLATION_ULP_2</name>
              <description>Input isolation control for TASS SRAM shared with M4SS</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved1</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- M4_SRAM_PWRCTRL_CLEAR_REG3:M4SS power control clear register 3  -->
        <!-- REGISTER 10-->
        <register>
          <name>M4_SRAM_PWRCTRL_CLEAR_REG3</name>
          <description>M4SS power control clear register 3</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000f03ff</resetValue>
          <fields>
            <!--m4ss_SRAM_input_disable_isolation_ulp_1-->
            <field>
              <name>M4SS_SRAM_INPUT_DISABLE_ISOLATION_ULP_1</name>
              <description>Input isolation control for M4SS SRAM</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4ss_SRAM_input_disable_isolation_ulp_2-->
            <field>
              <name>M4SS_SRAM_INPUT_DISABLE_ISOLATION_ULP_2</name>
              <description>Input isolation control for TASS SRAM shared with M4SS</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved1</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- M4_SRAM_PWRCTRL_SET_REG4:M4SS power control set register 4  -->
        <!-- REGISTER 11-->
        <register>
          <name>M4_SRAM_PWRCTRL_SET_REG4</name>
          <description>M4SS power control set register 4</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--m4ss_sram_ds_1-->
            <field>
              <name>M4SS_SRAM_DS_1</name>
              <description>Deep-Sleep control for M4SS SRAM</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- M4_SRAM_PWRCTRL_CLEAR_REG4:M4SS power control clear register 4  -->
        <!-- REGISTER 12-->
        <register>
          <name>M4_SRAM_PWRCTRL_CLEAR_REG4</name>
          <description>M4SS power control clear register 4</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--m4ss_sram_ds_1-->
            <field>
              <name>M4SS_SRAM_DS_1</name>
              <description>Deep-Sleep control for M4SS SRAM</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- M4SS_TASS_CTRL_SET_REG:M4SS_TASS control set register-->
        <!-- REGISTER 14-->
        <register>
          <name>M4SS_TASS_CTRL_SET_REG</name>
          <description>M4SS_TASS control set register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000004</resetValue>
          <fields>
            <!--m4ss_ctrl_tass_aon_pwrgate_en-->
            <field>
              <name>M4SS_CTRL_TASS_AON_PWRGATE_EN</name>
              <description>M4SS controlling Power supply for TASS AON domain</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--m4ss_ctrl_tass_aon_disable_isolation_bypass-->
            <field>
              <name>M4SS_CTRL_TASS_AON_DISABLE_ISOLATION_BYPASS</name>
              <description>M4SS controlling Power supply for TASS AON domains isolation enable in bypass mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--m4ss_ctrl_tass_aon_pwr_dmn_rst_bypass-->
            <field>
              <name>M4SS_CTRL_TASS_AON_PWR_DMN_RST_BYPASS</name>
              <description>M4SS controlling Power supply for TASS AON domains reset pin in bypass mode</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- M4SS_TASS_CTRL_CLEAR_REG:M4SS_TASS control CLEAR register-->
        <!-- REGISTER 15-->
        <register>
          <name>M4SS_TASS_CTRL_CLEAR_REG</name>
          <description>M4SS_TASS control CLEAR register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000004</resetValue>
          <fields>
            <!--m4ss_ctrl_tass_aon_pwrgate_en-->
            <field>
              <name>M4SS_CTRL_TASS_AON_PWRGATE_EN</name>
              <description>M4SS controlling Power supply for TASS AON domain</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--m4ss_ctrl_tass_aon_disable_isolation_bypass-->
            <field>
              <name>M4SS_CTRL_TASS_AON_DISABLE_ISOLATION_BYPASS</name>
              <description>M4SS controlling Power supply for TASS AON domains isolation enable in bypass mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--m4ss_ctrl_tass_aon_pwr_dmn_rst_bypass-->
            <field>
              <name>M4SS_CTRL_TASS_AON_PWR_DMN_RST_BYPASS</name>
              <description>M4SS controlling Power supply for TASS AON domains reset pin in bypass mode</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- M4_ULP_MODE_CONFIG:M4_ULP mode configuration register-->
        <!-- REGISTER 16-->
        <register>
          <name>M4_ULP_MODE_CONFIG</name>
          <description>m4 ulp mode config register</description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- ulpmode_isolation_ctrl_ulpss -->
            <field>
              <name>ULPMODE_ISOLATION_CTRL_ULPSS</name>
              <description>Isolation Control for ULP-Mode non-functional paths for ULPSS</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ulpmode_isolation_ctrl_m4ss_aon -->
            <field>
              <name>ULPMODE_ISOLATION_CTRL_M4SS_AON</name>
              <description>Isolation Control for ULP-Mode non-functional paths for M4SS-AON</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ulpmode_isolation_ctrl_m4_ulp -->
            <field>
              <name>ULPMODE_ISOLATION_CTRL_M4_ULP</name>
              <description>Isolation Control for ULP-Mode non-functional paths for M4ULP_AON</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ulpmode_isolation_ctrl_m4_core -->
            <field>
              <name>ULPMODE_ISOLATION_CTRL_M4_CORE</name>
              <description>Isolation Control for ULP-Mode non-functional paths for M4_CORE</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ulpmode_isolation_ctrl_m4_debug -->
            <field>
              <name>ULPMODE_ISOLATION_CTRL_M4_DEBUG_FPU</name>
              <description>Isolation Control for ULP-Mode non-functional paths for M4_DEBUG</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ulpmode_isolation_ctrl_m4_rom -->
            <field>
              <name>ULPMODE_ISOLATION_CTRL_M4_ROM</name>
              <description>Isolation Control for ULP-Mode non-functional paths for ROM</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RES</name>
              <description>reserved1</description>
              <bitRange>[31:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ULPSS_BYPASS_PWRCTRL_REG:ULPSS bypass power control register-->
        <!-- REGISTER 17-->
        <register>
          <name>ULPSS_BYPASS_PWRCTRL_REG</name>
          <description>ULPSS bypass power control register</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- RESERVED1 -->
            <field>
              <name>RES</name>
              <description>reserved1</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_AON -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_AON</name>
              <description>Enables software based control of output isolation for ULPTASS AON</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulpsdcss_pwrctrl_ulp_AON-->
            <field>
              <name>BYPASS_ULPSDCSS_PWRCTRL_ULP_AON</name>
              <description>Enables software based control of output isolation for ULPSDCSS  AON</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reser</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_MISC -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_MISC</name>
              <description>Enables software based control of output isolation for ULP MISC</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_CAP -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_CAP</name>
              <description>Enables software based control of output isolation for ULP CAP</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_VAD -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_VAD</name>
              <description>Enables software based control of output isolation for ULP VAD</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_UART  -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_UART</name>
              <description>Enables software based control of output isolation for ULP UART</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_SSI  -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_SSI</name>
              <description>Enables software based control of output isolation for ULP SSI</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_I2S   -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_I2S</name>
              <description>Enables software based control of output isolation for ULP I2S</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_I2C  -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_I2C</name>
              <description>Enables software based control of output isolation for ULP I2C</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_AUX -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_AUX</name>
              <description>Enables software based control of output isolation for ULP AUX</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_IR -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_IR</name>
              <description>Enables software based control of output isolation for ULP IR</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_UDMA -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_UDMA</name>
              <description>Enables software based control of output isolation for ULP UDMA</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_FIM -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_FIM</name>
              <description>Enables software based control of output isolation for ULP FIM</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED3 -->
            <field>
              <name>RESERVED3</name>
              <description>reserved1</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bypass_ulptass_pwrctl_ulp_SRAM -->
            <field>
              <name>BYPASS_ULPTASS_PWRCTL_ULP_SRAM</name>
              <description>Enables software based control of output isolation for ULPTASS SRAM</description>
              <bitRange>[22:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED4 -->
            <field>
              <name>RESERVED4</name>
              <description>reserved1</description>
              <bitRange>[31:23]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_CTRL_BYPASS:MCU FSM control bypass register-->
        <!-- REGISTER 26-->
        <register>
          <name>MCU_FSM_CTRL_BYPASS</name>
          <description>MCU FSM control bypass register</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000001d</resetValue>
          <fields>
            <!-- mcu_xtal_en_40MHz_bypass_ctrl-->
            <field>
              <name>MCU_XTAL_EN_40MHZ_BYPASS_CTRL</name>
              <description>Xtal 40mhz enable bypass from MCU</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mcu_xtal_en_40MHz_bypass-->
            <field>
              <name>MCU_XTAL_EN_40MHZ_BYPASS</name>
              <description>Value of Xtal Enable in bypass mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mcu_pmu_shut_down_bypass_ctrl-->
            <field>
              <name>MCU_PMU_SHUT_DOWN_BYPASS_CTRL</name>
              <description>Enable bypass mode to Control pmu shut down</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mcu_pmu_shut_down_bypass-->
            <field>
              <name>MCU_PMU_SHUT_DOWN_BYPASS</name>
              <description>Value of pmu shutdown in bypass mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mcu_buck_boost_enable_bypass_ctrl -->
            <field>
              <name>MCU_BUCK_BOOST_ENABLE_BYPASS_CTRL</name>
              <description>Enable software control for buck boost enable</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mcu_buck_boost_enable_bypass-->
            <field>
              <name>MCU_BUCK_BOOST_ENABLE_BYPASS</name>
              <description>Value for MCU BuckBoost Enable in bypass mode</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RES</name>
              <description>reserved1</description>
              <bitRange>[31:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_PMU_LDO_CTRL_SET:MCU PMU LD0 control set register-->
        <!-- REGISTER 27-->
        <register>
          <name>MCU_PMU_LDO_CTRL_SET</name>
          <description>MCU PMU LD0 control set register</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00060007</resetValue>
          <fields>
            <!-- mcu_flash_ldo_en-->
            <field>
              <name>MCU_FLASH_LDO_EN</name>
              <description>Enable Flash LDO from M4SS</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mcu_sco_ldo_en-->
            <field>
              <name>MCU_SCO_LDO_EN</name>
              <description>Enable SoC LDO from M4SS</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mcu_dcdc_en-->
            <field>
              <name>MCU_DCDC_EN</name>
              <description>Enable PMU DCDC from M4SS</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESER</name>
              <description>reserved1</description>
              <bitRange>[16:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mcu_soc_ldo_lvl -->
            <field>
              <name>MCU_SOC_LDO_LVL</name>
              <description>PMU SOC LDO High and Low Voltage selection</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--mcu_dcdc_lvl-->
            <field>
              <name>MCU_DCDC_LVL</name>
              <description>PMU DCDC High and Low Voltage selection</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RES</name>
              <description>reserved1</description>
              <bitRange>[31:19]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_PMU_LDO_CTRL_CLEAR:MCU PMU LD0 control clear register-->
        <!-- REGISTER 28-->
        <register>
          <name>MCU_PMU_LDO_CTRL_CLEAR</name>
          <description>MCU PMU LD0 control clear register</description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00060007</resetValue>
          <fields>
            <!-- mcu_flash_ldo_en-->
            <field>
              <name>MCU_FLASH_LDO_EN</name>
              <description>Enable Flash LDO from M4SS</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mcu_soc_ldo_en-->
            <field>
              <name>MCU_SOC_LDO_EN</name>
              <description>Enable SoC LDO from M4SS</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mcu_dcdc_en-->
            <field>
              <name>MCU_DCDC_EN</name>
              <description>Enable PMU DCDC from M4SS</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESER</name>
              <description>reserved1</description>
              <bitRange>[16:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mcu_soc_ldo_lvl -->
            <field>
              <name>MCU_SOC_LDO_LVL</name>
              <description>PMU SOC LDO High and Low Voltage selection</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--mcu_dcdc_lvl-->
            <field>
              <name>MCU_DCDC_LVL</name>
              <description>PMU DCDC High and Low Voltage selection</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RES</name>
              <description>reserved1</description>
              <bitRange>[31:19]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- PLLCCI_PWRCTRL_REG:PLL CCI power control register-->
        <!-- REGISTER 33-->
        <register>
          <name>PLLCCI_PWRCTRL_REG</name>
          <description>PLL CCI power control register</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000080</resetValue>
          <fields>
            <!-- i2spll_iso_en-->
            <field>
              <name>I2SPLL_ISO_EN</name>
              <description>Enables software based control of isolation and reset for I2SPLL</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- i2spll_bypass_iso_gen-->
            <field>
              <name>I2SPLL_BYPASS_ISO_GEN</name>
              <description>Isolation value</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intfpll_iso_en-->
            <field>
              <name>INTFPLL_ISO_EN</name>
              <description>Enables software based control of isolation and reset for INTF PLL</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- intfpll_bypass_iso_gen-->
            <field>
              <name>INTFPLL_BYPASS_ISO_GEN</name>
              <description>Isolation value</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- socpll_iso_enable  -->
            <field>
              <name>SOCPLL_ISO_ENABLE</name>
              <description>Enables software based control of isolation and reset for SOCPLL</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--socpll_bypass_iso_gen-->
            <field>
              <name>SOCPLL_BYPASS_ISO_GEN</name>
              <description>Isolation value</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--socpll_spi_pg_en-->
            <field>
              <name>SOCPLL_SPI_PG_EN</name>
              <description>SOCPLL SPI Power Control</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--SOCPLL_VDD13_ISO_EN-->
            <field>
              <name>SOCPLL_VDD13_ISO_EN</name>
              <description>SOCPLL MACRO POC Control</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RES</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- DLL_PWRCTRL_REG:DLL power control register-->
        <!-- REGISTER 34-->
        <register>
          <name>DLL_PWRCTRL_REG</name>
          <description>DLL power control register</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000044</resetValue>
          <fields>
            <!-- qspi_dll_rx_iso_enable-->
            <field>
              <name>QSPI_DLL_RX_ISO_ENABLE</name>
              <description>Enables software based control of isolation and reset for QSPI_DLL_TX</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_dll_rx_bypass_iso_gen-->
            <field>
              <name>QSPI_DLL_RX_BYPASS_ISO_GEN</name>
              <description>Isolation value</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_dll_rx_pg_en_n-->
            <field>
              <name>QSPI_DLL_RX_PG_EN_N</name>
              <description>QPSI DLL RX Power Control</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESER</name>
              <description>reserved1</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_dll_tx_iso_enable -->
            <field>
              <name>QSPI_DLL_TX_ISO_ENABLE</name>
              <description>Enables software based control of isolation and reset for QSPI_DLL_TX</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--qspi_dll_tx_bypass_iso_gen-->
            <field>
              <name>QSPI_DLL_TX_BYPASS_ISO_GEN</name>
              <description>Isolation value</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--qspi_dll_tx_pg_en_n-->
            <field>
              <name>QSPI_DLL_TX_PG_EN_N</name>
              <description>QPSI DLL TX Power Control</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- MCU FSM-->
    <peripheral>
      <name>MCU_FSM</name>
      <version>1.0</version>
      <description>This is explain the Sleep FSM registers.</description>
      <groupName>MCU_FSM</groupName>
      <baseAddress>0x24048100</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x4C</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- MCU FSM SLEEP CONTROLS AND WAKEUP MODE -->
        <!-- REGISTER 1 -->
        <register>
          <name>MCU_FSM_SLEEP_CTRLS_AND_WAKEUP_MODE</name>
          <description>Sleep Control Signals and Wakeup source selection</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--MCUFSM_SHUTDOWN_ENABLE-->
            <field>
              <name>MCUFSM_SHUTDOWN_ENABLE</name>
              <description>shutdown enable pulse.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--LP_SLEEP_MODE_b-->
            <field>
              <name>LP_SLEEP_MODE_b</name>
              <description>setting this bit enables retention of TASS-RAM, M4SS-RAM in PS2 Active/Sleep state</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Writing 1 to this enables Retention during sleep</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Writing 1 to this enables Retention during sleep</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--M4SS_RAM_RETENTION_MODE_EN-->
            <field>
              <name>M4SS_RAM_RETENTION_MODE_EN</name>
              <description>shutdown enable pulse.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4ULP_RAM_RETENTION_MODE_EN_b-->
            <field>
              <name>M4ULP_RAM_RETENTION_MODE_EN_b</name>
              <description>RAM retention enable for ULP M4 ram during deep sleep</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--TA_RAM_RETENTION_MODE_EN-->
            <field>
              <name>TA_RAM_RETENTION_MODE_EN</name>
              <description>RAM retention enable for ta ram during deep sleep</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--ULPSS_RAM_RETENTION_MODE_EN-->
            <field>
              <name>ULPSS_RAM_RETENTION_MODE_EN</name>
              <description>RAM retention enable for ulpss ram during deep sleep</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4ULP_RAM16K_RETENTION_MODE_EN-->
            <field>
              <name>M4ULP_RAM16K_RETENTION_MODE_EN</name>
              <description>To enable retention mode for m4ulp 16k RAM</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--LDO_SOC_ON_b-->
            <field>
              <name>LDO_SOC_ON_b</name>
              <description>ON ldo soc during deep sleep</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--LDO_FLASH_ON_b-->
            <field>
              <name>LDO_FLASH_ON_b</name>
              <description>ON flash ldo during deep sleep</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--PMU_DCDC_ON_b-->
            <field>
              <name>PMU_DCDC_ON_b</name>
              <description>1: PMU DCDC(BUCK) ON,0: PMU DCDC(BUCK) OFF.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--SKIP_XTAL_WAIT_TIME-->
            <field>
              <name>SKIP_XTAL_WAIT_TIME</name>
              <description>1 : Skips Xtal Good Delay wait time.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCUFSM_WAKEUP_NWPFSM-->
            <field>
              <name>MCUFSM_WAKEUP_NWPFSM</name>
              <description>When Set, mcufsm wakeup enable will wakeup both NWP FSM and MCU FSM.Clear this BIT if this feature is not required..</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--SLEEP_WAKEUP-->
            <field>
              <name>SLEEP_WAKEUP</name>
              <description>Wakeup indication from Processor</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--TIMER_BASED_WAKEUP_b-->
            <field>
              <name>TIMER_BASED_WAKEUP_b</name>
              <description>wakeup enable after deep sleep counter elapses</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--HOST_BASED_WAKEUP_b-->
            <field>
              <name>HOST_BASED_WAKEUP_b</name>
              <description>host based wakeup enable</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--WIRELESS_BASED_WAKEUP_b-->
            <field>
              <name>WIRELESS_BASED_WAKEUP_b</name>
              <description>wireless based wakeup enable</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4_PROC_BASED_WAKEUP_b-->
            <field>
              <name>M4_PROC_BASED_WAKEUP_b</name>
              <description>wakeup based on m4 processor enable</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--GPIO_BASED_WAKEUP_b-->
            <field>
              <name>GPIO_BASED_WAKEUP_b</name>
              <description>wakeup on gpio  interrupt enable based in configuration in  GPIO WAKEUP REGISTER</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!--COMPR_BASED_WAKEUP_b-->
            <field>
              <name>COMPR_BASED_WAKEUP_b</name>
              <description>compartor based wakeup enable, either of any 6 comparator interrupts</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved3-->
            <field>
              <name>Reserved3</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!--WIC_BASED_WAKEUP_b-->
            <field>
              <name>WIC_BASED_WAKEUP_b</name>
              <description>WIC based wakeup mask</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!--ULPSS_BASED_WAKEUP_b-->
            <field>
              <name>ULPSS_BASED_WAKEUP_b</name>
              <description>ULPSS peripheral based wakeup</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDCSS_BASED_WAKEUP_b-->
            <field>
              <name>SDCSS_BASED_WAKEUP_b</name>
              <description>Sensor Data collector based wakeup</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!--ALARM_BASED_WAKEUP_b-->
            <field>
              <name>ALARM_BASED_WAKEUP_b</name>
              <description>Alarm Based wakeup</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!--SEC_BASED_WAKEUP_b-->
            <field>
              <name>SEC_BASED_WAKEUP_b</name>
              <description>Second Pulse Based wakeup</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!--MSEC_BASED_WAKEUP_b-->
            <field>
              <name>MSEC_BASED_WAKEUP_b</name>
              <description>Millisecond Pulse Based wakeup</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!--WDT_INTR_BASED_WAKEUP_b-->
            <field>
              <name>WDT_INTR_BASED_WAKEUP_b</name>
              <description>Millisecond Pulse Based wakeup</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <!--ULPSS_BASED_SLEEP-->
            <field>
              <name>ULPSS_BASED_SLEEP</name>
              <description>ULPSS initiated DeepSleep.</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDCSS_BASED_SLEEP-->
            <field>
              <name>SDCSS_BASED_SLEEP</name>
              <description>SDCSS initiated DeepSleep.</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_PERI_CONFIG_REG -->
        <!-- REGISTER 2 -->
        <register>
          <name>MCU_FSM_PERI_CONFIG_REG</name>
          <description>Configuration for Ultra Low-Power Mode of the processor (PS2 State)</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--ULP_MCU_MODE_EN-->
            <field>
              <name>ULP_MCU_MODE_EN</name>
              <description>Enables voltage switching for PS2-PS4/PS3 and PS4/PS3-PS2 state transitions.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Writing 0 to this disables voltage switching for PS2-PS4/PS3 state transition</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Writing 1 to this enables voltage switching for PS4/PS3-PS2 state transition.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--M4SS_CONTEXT_SWITCH_TOP_ULP_MODE-->
            <field>
              <name>M4SS_CONTEXT_SWITCH_TOP_ULP_MODE</name>
              <description>Enable functional switching for PS2-PS4/PS3 and PS4/PS3-PS2 state transitions</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--WICENREQ-->
            <field>
              <name>WICENREQ</name>
              <description>Its enable or disable maximum of 32KB of LP-SRAM for operation in PS2 state</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[15:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--BGPMU_SAMPLING_EN_R-->
            <field>
              <name>BGPMU_SAMPLING_EN_R</name>
              <description>Controls the mode of Band-Gap for DC-DC 1.35 during PS2 state.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Writing 0 to this disables sampling mode of Band-Gap. This is described in Power Management Section.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Writing 1 to this enables sampling mode of Band-Gap. This is described in Power Management Section.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- GPIO_WAKEUP_REGISTER -->
        <!-- REGISTER 3 -->
        <register>
          <name>GPIO_WAKEUP_REGISTER</name>
          <description>GPIO Wakeup Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GPIO_0_WAKEUP-->
            <field>
              <name>GPIO_0_WAKEUP</name>
              <description>Enable gpio 0 based wakeup.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--GPIO_1_WAKEUP-->
            <field>
              <name>GPIO_1_WAKEUP</name>
              <description>Enable gpio 1 based wakeup</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--GPIO_2_WAKEUP-->
            <field>
              <name>GPIO_2_WAKEUP</name>
              <description>Enable gpio 2 based wakeup</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--GPIO_3_WAKEUP-->
            <field>
              <name>GPIO_3_WAKEUP</name>
              <description>Enable gpio 3 based wakeup</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--GPIO_4_WAKEUP-->
            <field>
              <name>GPIO_4_WAKEUP</name>
              <description>Enable gpio 3 based wakeup</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>It is recommended to write these bits to 0.</description>
              <bitRange>[15:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--CONTINIOUS_START-->
            <field>
              <name>CONTINIOUS_START</name>
              <description>Trigger Deep sleep timer to start counting.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--CONTINIOUS_TIMER_ENABLE-->
            <field>
              <name>CONTINIOUS_TIMER_ENABLE</name>
              <description>Enable Deep sleep timer mode continuous.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--DS_TIMER_SOFT_RESET-->
            <field>
              <name>DS_TIMER_SOFT_RESET</name>
              <description>Enable Deep sleep timer mode continuous.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:19]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_DEEP_SLEEP_DURATION_LSB_REG -->
        <!-- REGISTER 4 -->
        <register>
          <name>MCU_FSM_DEEP_SLEEP_DURATION_LSB_REG</name>
          <description>MCU FSM DEEP SLEEP DURATION LSB Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--MCUFSM_DEEPSLEEP_DURATION_COUNT-->
            <field>
              <name>MCUFSM_DEEPSLEEP_DURATION_COUNT</name>
              <description>LSB bits of deep sleep duration counter after which system wakes up is timeout wakeup is enabled.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_XTAL_AND_PMU_GOOD_COUNT_REG -->
        <!-- REGISTER 5 -->
        <register>
          <name>MCU_FSM_XTAL_AND_PMU_GOOD_COUNT_REG</name>
          <description>MCU FSM XTAL AND PMU GOOD COUNT Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000F000F</resetValue>
          <fields>
            <!--MCUFSM_PMU_POWERGOOD_DURATION_COUNT-->
            <field>
              <name>MCUFSM_PMU_POWERGOOD_DURATION_COUNT</name>
              <description>Wait Delay for  PMU POWER GOOD
                           0 - 5us
                           1 - 10us
                           2 - 12.5us
                           3 - 25us
                           4 - 50us
                           5 - 75us.</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[15:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCUFSM_XTAL_GOODTIME_DURATION_COUNT-->
            <field>
              <name>MCUFSM_XTAL_GOODTIME_DURATION_COUNT</name>
              <description>	Wait Delay for XTAL GOOD Time
                            0 - 5us
                            1 - 10us.</description>
              <bitRange>[20:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:21]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_POWER_CTRL_AND_DELAY -->
        <!-- REGISTER 6 -->
        <register>
          <name>MCU_FSM_POWER_CTRL_AND_DELAY</name>
          <description>Power Control and Delay Configuration for Ultra Low-Power Mode of the processor (PS2 State)</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0FF80000</resetValue>
          <fields>
            <!--PS2_PMU_LDO_OFF_DELAY-->
            <field>
              <name>PS2_PMU_LDO_OFF_DELAY</name>
              <description>PMU BUCK And LDO Turn-OFF Delay.</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[7:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--PS4_SOCLDO_ON_DELAY-->
            <field>
              <name>PS4_SOCLDO_ON_DELAY</name>
              <description>PMU SOCLDO Turn-ON Delay.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>50</name>
                  <description>Configure switching 50us ON time of LDO Soc.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>100</name>
                  <description>Configure switching 100us ON time of LDO Soc.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>200</name>
                  <description>Configure switching 200us ON time of LDO Soc.</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>300</name>
                  <description>Configure switching 300us ON time of LDO Soc.</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>400</name>
                  <description>Configure switching 400us ON time of LDO Soc.</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>500</name>
                  <description>Configure switching 500us ON time of LDO Soc.</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>600</name>
                  <description>Configure switching 600us ON time of LDO Soc.</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>700</name>
                  <description>Configure switching 700us ON time of LDO Soc.</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>800</name>
                  <description>Configure switching 800us ON time of LDO Soc.</description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>900</name>
                  <description>Configure switching 900us ON time of LDO Soc.</description>
                  <value>9</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1000</name>
                  <description>Configure switching 1000us ON time of LDO Soc.</description>
                  <value>10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1100</name>
                  <description>Configure switching 1100us ON time of LDO Soc.</description>
                  <value>11</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1200</name>
                  <description>Configure switching 1200us ON time of LDO Soc.</description>
                  <value>12</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1300</name>
                  <description>Configure switching 1300us ON time of LDO Soc.</description>
                  <value>13</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1400</name>
                  <description>Configure switching 1400us ON time of LDO Soc.</description>
                  <value>14</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1500</name>
                  <description>Configure switching 1400us ON time of LDO Soc.</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--PG4_BUCK_ON_DELAY-->
            <field>
              <name>PG4_BUCK_ON_DELAY</name>
              <description>PMU Buck Turn-ON Delay.</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>50</name>
                  <description>Configure switching 50us ON time of DC-DC.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>100</name>
                  <description>Configure switching 100us ON time of DC-DC.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>200</name>
                  <description>Configure switching 200us ON time of DC-DC.</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>300</name>
                  <description>Configure switching 300us ON time of DC-DC.</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>400</name>
                  <description>Configure switching 400us ON time of DC-DC.</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>500</name>
                  <description>Configure switching 500us ON time of DC-DC.</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>600</name>
                  <description>Configure switching 600us ON time of DC-DC.</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>700</name>
                  <description>Configure switching 700us ON time of DC-DC.</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>800</name>
                  <description>Configure switching 800us ON time of DC-DC.</description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>900</name>
                  <description>Configure switching 900us ON time of DC-DC.</description>
                  <value>9</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1000</name>
                  <description>Configure switching 1000us ON time of DC-DC.</description>
                  <value>10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1100</name>
                  <description>Configure switching 1100us ON time of DC-DC.</description>
                  <value>11</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1200</name>
                  <description>Configure switching 1200us ON time of DC-DC.</description>
                  <value>12</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1300</name>
                  <description>Configure switching 1300us ON time of DC-DC.</description>
                  <value>13</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1400</name>
                  <description>Configure switching 1400us ON time of DC-DC.</description>
                  <value>14</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1500</name>
                  <description>Configure switching 1400us ON time of DC-DC.</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FSM_PERI_SOC_LDO_ENe-->
            <field>
              <name>FSM_PERI_SOC_LDO_EN</name>
              <description>Enable SOCLDO in Peri mode.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Writing 0 to this configures LDO SoC 1.1 in OFF state during PS2.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Writing 1 to this configures LDO SoC 1.1 to ON state during PS2.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FSM_PERI_DCDC enable-->
            <field>
              <name>FSM_PERI_DCDC_EN</name>
              <description>Enable DCDC  in Peri mode.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>Writing 0 to this configures DC-DC 1.35 in OFF state during PS2.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>Writing 1 to this configures DC-DC 1.35 to ON state during PS2.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--POWER_MUX_SEL_ULPSS-->
            <field>
              <name>POWER_MUX_SEL_ULPSS</name>
              <description>Select value for ULPSS(Peripherals) Power Mux</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0</name>
                  <description>DC-DC 0.95.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1</name>
                  <description>LDO SoC 1.1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--POWER_MUX_SEL_M4_ULP-->
            <field>
              <name>POWER_MUX_SEL_M4_ULP</name>
              <description>Select value for M4 ULP (Peripherals + Cortex Core )Power Mux.</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0</name>
                  <description>LDO 0.7V</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1</name>
                  <description>DC-DC 0.95</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>3</name>
                  <description>LDO SoC 1.1</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- POWER_MUX_SEL_M4_ULP_RAM_16K-->
            <field>
              <name>POWER_MUX_SEL_M4_ULP_RAM_16K</name>
              <description>Select value for M4 ULP RAM 16K Power Mux</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>0</name>
                  <description>LDO 0.7V</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1</name>
                  <description>DC-DC 0.95</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>3</name>
                  <description>LDO SoC 1.1</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- POWER_MUX_SEL_M4_ULP_RAM-->
            <field>
              <name>POWER_MUX_SEL_M4_ULP_RAM</name>
              <description>Select value for M4 ULP RAM Power Mux.</description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- POWER_MUX_SEL_ULPSS_RAM-->
            <field>
              <name>POWER_MUX_SEL_ULPSS_RAM</name>
              <description>Select value for ULPSS RAM Power Mux.</description>
              <bitRange>[27:26]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved3-->
            <field>
              <name>Reserved3</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_CLKS_REG -->
        <!-- REGISTER 7 -->
        <register>
          <name>MCU_FSM_CLKS_REG</name>
          <description>MCU FSM Clocks Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x02D48000</resetValue>
          <fields>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--HF_FSM_CLK_SELECT-->
            <field>
              <name>HF_FSM_CLK_SELECT</name>
              <description> Disable signal for m4ss reference clock.</description>
              <bitRange>[4:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[14:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--HF_FSM_CLK_SWITCHED_SYNC-->
            <field>
              <name>HF_FSM_CLK_SWITCHED_SYNC</name>
              <description> If high freq fsm clock select is modified.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--HF_FSM_CLK_FREQ-->
            <field>
              <name>HF_FSM_CLK_FREQ</name>
              <description>High Frequency Source Clock value in MHz.</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--US_DIV_COUNT-->
            <field>
              <name>US_DIV_COUNT</name>
              <description>One Micro second division factor.
                           Program value to 3. If hf_fsm_gen_2mhz is 0
                           Program value to 1. If hf_fsm_gen_2mhz is 1.</description>
              <bitRange>[23:22]</bitRange>
              <access>read-write</access>
            </field>
            <!--HF_FSM_GEN_2MHZ-->
            <field>
              <name>HF_FSM_GEN_2MHZ</name>
              <description>Enable 2Mhz clock for FSM
                           1 -Enable 2Mhz option
                           0- Enable 4MHz option.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--HF_FSM_CLK_EN-->
            <field>
              <name>HF_FSM_CLK_EN</name>
              <description>high frequency mcu fsm clock enable.</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved3-->
            <field>
              <name>Reserved3</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:26]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_REF_CLK_REG -->
        <!-- REGISTER 8 -->
        <register>
          <name>MCU_FSM_REF_CLK_REG</name>
          <description>MCU FSM Clocks Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x01011101</resetValue>
          <fields>
            <!--M4SS_REF_CLK_SEL-->
            <field>
              <name>M4SS_REF_CLK_SEL</name>
              <description>Dynamic Reference Clock Mux select of M4SS
                           0 - Clock will be gated at dynamic mux output of M4SS
                           1 - ulp_mhz_rc_byp_clk
                           2 - ulp_mhz_rc_clk
                           3 - rf_ref_clk
                           4 - mems_ref_clk
                           5 - ulp_20mhz_ringosc_clk
                           6 - ulp_doubler_clk
                           7 - ref_byp_clk to TASS.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[6:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4SS_REF_CLK_CLEANER_OFF_b-->
            <field>
              <name>M4SS_REF_CLK_CLEANER_OFF_b</name>
              <description> Disable signal for m4ss reference clock.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4SS_REF_CLK_CLEANER_ON_b-->
            <field>
              <name>M4SS_REF_CLK_CLEANER_ON_b</name>
              <description>  Enable clk cleaner for m4ss reference clock.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--TASS_REF_CLK_SEL-->
            <field>
              <name>TASS_REF_CLK_SEL</name>
              <description>Dynamic Reference Clock Mux select of TASS controlled by M4.
                           0 : Clock will be gated at dynamic mux output of TASS
                           1 : ulp_mhz_rc_byp_clk
                           2 : ulp_mhz_rc_clk
                           3 : rf_ref_clk
                           4 : mems_ref_clk
                           5 : ulp_20mhz_ringosc_clk
                           6 : ref_byp_clk to TASS.</description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved3-->
            <field>
              <name>Reserved3</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--ULPSS_REF_CLK_SEL_b-->
            <field>
              <name>ULPSS_REF_CLK_SEL_b</name>
              <description>Dynamic Reference Clock Mux select of TASS controlled by M4.
                           0 : Clock will be gated at dynamic mux output of TASS
                           1 : ulp_mhz_rc_byp_clk
                           2 : ulp_mhz_rc_clk
                           3 : rf_ref_clk
                           4 : mems_ref_clk
                           5 : ulp_20mhz_ringosc_clk
                           6 : ref_byp_clk to TASS.</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved4-->
            <field>
              <name>Reserved4</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[22:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--ULPSS_REF_CLK_CLEANER_OFF_b-->
            <field>
              <name>ULPSS_REF_CLK_CLEANER_OFF_b</name>
              <description>Clock cleaner Off signal for ulpss ref clock.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!--ULPSS_REF_CLK_CLEANER_ON_b-->
            <field>
              <name>ULPSS_REF_CLK_CLEANER_ON_b</name>
              <description>Clock cleaner Off signal for ulpss ref clock.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved5-->
            <field>
              <name>Reserved5</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[27:25]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDCSS_CLK_SEL_b-->
            <field>
              <name>SDCSS_CLK_SEL_b</name>
              <description>select between RC / RO 32KHz clk in sdcss
                           01 - 32MHz RC Clock
                           10- 20MHz RO Clock.</description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDCSS_CLK_EN_b-->
            <field>
              <name>SDCSS_CLK_EN_b</name>
              <description>To enable dynamic clock for sdcss</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDCSS_STATIC_CLK_EN_b-->
            <field>
              <name>SDCSS_STATIC_CLK_EN_b</name>
              <description>To enable static clk for sensor data collector subsystem</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_CLK_ENS_AND_FIRST_BOOTUP -->
        <!-- REGISTER 9 -->
        <register>
          <name>MCU_FSM_CLK_ENS_AND_FIRST_BOOTUP</name>
          <description>MCU FSM And First Bootup</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x004B0000</resetValue>
          <fields>
            <!--FIRST_BOOTUP_MCU_N_b-->
            <field>
              <name>FIRST_BOOTUP_MCU_N_b</name>
              <description>Indication for S/W to distinguish b/w First Power or ULP wakeup.S/W need to set this Bit after first power ..</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RAM_RETENTION_STATUS_M4SS_b-->
            <field>
              <name>RAM_RETENTION_STATUS_M4SS_b</name>
              <description>Indicates to S/W that RAM's were in retention mode during Sleep time.
                           1 - RAM are in retention mode during sleep.
                           0 - RAM are not in retention mode during sleep.Domain is OFF..</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--RETENTION_DOMAIN_ON_b-->
            <field>
              <name>RETENTION_DOMAIN_ON_b</name>
              <description>Indicates to S/W that Retention domain is ON.
                           1 - Domain is ON.
                           0 - Domain is OFF..</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--CHIP_MODE_VALID_b-->
            <field>
              <name>CHIP_MODE_VALID_b</name>
              <description>Indicates to S/W that ChipMode programming are valid and need not read EFUSE.
                           1 - ChipMode are Valid.
                           0 - ChipModes are invalid.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--STORAGE_DOMAIN_ON_b-->
            <field>
              <name>STORAGE_DOMAIN_ON_b</name>
              <description>Indicates to S/W that MCU Data Storage 1 domain is ON.
                           1 - Domain is ON.
                           0 - Domain is OFF..</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[14:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_FSM_RESET_N_SYNC_b-->
            <field>
              <name>MCU_FSM_RESET_N_SYNC_b</name>
              <description>Indicated MCU FSM is out of reset.
                           1 : Indicated MCU FSM is out of reset
                           0 : Indicated MCU FSM is in reset.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_ULP_32KHZ_RC_CLK_EN_b-->
            <field>
              <name>MCU_ULP_32KHZ_RC_CLK_EN_b</name>
              <description>Enables ULP 32KHz Rc Clock.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_ULP_32KHZ_RO_CLK_EN_b-->
            <field>
              <name>MCU_ULP_32KHZ_RO_CLK_EN_b</name>
              <description>Enables ULP 32KHz RO Clock.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_ULP_32KHZ_XTAL_CLK_EN_b-->
            <field>
              <name>MCU_ULP_32KHZ_XTAL_CLK_EN_b</name>
              <description>Enables ULP 32KHz Xtal Clock.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_ULP_MHZ_RC_CLK_EN_b-->
            <field>
              <name>MCU_ULP_MHZ_RC_CLK_EN_b</name>
              <description>Enables ULP 32MHz RC Clock.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_ULP_20MHZ_RING_OSC_CLK_EN_b-->
            <field>
              <name>MCU_ULP_20MHZ_RING_OSC_CLK_EN_b</name>
              <description>Enables ULP 20mhz RO Clock.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_ULP_DOUBLER_CLK_EN_b-->
            <field>
              <name>MCU_ULP_DOUBLER_CLK_EN_b</name>
              <description>Enables ULP Doubler Clock.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_ULP_40MHZ_CLK_EN_b-->
            <field>
              <name>MCU_ULP_40MHZ_CLK_EN_b</name>
              <description>Enables 40MHz XTAL clock.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved2`-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:23]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_CRTL_PDM_AND_ENABLES -->
        <!-- REGISTER 10 -->
        <register>
          <name>MCU_FSM_CRTL_PDM_AND_ENABLES</name>
          <description>Power Domains Controlled by Sleep FSM.</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000F0018</resetValue>
          <fields>
            <!--ENABLE_WDT_IN_SLEEP_b-->
            <field>
              <name>ENABLE_WDT_IN_SLEEP_b</name>
              <description>Its enable or disable WDT during Sleep/Shutdown states.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Writing 0 to this enables WDT during Sleep/Shutdown states.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Writing 1 to this enables WDT during Sleep/Shutdown states.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--ENABLE_WURX_DETECTION_b Enable-->
            <field>
              <name>ENABLE_WURX_DETECTION_b</name>
              <description>Its enable or disable detection of On-Air Pattern using Wake-Fi Rx.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Writing 0 to this disables detection of On-Air Pattern using Wake-Fi Rx.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Writing 1 to this enables detection of On-Air Pattern using Wake-Fi Rx.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESET_MCU_BBF_DM_EN_b Enable-->
            <field>
              <name>RESET_MCU_BBF_DM_EN_b</name>
              <description>Its enable or disable reset of Power Domain Control Battery FF's on wakeup.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Writing 0 to this disables reset of Power Domain Control Battery FF's on wakeup.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Writing 1 to this enables reset of Power Domain Control Battery FF's on wakeup</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--DISABLE_TURNOFF_SRAM_PERI_b-->
            <field>
              <name>DISABLE_TURNOFF_SRAM_PERI_b</name>
              <description>Enable MCU SRAM periphery during Deepsleep
                           1 - Enable SRAM periphery during Deepsleep
                           0 - Disable SRAM periphery during Deepsleep.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--ENABLE_SRAM_DS_CRTL_b-->
            <field>
              <name>ENABLE_SRAM_DS_CRTL_b</name>
              <description>Enable signal for controlling Deepsleep signal of all SRAM used by M4
                           1- Enable SRAM Deepsleep Signal
                           0- Disable SRAM Deepsleep Signal.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[15:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--POWER_ENABLE_FSM_PERI_b-->
            <field>
              <name>POWER_ENABLE_FSM_PERI_b</name>
              <description>Its enable or disable Power to Low-Power FSM.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Writing 0 to this disables Power to Low-Power FSM.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Writing 1 to this enables Power to Low-Power FSM.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--POWER_ENABLE_TIMESTAMPING_b-->
            <field>
              <name>POWER_ENABLE_TIMESTAMPING_b</name>
              <description>Its enable or disable Power to TIMESTAMP.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Writing 0 to this disables Power to TIMESTAMP.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Writing 1 to this enables Power to TIMESTAMP.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--POWER_ENABLE_DEEPSLEEP_TIMER_b-->
            <field>
              <name>POWER_ENABLE_DEEPSLEEP_TIMER_b</name>
              <description>Its enable or disable Power to DEEP SLEEP Timer.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Writing 0 to this disables Power to DEEP SLEEP Timer.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Writing 1 to this enables Power to DEEP SLEEP Timer.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--POWER_ENABLE_RETENTION_DM_b-->
            <field>
              <name>POWER_ENABLE_RETENTION_DM_b</name>
              <description>Its enable or disable Power to Retention Flops during SHIP state.These Flops are used for storing Chip Configuration.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Writing 0 to this disables Power to Retention Flops during SHIP state. These Flops are used for storing Chip Configuration.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Writing 1 to this enables Power to Retention Flops during SHIP state. These Flops are used for storing Chip Configuration.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_GPIO_TIMESTAMPING_CONFIG -->
        <!-- REGISTER 11 -->
        <register>
          <name>MCU_GPIO_TIMESTAMPING_CONFIG</name>
          <description>MCU GPIO TIMESTAMPING CONFIG.</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--ENABLE_GPIO_TIMESTAMPING_b-->
            <field>
              <name>ENABLE_GPIO_TIMESTAMPING_b</name>
              <description>Enable GPIO time stamping Feature..</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--TIMESTAMPING_ON_GPIO0_b Enable-->
            <field>
              <name>TIMESTAMPING_ON_GPIO0_b</name>
              <description>Enable GPIO time stamping on GPIO0.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--TIMESTAMPING_ON_GPIO1_b Enable-->
            <field>
              <name>TIMESTAMPING_ON_GPIO1_b</name>
              <description>Enable GPIO time stamping on GPIO1.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--TIMESTAMPING_ON_GPIO2_b-->
            <field>
              <name>TIMESTAMPING_ON_GPIO2_b</name>
              <description>Enable GPIO time stamping on GPIO2.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--TIMESTAMPING_ON_GPIO3_b-->
            <field>
              <name>TIMESTAMPING_ON_GPIO3_b</name>
              <description>Enable GPIO time stamping on GPIO3.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--TIMESTAMPING_ON_GPIO4_b-->
            <field>
              <name>TIMESTAMPING_ON_GPIO4_b</name>
              <description>Enable GPIO time stamping on GPIO4.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_GPIO_TIMESTAMP_READ -->
        <!-- REGISTER 13 -->
        <register>
          <name>MCU_GPIO_TIMESTAMP_READ</name>
          <description>MCU GPIO TIMESTAMPING READ.</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GPIO_EVENT_COUNT_PARTIAL-->
            <field>
              <name>GPIO_EVENT_COUNT_PARTIAL</name>
              <description>Counter value indicating the duration from GPIO going high to first Sleep clock( MCU FSM Clock) posedge from GPIO going high with respect to 32MHz clock.</description>
              <bitRange>[10:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[15:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--GPIO_EVENT_COUNT_FULL-->
            <field>
              <name>GPIO_EVENT_COUNT_FULL</name>
              <description>Counter value indicating number for 32MHz clock present in 1 Sleep clock (MCU FSM Clock).</description>
              <bitRange>[26:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:27]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- MCU_SLEEPHOLD_REQ -->
        <!-- REGISTER 14 -->
        <register>
          <name>MCU_SLEEPHOLD_REQ</name>
          <description>MCU SLEEP HOLD REQ.</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000003</resetValue>
          <fields>
            <!--SLEEPHOLDREQn-->
            <field>
              <name>SLEEPHOLDREQn</name>
              <description>Sleepholdreq when enable will gate the clock to M4.
                           1 - Sleepholdreq is Disabled.
                           0 - Sleepholdreq is Enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SLEEPHOLDACKn-->
            <field>
              <name>SLEEPHOLDACKn</name>
              <description>SLEEPHOLDACK response to SLEEPHOLDREQ.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[15:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--SELECT_FSM_MODE-->
            <field>
              <name>SELECT_FSM_MODE</name>
              <description>Enable for selecting secondary FSM.
                           1 - Select Secondary FSM
                           0 - Select Primary FSM.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_WAKEUP_STATUS_REG -->
        <!-- REGISTER 15 -->
        <register>
          <name>MCU_FSM_WAKEUP_STATUS_REG</name>
          <description>MCU FSM Wakeup Status Register.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--WAKEUP_STATUS-->
            <field>
              <name>WAKEUP_STATUS</name>
              <description>To know the wakeup source.</description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[15:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_FIRST_POWERUP_POR-->
            <field>
              <name>MCU_FIRST_POWERUP_POR</name>
              <description>Indication to Processor that system came out first power up.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--MCU_FIRST_POWERUP_RESET_N-->
            <field>
              <name>MCU_FIRST_POWERUP_RESET_N</name>
              <description>Indication to Processor that system came out of Reset.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserve2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:18]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_WAKEUP_STATUS_CLEAR -->
        <!-- REGISTER 16 -->
        <register>
          <name>MCU_FSM_WAKEUP_STATUS_CLEAR</name>
          <description>MCU FSM Wakeup Status Clear.</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--WWD_INTERRUPT_STATUS_CLEAR_b-->
            <field>
              <name>WWD_INTERRUPT_STATUS_CLEAR_b</name>
              <description>To Clear WatchDog Interrupt status indication.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--MILLI_SEC_BASED_STATUS_CLEAR_b-->
            <field>
              <name>MILLI_SEC_BASED_STATUS_CLEAR_b</name>
              <description>To Clear Milli-Second Wakeup status indication.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--RTC_SEC_BASED_STATUS_CLEAR_b-->
            <field>
              <name>RTC_SEC_BASED_STATUS_CLEAR_b</name>
              <description>To Clear Second Tick wakeup status indication.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--RTC_ALARM_BASED_WAKEUP_STATUS_CLEAR_b-->
            <field>
              <name>RTC_ALARM_BASED_WAKEUP_STATUS_CLEAR_b</name>
              <description>To Clear RTC Alarm wakeup status indicaition.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--COMP1_BASED_WAKEUP_STATUS_CLEAR_b-->
            <field>
              <name>COMP1_BASED_WAKEUP_STATUS_CLEAR_b</name>
              <description>To Clear comp1 wakeup (Analog IP1 and Analog IP2) status indication.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--COMP2_BASED_WAKEUP_STATUS_CLEAR_b-->
            <field>
              <name>COMP2_BASED_WAKEUP_STATUS_CLEAR_b</name>
              <description>To Clear comp2 wakeup (Analog IP1 and BandGap Scale) status indication.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--COMP3_BASED_WAKEUP_STATUS_CLEAR_b-->
            <field>
              <name>COMP3_BASED_WAKEUP_STATUS_CLEAR_b</name>
              <description>To Clear comp3 wakeup (Analog IP1 and VBatt Scale) status indication.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--COMP4_BASED_WAKEUP_STATUS_CLEAR_b-->
            <field>
              <name>COMP4_BASED_WAKEUP_STATUS_CLEAR_b</name>
              <description>To Clear Comp4 wakeup (Bandgap En and VBatt Scale) status indication.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--COMP5_BASED_WAKEUP_STATUS_CLEAR_b-->
            <field>
              <name>COMP5_BASED_WAKEUP_STATUS_CLEAR_b</name>
              <description>To Clear BOD Wakeup status indication.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--COMP6_BASED_WAKEUP_STATUS_CLEAR_b-->
            <field>
              <name>COMP6_BASED_WAKEUP_STATUS_CLEAR_b</name>
              <description>To Clear Button-wake status indication.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--RF_WAKEUP_CLEAR_b-->
            <field>
              <name>RF_WAKEUP_CLEAR_b</name>
              <description>To Clear WuRX status indication.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_PMU_STATUS_REG -->
        <!-- REGISTER 17 -->
        <register>
          <name>MCU_FSM_PMU_STATUS_REG</name>
          <description>MCU FSM PMU Status Register.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--SCDCDC_LP_MODE_EN-->
            <field>
              <name>SCDCDC_LP_MODE_EN</name>
              <description>SCDC in LP mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--BGPMU_SLEEP_EN_R_b-->
            <field>
              <name>BGPMU_SLEEP_EN_R_b</name>
              <description>Sleep en for BG PMU.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[16:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--STANDBY_LDORF_R-->
            <field>
              <name>STANDBY_LDORF_R</name>
              <description>Standby state for LDO RF.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--STANDBY_LDOSOC_R-->
            <field>
              <name>STANDBY_LDOSOC_R</name>
              <description>Standby state for LDO soc.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--STANDBY_DC1P3_R-->
            <field>
              <name>STANDBY_DC1P3_R</name>
              <description>Standby state for DC1p3.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--POWERGOOD_LDOSOC-->
            <field>
              <name>POWERGOOD_LDOSOC</name>
              <description>Powergood signal from ldosoc.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
            </field>
            <!--LEVEL_OK_DC1P3-->
            <field>
              <name>LEVEL_OK_DC1P3</name>
              <description>Powergood signal from LDORF.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
            </field>
            <!--CL_FLAG_DC1P3-->
            <field>
              <name>CL_FLAG_DC1P3</name>
              <description>Powergood signal read for DC 1.3V.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:23]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_PMUX_CTRLS_RET -->
        <!-- REGISTER 18 -->
        <register>
          <name>MCU_FSM_PMUX_CTRLS_RET</name>
          <description>MCU FSM PMUX Controls Retention.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--POWER_SW_CTRL_TASS_RAM_IN_RETAIN-->
            <field>
              <name>POWER_SW_CTRL_TASS_RAM_IN_RETAIN</name>
              <description>Select value for TASS RAM Power Mux In Retention mode
                           </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--POWER_SW_CTRL_M4SS_RAM_IN_RETAIN-->
            <field>
              <name>POWER_SW_CTRL_M4SS_RAM_IN_RETAIN</name>
              <description>Select value for M4SS RAM Power Mux In Retention mode
                          </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--POWER_SW_CTRL_M4ULP_RAM_IN_RETAIN-->
            <field>
              <name>POWER_SW_CTRL_M4ULP_RAM_IN_RETAIN</name>
              <description>Select value for M4ULP RAM Power Mux In Retention mode
                           </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--POWER_SW_CTRL_M4ULP_RAM16K_IN_RETAIN-->
            <field>
              <name>POWER_SW_CTRL_M4ULP_RAM16K_IN_RETAIN</name>
              <description>Select value for M4ULP 16K RAM Power Mux In Retention mode
                           </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--POWER_SW_CTRL_ULPSS_RAM_IN_RETAIN-->
            <field>
              <name>POWER_SW_CTRL_ULPSS_RAM_IN_RETAIN</name>
              <description>Select value for ULPSS RAM Power Mux In Retention mode</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- MCU_FSM_TOGGLE_COUNT -->
        <!-- REGISTER 19 -->
        <register>
          <name>MCU_FSM_TOGGLE_COUNT</name>
          <description>MCU FSM Toggle Count.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--TOGGLE_COUNT_RSTART-->
            <field>
              <name>TOGGLE_COUNT_RSTART</name>
              <description>Start counting GIPO Toggles.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>Reserved1</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[14:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--LATCH_TOGGLE_DATA-->
            <field>
              <name>LATCH_TOGGLE_DATA</name>
              <description>Trigger indication to read GPIO toggle data.</description>
              <bitRange>[15:15]</bitRange>
              <access>write-only</access>
            </field>
            <!--GPIO_TOGGLE_COUNT-->
            <field>
              <name>GPIO_TOGGLE_COUNT</name>
              <description>GPIO toogle data count.</description>
              <bitRange>[27:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved2-->
            <field>
              <name>Reserved2</name>
              <description>	It is recommended to write these bits to 0.</description>
              <bitRange>[30:28]</bitRange>
              <access>read-write</access>
            </field>
            <!--TOGGLE_DATA_READY-->
            <field>
              <name>TOGGLE_DATA_READY</name>
              <description>GPIO toogle data count.</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--PROCESS SENSOR-->
    <peripheral>
      <name>MCU_ProcessSensor</name>
      <version>1.0</version>
      <description>The process sensor module, count the process clock (high frequency ring clock) over one MCU FSM clock and 
			             divide this clock by programmable value.</description>
      <groupName>ProcessSensor</groupName>
      <baseAddress>0x24048540</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x04</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!--PROCESS_SENSOR_ENABLE_AND_READ: PROCESS SENSOR ENABLE AND READ-->
        <!-- REGISTER 1 -->
        <register>
          <name>PROCESS_SENSOR_ENABLE_AND_READ</name>
          <description>Process sensor enable and read for operation</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000040</resetValue>
          <fields>
            <!-- Process Sensor enable -->
            <field>
              <name>PROCESS_SENSOR_EN</name>
              <description>enable or on the process sensor,if this bit is set	the sensor enable else sensor is disable.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--process ring clock start-->
            <field>
              <name>PS_RING_CLK_START</name>
              <description>Start Ring-Oscillator clock for estimating process corner.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--process clock switch on-->
            <field>
              <name>PS_CLK_SW_ON</name>
              <description>Clock cleaner on signal to clock cleaner block on clock generated by delay chain.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--process clock switch of-->
            <field>
              <name>PS_CLK_SW_OFF</name>
              <description>Clock cleaner off signal to clock cleaner block on clock generated by delay chain.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--number of cycle-->
            <field>
              <name>NUM_CYCLES</name>
              <description>Number of MCU FSM clock(32KHz)for which measurement need to be done.if bits is 1 then 1 clock,
				             2 then 2 clocks,3 then 3 clocks,4 then 4 clocks.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--process sensor measurement done-->
            <field>
              <name>PS_MEAS_DONE_SYNC</name>
              <description>Processor sensor measurement done.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--process sensor count-->
            <field>
              <name>PS_COUNT</name>
              <description>Processor sensor read back</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--MCU_RETENTION-->
    <peripheral>
      <name>MCU_RET</name>
      <version>1.0</version>
      <description>NPSS has Retention domain logic which is a power  domain .  
		             This domain consisted all logic which will turned off if none of the  M4 memories are retained.</description>
      <groupName>MCU_RET</groupName>
      <baseAddress>0x24048600</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x30</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!--MCURET_QSPI_WR_OP_DIS-->
        <!-- REGISTER 1 -->
        <register>
          <name>MCURET_QSPI_WR_OP_DIS</name>
          <description>MCURET QSPI WR OP DIS</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- M4SS_QSPI_WRSR_WR_OP_DISABLE -->
            <field>
              <name>M4SS_QSPI_WRSR_WR_OP_DISABLE</name>
              <description>M4SS Write operation disable to Flash.
                            1 - Write Operation to Flash is not allowed.
                            0 - Write Operation to Flash is allowed.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--TASS_QSPI_WRSR_WR_OP_DISABLE-->
            <field>
              <name>TASS_QSPI_WRSR_WR_OP_DISABLE</name>
              <description>TASS Write operation disable to Flash.
                             1 - Write Operation to Flash is not allowed.
                             0 - Write Operation to Flash is allowed.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--MCURET_BOOTSTATUS-->
        <!-- REGISTER 2 -->
        <register>
          <name>MCURET_BOOTSTATUS</name>
          <description>MCURET BOOT Status</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- BOOT_STATUS -->
            <field>
              <name>BOOT_STATUS</name>
              <description>Boot Status/Configuration information to MCU</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--CHIP_CONFIG_MCU_READ-->
        <!-- REGISTER 3 -->
        <register>
          <name>CHIP_CONFIG_MCU_READ</name>
          <description>MCURET BOOT Status</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- DISABLE_M4 -->
            <field>
              <name>DISABLE_M4</name>
              <description>When set, disables the M4 by clock gating and putting M4 in reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- LIMIT_M4_FREQ_110MHZ_b -->
            <field>
              <name>LIMIT_M4_FREQ_110MHZ_b</name>
              <description>When set, limits the M4SS SoC clock to Max clock/2</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DISABLE_M4_ULP_MODE -->
            <field>
              <name>DISABLE_M4_ULP_MODE</name>
              <description>When set, limits the M4SS SoC clock to Max clock/2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[9:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--M4_FLASH_SIZE-->
            <field>
              <name>M4_FLASH_SIZE</name>
              <description>0xx - Unrestricted
                            100 - Auto mode accesses to flash are restricted to 4 MBit
                            101 - Auto mode accesses to flash are restricted to 8 MBit
                            110 - Auto mode accesses to flash are restricted to 16 MBit
                            111 - Auto mode accesses to flash are restricted to 32 MBit</description>
              <bitRange>[12:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DISABLE_FIM_COP -->
            <field>
              <name>DISABLE_FIM_COP</name>
              <description>When set, disable FIMV</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DISABLE_VAP -->
            <field>
              <name>DISABLE_VAP</name>
              <description>When set, disables VAD</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DISABLE_TOUCH -->
            <field>
              <name>DISABLE_TOUCH</name>
              <description>When set, disables touch interface</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DISABLE_ANALOG_PERIPH -->
            <field>
              <name>DISABLE_ANALOG_PERIPH</name>
              <description>When set, disables analog peripherals</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DISABLE_JTAG -->
            <field>
              <name>DISABLE_JTAG</name>
              <description>When set, disable JTAG interface(both M4 and TA)</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DISABLE_M4SS_KH_ACCESS -->
            <field>
              <name>DISABLE_M4SS_KH_ACCESS</name>
              <description>When set, disables access to key in the key holder from M4SS QSPI</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DISABLE_M4SS_ACCESS_FRM_TASS_SEC -->
            <field>
              <name>DISABLE_M4SS_ACCESS_FRM_TASS_SEC</name>
              <description>When set, M4 can not access TASS memory or registers except for host communication registers</description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved3-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[31:21]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--MCUAON_CTRL_REG4-->
        <!-- REGISTER 4 -->
        <register>
          <name>MCUAON_CTRL_REG4</name>
          <description>MCURET Control Register4</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ULP_GPIO_2_TEST_MODE_OUT_SEL -->
            <field>
              <name>ULP_GPIO_2_TEST_MODE_OUT_SEL</name>
              <description>NPSS Test modes</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ULP_GPIO_1_TEST_MODE_OUT_SEL -->
            <field>
              <name>ULP_GPIO_1_TEST_MODE_OUT_SEL</name>
              <description>NPSS Test modes</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ULP_GPIO_0_TEST_MODE_OUT_SEL -->
            <field>
              <name>ULP_GPIO_0_TEST_MODE_OUT_SEL</name>
              <description>NPSS Test modes</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ULP_GPIOS_IN_TEST_MODE -->
            <field>
              <name>ULP_GPIOS_IN_TEST_MODE</name>
              <description>NPSS Test modes</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--NPSS GPIO Control register-->
        <!--register 5-->
        <cluster>
          <dim>5</dim>
          <dimIncrement>0x04</dimIncrement>
          <dimIndex>0-4</dimIndex>
          <name>NPSS_GPIO_CNTRLn</name>
          <description>NPSS GPIO related registers (0-4)</description>
          <addressOffset>0x001C</addressOffset>
          <register>
            <name>NPSS_GPIO_n__CTRLS</name>
            <description>NPSS GPIO Control register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!-- NPSS_GPIO_MODE -->
              <field>
                <name>NPSS_GPIO_MODE</name>
                <description> NPSS GPIO 0 mode select.</description>
                <bitRange>[2:0]</bitRange>
                <access>read-write</access>
              </field>
              <!-- NPSS_GPIO_REN -->
              <field>
                <name>NPSS_GPIO_REN</name>
                <description>NPSS GPIO 0 Input Buffer Enable. 
                            1- Enable
                            0- Disable.</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <!-- NPSS_GPIO_OEN -->
              <field>
                <name>NPSS_GPIO_OEN</name>
                <description>NPSS GPIO 0 Output Buffer Enable.  
                            1- Input Direction
                            0- Output Direction.</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
              </field>
              <!-- NPSS_GPIO_OUT -->
              <field>
                <name>NPSS_GPIO_OUT</name>
                <description>NPSS GPIO 0 Output value.</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved1-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[7:6]</bitRange>
                <access>read-write</access>
              </field>
              <!-- NPSS_GPIO_POLARITY -->
              <field>
                <name>NPSS_GPIO_POLARITY</name>
                <description>NPSS GPIO 0 Polarity
                            1 - When signal is High
                            0 - When signal is Ligh.</description>
                <bitRange>[8:8]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved2-->
              <field>
                <name>RESERVED2</name>
                <description>Reserved2</description>
                <bitRange>[15:9]</bitRange>
                <access>read-write</access>
              </field>
              <!-- USE_ULPSS_PAD -->
              <field>
                <name>USE_ULPSS_PAD</name>
                <description>Input from ULPSS GPIOs.</description>
                <bitRange>[16:16]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved3-->
              <field>
                <name>RESERVED3</name>
                <description>Reserved3</description>
                <bitRange>[31:17]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
      </registers>
    </peripheral>
    <!--TEMPERATURE SENSOR-->
    <peripheral>
      <name>MCU_TEMP</name>
      <version>1.0</version>
      <description>The temperature sensor is used to read the temperature by using APB registers,
	                  which is access through direct to ULPSS system.</description>
      <groupName>TEMPSENSOR</groupName>
      <baseAddress>0x24048500</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x14</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!--TS ENABLE AND TEMPERATURE DONE -->
        <!-- REGISTER 1 -->
        <register>
          <name>TS_ENABLE_AND_TEMPERATURE_DONE</name>
          <description>Temperature sensor enable and measurement calculation done indication register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000003FC</resetValue>
          <fields>
            <!-- temperature sensor enable-->
            <field>
              <name>TEMP_SENS_EN</name>
              <description>Temperature sensing enable,self clearing register</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--reference clock select -->
            <field>
              <name>REF_CLK_SEL</name>
              <description>if this bit is zero then reference RO clock from analog,else this bit is one then MCU FSM clock</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--cont_count_freeze -->
            <field>
              <name>CONT_COUNT_FREEZE</name>
              <description>Count of reference clock on which ptat clock counts </description>
              <bitRange>[11:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--temp measurement done-->
            <field>
              <name>TEMP_MEASUREMENT_DONE</name>
              <description>temperature measurement done indication.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!-- reserved -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--Temperature sensor slope set-->
        <!-- REGISTER 2 -->
        <register>
          <name>TS_SLOPE_SET</name>
          <description>temperature sensor slope set(slope will be change with respect to temperature change)</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000003B</resetValue>
          <fields>
            <!--slope-->
            <field>
              <name>SLOPE</name>
              <description>This is one time measurement for one package after chip arrives from fab,this is signed bit.</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--temperature_spi-->
            <field>
              <name>TEMPERATURE_SPI</name>
              <description>temperature known</description>
              <bitRange>[26:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--temp_updated-->
            <field>
              <name>TEMP_UPDATED</name>
              <description>temperature updated signal for the reg to capture this temperature.</description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
            </field>
            <!--bjt_based_temp-->
            <field>
              <name>BJT_BASED_TEMP</name>
              <description>Temperature is updated through which is calculated using bjt based if bit is high(1) through spi and bit is low(0) then
			                through calculation RO based</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--TS FE COUNTS NOMINAL SETTINGS-->
        <!-- REGISTER 3 -->
        <register>
          <name>TS_FE_COUNTS_NOMINAL_SETTINGS</name>
          <description>determine calibrated temperature</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0019010E</resetValue>
          <fields>
            <!--f2_nominal-->
            <field>
              <name>F2_NOMINAL</name>
              <description>ptat clock count during calibration,This will vary with chip to chip.</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--nominal temperature-->
            <field>
              <name>NOMINAL_TEMPERATURE</name>
              <description>calibrated temperature</description>
              <bitRange>[22:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:23]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--TS COUNTS READ-->
        <!-- REGISTER 4 -->
        <register>
          <name>TS_COUNTS_READ</name>
          <description>temperature sensor count read.</description>
          <addressOffset>0xC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--count_f2-->
            <field>
              <name>COUNT_F2</name>
              <bitRange>[9:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--count_f1-->
            <field>
              <name>COUNT_F1</name>
              <bitRange>[25:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:26]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--TEMPERATURE READ-->
        <!-- REGISTER 5 -->
        <register>
          <name>TEMPERATURE_READ</name>
          <description>read the temperature</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--temperature_rd-->
            <field>
              <name>TEMPERATURE_RD</name>
              <description>Temperature value for read in signed format</description>
              <bitRange>[10:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved-->
            <field>
              <name>RES10</name>
              <description>reserved10</description>
              <bitRange>[31:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--MCU AON Registers -->
    <peripheral>
      <name>UULP_Domain_Ctrl_REGs</name>
      <version>1.0</version>
      <description>NPSS has always ON domain logic which is not power gatable  Which consistes of power, reset,
	               isolation controls for different power domains in NPSS.</description>
      <groupName>MCU_AON</groupName>
      <baseAddress>0x24048000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x24</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!--MCUAON NPSS power control set register -->
        <!-- REGISTER 1 -->
        <register>
          <name>MCUAON_NPSS_PWRCTRL_SET_REG</name>
          <description>This register used for NPSS power control set register.</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000003FE</resetValue>
          <fields>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>bit is reserved</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enble and ulp MCUBFFS-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUBFFS</name>
              <description>MCU domain battery FF's power gate enable.If set,Power Supply is On clearing this bit has no effect.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUFSM-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUFSM</name>
              <description>MCU FSM power gate enable,If set power supply is on clearing this bit has no effect.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCURTC-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCURTC</name>
              <description>MCU RTC power gate enable if set,power supply is on clearing this bit has no effect.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUWDT-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUWDT</name>
              <description>MCU WDT power gate enable if set,power supply is on clearing this bit has no effect</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUPS-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUPS</name>
              <description>MCU PS power gate enable.if set,power supply is on clearing this bit has no effect.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUTS-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUTS</name>
              <description>MCU temperature sensor power gate enable if set,power supply is on.clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUSTORE1-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUSTORE1</name>
              <description>MCU Storage 1 power gate enable for 64-bit.if set,power supply is on,clearing this bit has no effect.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUSTORE2-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUSTORE2</name>
              <description>MCU Storage 2 power gate enable for 64-bit.if set,power supply is on,clearing this bit has no effect.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUSTORE3-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUSTORE3</name>
              <description>MCU Storage 3 power gate enable for 64-bit.if set,power supply is on,clearing this bit has no effect.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp TIMEPERIOD-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_TIMEPERIOD</name>
              <description>TIMEPERIOD power gate enable.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp NWPAPB MCU control-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_NWPAPB_MCU_CTRL</name>
              <description>NWPAPB MCU control power gate enable</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--MCUAON NPSS power control clear register-->
        <!-- REGISTER 2 -->
        <register>
          <name>MCUAON_NPSS_PWRCTRL_CLEAR_REG</name>
          <description>This register used for NPSS power control clear register.</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000107FE</resetValue>
          <fields>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>bit is reserved</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enble and ulp MCUBFFS-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUBFFS</name>
              <description>MCU domain battery FF's power gate enable.If set,Power Supply is OFF clearing this bit has no effect.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUFSM-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUFSM</name>
              <description>MCU FSM power gate enable,If set power supply is OFF clearing this bit has no effect.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCURTC-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCURTC</name>
              <description>MCU RTC power gate enable if set,power supply is OFF clearing this bit has no effect.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUWDT-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUWDT</name>
              <description>MCU WDT power gate enable if set,power supply is OFF clearing this bit has no effect</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUPS-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUPS</name>
              <description>MCU PS power gate enable.if set,power supply is OFF clearing this bit has no effect.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUTS-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUTS</name>
              <description>MCU temperature sensor power gate enable if set,power supply is OFF.clearing this bit has no effect</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUSTORE1-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUSTORE1</name>
              <description>MCU Storage 1 power gate enable for 64-bit.if set,power supply is OFF,clearing this bit has no effect.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUSTORE2-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUSTORE2</name>
              <description>MCU Storage 2 power gate enable for 64-bit.if set,power supply is OFF,clearing this bit has no effect.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp MCUSTORE3-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_MCUSTORE3</name>
              <description>MCU Storage 3 power gate enable for 64-bit.if set,power supply is OFF,clearing this bit has no effect.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp TIMEPERIOD-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_TIMEPERIOD</name>
              <description>TIMEPERIOD power gate enable.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--slpss power gate enable n ulp NWPAPB MCU control-->
            <field>
              <name>SLPSS_PWRGATE_EN_N_ULP_NWPAPB_MCU_CTRL</name>
              <description>NWPAPB MCU control power gate enable</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--MCUAON IPMU reset control-->
        <!-- REGISTER 3 -->
        <register>
          <name>MCUAON_IPMU_RESET_CTRL</name>
          <description>This register used for ipmu reset control register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000003</resetValue>
          <fields>
            <!--ulp analog spi reset -->
            <field>
              <name>ULP_ANALOG_SPI_RESET_N</name>
              <description>ULP Analog SPI Reset Signal, if bit is 1 then outoff reset,else in reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ipmu spi reset -->
            <field>
              <name>IPMU_SPI_RESET_N</name>
              <description>IPMU SPI Reset Signal,if bit is 1 then outoff reset,else in reset</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--MCUAON SHELF MODE-->
        <!-- REGISTER 4 -->
        <register>
          <name>MCUAON_SHELF_MODE</name>
          <description>This register used for control shelf mode.</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00280000</resetValue>
          <fields>
            <!--enter shelf mode-->
            <field>
              <name>ENTER_SHELF_MODE</name>
              <description>Program 0xAAAA for entering shelf mode.</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--shut down wakeup mode-->
            <field>
              <name>SHUTDOWN_WAKEUP_MODE</name>
              <description>GPIO based wakeup mode configuration.</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--shelf mode gpio based-->
            <field>
              <name>SHELF_MODE_GPIOBASED</name>
              <description>GPIO based shelf mode entering,If set 1 by processor, 
			               On Falling edge of GPIO (Based on the option used in shutdown_wakeup_mode register)
			               chip will enter Shelf mode.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--shelf mode wakeup delay-->
            <field>
              <name>SHELF_MODE_WAKEUP_DELAY</name>
              <description>Programmable delay for resetting Chip during exit phase of shelf mode.</description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:22]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--MCUAON gen control-->
        <!-- REGISTER 5 -->
        <register>
          <name>MCUAON_GEN_CTRLS</name>
          <description>This register used for MCUON gen control mode.</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00020000</resetValue>
          <fields>
            <!--xtal clock from gpio-->
            <field>
              <name>XTAL_CLK_FROM_GPIO</name>
              <description>Select external 32KHz clock from NPSS GPIO's,if bit is 1 then select XTAL clock from GPIO Pins. 
			                Please refer to NPSS GPIO Pin muxing for configuration.else select XTAL 
							clock from IPMU clock sources.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp analog wakeup access-->
            <field>
              <name>ULP_ANALOG_WAKEUP_ACCESS</name>
              <description>ULP analog wakeup Source Access,if bit is 1 then TASS else bit is 0 then M4SS.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reser</description>
              <bitRange>[15:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--Enable PDO-->
            <field>
              <name>ENABLE_PDO</name>
              <description>Enable turning Off POD power domain when SOC_LDO EN is low,When Set to 1,
                		   Up on SoC LDO Enable going low, IO supply (3.3v)to SOC Pads will be tuned-off.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--npss supply 0p9-->
            <field>
              <name>NPSS_SUPPLY_0P9</name>
              <description>keep npss supply always at 0.9V,if bit is 1 then npss supply always at 0.9V
			               else bit is zero then npss supply will switch from 0.6V to 0.9V 
						   based on high frequency enables.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reser</description>
              <bitRange>[31:18]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--MCUAON PDO control-->
        <!-- REGISTER 6 -->
        <register>
          <name>MCUAON_PDO_CTRLS</name>
          <description>This register used for MCUON PDO control mode.</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--soc b io domain enable b-->
            <field>
              <name>SOC_B_IO_DOMAIN_EN_B</name>
              <description>Turn-Off IO supply of SOC domain on bottom side,if bit is 1 
			               then turn-off and 0 then turn on</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--soc l io domain enable b-->
            <field>
              <name>SOC_L_IO_DOMAIN_EN_B</name>
              <description>Turn-Off IO supply of SOC domain on left side,if bit is 1 
			               then turn-off and 0 then turn on</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--soc t io domain enable b-->
            <field>
              <name>SOC_T_IO_DOMAIN_EN_B</name>
              <description>Turn-Off IO supply of SOC domain on top side,if bit is 1 
			               then turn-off and 0 then turn on</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--qspi io domain enable b-->
            <field>
              <name>QSPI_IO_DOMAIN_EN_B</name>
              <description>Turn-Off IO supply of QSPI domain,if bit is 1 then 
			                turn-off and 0 then turn on</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--sdio io domain enable b-->
            <field>
              <name>SDIO_IO_DOMAIN_EN_B</name>
              <description>Turn-Off IO supply of SDIO domain.,if bit is 1 then 
			                turn-off and 0 then turn on</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reser</description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--MCUAON wdt chip reset-->
        <!-- REGISTER 7 -->
        <register>
          <name>MCUAON_WDT_CHIP_RST</name>
          <description>This register used for wdt chip reset purpose.</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!--mcu wdt based chip reset-->
            <field>
              <name>MCU_WDT_BASED_CHIP_RESET</name>
              <description>When cleared, Up on host reset request.Power-On Reset (POR) 
			               will be generated</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--MCUAON_KHZ_CLK_SEL_POR_RESET_STATUS-->
        <!-- REGISTER 8 -->
        <register>
          <name>MCUAON_KHZ_CLK_SEL_POR_RESET_STATUS</name>
          <description>This register used for khz clock select and reset status</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000008</resetValue>
          <fields>
            <!--aon khz clock select-->
            <field>
              <name>AON_KHZ_CLK_SEL</name>
              <description>NPSS AON KHz clock selection,if 001 Khz RO clock select,else if 010 - Khz
               	     	   RC clock select,else 100 Khz Xtal clock select</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--aon khz clock select clock switched-->
            <field>
              <name>AON_KHZ_CLK_SEL_CLOCK_SWITCHED</name>
              <description>If Khz clock mux select is modified,please poll this bit and wait 
			               till it becomes one.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reser</description>
              <bitRange>[15:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--mcu first power up por-->
            <field>
              <name>MCU_FIRST_POWERUP_POR</name>
              <description>Program this bit to '1' upon power_up.It will be clear when Vbatt power is removed</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--mcu first power up reset n-->
            <field>
              <name>MCU_FIRST_POWERUP_RESET_N</name>
              <description>Program this bit to '1' upon power_up,It will be clear when reset pin is pulled low.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:18]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--ULPSS ClOCKS-->
    <peripheral>
      <name>ULPCLK</name>
      <version>1.0</version>
      <description>This block provides programming support for miscellaneous blocks in the chip.
                   Various features in the chip are enabled using this.
	  </description>
      <groupName>ULPSSCLOCKS</groupName>
      <baseAddress>0x24041400</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0xA8</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!--ULP MISC SOFT SET REGISTER-->
        <!-- REGISTER 1 -->
        <!--#DD names are different in HRMs-->
        <register>
          <name>ULP_MISC_SOFT_SET_REG</name>
          <description>ULP MISC soft register set.</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--pcm enable-->
            <field>
              <name>PCM_ENABLE_b</name>
              <description>Used in pcm</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--pcm fsync start-->
            <field>
              <name>PCM_FSYNC_START_b</name>
              <description>Used in pcm</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--bit res-->
            <field>
              <name>BIT_RES</name>
              <description>Used in pcm</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--ir pclock enable-->
            <field>
              <name>IR_PCLK_EN_b</name>
              <description>Static clock enable for IR APB Interface</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--pclock enablei2c-->
            <field>
              <name>PCLK_ENABLE_I2C_b</name>
              <description>This bit is used as Static enable for APB clock to I2C module,if bit
              			   is zero then clock is disabled else bit is one then clock is enabled.
			   </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--clock enable i2s-->
            <field>
              <name>CLK_ENABLE_I2S_b</name>
              <description>This bit is used to enable clock to I2S module if bit is set(1)then clock
			                is enabled is bit is zero then clock disabled.
			   </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--pclock enable ssi master-->
            <field>
              <name>PCLK_ENABLE_SSI_MASTER_b</name>
              <description>This bit is used to enable APB bus clock to SSI master,if bit is zero clock 
			                will be available only when the request from the module is present.else bit 
							is one then clock is enabled.
			   </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--sclock enable ssi master-->
            <field>
              <name>SCLK_ENABLE_SSI_MASTER_b</name>
              <description>This bit is used to enable clock serial clock to SSI master,if bit is zero clock 
			                will be available only when the request from the module is present.else bit 
							is one then clock is enabled.
			   </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--pclk enable uart-->
            <field>
              <name>PCLK_ENABLE_UART_b</name>
              <description>This bit is used to enable peripheral bus clock to UART4,if bit zero then
			                clock will be available only when the request from the module is present or a transaction
  							is pending on the APB bus,else bit is one then clock is enabled.
			   </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--sclock enable uart-->
            <field>
              <name>SCLK_ENABLE_UART_b</name>
              <description>This bit is used to enable asynchronous serial clock to UART4,if bit is zero clock 
			                will be available only when the request from the module is present.else bit 
							is one then clock is enabled.
			   </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--fim pclk enable-->
            <field>
              <name>FIM_PCLK_ENABLE_b</name>
              <description>This bit is used to enable clock to FIM reg file,if this bit is zero then
			                clock will be available only when the request from the module is present 
							else bit is set(1)then clock is enabled.
			   </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--VAD_PCLK_ENABLE_b-->
            <field>
              <name>VAD_PCLK_ENABLE_b</name>
              <description>This bit is used to enable clock to FIM reg file,if this bit is zero then
			                clock will be available only when the request from the module is present 
							else bit is set(1)then clock is enabled.
			   </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--clk_enable_timer-->
            <field>
              <name>CLK_ENABLE_TIMER_b</name>
              <description>This bit is used to enable clock to Timer,if this bit is zero then
			                clock will be available only when the request from the module is present 
							else bit is set(1)then clock is enabled.
			   </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--egpio clock enable-->
            <field>
              <name>EGPIO_CLK_EN_b</name>
              <description>This bit is used to enable clock to gpio,if this bit is zero then
			                clock will be available only when the request from the module is present 
							else bit is set(1)then clock is enabled.
			   </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--reg access spi clock enable-->
            <field>
              <name>REG_ACCESS_SPI_CLK_EN_b</name>
              <description>This bit is used to enable clock to register access spi,if this bit is zero then
			                clock will be available only when the request from the module is present 
							else bit is set(1)then clock is enabled.
			   </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--fim clock enable-->
            <field>
              <name>FIM_CLK_EN_b</name>
              <description>This bit is used to enable clock to FIM module,if this bit is zero then clock will
			                be gated,else bit is one then clock is enabled.
			   </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--vad clock enable-->
            <field>
              <name>VAD_CLK_EN_b</name>
              <description>This bit is used to enable clock to vad module,if this bit is zero then clock will
			                be gated,else bit is one then clock is enabled.
			   </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--clock enable ulp memories-->
            <field>
              <name>CLK_ENABLE_ULP_MEMORIES_b</name>
              <description>This bit is used to enable clock to memories,if this bit is zero then
			                clock will be available only when the request from the module is present 
							else bit is set(1)then clock is enabled.
			   </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--egpio pclk dyn control disable-->
            <field>
              <name>EGPIO_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>This bit is used to disable dynamic clock gating on APB clock to egpio</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--egpio pclk enable-->
            <field>
              <name>EGPIO_PCLK_ENABLE_b</name>
              <description>This bit is used to enable static clock to egpio APB interface</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!--timer pclock enable-->
            <field>
              <name>TIMER_PCLK_EN_b</name>
              <description>This bit is used to enable static clock to Timer APB Interface</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux ulp ext trig 1 select-->
            <field>
              <name>AUX_ULP_EXT_TRIG_1_SEL_b</name>
              <description>aux adc dac controller external trigger2 mux select, to choose between 
			                ulp gpio aux ext trigger2 and timer interrupt.
			   </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux ulp ext trig 2 select-->
            <field>
              <name>AUX_ULP_EXT_TRIG_2_SEL_b</name>
              <description>aux adc dac controller external trigger2 mux select, to choose between ulp 
			                gpio aux ext trigger2 and timer interrupt.
			   </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux soc ext trig 1 select-->
            <field>
              <name>AUX_SOC_EXT_TRIG_1_SEL_b</name>
              <description>aux adc dac controller external trigger3 mux select, to choose between soc aux 
			                ext trigger1and soc aux ext trigger3.
			   </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux soc ext trig 2 select-->
            <field>
              <name>AUX_SOC_EXT_TRIG_2_SEL_b</name>
              <description>aux adc dac controller external trigger4 mux select, to choose between soc aux ext
               			   trigger2and soc aux ext trigger4.
			   </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulpss m4ss slave select-->
            <field>
              <name>ULPSS_M4SS_SLV_SEL_b</name>
              <description>select slave</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulpss tass quasi sync-->
            <field>
              <name>ULPSS_TASS_QUASI_SYNC_b</name>
              <description>TASS quasi sync</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
            </field>
            <!--fim ahb clock enable-->
            <field>
              <name>FIM_AHB_CLK_ENABLE_b</name>
              <description>static clock enable for FIM AHB interface</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <!--touch sensor pclk enable-->
            <field>
              <name>TOUCH_SENSOR_PCLK_ENABLE_b</name>
              <description>Static clock enable for touch APB interface</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP TA PERI ISO REG-->
        <!-- REGISTER 2 -->
        <register>
          <name>ULP_TA_PERI_ISO_REG</name>
          <description>ULP TA isolation register.</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--udma isolation control-->
            <field>
              <name>UDMA_ISO_CNTRL_b</name>
              <description>UDMA module isolation enable,if bit is set(1) then enable else
                            bit is zero then disable.
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--IR isolation control-->
            <field>
              <name>IR_ISO_CNTRL_b</name>
              <description>IR module isolation enable,if bit is set(1) then enable else
                            bit is zero then disable.
			   </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--i2c isolation control-->
            <field>
              <name>I2C_ISO_CNTRL_b</name>
              <description>I2C module isolation enable,if bit is set(1) then enable else
                            bit is zero then disable.
			   </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--i2s isolation control-->
            <field>
              <name>I2S_ISO_CNTRL_b</name>
              <description>I2S module isolation enable,if bit is set(1) then enable else
                            bit is zero then disable.
			   </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--ssi isolation control-->
            <field>
              <name>SSI_ISO_CNTRL_b</name>
              <description>SSI module isolation enable ,if bit is set(1) then enable else
                            bit is zero then disable.
			   </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--uart isolation control-->
            <field>
              <name>UART_ISO_CNTRL_b</name>
              <description>UART module isolation enable,if bit is set(1) then enable else
                            bit is zero then disable.
			   </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux a2d isolation control-->
            <field>
              <name>AUX_A2D_ISO_CNTRL_b</name>
              <description>AUX a2d module isolation enable,if bit is set(1) then enable else
                            bit is zero then disable.
			   </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--vad isolation control-->
            <field>
              <name>VAD_ISO_CNTRL_b</name>
              <description>VAD module isolation enable,if bit is set(1) then enable else
                            bit is zero then disable.
			   </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--touch isolation control-->
            <field>
              <name>TOUCH_ISO_CNTRL_b</name>
              <description>CAP sensor module isolation enable,if bit is set(1) then enable else
                            bit is zero then disable.
			   </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--proc misc isolation control-->
            <field>
              <name>PROC_MISC_ISO_CNTRL_b</name>
              <description>mis top(TOT, semaphore, interrupt cntrl, Timer) module isolation enable
             			   ,if bit is set(1) then enable else bit is zero then disable.
			   </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED0</name>
              <description>reserved0</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--fim isolation control-->
            <field>
              <name>FIM_ISO_CNTRL_b</name>
              <description>FIM module isolation enable ,if bit is set(1) then enable else bit is zero
                			then disable.
			   </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--memory 2k_1 isolation control-->
            <field>
              <name>MEM_2K_1_ISO_CNTRL_b</name>
              <description>2k SRAM memory isolation enable ,if bit is set(1) then enable else bit is zero
                			then disable.
			   </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--memory 2k_2 isolation control-->
            <field>
              <name>MEM_2K_2_ISO_CNTRL_b</name>
              <description>2k SRAM memory isolation enable ,if bit is set(1) then enable else bit is zero
                			then disable.
    		   </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--memory 2k_3 isolation control-->
            <field>
              <name>MEM_2K_3_ISO_CNTRL_b</name>
              <description>2k SRAM memory isolation enable ,if bit is set(1) then enable else bit is zero
                			then disable.
			   </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--memory 2k_4 isolation control-->
            <field>
              <name>MEM_2K_4_ISO_CNTRL_b</name>
              <description>2k SRAM memory isolation enable ,if bit is set(1) then enable else bit is zero
                			then disable.
    		   </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>reserved4</description>
              <bitRange>[31:19]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP TA PERI RESET REG-->
        <!-- REGISTER 3 -->
        <register>
          <name>ULP_TA_PERI_RESET_REG</name>
          <description>ULP TA peri reset register.</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--udma soft reset control-->
            <field>
              <name>UDMA_SOFT_RESET_CNTRL_b</name>
              <description>UDMA module soft reset enable,if bit is set(1) then out of soft reset else
                            bit is zero then in reset.
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--IR soft reset control-->
            <field>
              <name>IR_SOFT_RESET_CNTRL_b</name>
              <description>IR module soft reset enable,if bit is set(1) then out of soft reset else
                            bit is zero then in reset.
			   </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--i2c soft reset control-->
            <field>
              <name>I2C_SOFT_RESET_CNTRL_b</name>
              <description>I2C module soft reset enable ,if bit is set(1) then out of soft reset else
                            bit is zero then in reset.
			   </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--i2s soft reset control-->
            <field>
              <name>I2S_SOFT_RESET_CNTRL_b</name>
              <description>I2S module soft reset enable ,if bit is set(1) then out of soft reset else
                            bit is zero then in reset.
 			   </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--ssi soft reset control-->
            <field>
              <name>SSI_SOFT_RESET_CNTRL_b</name>
              <description>SSI module soft reset enable ,if bit is set(1) then out of soft reset else
                            bit is zero then in reset.
    		   </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--uart soft reset control-->
            <field>
              <name>UART_SOFT_RESET_CNTRL_b</name>
              <description>UART module soft reset enable ,if bit is set(1) then out of soft reset else
                            bit is zero then in reset.
    		   </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux a2d soft reset control-->
            <field>
              <name>AUX_A2D_SOFT_RESET_CNTRL_b</name>
              <description>AUX a2d module soft reset enable,if bit is set(1) then out of soft reset else
                            bit is zero then in reset.
			   </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--vad soft reset control-->
            <field>
              <name>VAD_SOFT_RESET_CNTRL_b</name>
              <description>VAD module soft reset enable,if bit is set(1) then out of soft reset else
                            bit is zero then in reset.
   			   </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--touch soft reset control-->
            <field>
              <name>TOUCH_SOFT_RESET_CNTRL_b</name>
              <description>CAP Sensor module soft reset enable,if bit is set(1) then out of soft reset else
                            bit is zero then in reset.
			   </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--proc misc soft reset control-->
            <field>
              <name>PROC_MISC_SOFT_RESET_CNTRL_b</name>
              <description>mis top(TOT, semaphore, interrupt control, Timer) module soft reset enable,if bit is
               			   set(1) then out of soft reset else bit is zero then in reset 
			   </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--COMP1_OUTPUT_CNTRL_b-->
            <field>
              <name>COMP1_OUTPUT_CNTRL_b</name>
              <description>This is ULP comparator1 interrupt unmasking signal. 0 means comparator1 interrupt is masked and 1 means unmasking. It is masked at power-on time. 
			   </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--COMP2_OUTPUT_CNTRL_b-->
            <field>
              <name>COMP2_OUTPUT_CNTRL_b</name>
              <description>This is ULP comparator2 interrupt unmasking signal. 0 means comparator2 interrupt is masked and 1 means unmasking. It is masked at power-on time.
			   </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--fim soft reset control-->
            <field>
              <name>FIM_SOFT_RESET_CNTRL_b</name>
              <description>FIM module soft reset enable,if bit is set(1) then out of soft reset else bit is 
			                zero then in reset 
			   </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:15]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP TA clock gen register-->
        <!-- REGISTER 4 -->
        <register>
          <name>ULP_TA_CLK_GEN_REG</name>
          <description>ULP TA clock generation register.</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!--ulp2m4 a2a brdg clock enable-->
            <field>
              <name>ULP2M4_A2A_BRDG_CLK_EN_b</name>
              <description>Clock enable for ULP-M4SS AHB-AHB bridge,if bit is set(1) then enable else
                            bit is zero then in disable
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp proc clock select-->
            <field>
              <name>ULP_PROC_CLK_SEL</name>
              <description>ulp bus clock select.</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp proc clock division factor-->
            <field>
              <name>ULP_PROC_CLK_DIV_FACTOR</name>
              <description>ulp bus clock division factor</description>
              <bitRange>[12:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved1</description>
              <bitRange>[31:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP I2C SSI clock general register-->
        <!-- REGISTER 6 -->
        <register>
          <name>ULP_I2C_SSI_CLK_GEN_REG</name>
          <description>ULP I2C SSI clock generation register.</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xF0000000</resetValue>
          <fields>
            <!--ulp i2c clock enable-->
            <field>
              <name>ULP_I2C_CLK_EN_b</name>
              <description>ulp i2c clock enable,if bit is set(1) then enable else
                            bit is zero then in disable
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[12:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[15:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp ssi clock enable-->
            <field>
              <name>ULP_SSI_CLK_EN_b</name>
              <description>ssi clk enable if set(1) then enable else bit is zero then disable </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp ssi clock division factor-->
            <field>
              <name>ULP_SSI_CLK_DIV_FACTOR</name>
              <description>ssi clk enable if set(1) then enable else bit is zero then disable </description>
              <bitRange>[23:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED4</name>
              <description>reserved4</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--ULP SSI clock select-->
            <field>
              <name>ULP_SSI_CLK_SEL</name>
              <description>Ulp ssi clock select.</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ULP I2S clock generation register-->
        <!-- REGISTER 7 -->
        <register>
          <name>ULP_I2S_CLK_GEN_REG</name>
          <description>ULP I2S clock generation register.</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000F0</resetValue>
          <fields>
            <!--ulp i2s clock enable-->
            <field>
              <name>ULP_I2S_CLK_EN_b</name>
              <description>ulp i2s clk enable,if bit is set(1) then enable else
                            bit is zero then in disable
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp i2s clock select-->
            <field>
              <name>ULP_I2S_CLK_SEL_b</name>
              <description>ulp i2s clock select.</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp i2s clock division factor-->
            <field>
              <name>ULP_I2S_CLKDIV_FACTOR</name>
              <description>ulp i2s clock division factor.</description>
              <bitRange>[12:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp i2s master slave mode-->
            <field>
              <name>ULP_I2S_MASTER_SLAVE_MODE_b</name>
              <description>i2s master slave mode decide field.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp i2s sclock dynamic control disable-->
            <field>
              <name>ULP_I2S_SCLK_DYN_CTRL_DISABLE_b</name>
              <description>Disable dynamic clock gating of System clock in I2S</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp i2s loop back mode-->
            <field>
              <name>ULP_I2S_LOOP_BACK_MODE_b</name>
              <description>Enables loop back mode in I2S.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp i2s pclock dynamic control disable-->
            <field>
              <name>ULP_I2S_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Disable dynamic clock gating of APB clock in I2S</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp i2s pclock enable-->
            <field>
              <name>ULP_I2S_PCLK_EN_b</name>
              <description>Static clock enable for APB clock in I2S</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:19]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP UART clock generation register-->
        <!--register 8-->
        <register>
          <name>ULP_UART_CLK_GEN_REG</name>
          <description>ulp uart clock generation register.</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000F0</resetValue>
          <fields>
            <!--ULP UART fractional clock select b-->
            <field>
              <name>ULP_UART_FRAC_CLK_SEL_b</name>
              <description>ulp uart clk selection,if bit is set(1) then fractional divider output is 
			                selected else swallow divider output is selected
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp uart clock select-->
            <field>
              <name>ULP_UART_CLK_SEL</name>
              <description>ulp uart clock select.</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp uart clock division factor-->
            <field>
              <name>ULP_UART_CLKDIV_FACTOR</name>
              <description>ulp uart clock division factor</description>
              <bitRange>[7:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--M4LP control register-->
        <!--register 9-->
        <register>
          <name>M4LP_CTRL_REG</name>
          <description>m4 ulp control register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000040</resetValue>
          <fields>
            <!--Reserved-->
            <field>
              <name>RESERVED0</name>
              <description>reserved0</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp m4 core clock enable-->
            <field>
              <name>ULP_M4_CORE_CLK_ENABLE_b</name>
              <description>Static clock enable m4 core in ULP mode,if bit is set(1) then clock
			                 enable else clock is disable
			   </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp memories clock ulp enable-->
            <field>
              <name>ULP_MEM_CLK_ULP_ENABLE_b</name>
              <description>Static clock enable for M4 memories in ULP mode,if bit is set(1) then clock
			                 enable else dynamic control
			   </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp memories clock ulp dynamic control disable-->
            <field>
              <name>ULP_MEM_CLK_ULP_DYN_CTRL_DISABLE_b</name>
              <description>Disable the dynamic clock gating for M4 memories in ULP mode,if bit is set(1) then 
			                dynamic control disabled else dynamic control enabled.
			   </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--clock status register-->
        <!--register 9-->
        <register>
          <name>CLOCK_STAUS_REG</name>
          <description>read clock status register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--clock switched uart clock-->
            <field>
              <name>CLOCK_SWITCHED_UART_CLK_b</name>
              <description>status of clock mux for uart,if bit is set(1) then clock is switched,else bit is zero
			                then clock not switched.
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched i2s clock-->
            <field>
              <name>CLOCK_SWITCHED_I2S_CLK_b</name>
              <description>Status of clock mux for i2s,if bit is set(1) then clock is switched,else bit is zero
			                then clock not switched.
			   </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched cortex sleep clock-->
            <field>
              <name>CLOCK_SWITCHED_CORTEX_SLEEP_CLK_b</name>
              <description>Status of clock mux for m4 sleep clk,if bit is set(1) then clock is switched,else bit is zero
			                then clock not switched.
			   </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched proc clock-->
            <field>
              <name>CLOCK_SWITCHED_PROC_CLK_b</name>
              <description>Status of clock mux for pclk,if bit is set(1) then clock is switched,else bit is zero
			                then clock not switched.
			   </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched i2c-->
            <field>
              <name>CLOCK_SWITCHED_I2C_b</name>
              <description>Status of clock mux for i2c,if bit is set(1) then clock is switched,else bit is zero
			                then clock not switched.
			   </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched ssi-->
            <field>
              <name>CLOCK_SWITCHED_SSI_b</name>
              <description>Status of clock mux for ssi,if bit is set(1) then clock is switched,else bit is zero
			                then clock not switched.
			   </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched vad-->
            <field>
              <name>CLOCK_SWITCHED_VAD_b</name>
              <description>Status of clock mux for vad,if bit is set(1) then clock is switched,else bit is zero
			                then clock not switched.
			   </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched auxadc-->
            <field>
              <name>CLOCK_SWITCHED_AUXADC_b</name>
              <description>Status of clock mux for aux adc dac clock,if bit is set(1) then clock is switched,else bit
                			is zero then clock not switched.
			   </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched timer-->
            <field>
              <name>CLOCK_SWITCHED_TIMER_b</name>
              <description>Status of clock mux for async timers,if bit is set(1) then clock is switched,else bit
                			is zero then clock not switched.
			   </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched touch sensor-->
            <field>
              <name>CLOCK_SWITCHED_TOUCH_SENSOR_b</name>
              <description>Status of clock mux for touch sensor,if bit is set(1) then clock is switched,else bit
                			is zero then clock not switched.
			   </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched fclk vad-->
            <field>
              <name>CLOCK_SWITCHED_FCLK_VAD_b</name>
              <description>Status of clock mux for vad fast clock,if bit is set(1) then clock is switched,else bit
                			is zero then clock not switched.
			   </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched sclk vad-->
            <field>
              <name>CLOCK_SWITCHED_SCLK_VAD_b</name>
              <description>Status of clock mux for vad slow clock,if bit is set(1) then clock is switched,else bit
                			is zero then clock not switched.
			   </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <!--clock switched systick-->
            <field>
              <name>CLOCK_SWITCHED_SYSTICK_b</name>
              <description>Status of clock mux for systick clock,if bit is set(1) then clock is switched,else bit
                			is zero then clock not switched.
			   </description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP touch clock generation register-->
        <!--register 10-->
        <register>
          <name>ULP_TOUCH_CLK_GEN_REG</name>
          <description>ULP touch clock generation register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000F0</resetValue>
          <fields>
            <!--ulp touch clock enable-->
            <field>
              <name>ULP_TOUCH_CLK_EN_b</name>
              <description>ulp touch clk enable,if bit is set(1) then enable,else bit is zero
			                then disable.
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp touch clock select-->
            <field>
              <name>ULP_TOUCH_CLK_SEL</name>
              <description>ulp touch clock select.</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp touch clock division factor-->
            <field>
              <name>ULP_TOUCH_CLKDIV_FACTOR</name>
              <description>ulp touch clock division factor.</description>
              <bitRange>[12:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP timer clock generation register-->
        <!--register 11-->
        <register>
          <name>ULP_TIMER_CLK_GEN_REG</name>
          <description>ULP clock generation for timer</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000F0</resetValue>
          <fields>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp timer clock select-->
            <field>
              <name>ULP_TIMER_CLK_SEL</name>
              <description>ulp timer clock select.</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[12:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp timer in sync-->
            <field>
              <name>ULP_TIMER_IN_SYNC_b</name>
              <description>Ulp timer in synchronous mode to ULPSS pclk</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:14]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP AUX adc clock generation register-->
        <!--register 12-->
        <register>
          <name>ULP_AUXADC_CLK_GEN_REG</name>
          <description>ULP AUX clock generation register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000F0</resetValue>
          <fields>
            <!--ulp aux clock enable-->
            <field>
              <name>ULP_AUX_CLK_EN_b</name>
              <description>ulp aux clk enable,if bit is one then clock enable else bit is zero then
			                clock disable.
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp aux  clock select-->
            <field>
              <name>ULP_AUX_CLK_SEL</name>
              <description>ulp aux clock select. </description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP vad clock generation register-->
        <!--register 13-->
        <register>
          <name>ULP_VAD_CLK_GEN_REG</name>
          <description>ULP vad clock generation register </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000001EE</resetValue>
          <fields>
            <!--ulp vad clock enable-->
            <field>
              <name>ULP_VAD_CLK_EN_b</name>
              <description>ulp vad clk enable ,if bit is one then clock enable else bit is zero then
			                clock disable.
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp vad clock select-->
            <field>
              <name>ULP_VAD_CLK_SEL</name>
              <description>ulp vad clock select.</description>
              <bitRange>[3:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp vad fclk enable-->
            <field>
              <name>ULP_VAD_FCLK_EN</name>
              <description>Enables Fast clock to VAD.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp vad fclk select-->
            <field>
              <name>ULP_VAD_FCLK_SEL</name>
              <description>ulp vad Fast clock select.</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp vad clock division factor-->
            <field>
              <name>ULP_VAD_CLKDIV_FACTOR</name>
              <description>ulp vad clock division factor</description>
              <bitRange>[16:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--BYPASS I2S clock register-->
        <!--register 14-->
        <register>
          <name>BYPASS_I2S_CLK_REG</name>
          <description>bypass i2s clock register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000004</resetValue>
          <fields>
            <!--bypass i2s pll select-->
            <field>
              <name>BYPASS_I2S_PLL_SEL</name>
              <description>Bypass_I2S PLL clock,if bit is one bypass clock is used else bit is zero then
			                I2S Clock is used.
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--bypass i2s pll clock cleaner on-->
            <field>
              <name>BYPASS_I2S_PLL_CLK_CLN_ON</name>
              <description>I2S PLL Bypass clock cleaner ON</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--bypass i2s pll clock cleaner off-->
            <field>
              <name>BYPASS_I2S_PLL_CLK_CLN_OFF</name>
              <description>I2S PLL Bypass clock cleaner OFF</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP RM RME register-->
        <!--register 15-->
        <register>
          <name>ULP_RM_RME_REG</name>
          <description>ulp rm rem register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000022</resetValue>
          <fields>
            <!--ulp memories rem b-->
            <field>
              <name>ULP_MEM_RME_b</name>
              <description>RM enable signal for memories internal tp peripherals. This needs
                			to be programmed when the peripheral memories are not active.
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp memories rm-->
            <field>
              <name>ULP_MEM_RM</name>
              <description>RM ports for memories internal to peripheral. This needs to be programmed
                 			when the peripheral memories are not active.
			   </description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--ulp memories rme sram-->
            <field>
              <name>ULP_MEM_RME_SRAM_b</name>
              <description>RM enable signal for sram memories. This needs to be programmed when the
                			SRAM is not active.
			   </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp memories rm sram-->
            <field>
              <name>ULP_MEM_RM_SRAM</name>
              <description>RM ports for sram memories. This needs to be programmed when the SRAM 
			                is not active
			   </description>
              <bitRange>[6:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP clock enable register-->
        <!--register 16-->
        <register>
          <name>ULP_CLK_ENABLE_REG</name>
          <description>ulp clock enable register.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--ulp 32khz ro clock enable prog-->
            <field>
              <name>ULP_32KHZ_RO_CLK_EN_PROG_b</name>
              <description>Static Clock enable to iPMU for 32KHz RO Clock,if bit is one(set) then clock
			                enable else not enable.
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp 32khz rc clock enable prog-->
            <field>
              <name>ULP_32KHZ_RC_CLK_EN_PROG_b</name>
              <description>Static Clock enable to iPMU for 32KHz RC Clock,if bit is one(set) then clock
			                enable else not enable.
			   </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp 32khz xtal clock enable prog-->
            <field>
              <name>ULP_32KHZ_XTAL_CLK_EN_PROG_b</name>
              <description>Static Clock enable to iPMU for 32KHz XTAL Clock,if bit is one(set) then clock
			                enable else not enable.
			   </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp doubler clock enable prog-->
            <field>
              <name>ULP_DOUBLER_CLK_EN_PROG_b</name>
              <description>Static Clock enable to iPMU for Doubler Clock,if bit is one(set) then clock
			                enable else not enable.
			   </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp 20mhz ro clock enable prog-->
            <field>
              <name>ULP_20MHZ_RO_CLK_EN_PROG_b</name>
              <description>Static Clock enable to iPMU for 20MHz RO clock,if bit is one(set) then clock
			                enable else not enable.
			   </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--ulp mhz rc clock enable prog-->
            <field>
              <name>ULP_MHZ_RC_CLK_EN_PROG_b</name>
              <description>Static Clock enable to iPMU for 32MHz RC Clock,if bit is one(set) then clock
			                enable else not enable.
			   </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--soc clock enable prog-->
            <field>
              <name>SOC_CLK_EN_PROG_b</name>
              <description>Static Clock enable to iPMU for PLL-500 Clock,if bit is one(set) then clock
			                enable else not enable.
			   </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--i2s pll clock enable prog-->
            <field>
              <name>I2S_PLLCLK_EN_PROG_b</name>
              <description>Static clock enable to iPMU for I2S-PLL Clock,if bit is one(set) then clock
			                enable else not enable.
			   </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--ref clock enable ips prog-->
            <field>
              <name>REF_CLK_EN_IPS_PROG_b</name>
              <description>Static Clock enable to iPMU for REF Clock,if bit is one(set) then clock
			                enable else not enable.
			   </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SYSTICK clock generation register-->
        <!--register 17-->
        <register>
          <name>SYSTICK_CLK_GEN_REG</name>
          <description>sys tick clock generation register.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000E</resetValue>
          <fields>
            <!--sys tick clock enable-->
            <field>
              <name>SYSTICK_CLK_EN_b</name>
              <description>sys tick clock enable ,if bit is one(set) then clock
			                enable else not enable.
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--sys tick clock select-->
            <field>
              <name>SYSTICK_CLK_SEL</name>
              <description>sys tick clock select</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--sys tick clock division factor-->
            <field>
              <name>SYSTICK_CLKDIV_FACTOR</name>
              <description>sys tick clock division factor</description>
              <bitRange>[12:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ULP soc gpio mode register-->
        <!--register 18-->
        <!--#DD neet to check if its there in HRM-->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x04</dimIncrement>
          <dimIndex>0-15</dimIndex>
          <name>ULP_SOC_GPIO_MODE_REG[%s]</name>
          <description>ULP SOC gpio related registers(0-15)</description>
          <addressOffset>0x0060</addressOffset>
          <register>
            <name>ULP_SOC_GPIO_MODE_REG</name>
            <description>ulp soc gpio mode register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!--ulp soc gpio mode-->
              <field>
                <name>ULP_SOC_GPIO_MODE_REG</name>
                <description>mode bits for soc gpio.</description>
                <bitRange>[2:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:3]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!--ULP dynamic clock control disable-->
        <!--register 19-->
        <register>
          <name>ULP_DYN_CLK_CTRL_DISABLE</name>
          <description>this register used for ULP dynamic clock control disable.</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--i2c pclock dynamic control disable-->
            <field>
              <name>I2C_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for APB interface in i2c module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--i2s clock dynamic control disable-->
            <field>
              <name>I2S_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for i2s module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--ssi mst pclk dynamic control disable-->
            <field>
              <name>SSI_MST_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for pclk ssi module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--ssi mst sclk dynamic control disable-->
            <field>
              <name>SSI_MST_SCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for ssi module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--uart clock dynamic control disable-->
            <field>
              <name>UART_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for pclk uart module ,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--uart sclk dynamic control disable-->
            <field>
              <name>UART_SCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for uart module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--timer pclk dynamic control disable-->
            <field>
              <name>TIMER_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for timer pclk module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--timer sclk dynamic control disable-->
            <field>
              <name>TIMER_SCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for timer sclk module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--reg access spi clock dynamic control disable-->
            <field>
              <name>REG_ACCESS_SPI_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for reg access spi module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--fim clock dynamic control disable-->
            <field>
              <name>FIM_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for fim module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--vad clock dynamic control disable-->
            <field>
              <name>VAD_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for vad module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux pclk enable-->
            <field>
              <name>AUX_PCLK_EN_b</name>
              <description>Static Enable for Aux adc pclk.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux clock enable-->
            <field>
              <name>AUX_CLK_EN_b</name>
              <description>Static Enable for Aux adc clk.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux memories enable-->
            <field>
              <name>AUX_MEM_EN_b</name>
              <description>Static Enable for Aux adc mem.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux pclk dynamic control disable-->
            <field>
              <name>AUX_PCLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for aux adc module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux clock dynamic control disable-->
            <field>
              <name>AUX_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for aux adc module,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--aux clock memories dynamic control disable-->
            <field>
              <name>AUX_CLK_MEM_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for aux adc mem,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--udma clock enable-->
            <field>
              <name>UDMA_CLK_ENABLE_b</name>
              <description>Static Enable for UDMA.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!--ir clock enable-->
            <field>
              <name>IR_CLK_ENABLE_b</name>
              <description>Static Enable for IR.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--ir clock dynamic control disable-->
            <field>
              <name>IR_CLK_DYN_CTRL_DISABLE_b</name>
              <description>Dynamic clock control disable for ir module ,if bit is one(set) 
			                then dynamic control disabled else bit is zero then Dynamic control enabled.
			   </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SLP sensor clock register-->
        <!--register 20-->
        <register>
          <name>SLP_SENSOR_CLK_REG</name>
          <description>this register used for SLP sensor clock register.</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000102</resetValue>
          <fields>
            <!--Division factor-->
            <field>
              <name>DIVISON_FACTOR</name>
              <description>Division factor for apb interface clock to sleep sensor subsystem.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Enable-->
            <field>
              <name>ENABLE_b</name>
              <description>Enable for APB clock to SLPSS</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:9]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--FIM-->
    <peripheral>
      <!-- FIM PERIPHERAL BLOCK -->
      <name>FIM</name>
      <version>1.0</version>
      <description> FIM support fixed point Multiplications implemented through programmable shifting.</description>
      <baseAddress>0x24070000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x24</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>FIM</name>
        <value>17</value>
      </interrupt>
      <registers>
        <!-- FIM MODE INTERRUPT -->
        <!-- REGISTER 1 -->
        <register>
          <name>FIM_MODE_INTERRUPT</name>
          <description>Configuration for FIM Operation Mode and Interrupt Control</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--LATCH MODE-->
            <field>
              <name>LATCH_MODE</name>
              <description>Enable latch mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable latch mode enable of FIM</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable latch mode enable of FIM</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Operation mode-->
            <field>
              <name>OPER_MODE</name>
              <description>Indicates the Mode of Operation to be performed.</description>
              <bitRange>[8:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!--interrupt clear-->
            <field>
              <name>INTR_CLEAR</name>
              <description>Writing 1 to this bit clears the interrupt</description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable to clear interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable to clear interrupt</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:11]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--FIM INP1 ADDR-->
        <!-- REGISTER 2 -->
        <register>
          <name>FIM_INP1_ADDR</name>
          <description>This register used for COP input address for 0 register.</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--INP1 ADDR-->
            <field>
              <name>INP1_ADDR</name>
              <description>Indicates the Start Address of 1st Input Data for FIM Operations</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--FIM INP2 ADDR-->
        <!-- REGISTER 3-->
        <register>
          <name>FIM_INP2_ADDR</name>
          <description>This register used for COP input address for 1 register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--INP2 ADDR-->
            <field>
              <name>INP2_ADDR</name>
              <description>Indicates the Start Address of 2nd Input Data for FIM Operations</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--FIM OUT ADDR-->
        <!-- REGISTER 4 -->
        <register>
          <name>FIM_OUT_ADDR</name>
          <description>Memory Offset Address for Output from FIM Operations</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--OUT ADDR-->
            <field>
              <name>OUT_ADDR</name>
              <description>Indicates the Start Address of Output Data for FIM Operations</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--FIM SCALAR POLE DATA1-->
        <!-- REGISTER 5 -->
        <register>
          <name>FIM_SCALAR_POLE_DATA1</name>
          <description>Indicates the Input Scalar Data for Scalar Operations indicates the feedback coefficient for IIR Operations</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--SCALAR POLE DATA1-->
            <field>
              <name>SCALAR_POLE_DATA1</name>
              <description>Pole 0/Scalar Value</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--FIM POLE DATA2-->
        <!-- REGISTER 6 -->
        <register>
          <name>FIM_POLE_DATA2</name>
          <description>Feedback coefficient for IIR filter operation</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--POLE DATA2-->
            <field>
              <name>POLE_DATA2</name>
              <description>Indicates the feedback coefficient for IIR Operations</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--FIM SAT SHIFT-->
        <!-- REGISTER 7 -->
        <register>
          <name>FIM_SAT_SHIFT</name>
          <description>Configuration for precision of Output Data for FIM Operations</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--saturate value-->
            <field>
              <name>SAT_VAL</name>
              <description>Indicates the number of MSB's to be saturated for Output Data</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--truncate value-->
            <field>
              <name>TRUNCATE</name>
              <description>Truncate</description>
              <bitRange>[9:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--shift right-->
            <field>
              <name>SHIFT_VAL</name>
              <description>Indicates the number of bits to be right-shifted for Output Data</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--Round Value-->
            <field>
              <name>ROUND</name>
              <description>Round</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--SAT_EN Value-->
            <field>
              <name>SAT_EN</name>
              <description>Saturation enable bit</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:19]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--FIM CONFIG REG1-->
        <!-- REGISTER 8 -->
        <register>
          <name>FIM_CONFIG_REG1</name>
          <description>Configuration Register for FIM Operations.</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--Matrix length-->
            <field>
              <name>MAT_LEN</name>
              <description>Indicates the number of columns in 1st input for Matrix Multiplication. This is same as number of rows in 2nd input for Matrix Multiplication.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input1 length-->
            <field>
              <name>INP1_LEN</name>
              <description>Indicates the length of 1st input for FIM Operations other than filtering (FIR, IIR) and Interpolation</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--Input2 length-->
            <field>
              <name>INP2_LEN</name>
              <description>Indicates the length of 2nd input for FIM Operations other than filtering (FIR, IIR) and Interpolation.</description>
              <bitRange>[25:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--Decimation Factor-->
            <field>
              <name>DECIM_FAC</name>
              <description>Decimation Factor</description>
              <bitRange>[31:26]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--FIM CONFIG REG2-->
        <!-- REGISTER 9 -->
        <register>
          <name>FIM_CONFIG_REG2</name>
          <description>Configuration Register for FIM Operations</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--Start operation-->
            <field>
              <name>START_OPER</name>
              <description>Start trigger for the FIM operations,this is reset upon write register</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable start operation</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable start operation</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Instruction buffer enable-->
            <field>
              <name>INSTR_BUFF_ENABLE</name>
              <description>Instruction buffer enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[7:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--complex flag-->
            <field>
              <name>CPLX_FLAG</name>
              <description>Complex Flag,not valid in matrix mode</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Real_Real</name>
                  <description>input1 and input2 both are real</description>
                  <value>0x0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Real_Complex</name>
                  <description>input1 is real and input2 is complex</description>
                  <value>0x1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Complex_Real</name>
                  <description>input1 is complex and input2 is real</description>
                  <value>0x2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Complex_Complex</name>
                  <description>input1 and input2 both are complex</description>
                  <value>0x3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--COL M2-->
            <field>
              <name>COL_M2</name>
              <description>Indicates the number of columns in 2nd input for Matrix Multiplication</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--ROW M1-->
            <field>
              <name>ROW_M1</name>
              <description>Indicates the number of rows in 1st input for Matrix Multiplication</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--interpolation factor-->
            <field>
              <name>INTRP_FAC</name>
              <description>Indicates the Interpolation Factor</description>
              <bitRange>[27:22]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--NWP_FSM-->
    <peripheral>
      <name>NWP_FSM</name>
      <version>1.0</version>
      <description>NWP FSM one register Structure
	  </description>
      <groupName>NWP_FSM</groupName>
      <baseAddress>0x41300110</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x4</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!--TASS REF CLOCK SELECT REGISTER-->
        <!-- REGISTER 1 -->
        <register>
          <name>TASS_REF_CLOCK_SELECT</name>
          <description>TASS REF CLOCK SELECT</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--M4SS REF CLK SEL NWP-->
            <field>
              <name>M4SS_REF_CLK_SEL_NWP</name>
              <description>M4SS REF CLK SEL NWP</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--ULPSS REF CLK SEL NWP-->
            <field>
              <name>ULPSS_REF_CLK_SEL_NWP</name>
              <description>ULPSS REF CLK SEL NWP</description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved2-->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[15:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--TASS REF CLK SEL NWP-->
            <field>
              <name>TASS_REF_CLK_SEL_NWP</name>
              <description>TASS REF CLK SEL NWP</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved3-->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--TASS_REF_CLK_CLEANER_OFF_NWP-->
            <field>
              <name>TASS_REF_CLK_CLEANER_OFF_NWP</name>
              <description>TASS REF CLK CLEANER OFF NWP</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!--TASS_REF_CLK_CLEANER_ON_NWP-->
            <field>
              <name>TASS_REF_CLK_CLEANER_ON_NWP</name>
              <description>TASS REF CLK CLEANER ON NWP</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved4-->
            <field>
              <name>RESERVED4</name>
              <description>reserved4</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- MCU opamp -->
    <peripheral>
      <name>OPAMP</name>
      <version>1.0</version>
      <description>The opamps top consists of 3 general purpose Operational Amplifiers (OPAMP) offering rail-to-rail inputs and outputs 
				   </description>
      <groupName>OPAMP</groupName>
      <baseAddress>0x24043A14</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x0C</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- OPAMP_1: Programs opamp1 -->
        <!-- REGISTER 1 -->
        <register>
          <name>OPAMP_1</name>
          <description>Programs opamp1</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000004</resetValue>
          <fields>
            <!-- opamp1 enable -->
            <field>
              <name>OPAMP1_ENABLE</name>
              <description>To enable opamp 1</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP1 LP MODE -->
            <field>
              <name>OPAMP1_LP_MODE</name>
              <description>Enable or disable low power mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp1 low power mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp1 low power mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP1 R1 SEL -->
            <field>
              <name>OPAMP1_R1_SEL</name>
              <description>Programmability to select resister bank R1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Zero_ohm</name>
                  <description>R1 as short</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Twenty_ohm</name>
                  <description>R1 as Twenty_ohm</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Sixty_ohm</name>
                  <description>R1 as Sixty_ohm</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Oneforty_ohm</name>
                  <description>R1 as Oneforty_ohm</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--OPAMP1_R2_SEL -->
            <field>
              <name>OPAMP1_R2_SEL</name>
              <description>Programmability to select resister bank R2</description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Twenty_ohm</name>
                  <description>R2 as Twenty_ohm</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Thirty_ohm</name>
                  <description>R1 as Thirty_ohm</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>forty_ohm</name>
                  <description>R1 as forty_ohm</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Sixty_ohm</name>
                  <description>R1 as Sixty_ohm</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Onetwenty_ohm</name>
                  <description>R1 as Onetwenty_ohm</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>twofifty_ohm</name>
                  <description>R1 as twofifty_ohm</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>fivehundred_ohm</name>
                  <description>R1 as fivehundred_ohm</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Onethousand_ohm</name>
                  <description>R1 as Onethousand_ohm</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--OPAMP1_EN_RES_BANK -->
            <field>
              <name>OPAMP1_EN_RES_BANK</name>
              <description>enables the resistor bank 1 for enable 0 for disable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp1 resister bank</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp1 resister bank</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--OPAMP1_RES_MUX_SEL -->
            <field>
              <name>OPAMP1_RES_MUX_SEL</name>
              <description>selecting input for registor bank</description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- OPAMP1_RES_TO_OUT_VDD -->
            <field>
              <name>OPAMP1_RES_TO_OUT_VDD</name>
              <description>connect resistor bank to out or vdd i.e 0-out and 1-vdd</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>res_out</name>
                  <description>connect resister bank to out</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>res_vdd</name>
                  <description>connect resbank to vdd</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP1_OUT_MUX_EN -->
            <field>
              <name>OPAMP1_OUT_MUX_EN</name>
              <description>out mux enable</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp1 out mux</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp1 out mux</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP1_INN_SEL -->
            <field>
              <name>OPAMP1_INN_SEL</name>
              <description>selecting -ve input of opamp</description>
              <bitRange>[15:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input0_Negative</name>
                  <description>External pin0 as negative input for OPAMP1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Input1_Negative</name>
                  <description>External pin1 as negative input for OPAMP1</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DAC</name>
                  <description>DAC as negative input for OPAMP1</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>res_tap</name>
                  <description>register tap as negative input for OPAMP1</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp1_out</name>
                  <description>opamp1_out as negative input for OPAMP1</description>
                  <value>4</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP1_INP_SEL -->
            <field>
              <name>OPAMP1_INP_SEL</name>
              <description>selecting +ve input of opamp</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input0_positive</name>
                  <description>External pin0 as positive input for OPAMP1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Input1_positive</name>
                  <description>External pin1 as positive input for OPAMP1</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Input2_positive</name>
                  <description>External pin2 as positive input for OPAMP1</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Input3_positive</name>
                  <description>External pin3 as positive input for OPAMP1</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Input4_positive</name>
                  <description>External pin4 as positive input for OPAMP1</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Input5_positive</name>
                  <description>External pin5 as positive input for OPAMP1</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DAC</name>
                  <description>DAC as positive input for OPAMP1</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>res_tap</name>
                  <description>register tap as positive input for OPAMP1</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp1_out</name>
                  <description>opamp1_out as positive input for OPAMP1</description>
                  <value>8</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP1_OUT_MUX_SEL -->
            <field>
              <name>OPAMP1_OUT_MUX_SEL</name>
              <description>to connect opamp1 output to pad</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Dis_select</name>
                  <description>Dis select opamp1 out mux</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Select</name>
                  <description>Select opamp1 out mux</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- MEMS_RES_BANK_EN -->
            <field>
              <name>MEMS_RES_BANK_EN</name>
              <description>enables mems res bank</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable the memory register bank</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable the memory register bank</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- VREF_MUX_EN -->
            <field>
              <name>VREF_MUX_EN</name>
              <description>vref mux enable</description>
              <bitRange>[25:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- mux_en -->
            <field>
              <name>MUX_EN</name>
              <description>Mux Enable</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!-- VREF_MUX_SEL -->
            <field>
              <name>VREF_MUX_SEL</name>
              <description>vref mux enable</description>
              <bitRange>[30:27]</bitRange>
              <access>read-write</access>
            </field>
            <!-- OPAMP1_DYN_EN -->
            <field>
              <name>OPAMP1_DYN_EN</name>
              <description>dynamic enable for opamp1</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable the opamp1 dynamic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable the opamp1 dynamic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <!-- OPAMP_2: Programs opamp2 -->
        <!-- REGISTER 2-->
        <register>
          <name>OPAMP_2</name>
          <description>Programs opamp2</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000004</resetValue>
          <fields>
            <!-- OPAMP2_ENABLE -->
            <field>
              <name>OPAMP2_ENABLE</name>
              <description>enables the opamp2</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp2</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP2_LP_MODE -->
            <field>
              <name>OPAMP2_LP_MODE</name>
              <description>select the power mode 0-normal mode and 1-low power mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp2 low power mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp2 low power mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP2_R1_SEL -->
            <field>
              <name>OPAMP2_R1_SEL</name>
              <description>Programmability to select resister bank R1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Zero_ohm</name>
                  <description>R1 as short</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Twenty_ohm</name>
                  <description>R1 as Twenty_ohm</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Sixty_ohm</name>
                  <description>R1 as Sixty_ohm</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Oneforty_ohm</name>
                  <description>R1 as Oneforty_ohm</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--OPAMP2_R2_SEL -->
            <field>
              <name>OPAMP2_R2_SEL</name>
              <description>Programmability to select resister bank R2</description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Twenty_ohm</name>
                  <description>R2 as Twenty_ohm</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Thirty_ohm</name>
                  <description>R1 as Thirty_ohm</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>forty_ohm</name>
                  <description>R1 as forty_ohm</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Sixty_ohm</name>
                  <description>R1 as Sixty_ohm</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Onetwenty_ohm</name>
                  <description>R1 as Onetwenty_ohm</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>twofifty_ohm</name>
                  <description>R1 as twofifty_ohm</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>fivehundred_ohm</name>
                  <description>R1 as fivehundred_ohm</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Onethousand_ohm</name>
                  <description>R1 as Onethousand_ohm</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--OPAMP2_EN_RES_BANK -->
            <field>
              <name>OPAMP2_EN_RES_BANK</name>
              <description>enables the resistor bank 1 for enable 0 for disable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp2 resister bank</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp2 resister bank</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--OPAMP2_RES_MUX_SEL -->
            <field>
              <name>OPAMP2_RES_MUX_SEL</name>
              <description>selecting input for registor bank</description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- OPAMP2_RES_TO_OUT_VDD -->
            <field>
              <name>OPAMP2_RES_TO_OUT_VDD</name>
              <description>connect resistor bank to out or vdd or gnd or DAC  i.e 0-out and 1-vdd 2-DAC 3-gnd</description>
              <bitRange>[12:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>resbank_out</name>
                  <description>connect resbank to out</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>resbank_vdd</name>
                  <description>connect resbank to vdd</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>resbank_DAC</name>
                  <description>connect resbank to DAC</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>resbank_GND</name>
                  <description>connect resbank to gnd</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- opamp2_out_mux_en -->
            <field>
              <name>OPAMP2_OUT_MUX_EN</name>
              <description>out mux enable</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp2 out mux</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp2 out mux</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP2_INN_SEL -->
            <field>
              <name>OPAMP2_INN_SEL</name>
              <description>selecting -ve input of opamp</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input0_Negative</name>
                  <!-- #DD-->
                  <description>External pin0 as negative input for OPAMP2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DAC</name>
                  <description>DAC as negative input for OPAMP2</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>res_tap</name>
                  <description>register tap as negative input for OPAMP2</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp1_out</name>
                  <description>opamp1_out as negative input for OPAMP2</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP2_INP_SEL -->
            <field>
              <name>OPAMP2_INP_SEL</name>
              <description>selecting +ve input of opamp2</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input0_Positive</name>
                  <description>External pin0 as positive input for OPAMP2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Input1_Positive</name>
                  <description>External pin1 as positive input for OPAMP2</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Input2_Positive</name>
                  <description>External pin2 as positive input for OPAMP2</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DAC</name>
                  <description>DAC as positive input for OPAMP2</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>res_tap</name>
                  <description>register tap as positive input for OPAMP2</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>gnd</name>
                  <description>ground as positive input for OPAMP2</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OPAMP1_out</name>
                  <description>OPAMP1_out as positive input for OPAMP2</description>
                  <value>6</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP2_DYN_EN -->
            <field>
              <name>OPAMP2_DYN_EN</name>
              <description>dynamic enable for opamp2</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable the opamp2 dynamic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable the opamp2 dynamic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1  -->
            <field>
              <name>RESERVED1</name>
              <description>res</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- OPAMP_3: Programs opamp3 -->
        <!-- REGISTER 3-->
        <register>
          <name>OPAMP_3</name>
          <description>Programs opamp3</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000004</resetValue>
          <fields>
            <!-- OPAMP3_ENABLE -->
            <field>
              <name>OPAMP3_ENABLE</name>
              <description>enables the opamp3 1 for enable 0 for disable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp3</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp3</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP3_LP_MODE -->
            <field>
              <name>OPAMP3_LP_MODE</name>
              <description>select the power mode 0-normal mode and 1-low power mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp3 low power mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp3 low power mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP3_R1_SEL -->
            <field>
              <name>OPAMP3_R1_SEL</name>
              <description>Programmability to select resister bank R1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Zero_ohm</name>
                  <description>R1 as short</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Twenty_ohm</name>
                  <description>R1 as Twenty_ohm</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Sixty_ohm</name>
                  <description>R1 as Sixty_ohm</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Oneforty_ohm</name>
                  <description>R1 as Oneforty_ohm</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--OPAMP3_R2_SEL -->
            <field>
              <name>OPAMP3_R2_SEL</name>
              <description>Programmability to select resister bank R2</description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Twenty_ohm</name>
                  <description>R2 as Twenty_ohm</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Thirty_ohm</name>
                  <description>R1 as Thirty_ohm</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>forty_ohm</name>
                  <description>R1 as forty_ohm</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Sixty_ohm</name>
                  <description>R1 as Sixty_ohm</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Onetwenty_ohm</name>
                  <description>R1 as Onetwenty_ohm</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>twofifty_ohm</name>
                  <description>R1 as twofifty_ohm</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>fivehundred_ohm</name>
                  <description>R1 as fivehundred_ohm</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Onethousand_ohm</name>
                  <description>R1 as Onethousand_ohm</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--OPAMP3_EN_RES_BANK -->
            <field>
              <name>OPAMP3_EN_RES_BANK</name>
              <description>enables the resistor bank 1 for enable 0 for disable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp3 resister bank</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp3 resister bank</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--OPAMP3_RES_MUX_SEL -->
            <field>
              <name>OPAMP3_RES_MUX_SEL</name>
              <description>selecting input for registor bank</description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- OPAMP3_RES_TO_OUT_VDD -->
            <field>
              <name>OPAMP3_RES_TO_OUT_VDD</name>
              <description>connect resistor bank to out or vdd  i.e 0-out and 1-vdd	</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>res_out</name>
                  <description>connect resister bank to out</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>res_vdd</name>
                  <description>connect resbank to vdd</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP3_OUT_MUX_EN -->
            <field>
              <name>OPAMP3_OUT_MUX_EN</name>
              <description>out mux enable</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable opamp3 out mux</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable opamp3 out mux</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP3_INN_SEL -->
            <field>
              <name>OPAMP3_INN_SEL</name>
              <description>selecting -ve input of opamp</description>
              <bitRange>[14:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input0_Negative</name>
                  <description>External pin0 as negative input for OPAMP3</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DAC</name>
                  <description>DAC as negative input for OPAMP3</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>res_tap</name>
                  <description>register tap as negative input for OPAMP3</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp2_out</name>
                  <description>opamp2_out as negative input for OPAMP3</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP3_INP_SEL -->
            <field>
              <name>OPAMP3_INP_SEL</name>
              <description>selecting +ve input of opamp</description>
              <bitRange>[17:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Input0_Positive</name>
                  <description>External pin0 as positive input for OPAMP3</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Input1_Positive</name>
                  <description>External pin1 as positive input for OPAMP3</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DAC</name>
                  <description>DAC as positive input for OPAMP3</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>res_tap</name>
                  <description>register tap as positive input for OPAMP3</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>gnd</name>
                  <description>ground as positive input for OPAMP3</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OPAMP2_out</name>
                  <description>OPAMP2_out as positive input for OPAMP3</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OPAMP2_restap</name>
                  <description>OPAMP2_restap as positive input for OPAMP3</description>
                  <value>6</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- OPAMP3_DYN_EN -->
            <field>
              <name>OPAMP3_DYN_EN</name>
              <description>dynamic enable for opamp2</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable the opamp3 dynamic mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable the opamp3 dynamic mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1  -->
            <field>
              <name>RESERVED1</name>
              <description>res</description>
              <bitRange>[31:19]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--AUX ADC-->
    <peripheral>
      <name>AUX_ADC_DAC_COMP</name>
      <version>1.0</version>
      <description>The ADC-DAC Controller works on a ADC with a resolution of 12bits at 5Mega sample per second 
	               when ADC reference Voltage is greater than 2.8v or 5Mega sample per second when ADC reference Voltage is less than 2.8v. </description>
      <groupName>ADC_DAC_COMP</groupName>
      <baseAddress>0x24043800</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x214</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>ADC</name>
        <value>11</value>
      </interrupt>
      <interrupt>
        <name>COMP1</name>
        <value>8</value>
      </interrupt>
      <interrupt>
        <name>COMP2</name>
        <value>7</value>
      </interrupt>
      <registers>
        <!--DAC control register1 -->
        <!-- REGISTER 1 -->
        <register>
          <name>AUXDAC_CTRL_1</name>
          <description>Control register1 for DAC</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0001E200</resetValue>
          <fields>
            <!-- ENDAC FIFO CONFIGUARATION-->
            <field>
              <name>ENDAC_FIFO_CONFIG</name>
              <description>This bit activates the DAC path in Aux ADC-DAC controller. Data samples will be played on 
			               DAC only when this bit is set.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable fifo configuration of DAC</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable fifo configuration of DAC</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DAC STATIC MODE-->
            <field>
              <name>DAC_STATIC_MODE</name>
              <description>This bit is used to select non-FIFO mode in DAC.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Static mode is enabled. Data written to the DAC_DATA_REG will not be written to the FIFO. 
				               It will be played on DAC directly. Only single sample can be held at a time</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>FIFO mode enabled. Data written to the DAC_DATA_REG is written to the FIFO in this mode.
				               In either of these modes, data will be driven to the DAC only when dac_enable is set.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DAC FIFO FLUSH-->
            <field>
              <name>DAC_FIFO_FLUSH</name>
              <description>This bit is used to flush the DAC FIFO.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Flush dac FIFO</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not flush</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- DAC ENABLE F-->
            <field>
              <name>DAC_ENABLE_F</name>
              <description>This bit is used to enable AUX DAC controller ,valid only when DAC enable is happpen</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable DAC Controller</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable DAC Controller</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- dac_word_mode-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[8:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--DAC_FIFO_AEMPTY_THRESHOLD-->
            <field>
              <name>DAC_FIFO_AEMPTY_THRESHOLD</name>
              <description>It is recommended to write these bits to 0</description>
              <bitRange>[12:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--DAC_FIFO_AFULL_THRESHOLD-->
            <field>
              <name>DAC_FIFO_AFULL_THRESHOLD</name>
              <description>It is recommended to write these bits to 0</description>
              <bitRange>[16:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved1-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[31:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ADC control register1 -->
        <!-- REGISTER 2 -->
        <register>
          <name>AUXADC_CTRL_1</name>
          <description>Control register1 for ADC</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000010</resetValue>
          <fields>
            <!-- ADC ENABLE-->
            <field>
              <name>ADC_ENABLE</name>
              <description>This bits activates the ADC path in Aux ADC-DAC controller.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable ADC</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable ADC</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ADC static mode enable-->
            <field>
              <name>ADC_STATIC_MODE</name>
              <description>This bit is used to select non-FIFO mode in ADC.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Static mode enable here data directly to register not in FIFO </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>FIFO mode enabled here data directly to FIFO.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ADC FIFO FLUSH-->
            <field>
              <name>ADC_FIFO_FLUSH</name>
              <description>This bit is used to flush the ADC FIFO</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Flush ADC FIFO</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not flush</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED-->
            <field>
              <name>RESERVED1</name>
              <description>RESERVED1</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ADC MULTIPLE CHANNEL ACTIVE-->
            <field>
              <name>ADC_MULTIPLE_CHAN_ACTIVE</name>
              <description>This bit is used to control the auxadc sel signal going to the Aux ADC.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Data will be sampled from four ADC channels in sequential order and written to the
    				           receive FIFO in the same order.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Data will be sampled from the programmed ADC channel</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--ADC CHANNEL SELECT MSB-->
            <field>
              <name>ADC_CH_SEL_MSB</name>
              <description>Upper 2-bits of adc channel select.When the channel number is greater than 3,
               			   these have to be used.It is recommended to write these bits to 0</description>
              <bitRange>[8:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- BYPADD NOISE AVRAGE-->
            <field>
              <name>BYPASS_NOISE_AVG</name>
              <description>ADC in Bypass noise avg mode.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--Enable ADC clock-->
            <field>
              <name>EN_ADC_CLK</name>
              <description>Enable AUX ADC Divider output clock</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--ENDIFF-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--ADC CHANNEL SELECT LS-->
            <field>
              <name>ADC_CH_SEL_LS</name>
              <description>Aux ADC channel number from which the data has to be sampled
			               This is valid only when adc multiple channel active is zero. When channel number
			               is greater than three, upper bits should also be programmed ADC CHANNEL SELECT MS to bits
 						   in this register</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CHANNEL_0</name>
                  <description>channel 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_1</name>
                  <description>channel 1</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_2</name>
                  <description>channel 2</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_3</name>
                  <description>channel 3</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved2-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[26:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--ADC NUMBER PHASE-->
            <field>
              <name>ADC_NUM_PHASE</name>
              <description>ADC number of phase</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--AUXDAC CLOCK DIVISION FACTOR -->
        <!-- REGISTER 3 -->
        <register>
          <name>AUXDAC_CLK_DIV_FAC</name>
          <description>DAC clock division register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- AUXDAC CLOCK DIVISION FACTOR-->
            <field>
              <name>DAC_CLK_DIV_FAC</name>
              <description>These bits control the DAC clock division factor</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--AUX ADC CLOCK DIVISION FACTOR -->
        <!-- REGISTER 4 -->
        <register>
          <name>AUXADC_CLK_DIV_FAC</name>
          <description>ADC clock division register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- AUX ADC CLOCK DIVISION FACTOR-->
            <field>
              <name>ADC_CLK_DIV_FAC</name>
              <description>These bits control the Total-Duration of the ADC clock</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ADC CLOCK ON DURATION-->
            <field>
              <name>ADC_CLK_ON_DUR</name>
              <description>These bits control the On-Duration of the ADC clock</description>
              <bitRange>[24:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:25]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--AUXDAC DATA -->
        <!-- REGISTER 5 -->
        <register>
          <name>AUXDAC_DATA</name>
          <description>Writing to this register will fill DAC FIFO for streaming Data to DAC</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- AUXDAC DATA-->
            <field>
              <name>AUXDAC_DATA</name>
              <description>Writing to this register will fill DAC FIFO for streaming Data to DAC</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--AUXADC DATA -->
        <!-- REGISTER 6 -->
        <register>
          <name>AUXADC_DATA</name>
          <description>AUXADC Data Read through Register.</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- AUXADC DATA-->
            <field>
              <name>AUXADC_DATA</name>
              <description>AUXADC Data Read through Register</description>
              <bitRange>[11:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- AUXADC_CH_ID-->
            <field>
              <name>AUXADC_CH_ID</name>
              <description>AUXADC Channel ID</description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ADC DETECTION THRSHOLD CONTROL 0 -->
        <!-- REGISTER 7 -->
        <register>
          <name>ADC_DET_THR_CTRL_0</name>
          <description>ADC detection threshold control 0</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- ADC INPUT DETECTION THRESHOLD 0-->
            <field>
              <name>ADC_INPUT_DETECTION_THRESHOLD_0</name>
              <description>The value against which the ADC output has to be compared is to be programmed 
			               in this register</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- COMP LESS THAN EN-->
            <field>
              <name>COMP_LESS_THAN_EN</name>
              <description>When set, Aux ADC-DAC controller raises an interrupt to processor when the Aux ADC output falls below the 
                           programmed Aux ADC detection threshold.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable less than mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable less than mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- COMP GRTR THAN EN-->
            <field>
              <name>COMP_GRTR_THAN_EN</name>
              <description>When set, Aux ADC-DAC controller raises an interrupt to processor when
                           the Aux ADC output is greater than the programmed Aux ADC detection threshold..</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable grater than mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable grater than mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- COMP EQ EN-->
            <field>
              <name>COMP_EQ_EN</name>
              <description>When set, Aux ADC-DAC controller raises an interrupt to processor when 
			               the Aux ADC output is equal to the programmed Aux ADC detection threshold</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable compare equal bit</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable compare equal bit</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RANGE COMPARISON ENABLE-->
            <field>
              <name>RANGE_COMPARISON_ENABLE</name>
              <description>When set, Aux ADC-DAC controller raises an interrupt to processor when the
               			   Aux ADC output falls within the range specified in AUX ADC Detection threshold0 
						   and AUX ADC Detection threshold1 </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable range comparison</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable range comparison</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ADC INPUT DETECTION THRESHOLD1-->
            <field>
              <name>ADC_INPUT_DETECTION_THRESHOLD_1</name>
              <description>Carries upper four bits of ADC detection threshold</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--ADC DETECTION THRSHOLD CONTROL 1 -->
        <!-- REGISTER 8 -->
        <register>
          <name>ADC_DET_THR_CTRL_1</name>
          <description>ADC detection threshold control 1</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- ADC INPUT DETECTION THRESHOLD 2-->
            <field>
              <name>ADC_INPUT_DETECTION_THRESHOLD_2</name>
              <description>The value against which the ADC output has to be compared is to be programmed 
			               in this register. </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- COMP LESS THAN EN-->
            <field>
              <name>COMP_LESS_THAN_EN</name>
              <description>When set, Aux ADC-DAC controller raises an interrupt to TA when the Aux ADC output 
			               falls below the programmed Aux ADC detection threshold.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable less than mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable less than mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- COMP GRTR THAN EN-->
            <field>
              <name>COMP_GRTR_THAN_EN</name>
              <description>When set, Aux ADC-DAC controller raises an interrupt
            			   to TA when the Aux ADC output is greater than the programmed 
						   Aux ADC detection threshold.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable grater than mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable grater than mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- COMP EQ EN-->
            <field>
              <name>COMP_EQ_EN</name>
              <description>When set, Aux ADC-DAC controller raises an interrupt to TA when the 
			               Aux ADC output is equal to the programmed Aux ADC detection threshold.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable compare equal bit</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable compare equal bit</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ADC DETECTION THRESHOLD4 UPPER BITS-->
            <field>
              <name>ADC_DETECTION_THRESHOLD_4_UPPER_BITS</name>
              <description>Upper 4 bits of ADC detection threshold 2 for ADC</description>
              <bitRange>[14:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:15]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--INTERRUPT CLEAR REGISTER -->
        <!-- REGISTER 9 -->
        <register>
          <name>INTR_CLEAR_REG</name>
          <description>ADC detection threshold control 1</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Clear interrupt-->
            <field>
              <name>CLR_INTR</name>
              <description>This bit is used to clear threshold detection interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CLEAR_INTERRUPT</name>
                  <description>Clear the interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NO_EFFECT</name>
                  <description>Disable compare equal bit</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Clear interrupt-->
            <field>
              <name>INTR_CLEAR_REG</name>
              <description>If enabled, corresponding first_mem_switch_intr bits will be cleared.</description>
              <bitRange>[23:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--INTERRUPT MASK REGISTER -->
        <!-- REGISTER 10 -->
        <register>
          <name>INTR_MASK_REG</name>
          <description>Mask interrupt register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x01FFFFFF</resetValue>
          <fields>
            <!-- THRESHOLD DETECTION INTRERRUPT ENABLE-->
            <field>
              <name>THRESHOLD_DETECTION_INTR_EN</name>
              <description>When Cleared, threshold detection interrupt will be unmasked</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MASK_INTERRUPT</name>
                  <description>When bit is set mask the interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UNMASK_EFFECT</name>
                  <description>When bit is clear unmask the interrupt</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DAC FIFO EMPTY INTRERRUPT MASK-->
            <field>
              <name>DAC_FIFO_EMPTY_INTR_MASK</name>
              <description>When Cleared, dac_FIFO_empty interrupt will be unmasked</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MASK_INTERRUPT</name>
                  <description>When bit is set mask the interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UNMASK_EFFECT</name>
                  <description>When bit is clear unmask the interrupt</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DAC FIFO AEMPTY INTRERRUPT MASK-->
            <field>
              <name>DAC_FIFO_AEMPTY_INTR_MASK</name>
              <description>When Cleared, adc FIFO full interrupt will be unmasked</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MASK_INTERRUPT</name>
                  <description>When bit is set mask the interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UNMASK_EFFECT</name>
                  <description>When bit is clear unmask the interrupt</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ADC FIFO FULL INTRERRUPT MASK-->
            <field>
              <name>ADC_FIFO_FULL_INTR_MASK</name>
              <description>When Cleared, adc FIFO full interrupt will be unmasked</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MASK_INTERRUPT</name>
                  <description>When bit is set mask the interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UNMASK_EFFECT</name>
                  <description>When bit is clear unmask the interrupt</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ADC FIFO AFULL INTRERRUPT MASK-->
            <field>
              <name>ADC_FIFO_AFULL_INTR_MASK</name>
              <description>When Cleared, adc FIFO afull interrupt will be unmasked</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MASK_INTERRUPT</name>
                  <description>When bit is set mask the interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UNMASK_EFFECT</name>
                  <description>When bit is clear unmask the interrupt</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ADC FIFO OVERFLOW INTRERRUPT MASK-->
            <field>
              <name>ADC_FIFO_OVERFLOW_INTR_MASK</name>
              <description>When Cleared, dac FIFO underrun interrupt will be unmasked</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MASK_INTERRUPT</name>
                  <description>When bit is set mask the interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UNMASK_EFFECT</name>
                  <description>When bit is clear unmask the interrupt</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DAC FIFO UNDERRUN INTRERRUPT MASK-->
            <field>
              <name>DAC_FIFO_UNDERRUN_INTR_MASK</name>
              <description>When Cleared, dac FIFO underrun interrupt will be unmasked</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MASK_INTERRUPT</name>
                  <description>When bit is set mask the interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UNMASK_EFFECT</name>
                  <description>When bit is clear unmask the interrupt</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIRST MEM SWITCH INTRERRUPT MASK-->
            <field>
              <name>DMA_Channel_intr_mask_0_to_15_Bits</name>
              <description>When Cleared, first_mem_switch_intr will be unmasked</description>
              <bitRange>[22:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- adc_static_mode_data_intr_mask -->
            <field>
              <name>ADC_STATIC_MODE_DATA_INTR_MASK</name>
              <description>When Cleared, adc static_mode_data_intr will be unmasked</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- dac_static_mode_data_intr_mask -->
            <field>
              <name>DAC_STATIC_MODE_DATA_INTR_MASK</name>
              <description>When Cleared, dac static_mode_data_intr will be unmasked</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:25]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--INTERRUPT STATUS REGISTER -->
        <!-- REGISTER 11 -->
        <register>
          <name>INTR_STATUS_REG</name>
          <description>Status interrupt register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000006</resetValue>
          <fields>
            <!-- ADC THRESHOLD DETECTION INTRERRUPT -->
            <field>
              <name>ADC_THRESHOLD_DETECTION_INTR</name>
              <description>This bit is set when ADC threshold matches with the programmed conditions
  			               This will be be cleared as soon as this interrupt is acknowledged by processor</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DAC FIFO EMPTY-->
            <field>
              <name>DAC_FIFO_EMPTY</name>
              <description>Set when DAC FIFO is empty. This bit gets cleared when the DAC FIFO at least a single sample
               			   is available in DAC FIFO</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DAC FIFO AEMPTY-->
            <field>
              <name>DAC_FIFO_AEMPTY</name>
              <description>Set when the FIFO occupancy grater than or equal to DAC FIFO threshold.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ADC FIFO FULL-->
            <field>
              <name>ADC_FIFO_FULL</name>
              <description>Set when ADC FIFO is full,This bit gets cleared when data is read from the FIFO</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ADC FIFO AFULL-->
            <field>
              <name>ADC_FIFO_AFULL</name>
              <description>Set when ADC FIFO occupancy less than or equal to ADC FIFO threshold</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ADC FIFO OVERFLOW-->
            <field>
              <name>ADC_FIFO_OVERFLOW</name>
              <description>Set when a write attempt is made to ADC FIFO when the FIFO is already full</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Dac_fifo_underrun-->
            <field>
              <name>DAC_FIFO_UNDERRUN</name>
              <description>Set when a read is done on DAC FIFO when the FIFO is empty</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIRST MEM SWITCH INTRERRUPT -->
            <field>
              <name>DMA_Channel_intr_0_to_15_Bits</name>
              <description>Interrupt indicating the first memory has been filled and the DMA write is being
                  		   shifted to second memory chunk for ping-pong operation</description>
              <bitRange>[22:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- adc_static_mode_data_intr -->
            <field>
              <name>ADC_STATIC_MODE_DATA_INTR</name>
              <description>Set when a proper data packet is ready to read in static mode for ADC</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <!-- dac_static_mode_data_intr -->
            <field>
              <name>DAC_STATIC_MODE_DATA_INTR</name>
              <description>Set when a proper data packet is ready to read in static mode for DAC</description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:25]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--INTRERRUPT MASKED STATUS REG -->
        <!-- REGISTER 12 -->
        <register>
          <name>INTR_MASKED_STATUS_REG</name>
          <description>Interrupt masked status register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000006</resetValue>
          <fields>
            <!-- ADC THRESHOLD DETECTION INTRERRUPT -->
            <field>
              <name>ADC_THRESHOLD_DETECTION_INTR_MASKED</name>
              <description>Masked Interrupt. This bit is set when ADC threshold matches with 
			               the programmed conditions</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DAC FIFO EMPTY MASKED-->
            <field>
              <name>DAC_FIFO_EMPTY_MASKED</name>
              <description>Masked Interrupt.Set when DAC FIFO is empty</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DAC FIFO AEMPTY MASKED-->
            <field>
              <name>DAC_FIFO_AEMPTY_MASKED</name>
              <description>Masked Interrupt. Set when the FIFO occupancy less than equal to DAC FIFO threshold.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ADC FIFO FULL MASKED-->
            <field>
              <name>ADC_FIFO_FULL_MASKED</name>
              <description>Masked Interrupt. Set when ADC FIFO is full.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ADC FIFO AFULL MASKED-->
            <field>
              <name>ADC_FIFO_AFULL_MASKED</name>
              <description>Masked Interrupt. Set when ADC FIFO occupancy greater than ADC FIFO threshold</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ADC FIFO OVERFLOW MASKED-->
            <field>
              <name>ADC_FIFO_OVERFLOW_MASKED</name>
              <description>Masked Interrupt. Set when a write attempt is made to ADC FIFO when the FIFO is already full.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DAC FIFO UNDERRUN MASKED-->
            <field>
              <name>DAC_FIFO_UNDERRUN_MASKED</name>
              <description>Masked Interrupt. Set when a read is done on DAC FIFO when the FIFO is empty.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIRST MEM SWITCH INTRERRUPT MASKED -->
            <field>
              <name>DMA_Channel_intr_masked_0_to_15_Bits</name>
              <description>Masked Interrupt status indicating the first memory has been filled and the DMA write is being shifted 
                           to second memory chunk for ping-pong operation</description>
              <bitRange>[22:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ADC_static_mode_data_intr_masked	 -->
            <field>
              <name>ADC_STATIC_MODE_DATA_INTR_MASKED</name>
              <description>Masked Interrupt. Set when a proper data packet is ready to read in static mode for ADC</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <!-- dac_static_mode_data_intr_masked	 -->
            <field>
              <name>DAC_STATIC_MODE_DATA_INTR_MASKED</name>
              <description>Masked Interrupt. Set when a proper data packet is ready to read in static mode for DAC</description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:25]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- FIFO STATUS REGISTER -->
        <!-- REGISTER 13 -->
        <register>
          <name>FIFO_STATUS_REG</name>
          <description>Interrupt masked status register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000003C</resetValue>
          <fields>
            <!-- DAC FIFO FULL -->
            <field>
              <name>DAC_FIFO_FULL</name>
              <description>Set when DAC FIFO is full.
     			           In word mode, FIFO will be shown as full unless there is space for 16-bits.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DAC FIFO AFULL-->
            <field>
              <name>DAC_FIFO_AFULL</name>
              <description>Set when DAC FIFO occupancy greater than FIFO threshold</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ADC FIFO EMPTY-->
            <field>
              <name>ADC_FIFO_EMPTY</name>
              <description>Set when FIFO is empty. This bit gets cleared when the ADC FIFO is not empty.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ADC FIFO AEMPTY-->
            <field>
              <name>ADC_FIFO_AEMPTY</name>
              <description>Set when the FIFO occupancy less than ADC FIFO threshold</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DAC FIFO EMPTY-->
            <field>
              <name>DAC_FIFO_EMPTY</name>
              <description>Set when FIFO is empty. This bit gets cleared when the DAC FIFO is not empty.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- DAC FIFO AEMPTY-->
            <field>
              <name>DAC_FIFO_AEMPTY</name>
              <description>Set when the FIFO occupancy less than DAC FIFO threshold</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ADC FIFO FULL -->
            <field>
              <name>ADC_FIFO_FULL</name>
              <description>Set when ADC FIFO is full. This bit gets cleared when data is read from the FIFO.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- ADC FIFO AFULL -->
            <field>
              <name>ADC_FIFO_AFULL</name>
              <description>Set when ADC FIFO occupancy greater than ADC FIFO threshold.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- ADC_CTRL_REG_2 -->
        <!-- REGISTER 14 -->
        <register>
          <name>ADC_CTRL_REG_2</name>
          <description>ADC Control register2</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- ext_trig_detect_1 -->
            <field>
              <name>EXT_TRIG_DETECT_1</name>
              <description>Condition to detect event on external trigger 1
                           00: None (trigger disabled)
                           01: Positive edge
                           10: Negative edge
                           11: Positive or negative edge.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ext_trig_detect_2 -->
            <field>
              <name>EXT_TRIG_DETECT_2</name>
              <description>Condition to detect event on external trigger 2
                           00: None (trigger disabled)
                           01: Positive edge
                           10: Negative edge
                           11: Positive or negative edge.</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ext_trig_detect_3 -->
            <field>
              <name>EXT_TRIG_DETECT_3</name>
              <description>Condition to detect event on external trigger 3
                           00: None (trigger disabled)
                           01: Positive edge
                           10: Negative edge
                           11: Positive or negative edge.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ext_trig_detect_4 -->
            <field>
              <name>EXT_TRIG_DETECT_4</name>
              <description>Condition to detect event on external trigger 4
                           00: None (trigger disabled)
                           01: Positive edge
                           10: Negative edge
                           11: Positive or negative edge.</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <!-- EXT_TRIGGER_SEL_4 -->
            <field>
              <name>EXT_TRIGGER_SEL_4</name>
              <description>4-bit Channel ID corresponding to external trigger 4.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ext_trigger_sel_3 -->
            <field>
              <name>EXT_TRIGGER_SEL_3</name>
              <description>4-bit Channel ID corresponding to external trigger 3.</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- EXT_TRIGGER_SEL_2 -->
            <field>
              <name>EXT_TRIGGER_SEL_2</name>
              <description>Enable bit corresponding to channel id selected for trigger 2.</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ext_trigger_sel_1 -->
            <field>
              <name>EXT_TRIGGER_SEL_1</name>
              <description>4-bit Channel ID corresponding to external trigger 1.</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ADC CHANNEL BIT MAP CONFIGUARATION -->
        <!-- REGISTER 14-78 -->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x10</dimIncrement>
          <name>ADC_CHn_BIT_MAP_CONFIG</name>
          <description>ADC Channel bit map configuration registers(0-15)</description>
          <addressOffset>0x00000038</addressOffset>
          <register>
            <name>ADC_CH_n__BIT_MAP_CONFIG_0</name>
            <description>This is configuration register0 to explain the bit map for ADC channels</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!-- CHANNEL BITMAP -->
              <field>
                <name>CHANNEL__n__BITMAP</name>
                <description>ADC Channels bit map</description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>ADC_CH_n__BIT_MAP_CONFIG_1</name>
            <description>This is configuration register1 to explain the bit map for ADC channels</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!-- CHANNEL BITMAP -->
              <field>
                <name>CHANNEL__n__BITMAP</name>
                <description>ADC Channels bit map</description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>ADC_CH_n__BIT_MAP_CONFIG_2</name>
            <description>This is configuration register2 to explain the bit map for ADC channels</description>
            <addressOffset>0x08</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!-- CHANNEL BITMAP -->
              <field>
                <name>CHANNEL__n__BITMAP</name>
                <description>ADC Channels bit map</description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>ADC_CH_n__BIT_MAP_CONFIG_3</name>
            <description>This is configuration register3 to explain the bit map for ADC channels</description>
            <addressOffset>0x0C</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!-- CHANNEL BITMAP -->
              <field>
                <name>CHANNEL__n__BITMAP</name>
                <description>ADC Channels bit map</description>
                <bitRange>[4:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:5]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- ADC CHANNEL OFFSET REGISTER-->
        <!-- REGISTER 79-94 -->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>ADC_CHn_OFFSET</name>
          <description>Initial offset value with respect to AUX_ADC clock after which Channel(0-15)should be sampled </description>
          <addressOffset>0x138</addressOffset>
          <register>
            <name>ADC_CH_n1__OFFSET</name>
            <description>This Register specifies initial offset value with respect to AUX_ADC clock after which should sample channel.</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!-- CHANNEL OFFSET -->
              <field>
                <name>CH_n__OFFSET</name>
                <description>This Register field specifies initial offset value with respect 
		                to AUX_ADC clock after which Channel(0-16)should be sampled.</description>
                <bitRange>[15:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- ADC CHANNEL FREQ-->
        <!-- REGISTER 95-110 -->
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>ADC_CHn_FREQ</name>
          <description>This register specifies Sampling frequency rate at which AUX ADC Date is sampled for Channel(1 to 16 ) </description>
          <addressOffset>0x178</addressOffset>
          <register>
            <name>ADC_CH_n1__FREQ</name>
            <description>This register specifies Sampling frequency rate at which AUX ADC Date is sampled for Channel </description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!-- CHANNEL OFFSET -->
              <field>
                <name>CH_n__FREQ_VALUE</name>
                <description>This register specifies Sampling frequency rate at which AUX ADC Date is sampled
       			           for Channel all respective channel (1-16)</description>
                <bitRange>[15:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--reserved-->
              <field>
                <name>RESERVED1</name>
                <description>Reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!-- ADC_CH_PHASE_1-->
        <!-- REGISTER 112 -->
        <register>
          <name>ADC_CH_PHASE_1</name>
          <description>ADC Channel Phase 1</description>
          <addressOffset>0x1B8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- ch1_phase-->
            <field>
              <name>CH1_PHASE</name>
              <description>Phase corresponding to channel-1</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch2_phase-->
            <field>
              <name>CH2_PHASE</name>
              <description>Phase corresponding to channel-2</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch3_phase-->
            <field>
              <name>CH3_PHASE</name>
              <description>Phase corresponding to channel-3</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch4_phase-->
            <field>
              <name>CH4_PHASE</name>
              <description>Phase corresponding to channel-4</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch5_phase-->
            <field>
              <name>CH5_PHASE</name>
              <description>Phase corresponding to channel-5</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch6_phase-->
            <field>
              <name>CH6_PHASE</name>
              <description>Phase corresponding to channel-6</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch7_phase-->
            <field>
              <name>CH7_PHASE</name>
              <description>Phase corresponding to channel-7</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch8_phase-->
            <field>
              <name>CH8_PHASE</name>
              <description>Phase corresponding to channel-8</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ADC_CH_PHASE_2-->
        <!-- REGISTER 113 -->
        <register>
          <name>ADC_CH_PHASE_2</name>
          <description>ADC Channel Phase 2</description>
          <addressOffset>0x1BC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- ch9_phase-->
            <field>
              <name>CH9_PHASE</name>
              <description>Phase corresponding to channel-9</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch10_phase-->
            <field>
              <name>CH10_PHASE</name>
              <description>Phase corresponding to channel-10</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch11_phase-->
            <field>
              <name>CH11_PHASE</name>
              <description>Phase corresponding to channel-11</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch12_phase-->
            <field>
              <name>CH12_PHASE</name>
              <description>Phase corresponding to channel-12</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch13_phase-->
            <field>
              <name>CH13_PHASE</name>
              <description>Phase corresponding to channel-13</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch14_phase-->
            <field>
              <name>CH14_PHASE</name>
              <description>Phase corresponding to channel-14</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch15_phase-->
            <field>
              <name>CH15_PHASE</name>
              <description>Phase corresponding to channel-15</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ch16_phase-->
            <field>
              <name>CH16_PHASE</name>
              <description>Phase corresponding to channel-16</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ADC_SINGLE_CH_CTRL_1-->
        <!-- REGISTER 114 -->
        <register>
          <name>ADC_SINGLE_CH_CTRL_1</name>
          <description>ADC SINGLE Channel Configuration</description>
          <addressOffset>0x1C4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--adc_ch_index_single_chan_1-->
            <field>
              <name>ADC_CH_INDEX_SINGLE_CHAN_1</name>
              <description>	[31:0]out of total 48 bits of bit map for single channel mode of a particular channel.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ADC_SINGLE_CH_CTRL_2-->
        <!-- REGISTER 115 -->
        <register>
          <name>ADC_SINGLE_CH_CTRL_2</name>
          <description>ADC SINGLE Channel Configuration</description>
          <addressOffset>0x1C8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--adc_ch_index_single_chan_2-->
            <field>
              <name>ADC_CH_INDEX_SINGLE_CHAN_2</name>
              <description>[47:32] out of total 48 bits of bit map for single channel mode of a particular channel.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ADC Sequential control register-->
        <!-- REGISTER 116 -->
        <register>
          <name>ADC_SEQ_CTRL</name>
          <description>This register explain configuration parameter for AUXADC</description>
          <addressOffset>0x1CC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- ADC Sequential Control PING_PONG mode-->
            <field>
              <name>ADC_SEQ_CTRL_PING_PONG</name>
              <description>To enable/disable per channel DAM mode (One-hot coding)</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- ADC Sequential control DMA mode-->
            <field>
              <name>ADC_SEQ_CTRL_DMA_MODE</name>
              <description>To enable/disable per channel ping-pong operation (One-hot coding).</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- VDD BBP ID-->
        <!-- REGISTER 117 -->
        <register>
          <name>VAD_BBP_ID</name>
          <description>This register explain VDD BBP ID</description>
          <addressOffset>0x1D0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--DISCONNET MODE-->
            <field>
              <name>DISCONNET_MODE</name>
              <description>Per channel discontinuous mode enable signal. When discontinuous mode is enabled,data is sampled only once from that channel and the enable bit is reset to 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ADC INT MEM1 -->
        <!-- REGISTER 114 -->
        <register>
          <name>ADC_INT_MEM_1</name>
          <description>This register explain  start address of first/second buffer corresponding to the channel location ADC INT MEM 2</description>
          <addressOffset>0x1D4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Program write data-->
            <field>
              <name>PROG_WR_DATA</name>
              <description>These 32-bits specifies the start address of first/second buffer corresponding to the channel 
			               location ADC INT MEM</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ADC INT MEM2 -->
        <!-- REGISTER 115 -->
        <register>
          <name>ADC_INT_MEM_2</name>
          <description>This register explain ADC INT MEM2.</description>
          <addressOffset>0x1D8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- Program write data-->
            <field>
              <name>PROG_WR_DATA</name>
              <description>These 10-bits specify the buffer length of first/second buffer corresponding to
               			   the channel location ADC INT MEM2</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Program write address-->
            <field>
              <name>PROG_WR_ADDR</name>
              <description>These bits correspond to the address of the internal memory basing on the channel number, 
			               whose information we want to program</description>
              <bitRange>[14:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- PROG WR DATA1-->
            <field>
              <name>PROG_WR_DATA1</name>
              <description>Valid bit for first/second buffers corresponding to ADC INT MEM2</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- INTERNAL DMA CHANNEL ENABLE -->
        <!-- REGISTER 116 -->
        <register>
          <name>INTERNAL_DMA_CH_ENABLE</name>
          <description>This register is internal channel enable</description>
          <addressOffset>0x1DC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- PER CHANNEL ENABLE-->
            <field>
              <name>PER_CHANNEL_ENABLE</name>
              <description>Enable bit for Each channel,like channel0 for bit0 to channel15 for bit15 etc</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[30:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- INTERNAL DMA ENABLE-->
            <field>
              <name>INTERNAL_DMA_ENABLE</name>
              <description>When Set, Internal DMA will be used for reading ADC samples from ADC FIFO and 
			               writing them to ULP SRAM Memories.</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- Temperature sensor PTAT enable -->
        <!-- REGISTER 117 -->
        <register>
          <name>TS_PTAT_ENABLE</name>
          <description>This register is enable PTAT for temperature sensor</description>
          <addressOffset>0x1E0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- TS PTAT ENABLE-->
            <field>
              <name>TS_PTAT_EN</name>
              <description>BJT based Temperature sensor</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable PTAT bit</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable PTAT bit</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ADC_FIFO_THRESHOLD -->
        <register>
          <name>ADC_FIFO_THRESHOLD</name>
          <description>Configured FIFO to ADC</description>
          <addressOffset>0x1E4</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- adc_fifo_aempty_threshold	-->
            <field>
              <name>ADC_FIFO_AEMPTY_THRESHOLD</name>
              <description>FIFO almost empty threshold for ADC</description>
              <bitRange>[3:0]</bitRange>
              <access>write-only</access>
            </field>
            <!-- adc_fifo_afull_threshold	-->
            <field>
              <name>ADC_FIFO_AFULL_THRESHOLD</name>
              <description>FIFO almost full threshold for ADC</description>
              <bitRange>[7:4]</bitRange>
              <access>write-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- BOD: programs resistor bank,ref buffer and scaler -->
        <!-- REGISTER 118 -->
        <register>
          <name>BOD</name>
          <description>Programs resistor bank, reference buffer and scaler</description>
          <addressOffset>0x200</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00003E00</resetValue>
          <fields>
            <!-- en_bod_test_mux -->
            <field>
              <name>EN_BOD_TEST_MUX</name>
              <description>1 - To enable test mux</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- bod_test_sel -->
            <field>
              <name>BOD_TEST_SEL</name>
              <description>Select bits for test mux</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--#changed-->
            <!--refbuf_enable-->
            <field>
              <name>REFBUF_EN</name>
              <description>Reference buffer configuration 1 for enable 0 for disable</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable reference buffer enable bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable reference buffer enable bit</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--lvl_sel-->
            <field>
              <name>LVL_SEL</name>
              <description>selection of voltage of reference buffer</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--#changed-->
            <!--bod_res_enable-->
            <field>
              <name>BOD_RES_ENABLE</name>
              <description>configuration of register bank 1 for enable and 0 for disable</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable register bank bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable register bank bit</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--bod_threshold-->
            <field>
              <name>BOD_THRESHOLD</name>
              <description>Programmability for resistor bank</description>
              <bitRange>[13:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:14]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--COMPARATOR1: COMPARATORS ENABLE AND DISABLE-->
        <!-- REGISTER 119 -->
        <register>
          <name>COMPARATOR1</name>
          <description>Programs comparators1 and comparators2</description>
          <addressOffset>0x204</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!-- comparator1 enable -->
            <field>
              <name>CMP1_EN</name>
              <description>To enable comparator1</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable comparator1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable comparator1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--comparator1 filer enable-->
            <field>
              <name>CMP1_EN_FILTER</name>
              <description>To enable filter for comparator 1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable filter for comparator1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable filter to comparator1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--comparator1 hysteresis-->
            <field>
              <name>CMP1_HYST</name>
              <description>Programmability to control hysteresis of comparator1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--comp_1 mux sel positive-->
            <field>
              <name>CMP1_MUX_SEL_P</name>
              <description>Select for positive input of comparator_1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>comp1_p0</name>
                  <description>external pin as positive input for comparator1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>comp1_p1</name>
                  <description>external pin as positive input for comparator1</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DAC</name>
                  <description>DAC as positive input for comparator1</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>reference_buffer_out</name>
                  <description>reference_buffer_out as positive input for comparator1</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>reference_scaler_out</name>
                  <description>reference_scaler_out as positive input for comparator1</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>register_bank_out</name>
                  <description>register_bank_out as positive input for comparator1</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp1</name>
                  <description>opamp1 as positive input for comparator1</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp2</name>
                  <description>opamp2 as positive input for comparator1</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp3</name>
                  <description>opamp3 as positive input for comparator1</description>
                  <value>8</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--comp_1 mux sel negative-->
            <field>
              <name>CMP1_MUX_SEL_N</name>
              <description>Select for negative input of comparator_1</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>comp1_n0</name>
                  <description>external pin as negative input for comparator1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>comp1_n1</name>
                  <description>external pin as negative input for comparator1</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DAC</name>
                  <description>DAC as negative input for comparator1</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>reference_buffer_out</name>
                  <description>reference_buffer_out as negative input for comparator1</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>reference_scaler_out</name>
                  <description>reference_scaler_out as negative input for comparator1</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>register_bank_out</name>
                  <description>register_bank_out as negative input for comparator1</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp1</name>
                  <description>opamp1 as negative input for comparator1</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp2</name>
                  <description>opamp2 as negative input for comparator1</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp3</name>
                  <description>opamp3 as negative input for comparator1</description>
                  <value>8</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- comparator2 enable -->
            <field>
              <name>CMP2_EN</name>
              <description>To enable comparator 2</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable comparator2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable comparator2</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--comparator2 filer enable-->
            <field>
              <name>CMP2_EN_FILTER</name>
              <description>To enable filter for comparator 2</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable filter for comparator2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable filter to comparator2</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--comparator2 hysteresis-->
            <field>
              <name>CMP2_HYST</name>
              <description>Programmability to control hysteresis of comparator2</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--comp_2 mux sel positive-->
            <field>
              <name>CMP2_MUX_SEL_P</name>
              <description>Select for positive input of comparator_2</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>comp2_p0</name>
                  <description>external pin as positive input for comparator2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>comp2_p1</name>
                  <description>external pin as positive input for comparator2</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DAC</name>
                  <description>DAC as positive input for comparator2</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>reference_buffer_out</name>
                  <description>reference_buffer_out as positive input for comparator2</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>reference_scaler_out</name>
                  <description>reference_scaler_out as positive input for comparator2</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>register_bank_out</name>
                  <description>register_bank_out as positive input for comparator2</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp1</name>
                  <description>opamp1 as positive input for comparator2</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp2</name>
                  <description>opamp2 as positive input for comparator2</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp3</name>
                  <description>opamp3 as positive input for comparator2</description>
                  <value>8</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--comp_2 mux sel negative-->
            <field>
              <name>CMP2_MUX_SEL_N</name>
              <description>Select for negative input of comparator_2</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>comp2_n0</name>
                  <description>external pin as negative input for comparator2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>comp2_n1</name>
                  <description>external pin as negative input for comparator2</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DAC</name>
                  <description>DAC as negative input for comparator2</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>reference_buffer_out</name>
                  <description>reference_buffer_out as negative input for comparator2</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>reference_scaler_out</name>
                  <description>reference_scaler_out as negative input for comparator2</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>register_bank_out</name>
                  <description>register_bank_out as negative input for comparator2</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp1</name>
                  <description>opamp1 as negative input for comparator2</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp2</name>
                  <description>opamp2 as negative input for comparator2</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>opamp3</name>
                  <description>opamp3 as negative input for comparator2</description>
                  <value>8</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--com_dyn_en-->
            <field>
              <name>COM_DYN_EN</name>
              <description>Dynamic enable for registers</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:25]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- AUXADC CONFIG 2 -->
        <!-- REGISTER 119 -->
        <register>
          <name>AUXADC_CONFIG_2</name>
          <description>This register is AUX-ADC config2</description>
          <addressOffset>0x208</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- auxadc_dyn_enable-->
            <field>
              <name>AUXADC_DYN_ENABLE</name>
              <description>Aux ADC Configuration Enable</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- AUXDAC CONIG 1 -->
        <!-- REGISTER 120 -->
        <register>
          <name>AUXDAC_CONIG_1</name>
          <description>This register is AUX-DAC config1</description>
          <addressOffset>0x20C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--AUXDAC EN S-->
            <field>
              <name>AUXDAC_EN_S</name>
              <description>Enable signal DAC</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AUXDAC OUT MUX ENABLE-->
            <field>
              <name>AUXDAC_OUT_MUX_EN</name>
              <description>Aux OUT mux Enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description> DAC output is connected to PAD</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DAC output is not connected to PAD</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- AUXDAC OUT MUX SELECT-->
            <field>
              <name>AUXDAC_OUT_MUX_SEL</name>
              <description>AUXDAC OUT MUX SELECT Enable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DAC Output is connected to AGPIO15</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DAC Output is connected to AGPIO4</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--AUXDAC DATA S-->
            <field>
              <name>AUXDAC_DATA_S</name>
              <description>Satatic AUX Dac Data</description>
              <bitRange>[13:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--AUXDAC DYNAMIC MODE-->
            <field>
              <name>AUXDAC_DYN_EN</name>
              <description>Satatic AUX Dac Data</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:15]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--AUX_LDO -->
        <!-- REGISTER 121 -->
        <register>
          <name>AUX_LDO</name>
          <description>This register is AUX-LDO configuration</description>
          <addressOffset>0x210</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000053</resetValue>
          <fields>
            <!--LDO_Ctrl-->
            <field>
              <name>LDO_CTRL</name>
              <description>Enable ldo control field</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--LDO DEFAULT MODE-->
            <field>
              <name>LDO_DEFAULT_MODE</name>
              <description>ldo default mode enable</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--BYPASS LDO-->
            <field>
              <name>BYPASS_LDO</name>
              <description>bypass the LDO</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--enable-->
            <field>
              <name>ENABLE_LDO</name>
              <description>Turn LDO</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--Dyn_en-->
            <field>
              <name>DYN_EN</name>
              <description>Dynamic Enable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--IR Decoder-->
    <peripheral>
      <!-- IR DECODER -->
      <name>IR_Decoder</name>
      <version>1.0</version>
      <description>IR Decoder are used for the decoding the external ir sensor input.</description>
      <baseAddress>0x24040C00</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x1C</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>IR_DECODER</name>
        <value>15</value>
      </interrupt>
      <registers>
        <!--IR OFF TIME DURATION -->
        <!-- REGISTER 1 -->
        <register>
          <name>IR_OFF_TIME_DURATION</name>
          <description>This register used for IR sleep duration timer value.</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--IR OFF TIME DURATION-->
            <field>
              <name>IR_OFF_TIME_DURATION</name>
              <description>This field define ir off time</description>
              <bitRange>[16:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:17]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IR ON TIME DURATION -->
        <!-- REGISTER 2 -->
        <register>
          <name>IR_ON_TIME_DURATION</name>
          <description>This register used for IR Detection duration timer value.</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--IR ON TIME DURATION-->
            <field>
              <name>IR_ON_TIME_DURATION</name>
              <description>This field define ir on time for ir detection on</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IR FRAME DONE THRESHOLD -->
        <!-- REGISTER 3 -->
        <register>
          <name>IR_FRAME_DONE_THRESHOLD</name>
          <description>This register used count with respect to 32KHz clock after not more toggle are expected to a given pattern.</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--IR FRAME DONE THRESHOLD-->
            <field>
              <name>IR_FRAME_DONE_THRESHOLD</name>
              <description>count with respect to 32KHz clock after not more toggle are expected to a given pattern</description>
              <bitRange>[14:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IR DET THRESHOLD-->
        <!-- REGISTER 4 -->
        <register>
          <name>IR_DET_THRESHOLD</name>
          <description>This register used Minimum Number of edges to detected during on-time failing which IR detection is re-stated.</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--IR DET THRESHOLD-->
            <field>
              <name>IR_DET_THRESHOLD</name>
              <description>Minimum Number of edges to detected during on-time failing which IR detection is re-stated.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IR configuration-->
        <!-- REGISTER 5 -->
        <register>
          <name>IR_CONFIG</name>
          <description>This register used to configure the ir structure for application purpose.</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--Enable the IR detection-->
            <field>
              <name>EN_IR_DET</name>
              <description>Enable IR detection logic bit if bit 1 then detection enable if 0 then not enable.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--IR detection re-start-->
            <field>
              <name>IR_DET_RSTART</name>
              <description>Enable IR detection re-start logic bit if bit 1 then re-start.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--Enable clock IR core-->
            <field>
              <name>EN_CLK_IR_CORE</name>
              <description>Enable 32KHz clock to IR Core bit ,if bit 1 then clock gating disable and bit is 0 then clock gating Enable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[7:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--Enable continues IR detection-->
            <field>
              <name>EN_CONT_IR_DET</name>
              <description>This bit is Enable continues IR detection,When enabled there will be no power cycling on External IR Sensor.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES1</name>
              <description>reserved6</description>
              <bitRange>[15:9]</bitRange>
              <access>read-only</access>
            </field>
            <!--Soft reset IR core-->
            <field>
              <name>SREST_IR_CORE</name>
              <description>This bit is used soft reset IR core block</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES2</name>
              <description>reserved7</description>
              <bitRange>[31:17]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--IR memory address  access-->
        <!-- REGISTER 6 -->
        <register>
          <name>IR_MEM_ADDR_ACCESS</name>
          <description>This register used to access memory address for application purpose.</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!--IR memory address read-->
            <field>
              <name>IR_MEM_ADDR</name>
              <description>This field is used to IR read address.</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--IR_MEM_WR_EN-->
            <field>
              <name>IR_MEM_WR_EN</name>
              <description>IR memory write enable.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--IR memory read enable-->
            <field>
              <name>IR_MEM_RD_EN</name>
              <description>This field used to IR memory read enable.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES1</name>
              <description>reserved1</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--IR memory read enable-->
            <field>
              <name>IR_MEM_WR_TEST_MODE</name>
              <description> IR memory write enable in test mode..</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES2</name>
              <description>reserved2</description>
              <bitRange>[31:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--IR memory read-->
        <!-- REGISTER 7 -->
        <register>
          <name>IR_MEM_READ</name>
          <description>This register used to IR Read data from memory.</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <!--IR memory data out-->
            <field>
              <name>IR_MEM_DATA_OUT</name>
              <description>This field is used to IR Read data from memory.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES</name>
              <description>reserved5</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <!--IR data  memory depth-->
            <field>
              <name>IR_DATA_MEM_DEPTH</name>
              <description>This field used to indicated valid number of IR Address in the memory to be read.</description>
              <bitRange>[30:24]</bitRange>
              <access>read-only</access>
            </field>
            <!--reserved-->
            <field>
              <name>RES1</name>
              <description>reserved6</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- Capacitive Touch sensor -->
    <peripheral>
      <name>CTS</name>
      <version>1.0</version>
      <description>The capacitive touch sensor (CTS) controller is used to detect the position 
	                of the touch from the user on the capacitive touch screen</description>
      <groupName>CAPACITIVE_TOUCH_SENSOR</groupName>
      <baseAddress>0x24042C00</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x124</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>CAP_SENSOR</name>
        <value>6</value>
      </interrupt>
      <registers>
        <!-- CTS CONFIG REG 0 0 -->
        <!-- REGISTER 1 -->
        <register>
          <name>CTS_CONFIG_REG_0_0</name>
          <description>Configuration Register 0_0</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--clk_sel1-->
            <field>
              <name>CLK_SEL1</name>
              <description>Mux select for clock_mux_1</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--pre_scalar_1-->
            <field>
              <name>PRE_SCALAR_1</name>
              <description>Division factor for clock divider</description>
              <bitRange>[9:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--pre_scalar_2-->
            <field>
              <name>PRE_SCALAR_2</name>
              <description>Division factor for clock divider</description>
              <bitRange>[13:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--CLK_SEL2-->
            <field>
              <name>CLK_SEL2</name>
              <description>Mux select for clock_mux_2</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--cts_static_clk_en-->
            <field>
              <name>CTS_STATIC_CLK_EN</name>
              <description>Enable static for capacitive touch sensor</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Clocks are gated</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Clocks are not gated</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--fifo_afull_thrld-->
            <field>
              <name>FIFO_AFULL_THRLD</name>
              <description>Threshold for fifo afull</description>
              <bitRange>[21:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--fifo_aempty_thrld-->
            <field>
              <name>FIFO_AEMPTY_THRLD</name>
              <description>Threshold for fifo aempty</description>
              <bitRange>[27:22]</bitRange>
              <access>read-write</access>
            </field>
            <!--fifo_empty-->
            <field>
              <name>FIFO_EMPTY</name>
              <description>FIFO empty status bit</description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:29]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CTS CONFIG REG 1 1 -->
        <!-- REGISTER 2 -->
        <register>
          <name>CTS_CONFIG_REG_1_1</name>
          <description>Configuration Register 1_1</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--polynomial_len-->
            <field>
              <name>POLYNOMIAL_LEN</name>
              <description>Length of polynomial</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--seed_load-->
            <field>
              <name>SEED_LOAD</name>
              <description>Seed of polynomial</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>loading of seed is not allowed</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>to load the seed</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--buffer_delay-->
            <field>
              <name>BUFFER_DELAY</name>
              <description>Delay of buffer. Delay programmed will be equal to delay in nano seconds. 
			               Max delay value is 32.Default delay should be programmed before using Capacitive touch sensor module.</description>
              <bitRange>[7:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--wake_up_ack-->
            <field>
              <name>WAKE_UP_ACK</name>
              <description>Ack for wake up interrupt. This is a level signal. To acknowledge wake up ,
               			  set this bit to one and reset it .</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--enable-->
            <field>
              <name>ENABLE1</name>
              <description>Enable signal</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>disable</name>
                  <description>disable the cap sensor module</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>enable</name>
                  <description>enable the cap sensor module</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--soft_reset_2-->
            <field>
              <name>SOFT_RESET_2</name>
              <description>Reset the FIFO write and FIFO read occupancy pointers</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--cnt_onehot_mode-->
            <field>
              <name>CNT_ONEHOT_MODE</name>
              <description>Continuous or One hot mode</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>One_hot</name>
                  <description>disable the cap sensor module</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Continuous</name>
                  <description>enable the cap sensor module</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--sample_mode-->
            <field>
              <name>SAMPLE_MODE</name>
              <description>Select bits for FIFO write and FIFO average</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--reset_wr_fifo-->
            <field>
              <name>RESET_WR_FIFO</name>
              <description>Resets the signal fifo_wr_int</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Reset</name>
                  <description>Reset</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Out_of_reset</name>
                  <description>Out of reset</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--bypass-->
            <field>
              <name>BYPASS</name>
              <description>Bypass signal</description>
              <bitRange>[15:15]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Use Random number generator output bit as input to
     				           Non-Overlapping stream generator.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Bypass the Random number generator output
				               to the Non-overlapping stream generator and to
							   give clock as input to the Non-Overlapping stream generator.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--bit_sel-->
            <field>
              <name>BIT_SEL</name>
              <description>Selects different set of 12 bits to be stored in FIFO</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--ext_trig_sel-->
            <field>
              <name>EXT_TRIG_SEL</name>
              <description>Select bit for NPSS clock or Enable</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!--ext_trig_en-->
            <field>
              <name>EXT_TRIG_EN</name>
              <description>Select bit for NPSS clock or Enable</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Clock</name>
                  <description>NPSS clock</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CTS CONFIG REG 1 2 -->
        <!-- REGISTER 3 -->
        <register>
          <name>CTS_CONFIG_REG_1_2</name>
          <description>Configuration Register 1_2</description>
          <addressOffset>0x104</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--pwm_on_period-->
            <field>
              <name>PWM_ON_PERIOD</name>
              <description>PWM ON period</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--pwm_off_period-->
            <field>
              <name>PWM_OFF_PERIOD</name>
              <description>PWM OFF period</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CTS CONFIG REG 1 3 -->
        <!-- REGISTER 4 -->
        <register>
          <name>CTS_CONFIG_REG_1_3</name>
          <description>Configuration Register 1_3</description>
          <addressOffset>0x108</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--prs_seed-->
            <field>
              <name>PRS_SEED</name>
              <description>Pseudo random generator (PRS) seed value</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CTS CONFIG REG 1 4 -->
        <!-- REGISTER 5 -->
        <register>
          <name>CTS_CONFIG_REG_1_4</name>
          <description>Configuration Register 1_4</description>
          <addressOffset>0x10C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--prs_poly-->
            <field>
              <name>PRS_POLY</name>
              <description>Polynomial programming register for PRS generator</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CTS CONFIG REG 1 5 -->
        <!-- REGISTER 6 -->
        <register>
          <name>CTS_CONFIG_REG_1_5</name>
          <description>Configuration Register 1_5</description>
          <addressOffset>0x110</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000FF</resetValue>
          <fields>
            <!--inter_sensor_delay-->
            <field>
              <name>INTER_SENSOR_DELAY</name>
              <description>Inter-sensor scan delay value</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--N_sample_count-->
            <field>
              <name>N_SAMPLE_COUNT</name>
              <description>Number of repetitions of sensor scan</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CTS CONFIG REG 1 6 -->
        <!-- REGISTER 7 -->
        <register>
          <name>CTS_CONFIG_REG_1_6</name>
          <description>Configuration Register 1_6</description>
          <addressOffset>0x114</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--sensor_cfg-->
            <field>
              <name>SENSOR_CFG</name>
              <description>Register of scan controller containing the programmed bit map</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CTS CONFIG REG 1 7 -->
        <!-- REGISTER 8 -->
        <register>
          <name>CTS_CONFIG_REG_1_7</name>
          <description>Configuration Register 1_7</description>
          <addressOffset>0x118</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000080</resetValue>
          <fields>
            <!--valid_sensors-->
            <field>
              <name>VALID_SENSORS</name>
              <description>Value of number of sensors valid in the bit map</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--ref_volt_config-->
            <field>
              <name>REF_VOLT_CONFIG</name>
              <description>This is given as an input voltage to analog model as comparator reference voltage.</description>
              <bitRange>[14:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--wakeup_mode-->
            <field>
              <name>WAKEUP_MODE</name>
              <description>Select bit for high/low mode.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Greater_Than</name>
                  <description>Wakeup if count is greater than threshold</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Less_Than</name>
                  <description>Wakeup if count is lesser than threshold</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--wake_up_threshold-->
            <field>
              <name>WAKE_UP_THRESHOLD</name>
              <description>Wakeup threshold.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CTS CONFIG REG 1 8 -->
        <!-- REGISTER 9 -->
        <register>
          <name>CTS_CONFIG_REG_1_8</name>
          <description>Configuration Register 1_8</description>
          <addressOffset>0x11C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--prs_state-->
            <field>
              <name>PRS_STATE</name>
              <description>Current state of PRS</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- CTS CONFIG REG 1 9 -->
        <!-- REGISTER 10 -->
        <register>
          <name>CTS_CONFIG_REG_1_9</name>
          <description>Configuration Register 1_9</description>
          <addressOffset>0x120</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--trig_div-->
            <field>
              <name>TRIG_DIV</name>
              <description>Allows one pulse for every 'trig_div' no. of pulses of 1 ms clock</description>
              <bitRange>[9:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- CTS FIFO ADDRESS -->
        <!-- REGISTER 11 -->
        <register>
          <name>CTS_FIFO_ADDRESS</name>
          <description>FIFO Address Register</description>
          <addressOffset>0x004</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--fifo-->
            <field>
              <name>FIFO</name>
              <description>Used for FIFO reads and write operations</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--MCU_CONFIG-->
    <peripheral>
      <name>MCU_CONFIG</name>
      <version>1.0</version>
      <description>MISC CONFIG Register</description>
      <groupName>MISC_CONFIG</groupName>
      <baseAddress>0x46008000</baseAddress>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x1F8</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>NPSS_TO_MCU_WDT_INTR</name>
        <value>20</value>
      </interrupt>
      <interrupt>
        <name>NPSS_TO_MCU_GPIO_INTR</name>
        <value>21</value>
      </interrupt>
      <interrupt>
        <name>NPSS_TO_MCU_CMP_RF_WKP_INTR</name>
        <value>22</value>
      </interrupt>
      <interrupt>
        <name>NPSS_TO_MCU_BOD_INTR</name>
        <value>23</value>
      </interrupt>
      <interrupt>
        <name>NPSS_TO_MCU_BUTTON_INTR</name>
        <value>24</value>
      </interrupt>
      <interrupt>
        <name>NPSS_TO_MCU_SDC_INTR</name>
        <value>25</value>
      </interrupt>
      <interrupt>
        <name>NPSS_TO_MCU_WIRELESS_INTR</name>
        <value>26</value>
      </interrupt>
      <interrupt>
        <name>NPSS_MCU_INTR</name>
        <value>27</value>
      </interrupt>
      <interrupt>
        <name>MCU_CAL_ALARM</name>
        <value>28</value>
      </interrupt>
      <interrupt>
        <name>MCU_CAL_RTC</name>
        <value>29</value>
      </interrupt>
      <interrupt>
        <name>MCU_CAL_RTC</name>
        <value>29</value>
      </interrupt>
      <interrupt>
        <name>HIF0</name>
        <value>35</value>
      </interrupt>
      <interrupt>
        <name>HIF1</name>
        <value>36</value>
      </interrupt>
      <interrupt>
        <name>EGPIO_WAKEUP</name>
        <value>41</value>
      </interrupt>
      <interrupt>
        <name>PLL_CLOCK</name>
        <value>69</value>
      </interrupt>
      <interrupt>
        <name>TASS_P2P</name>
        <value>74</value>
      </interrupt>
      <registers>
        <!--MISC_CFG_HOST_INTR_MASK REGISTER-->
        <!-- REGISTER 1 -->
        <register>
          <name>MCR_HOST_SPI_INTR_MASK_REG</name>
          <description>MISC CFG HOST INTR MASK</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--HOST_SPI_INTR_MSK-->
            <field>
              <name>HOST_INTR_MSK</name>
              <description>Writing 1 in any bit masks the corresponding interrupt in HOST_INTR_STATUS.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--HOST_SPI_INTR_OPEN_DRAIN_MODE-->
            <field>
              <name>HOST_SPI_INTR_OPEN_DRAIN_MODE</name>
              <description>Writing 1 to this bit configures the host SPI interrupt in open drain mode.
 			                When open drain mode is enabled and interrupt is configured in active high mode, 
							external PULLDOWN has to be used on the board.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--HOST_SPI_INTR_ACTIVE_LOW_MODE-->
            <field>
              <name>HOST_SPI_INTR_ACTIVE_LOW_MODE</name>
              <description>Writing 1 to this bit configures the host SPI interrupt in active low mode. By default, it will be active high.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_HOST_SPI_INTR_SET_REG</name>
          <description>MCU host spi interrupt set register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--HOST_SPI_INTR_MSK-->
            <field>
              <name>HOST_SPI_INTR_STATUS</name>
              <!--#DD change desciption using enumerated values-->
              <description>Writing '1' to any bit raises an interrupt to SPI host.
Writing '1' at the corresponding bit position in MCR_HOST_SPI_INTR_CLR clears the interrupt.

Performing read gives HOST_SPI_INTR_STATUS always.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_HOST_SPI_INTR_CLR_REG</name>
          <description>MCU host spi interrupt clear register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--HOST_SPI_INTR_CLEAR-->
            <field>
              <name>HOST_SPI_INTR_CLEAR</name>
              <!--#DD change desciption using enumerated values-->
              <description>Writing '1' to this bit clears the MCR_HOST_SPI_INTR_SET_REG. This register gets cleared in the next clock cycle. Performing read gives HOST_SPI_INTR_STATUS always</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_HOST_CTRL_REG</name>
          <description>MCU host control register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00008004</resetValue>
          <fields>
            <!--ready_from_core-->
            <field>
              <name>ready_from_core</name>
              <!--#DD change desciption using enumerated values-->
              <description>Indication to the host that bootloading is done. When the reset latch bootload_en is '0' , firmware sets this bit.
When hardware bootloading is enabled , this gets set only after bootloading is done.
When hardware bootloading is enabled and bootloader is programmed to release the PC from soft reset, firmware sets this bit.

</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--host_spi_poweron_rst-->
            <field>
              <name>host_spi_poweron_rst</name>
              <description>This is an active high reset which is used to generate host reset. This has to be enabled only in SPI Host Mode.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--host_spi_bus_err_oen-->
            <field>
              <name>host_spi_bus_err_oen</name>
              <!--#DD change desciption using enumerated values-->
              <description>Host SPI Bus error output enable. It is active low signal.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>SPI Bus error output is enabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>SPI Bus error output is disabled.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--host_spi_bus_err_out-->
            <field>
              <name>host_spi_bus_err_out</name>
              <description>Host SPI Bus error output.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_Error</name>
                  <description>There is no error on Host SPI receive transaction</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Error</name>
                  <description>There is error in Host SPI receive transaction</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>host_spi_bus_err_in</name>
              <description>Host SPI Bus error input.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>No_Error</name>
                  <description>There is no error on Host SPI transmit transaction</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Error</name>
                  <description>There is error in Host SPI transmit transaction</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[7:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>host_sel</name>
              <description>Selects the Host on 1st Interface</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>load_host_mode</name>
              <description>Overrides the Hardware detected Host on 1st interface.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>H_W_Host_detection</name>
                  <description>H/W based host detection</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>S_W_Host_detection</name>
                  <description>S/W based host detection</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>host_sel_2</name>
              <description>Selects the Host on 2nd Interface</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>load_host_mode_2</name>
              <description>Overrides the Hardware detected Host on 2nd interface.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sdio_spi_prog_sel</name>
              <description>Used to select to use SDIO/ High speed SPI slave</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SELECT_SDIO</name>
                  <description>MCU can access SDIO registers</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SELECT_SPI</name>
                  <description>MCU can access SPI registers</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_RST_LATCH_STATUS_REG</name>
          <description>MCU reset latch status register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000000E</resetValue>
          <fields>
            <!--Boot_mode_en-->
            <field>
              <name>Boot_mode_en</name>
              <description>This bit is used to indicate if boot mode is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>boot_mode</name>
              <!--#DD discription is written as reserved-->
              <description>Reserved</description>
              <bitRange>[2:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>sdio_sel</name>
              <description>This bit indicates the SDIO slave host select</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SDIO_SELECTED</name>
                  <description>SDIO is selected</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDIO_NOT_SELECTED</name>
                  <description>SDIO is not selected</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>spi_sel</name>
              <description>This bit indicates the High speed SPI slave host select</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI_SELECTED</name>
                  <description>SPI is selected</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI_NOT_SELECTED</name>
                  <description>SPI is not selected</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ram_retention_status</name>
              <description>This bit indicates whether RAM is retained or not.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RAM_RETAINED</name>
                  <description>Ram Retained</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RAM_NOT_RETAINED</name>
                  <description>Ram is not retained</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>mcu_first_powerup_por</name>
              <description>This bit indicates MCU first power up status</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ulp_wakeup</name>
              <description>This bit differentiates between normal power up and ULP wakeup state</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ULP_WAKEUP</name>
                  <description>ULP Based wakeup</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NOT_ULP_WAKEUP</name>
                  <description>Not ULP based wakeup(first powerup)</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[15:10]</bitRange>
              <access>read-only</access>
            </field>
            <!--#DD need to understand what NA means-->
            <field>
              <name>NA</name>
              <description>NA</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_MCU_P2P_INTR_SET_REG</name>
          <description>MCU to NWP P2P Interrupt Set Register</description>
          <addressOffset>0x16C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--MCU_P2P_INTR_SET-->
            <field>
              <name>MCU_P2P_INTR_SET</name>
              <description>16 P2P interrupts for communication from MCU to NWP,Each bit is used to clear the interrupt to NWP</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>WRITE_1</name>
                  <description>Raises the Interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>WRITE_0</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>READ_1</name>
                  <description>Interrupt is raised</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>READ_0</name>
                  <description>Interrupt not raised</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_NWP_P2P_INTR_MASK_SET_REG</name>
          <description>NWP to MCU P2P Interrupt Mask Register</description>
          <addressOffset>0x178</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000FFFF</resetValue>
          <resetMask>0x0000FFFF</resetMask>
          <fields>
            <!--NWP_P2P_INTR_MASK-->
            <field>
              <name>NWP_P2P_INTR_MASK</name>
              <description>16 P2P interrupts for communication from MCU to NWP,Each bit is used to mask the NWP P2P interrupt</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <!--#DD need to check enumerated values name-->
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mask_NWP_P2P_Interrupt</name>
                  <description>Masks the NWP P2P Interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Not_Raised</name>
                  <description>Not Raised</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_NWP_P2P_INTR_MASK_CLR_REG</name>
          <description>NWP to MCU P2P Interrupt Unmask Register</description>
          <addressOffset>0x17C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000FFFF</resetValue>
          <resetMask>0x0000FFFF</resetMask>
          <fields>
            <!--NWP_P2P_INTR_UNMASK-->
            <field>
              <name>NWP_P2P_INTR_UNMASK</name>
              <description>16 P2P interrupts for communication from MCU to NWP,Each bit is used to unmask the NWP P2P interrupt</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <!--#DD need to check enumerated values name-->
              <enumeratedValues>
                <enumeratedValue>
                  <name>Unmask_NWP_P2P_Interrupt</name>
                  <description>unmasks the NWP P2P Interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Not_Raised</name>
                  <description>Not raised</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_MCU_P2P_INTR_CLR_REG</name>
          <description>MCU to NWP P2P Interrupt Clear Register</description>
          <addressOffset>0x170</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--MCU_P2P_INTR_CLR-->
            <field>
              <name>MCU_P2P_INTR_CLR</name>
              <description>16 P2P interrupts for communication from MCU to NWP,Each bit is used to clear the interrupt to NWP</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>WRITE_1</name>
                  <description>Clears the Interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>WRITE_0</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>READ_1</name>
                  <description>Interrupt is raised</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>READ_0</name>
                  <description>Interrupt not raised</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_NWP_P2P_INTR_CLR_REG</name>
          <description>NWP to MCU P2P Interrupt Clear Register</description>
          <addressOffset>0x180</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--MCU_P2P_INTR_CLR-->
            <field>
              <name>NWP_P2P_INTR_CLR</name>
              <description>16 P2P interrupts for communication from MCU to NWP,Each bit is used to clear the interrupt to NWP</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>WRITE_1</name>
                  <description>Clears the Interrupt for MCU instantly</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>WRITE_0</name>
                  <description>No effect</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>READ_1</name>
                  <description>Interrupt is raised</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>READ_0</name>
                  <description>Interrupt not raised</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_MCU_P2P_COMM_STATUS_REG</name>
          <description>MCU to NWP P2P Communication Status Register</description>
          <addressOffset>0x174</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--MCU wakeup NWP-->
            <field>
              <name>MCU_Wakeup_NWP</name>
              <description>This bit is used to wakeup NWP from sleep.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <!--#DD need to check enumerated value name-->
              <enumeratedValues>
                <enumeratedValue>
                  <name>HIGH</name>
                  <description>MCU wakesup NWP</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LOW</name>
                  <description>No Operation</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MCU_Active_Status</name>
              <description>This bit is used to indicate NWP that MCU is active</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MCU_Active</name>
                  <description> MCU is active</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MCU_Sleeping</name>
                  <description>MCU is sleeping</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>NWP_Wakeup_MCU</name>
              <description>This bit is used to indicate MCU that it should wakeup from sleep</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NWP_Wakesup_MCU</name>
                  <description>NWP wakes up MCU</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>No_Operation</name>
                  <description>MCU is sleeping</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>NWP_Active_Status</name>
              <description>This bit is used to indicate MCU that NWP is active</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NWP_Active</name>
                  <description>NWP is active</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NWP_Sleeping</name>
                  <description>NWP is sleeping</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--reserved1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <cluster>
          <dim>4</dim>
          <dimIncrement>0x8</dimIncrement>
          <name>MCR_PERI_INTR_MASK_REGn</name>
          <description>MCR_PERI_INTR_MASK_SET_TH0_REG (0-3) and MCR_PERI_INTR_MASK_CLR_TH0_REG (0-3)</description>
          <addressOffset>0x184</addressOffset>
          <register>
            <name>MCR_PERI_INTR_MASK_SET_TH_n__REG</name>
            <description>Mask Register for MCU HP Peripheral Interrupts going to NWP on Thread</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x1FFFFFFF</resetValue>
            <resetMask>0x1FFFFFFF</resetMask>
            <fields>
              <!--deadtime_A_ch-->
              <field>
                <name>MCU_PERI_MSK_SET</name>
                <description>Each bit is used to mask the respective MCU HP peripheral interrupt.</description>
                <bitRange>[28:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>No_Effect_Write</name>
                    <description>Writing a zero into this has no effect.</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Masks_Interrupts_write</name>
                    <description>Masks the interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Interrupt_masked_read</name>
                    <description>Interrupt is masked</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Interrupt_Not_Masked_read</name>
                    <description>Interrupt not masked</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- RESERVED -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:29]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MCR_PERI_INTR_MASK_CLR_TH_n__REG</name>
            <description>Unmask Register for MCU HP Peripheral Interrupts going to NWP on Thread </description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x1FFFFFFF</resetValue>
            <resetMask>0x1FFFFFFF</resetMask>
            <fields>
              <!--deadtime_A_ch-->
              <field>
                <name>MCU_PERI_MSK_CLR</name>
                <description>Each bit is used to unmask the respective MCU HP peripheral interrupt.</description>
                <bitRange>[28:0]</bitRange>
                <access>read-write</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>No_Effect_Write</name>
                    <description>Writing a zero into this has no effect.</description>
                    <value>0</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Unmasks_Interrupt_write</name>
                    <description>Unmasks the interrupt</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Interrupt_masked_read</name>
                    <description>Interrupt is masked</description>
                    <value>1</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>Interrupt_Not_Masked_read</name>
                    <description>Interrupt not masked</description>
                    <value>0</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- RESERVED -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:29]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <cluster>
          <dim>4</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>MCR_PERI_INTR_STS_THn_REG</name>
          <description>MCR_PERI_INTR_STS_TH_REG (0-3)</description>
          <addressOffset>0x1A4</addressOffset>
          <register>
            <name>MCR_PERI_INTR_STS_TH_n__REG</name>
            <description>Status Register for MCU HP Peripheral Interrupts going to NWP on Thread </description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00</resetValue>
            <resetMask>0x00</resetMask>
            <fields>
              <!--deadtime_A_ch-->
              <field>
                <name>MCU_PERI_INTR_STATUS</name>
                <description>If bit m of (28:0) is 1, then the mth MCU HP peripheral interrupt is not masked and is been raised in thread</description>
                <bitRange>[28:0]</bitRange>
                <access>read-only</access>
                <enumeratedValues>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_1_Not_Masked</name>
                    <description>MCU HP peripheral 1 interrupt not masked</description>
                    <value>0x00000001</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_2_Not_Masked</name>
                    <description>MCU HP peripheral 2 interrupt not masked</description>
                    <value>0x00000002</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_3_Not_Masked</name>
                    <description>MCU HP peripheral 3 interrupt not masked</description>
                    <value>0x00000004</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_4_Not_Masked</name>
                    <description>MCU HP peripheral 4 interrupt not masked</description>
                    <value>0x00000008</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_5_Not_Masked</name>
                    <description>MCU HP peripheral 5 interrupt not masked</description>
                    <value>0x00000010</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_6_Not_Masked</name>
                    <description>MCU HP peripheral 6 interrupt not masked</description>
                    <value>0x00000020</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_7_Not_Masked</name>
                    <description>MCU HP peripheral 7 interrupt not masked</description>
                    <value>0x00000040</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_8_Not_Masked</name>
                    <description>MCU HP peripheral 8 interrupt not masked</description>
                    <value>0x00000080</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_9_Not_Masked</name>
                    <description>MCU HP peripheral 9 interrupt not masked</description>
                    <value>0x00000100</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_10_Not_Masked</name>
                    <description>MCU HP peripheral 10 interrupt not masked</description>
                    <value>0x00000200</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_11_Not_Masked</name>
                    <description>MCU HP peripheral 11 interrupt not masked</description>
                    <value>0x00000400</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_12_Not_Masked</name>
                    <description>MCU HP peripheral 12 interrupt not masked</description>
                    <value>0x00000800</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_13_Not_Masked</name>
                    <description>MCU HP peripheral 13 interrupt not masked</description>
                    <value>0x00001000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_14_Not_Masked</name>
                    <description>MCU HP peripheral 14 interrupt not masked</description>
                    <value>0x00002000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_15_Not_Masked</name>
                    <description>MCU HP peripheral 15 interrupt not masked</description>
                    <value>0x00004000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_16_Not_Masked</name>
                    <description>MCU HP peripheral 16 interrupt not masked</description>
                    <value>0x00008000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_17_Not_Masked</name>
                    <description>MCU HP peripheral 17 interrupt not masked</description>
                    <value>0x00010000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_18_Not_Masked</name>
                    <description>MCU HP peripheral 18 interrupt not masked</description>
                    <value>0x00020000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_19_Not_Masked</name>
                    <description>MCU HP peripheral 19 interrupt not masked</description>
                    <value>0x00040000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_20_Not_Masked</name>
                    <description>MCU HP peripheral 20 interrupt not masked</description>
                    <value>0x00080000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_21_Not_Masked</name>
                    <description>MCU HP peripheral 21 interrupt not masked</description>
                    <value>0x00100000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_22_Not_Masked</name>
                    <description>MCU HP peripheral 22 interrupt not masked</description>
                    <value>0x00200000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_23_Not_Masked</name>
                    <description>MCU HP peripheral 23 interrupt not masked</description>
                    <value>0x00400000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_24_Not_Masked</name>
                    <description>MCU HP peripheral 24 interrupt not masked</description>
                    <value>0x00800000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_25_Not_Masked</name>
                    <description>MCU HP peripheral 25 interrupt not masked</description>
                    <value>0x01000000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_26_Not_Masked</name>
                    <description>MCU HP peripheral 26 interrupt not masked</description>
                    <value>0x02000000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_27_Not_Masked</name>
                    <description>MCU HP peripheral 27 interrupt not masked</description>
                    <value>0x04000000</value>
                  </enumeratedValue>
                  <enumeratedValue>
                    <name>MCU_HP_Peripheral_28_Not_Masked</name>
                    <description>MCU HP peripheral 28 interrupt not masked</description>
                    <value>0x08000000</value>
                  </enumeratedValue>
                </enumeratedValues>
              </field>
              <!-- RESERVED -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:29]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>MCR_MEM_RM_RME_REG</name>
          <description>Memory RM and RME Control Register</description>
          <addressOffset>0x1B8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00020002</resetValue>
          <fields>
            <!--MCU_ram_rom_rm_rme-->
            <field>
              <name>MCU_ram_rom_rm_rme</name>
              <description>[2:1] bits are used as RM ports for SRAM memories,[0] bit is used as RM enable (RME) for SRAM memories.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Reserved-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[15:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--host_spi_bus_err_oen-->
            <field>
              <name>MCU_fifo_rm_rme</name>
              <description>[18:17] bits are used as RM ports for fifo memories which are internal to peripherals.[16] bit is used as RM enable (RME) for fifo memories which are internal to peripherals.</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>SPI Bus error output is enabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>SPI Bus error output is disabled.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:19]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_ULP_AHB_BRIDGE_CLK_ENABLE_REG</name>
          <description>ULP AHB-AHB bridge static clock enable register</description>
          <addressOffset>0x1FC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!--ULP_AHB_bridge_clk_enable-->
            <field>
              <name>ULP_AHB_bridge_clk_enable</name>
              <description>Used to enable static clock gating ULP AHB-AHB bridge. Only 32-bit write is allowed into this register.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_AHB_MASTER_TRAP_ENABLE_64K1</name>
          <description>AHB Master Trap Enable Register for memory set 64K1</description>
          <addressOffset>0x1C8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--	Reserved-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>Trap_enable_bits_per_master_64K1</name>
              <!--#DD need to check if we can use enumerated values-->
              <description>'1' on a particular bit position indicates that access by that master to a trap enable bank will generate trap otherwise if it is '0' it won't generate a trap if it is accessing a trap enable bank.

The masking is for UM1 transactions indicated in  DMA_WR_TRAP_ENABLE_REG_64K1, DMA_WR_TRAP_ENABLE_REG_64K1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DM_TRAP_STATUS_64K1</name>
          <description>DM Trap Status Register for memory set 64K1</description>
          <addressOffset>0x1D0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED1-->
            <field>
              <name>Gnt</name>
              <description>The grant signal for pm port of unified memory.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Write_or_read</name>
              <description>to check whether its read or write request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Read_Request</name>
                  <description>Read request</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Write_request</name>
                  <description>write request</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>master_number</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Address</name>
              <description>The address for which the read or write request came on dm port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA0_TRAP_STATUS_64K1</name>
          <description>DMA0 Trap Status Register for memory set 64K1</description>
          <addressOffset>0x1D4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED1-->
            <field>
              <name>Gnt</name>
              <description>The grant signal for pm port of unified memory.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Write_or_read</name>
              <description>to check whether its read or write request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Read_Request</name>
                  <description>Read request</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Write_request</name>
                  <description>write request</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>master_number</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Address</name>
              <description>The address for which the read or write request came on dm0 port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA1_TRAP_STATUS_64K1</name>
          <description>DMA1 Trap Status Register for memory set 64K1</description>
          <addressOffset>0x1D8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED1-->
            <field>
              <name>Gnt</name>
              <description>The grant signal for pm port of unified memory.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Write_or_read</name>
              <description>to check whether its read or write request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Read_Request</name>
                  <description>Read request</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Write_request</name>
                  <description>write request</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>master_number</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Address</name>
              <description>The address for which the read or write request came on dm1 port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA2_TRAP_STATUS_64K1</name>
          <description>DMA2 Trap Status Register for memory set 64K1</description>
          <addressOffset>0x1DC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED1-->
            <field>
              <name>Gnt</name>
              <description>The grant signal for pm port of unified memory.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Write_or_read</name>
              <description>to check whether its read or write request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Read_Request</name>
                  <description>Read request</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Write_request</name>
                  <description>write request</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>master_number</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Address</name>
              <description>The address for which the read or write request came on dm2 port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DM_TRAP_ENABLE_REG_64K1</name>
          <description>DM Trap Enable Register for memory set 64K1</description>
          <addressOffset>0x1E0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--#DD enumeration value-->
            <field>
              <name>Enable_Bits_Per_Bank_Memory_Set_4</name>
              <description>LSB corresponds to 0th bank in the particular set. A '1' in any bit position indicates that if through that port that bank access , a trap will be generated</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DM_TRAP_ENABLE_REG_64K0</name>
          <description>DM Trap Enable Register for memory set 64K0</description>
          <addressOffset>0x118</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--#DD enumerationvalues-->
            <field>
              <name>Enable_Bits_Per_Bank_Memory_Set_4</name>
              <description>LSB corresponds to 0th bank in the particular set. A '1' in any bit position indicates that if through that port that bank access , a trap will be generated</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA_RD_TRAP_ENABLE_REG_64K1</name>
          <description>DMA Read Trap Enable Register for memory set 64K1</description>
          <addressOffset>0x1E4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--#DD need to check discription if enumerated value is possible-->
            <field>
              <name>Enable_Bits_Per_Bank_Memory_Set_4</name>
              <description>LSB corresponds to 0th bank in the particular set. A '1' in any bit position indicates that if through that port that bank access , a trap will be generated</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA_RD_TRAP_ENABLE_REG_64K0</name>
          <description>DMA Read Trap Enable Register for memory set 64K0</description>
          <addressOffset>0x124</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--#DD need to check discription if enumerated value is possible-->
            <field>
              <name>Enable_Bits_Per_Bank_Memory_Set_4</name>
              <description>LSB corresponds to 0th bank in the particular set. A '1' in any bit position indicates that if through that port that bank access , a trap will be generated</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA_WR_TRAP_ENABLE_REG_64K1</name>
          <description>DMA Write Trap Enable Register for memory set 64K1</description>
          <addressOffset>0x1E8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Enable_Bits_Per_Bank_Memory_Set_4</name>
              <description>LSB corresponds to 0th bank in the particular set. A '1' in any bit position indicates that if through that port that bank access , a trap will be generated</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA_WR_TRAP_ENABLE_REG_64K0</name>
          <description>DMA Write Trap Enable Register for memory set 64K0</description>
          <addressOffset>0x130</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Enable_Bits_Per_Bank_Memory_Set_4</name>
              <description>LSB corresponds to 0th bank in the particular set. A '1' in any bit position indicates that if through that port that bank access , a trap will be generated</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_ASYNC_TRAP_STATUS_64K1</name>
          <description>Async Trap Status Register for memory set 64K1</description>
          <addressOffset>0x1EC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DM_Trap</name>
              <description>Async trap is detected from cortex IM port</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>AHB_Read_Trap</name>
              <description>Async read is detected from other AHB ports</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>AHB_Write_Trap</name>
              <description>Async write trap is detected from other AHB ports</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--#DD 4th bit not given in HRM-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_ASYNC_TRAP_STATUS_160K</name>
          <description>Async Trap Status Register for memory set 160K</description>
          <addressOffset>0x13C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DM_Trap</name>
              <description>Async trap is detected from cortex IM port</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>AHB_Read_Trap</name>
              <description>Async read is detected from other AHB ports</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>AHB_Write_Trap</name>
              <description>Async write trap is detected from other AHB ports</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--#DD 4th bit not given in HRM-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_ASYNC_TRAP_STATUS_64K0</name>
          <description>Async Trap Status Register for memory set 64k0</description>
          <addressOffset>0x148</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DM_Trap</name>
              <description>Async trap is detected from cortex IM port</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>AHB_Read_Trap</name>
              <description>Async read is detected from other AHB ports</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>AHB_Write_Trap</name>
              <description>Async write trap is detected from other AHB ports</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--#DD 4th bit not given in HRM-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_ASYNC_TRAP_CLEAR_64K1</name>
          <description>Async Trap Clear Register for memory set 64K1</description>
          <addressOffset>0x1F0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DM_Trap</name>
              <description>Reading 1 Indicates Async trap is cleared from cortex IM port</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Aynch_Trap_Cleared</name>
                  <description>Async trap is cleared from cortex IM port</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB_Read_Trap</name>
              <description>Reading 1 indiacates Async read is cleared from other AHB ports</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Aynch_Read_Cleared</name>
                  <description> Async read is cleared from other AHB ports</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB_Write_Trap</name>
              <description>Reading 1 indicates Async write trap is cleared from other AHB ports</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Aynch_Write_Trap_Cleared</name>
                  <description> Async read is cleared from other AHB ports</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#DD 4th bit not given in HRM-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_ASYNC_TRAP_CLEAR_160K</name>
          <description>Async Trap Clear Register for memory set 160K</description>
          <addressOffset>0x150</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DM_Trap</name>
              <description>Reading 1 Indicates Async trap is cleared from cortex IM port</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Aynch_Trap_Cleared</name>
                  <description>Async trap is cleared from cortex IM port</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB_Read_Trap</name>
              <description>Reading 1 indiacates Async read is cleared from other AHB ports</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Aynch_Read_Cleared</name>
                  <description> Async read is cleared from other AHB ports</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB_Write_Trap</name>
              <description>Reading 1 indicates Async write trap is cleared from other AHB ports</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Aynch_Write_Trap_Cleared</name>
                  <description> Async read is cleared from other AHB ports</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#DD 4th bit not given in HRM-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_ASYNC_TRAP_CLEAR_64K0</name>
          <description>Async Trap Clear Register for memory set 64K0</description>
          <addressOffset>0x15C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DM_Trap</name>
              <description>Reading 1 Indicates Async trap is cleared from cortex IM port</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Aynch_Trap_Cleared</name>
                  <description>Async trap is cleared from cortex IM port</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB_Read_Trap</name>
              <description>Reading 1 indiacates Async read is cleared from other AHB ports</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Aynch_Read_Cleared</name>
                  <description> Async read is cleared from other AHB ports</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB_Write_Trap</name>
              <description>Reading 1 indicates Async write trap is cleared from other AHB ports</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Aynch_Write_Trap_Cleared</name>
                  <description> Async read is cleared from other AHB ports</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#DD 4th bit not given in HRM-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_ASYNC_TRAP_DETECTED_64K1</name>
          <description>Async Trap Detected Register for memory set 64K1</description>
          <addressOffset>0x1F4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Async_Trap_Detected_Cortex</name>
              <description>This will give you the indication that trap has been detected by cortex. Firmware has to write this bit as '1' so that the asyn_trap can be cleared.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--#DD 4th bit not given in HRM-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[15:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_ASYNC_TRAP_DETECTED_64K0</name>
          <description>Async Trap Detected Register for memory set 64K0</description>
          <addressOffset>0x164</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Async_Trap_Detected_Cortex</name>
              <description>This will give you the indication that trap has been detected by cortex. Firmware has to write this bit as '1' so that the asyn_trap can be cleared.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--#DD 4th bit not given in HRM-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[15:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DCACHE_CTRL_AND_STATUS_REG</name>
          <description>Dcache Control and Status Register</description>
          <addressOffset>0x1F8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x60064EBB</resetValue>
          <!--#DD need to add pprot-->
          <fields>
            <field>
              <name>pwr_qreqn</name>
              <description>Active-LOW quiescence request signal driven by the power controller.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pwr_qacceptn</name>
              <description>When 0, indicates that the AHB Cache accepts the quiescence request from the power controller</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pwr_qdeny</name>
              <description>When 1, indicates that the AHB Cache denies the quiescence request from the power controller</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pwr_qactive</name>
              <description>1 indicates to the controller that the AHB Cache needs power,0 indicates the AHB Cache might accept a quiescence request</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>clk_qreqn</name>
              <description>Active-LOW quiescence request signal driven by the clock controller. </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>clk_qacceptn</name>
              <description>When 0, indicates that the AHB Cache accepts the quiescence request from the clock controller.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>clk_qdeny</name>
              <description>When 1 indicates that the AHB Cache denies the quiescence request from the clock controller.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>clk_qactive</name>
              <description>when 1, indicates to the controller that the AHB Cache requires the clock. When 0, the AHB Cache might accept a quiescence request.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>hnonsec_s</name>
              <description>Non-secure transfer indicator,Asserted for a Non-secure transfer and Deasserted for a Secure transfer</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--#DD need to check discription and name-->
            <field>
              <name>hprot</name>
              <!--#DD Need to see how to repesent table here-->
              <description>Since Dcache is AHB 5 compatible, The remaining signals are included in this register as configurable.</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hnonsec_m</name>
              <description>Assertion indicates for a Non-secure transfer and Deasserted for a Secure transfer</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pslverr</name>
              <description>Indicates a transfer failure</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pclken</name>
              <description>The clock enable signal. This signal allows the APB to run on a divided frequency.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pwakeup</name>
              <description>Wake up signal,Indicates that there is ongoing activity that is associated with the APB interface</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>pwr_maintenance</name>
              <description>deasserted indicates cache powerdown preparation done.Asserted if powerdown maintenance is ongoing</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>pmsnapshotreq</name>
              <description>A trigger signal which initiates the capture of the current value of the statistics counters. Must be a synchronous pulse. </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>apb_violation_resp</name>
              <description>If HIGH,indicates the AHB Cache responds with errors to failed APB accesses by asserting pslverr</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>power_on_enable</name>
              <description>This signal enables the cache automatically after powerup. </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dis_pwr_down_maint</name>
              <description>This signal turns off powerdown maintenance.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dis_cache_en_maint</name>
              <description>This signal turns off cache enable maintenance.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>dis_cache_dis_maint</name>
              <description>This signal turns off cache disable maintenance. </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hprot_old</name>
              <description>This signal represents the ahb3 hprot description</description>
              <bitRange>[29:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mvp_qreqn</name>
              <description>This input is for the MVP q channel interface. (MVP is not using qchannel active low signal)</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA_DEVICE_SEL_REG</name>
          <description>MCU DMA device select register</description>
          <addressOffset>0x108</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--I2S_RF_SPI_DMA_SEL-->
            <field>
              <name>I2S_RF_SPI_DMA_SEL</name>
              <description>To select between i2s and rf spi dma flow control signals</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_MULTI_FN_SSI_DMA_SEL-->
            <field>
              <name>SDIO_MULTI_FN_SSI_DMA_SEL</name>
              <description>To select between SSI master and sdio flow control signals</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SSI_MASTER_SELECT</name>
                  <description>SSI Master select</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SDIO_FLOW_CONTROL</name>
                  <description>SDIO Multifunctional</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--UART2_I2S_DMA_SEL-->
            <field>
              <name>UART2_I2S_DMA_SEL</name>
              <description>To select between I2S and UART2 flow control signals</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>UART2_Flow_Control</name>
                  <description>selects UART 2 flow control</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2S_Flow_Control</name>
                  <description>selects I2S flow control</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SIO_SSI_SLAVE2_DMA_SEL-->
            <field>
              <name>SIO_SSI_SLAVE2_DMA_SEL</name>
              <description>To select between sio and ssi slave 2 flow control signals</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SIO_Flow_Control</name>
                  <description>selects SIO flow control</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SSI2_SLAVE_FLOW_CONTROL</name>
                  <description>Selects SSI2 slave flow control</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SCT1_MVP_DMA_SEL-->
            <field>
              <name>SCT1_MVP_DMA_SEL</name>
              <!--#DD change desciption using enumerated values-->
              <description>To select between sct and mvp  flow control signals</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SCT_Flow_Control</name>
                  <description>Selects SCT flow control</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MVP_Flow_Control</name>
                  <description>Selects MVP flow control</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_CRC_DMA_SEL-->
            <field>
              <name>QSPI_CRC_DMA_SEL</name>
              <!--#DD change desciption using enumerated values-->
              <description>To select between qspi and crc slave 2 flow control signals</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CRC_Flow_Control</name>
                  <description>CRC</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>QSPI_Flow_Control</name>
                  <description>Selects QSPI flow control</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>CRC</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>QSPI(q2)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA2_TRAP_STATUS_64K0</name>
          <description>MCU DMA2 trap status register for memory set 64K0</description>
          <addressOffset>0xE4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GNT-->
            <field>
              <name>GNT</name>
              <description>The grant signal for dma2 port of unified memory.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--WRITE/READ-->
            <field>
              <name>WRITE_OR_READ_REQUEST</name>
              <description>1=write request,0=read request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--MASTER_NUMBER-->
            <field>
              <name>MASTER_NUMBER</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--ADDRESS-->
            <field>
              <name>ADDRESS</name>
              <description>The address for which the read or write request came on dma2 port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_MVP_PSRAM_TRAP_CLEAR</name>
          <description>MCU MVP PSRAM trap clear register</description>
          <addressOffset>0xE0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--READ/WRITE_MVP-->
            <field>
              <!--#DD Changed the name from HRM-->
              <name>MVP_TRAP_INTERRUPT_CLEAR</name>
              <description>Clears the interrupt for MVP trap</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--READ/WRITE_PSRAM-->
            <field>
              <name>PSRAM_TRAP_INTERRUPT_CLEAR</name>
              <description>Clears the interrupt for PSRAM trap</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_MVP_PSRAM_TRAP_STATUS</name>
          <description>MCU MVP PSRAM trap status register</description>
          <addressOffset>0xDC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--STATUS_MVP-->
            <field>
              <name>STATUS_MVP</name>
              <description>Tells the status of unauthorized access to MVP </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--STATUS_PSRAM-->
            <field>
              <name>STATUS_PSRAM</name>
              <description>Tells the status of unauthorized access to PSRAM </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA2_TRAP_STATUS_160K</name>
          <description>MCU DMA2 trap status register for memory set 160K</description>
          <addressOffset>0xD8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GNT-->
            <field>
              <name>GNT</name>
              <description>The grant signal for dma2 port of unified memory.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--WRITE/READ-->
            <field>
              <name>WRITE_OR_READ_REQUEST</name>
              <description>1=write request,0=read request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--MASTER_NUMBER-->
            <field>
              <name>MASTER_NUMBER</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--ADDRESS-->
            <field>
              <name>ADDRESS</name>
              <description>The address for which the read or write request came on dma2 port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA1_TRAP_STATUS_64K0</name>
          <description>MCU DMA1 trap status register for memory set 64K0</description>
          <addressOffset>0xD4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GNT-->
            <field>
              <name>GNT</name>
              <description>The grant signal for dma1 port of unified memory.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--WRITE/READ-->
            <field>
              <name>WRITE_READ</name>
              <description>1=write request,0=read request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--MASTER_NUMBER-->
            <field>
              <name>MASTER_NUMBER</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--ADDRESS-->
            <field>
              <name>ADDRESS</name>
              <description>The address for which the read or write request came on dma1 port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA1_TRAP_STATUS_160K</name>
          <description>MCU DMA1 trap status register for memory set 160K</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GNT-->
            <field>
              <name>GNT</name>
              <description>The grant signal for dma1 port of unified memory.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--WRITE/READ-->
            <field>
              <name>WRITE_OR_READ_REQUEST</name>
              <description>1=write request,0=read request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--MASTER_NUMBER-->
            <field>
              <name>MASTER_NUMBER</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--ADDRESS-->
            <field>
              <name>ADDRESS</name>
              <description>The address for which the read or write request came on dma1 port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA0_TRAP_STATUS_64K0</name>
          <description>MCU DMA0 Trap Status Register for memory set 64K0</description>
          <addressOffset>0xC4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GNT-->
            <field>
              <name>GNT</name>
              <description>The grant signal for dma0 port of unified memory.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--WRITE/READ-->
            <field>
              <name>WRITE_OR_READ_REQUEST</name>
              <description>1=write request,0=read request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--MASTER_NUMBER-->
            <field>
              <name>MASTER_NUMBER</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--ADDRESS-->
            <field>
              <name>ADDRESS</name>
              <description>The address for which the read or write request came on dma0 port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA0_TRAP_STATUS_160K</name>
          <description>MCU DMA0 Trap Status Register for memory set 160K</description>
          <addressOffset>0xB8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GNT-->
            <field>
              <name>GNT</name>
              <description>The grant signal for dma0 port of unified memory.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--WRITE/READ-->
            <field>
              <name>WRITE_OR_READ_REQUEST</name>
              <description>1=write request, 0=read request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--MASTER_NUMBER-->
            <field>
              <name>MASTER_NUMBER</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--ADDRESS-->
            <field>
              <name>ADDRESS</name>
              <description>The address for which the read or write request came on dm port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DM_TRAP_STATUS_64K0</name>
          <description>MCU DM trap status register for memory set 64K0</description>
          <addressOffset>0xB4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GNT-->
            <field>
              <name>GNT</name>
              <description>The grant signal for pm port of unified memory</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--WRITE/READ-->
            <field>
              <name>WRITE_OR_READ_REQUEST</name>
              <description>1=write request, 0=read request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--MASTER_NUMBER-->
            <field>
              <name>MASTER_NUMBER</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--ADDRESS-->
            <field>
              <name>ADDRESS</name>
              <description>The address for which the read or write request came on dm port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DM_TRAP_STATUS_160K</name>
          <description>MCU DM trap status register for memory set 160K</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GNT-->
            <field>
              <name>GNT</name>
              <description>The grant signal for pm port of unified memory</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--WRITE/READ-->
            <field>
              <name>WRITE_OR_READ</name>
              <description>1=write request,0=read request</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--MASTER_NUMBER-->
            <field>
              <name>MASTER_NUMBER</name>
              <description>The number of the master which requested the transaction.</description>
              <bitRange>[5:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--ADDRESS-->
            <field>
              <name>ADDRESS</name>
              <description>The address for which the read or write request came on dm port.</description>
              <bitRange>[24:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_ASYNC_TRAP_DETECTED_160K</name>
          <description>MCU Async trap detected register for memory set 160K</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--ASYNC_TRAP_DETECTED_CORTEX-->
            <field>
              <name>Async_trap_detected_cortex</name>
              <description>if set indiacates trap has been detected by cortex,firmware should write this as 1 to clear it</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[15:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_AHB_MASTER_TRAP_ENABLE_REG_64K0</name>
          <description>MCU AHB master trap enable register for memory set 64K0</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--TRAP_ENABLE_BITS_PER_MASTER_FOR_MEMORY_SET_64K0-->
            <field>
              <name>TRAP_ENABLE_BITS_PER_MASTER_FOR_MEMORY_SET_64K0</name>
              <!--#DD need to check discription-->
              <description>'1' on a particular bit position indicates that access by that master to a trap enable bank will generate trap otherwise if it is '0' it won't generate a trap if it is accessing a trap enable bank.

The masking is for UM1 transactions indicated in  DMA_WR_TRAP_ENABLE_REG_64K0, DMA_WR_TRAP_ENABLE_REG_64K0</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_AHB_MASTER_TRAP_ENABLE_REG_160K</name>
          <description>MCU AHB master trap enable register for memory set 160K</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000</resetValue>
          <fields>
            <!--Trap enable bits per master for memory set 160K-->
            <field>
              <name>TRAP_ENABLE_BITS_PER_MASTER_FOR_MEMORY_SET_160K</name>
              <!--#DD need to check discription-->
              <description>'1' on a particular bit position indicates that access by that master to a trap enable bank will generate trap otherwise if it is '0' it won't generate a trap if it is accessing a trap enable bank.
The masking is for UM1 transactions indicated in DMA_WR_TRAP_ENABLE_REG_160K , DMA_WR_TRAP_ENABLE_REG_160K .</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA_RD_TRAP_ENABLE_REG_160K</name>
          <description>MCU DM read trap enable register for memory set 160K</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--ENABLE_BITS-->
            <field>
              <name>ENABLE_BITS</name>
              <description>LSB corresponds to oth bank in the particular set. A '1' in any bit position indicates that if through that port that bank access , a trap will be generated</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DMA_WR_TRAP_ENABLE_REG_160K</name>
          <description>MCU DM write trap enable register for memory set 160K</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--ENABLE_BITS-->
            <field>
              <name>ENABLE_BITS</name>
              <description>LSB corresponds to oth bank in the particular set. A '1' in any bit position indicates that if through that port that bank access , a trap will be generated</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_DM_TRAP_ENABLE_REG_160K</name>
          <description>MCU DM trap enable register for memory set 160K</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--ENABLE_BITS-->
            <field>
              <name>ENABLE_BITS</name>
              <description>LSB corresponds to 0th bank in the particular set. A '1' in any bit position indicates that if through that port that bank access , a trap will be generated</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_MEM_LS_ENABLE_REG</name>
          <description>MCU memory light sleep enable register</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--MCU_MEM_LIGHTSLEEP_ENABLE-->
            <field>
              <name>MCU_MEM_LIGHTSLEEP_ENABLE</name>
              <description>Must set this bit to enable Light Sleep mode for any memory in MCU</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--GEN_SPI_MASTER_MEM_LIGHTSLEEP_ENABLE-->
            <field>
              <name>GEN_SPI_MASTER_MEM_LIGHTSLEEP_ENABLE</name>
              <description>Must set this bit along with bit[0] of this register to make GSPI FIFO memories enter into light sleep</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_SOC_ICM_CTRL_REG</name>
          <description>MCU SOC ICM control register</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--REMAP[0]-->
            <field>
              <name>REMAP[0]</name>
              <!--#DD need to check discription and name-->
              <description>When remap[0] == 1, the address
space for rom will be reduced from 0x003F_FC00 to 0x003F_FFFF
and qspi address space will add become 0x0800_0000 to 0x0BFF_FFFF and 0x0030_0000 to 0x003F_FBFF</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[3:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--REMAP_VALID-->
            <field>
              <name>REMAP_VALID</name>
              <description>Need to set If remap feature is required, along with remap[0].</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--REMAP-->
            <field>
              <name>REMAP</name>
              <description>Internal logic signal for (remap_valid &amp;&amp; remap[0]),This bit is going to AHB ICM input</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_SPARE_REG</name>
          <description>MCU M4SS spare register</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_ENABLE_TRAP</name>
          <description>MCU enable trap register</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000003C</resetValue>
          <fields>
            <!--AHB_DUMMY_SLAVE-->
            <field>
              <name>AHB_DUMMY_SLAVE</name>
              <description>AHB dummy slave is selected in cortex</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--TRAP_ENABLE_REGISTER_CORTEX-->
            <field>
              <name>TRAP_ENABLE_REGISTER_CORTEX</name>
              <!--#DD eneed to check HRM-->
              <description>Enable the trap for cortex.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[5:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--APB_DUMMY_SLAVE_SELECTED-->
            <field>
              <name>APB_DUMMY_SLAVE_SELECTED</name>
              <description>When set, any of the master is trying to access the wrong peripheral address.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--AHB_ERROR_TRAP_ENABLE-->
            <field>
              <name>AHB_ERROR_TRAP_ENABLE</name>
              <description>When set, ahb error trap is enabled</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>reserved</description>
              <bitRange>[15:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_RESET_TO_CORE_CNT</name>
          <description>MCU reset to core register</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <!--RESET_TO_CORE_CNT-->
            <field>
              <name>RESET_TO_CORE_CNT</name>
              <description>This fields hold the reset active duration in number of clocks.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESET_TO_CORE_SEL-->
            <field>
              <name>RESET_TO_CORE_SEL</name>
              <description>1: host/debugger reset will be synchronized to sleep clock and used

0: host/debugger reset will be synchronized to soc clock and used</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_I2S_LOOP_BACK_REG</name>
          <description>MCU I2S loopback enable register</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[13:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--I2S_LOOP_BACK_MODE-->
            <field>
              <name>I2S_LOOP_BACK_MODE</name>
              <description>Enables MCU I2S loop back mode</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>reserved</description>
              <bitRange>[31:15]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_AHB_ERROR_PER_MASTER_STATUS_REG</name>
          <description>Hardware sets bit in this register,Firmware resets bits in this register by writing zero</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GPDMA_M1-->
            <field>
              <name>GPDMA_M1</name>
              <description>Bit is set,When the GPDMA AHB master1 is getting error response.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--HIF-->
            <field>
              <name>HIF</name>
              <description>Bit is set, When the HIF AHB master is getting error response.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4_I_PORT-->
            <field>
              <name>M4_I_PORT</name>
              <description>Bit is set, When the Cortex M4 I-port AHB master is getting error response.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4_D_PORT-->
            <field>
              <name>M4_D_PORT</name>
              <description>Bit is set,When the Cortex M4 D-port AHB master is getting error response.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4_S_PORT-->
            <field>
              <name>M4_S_PORT</name>
              <description>Bit is set, When the Cortex M4 S-port AHB master is getting error response.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--ICACHE-->
            <field>
              <name>ICACHE</name>
              <description>Bit is set, When the MCU Icache AHB master is getting error response.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--UDMA-->
            <field>
              <name>UDMA</name>
              <description>Bit is set, When the uDMA AHB master is getting error response.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--ULP_AHB_BRIDGE-->
            <field>
              <name>ULP_AHB_BRIDGE</name>
              <description>Bit is set, When the ULP AHB-AHB bridge master is getting error response.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--GPDMA_M2-->
            <field>
              <name>GPDMA_M2</name>
              <description>Bit is set, When the GPDMA AHB master2 is getting error response.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--NWP_AHB-AHB_MASTER-->
            <field>
              <name>NWP_AHB-AHB_MASTER</name>
              <description>Bit is set, When the NWP AHB-AHB bridge master is getting error response.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_AHB_DUMMY_SLAVE_SELECTED_MASTER_REG</name>
          <description>Hardware sets bit in this register,Firmware resets bits in this register by writing zero</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--GPDMA_M1-->
            <field>
              <name>GPDMA_M1</name>
              <description>Bit is set When the GPDMA AHB master1 is trying to access the wrong slave address.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--HIF-->
            <field>
              <name>HIF</name>
              <description>Bit is set,When the HIF AHB master is trying to access the wrong slave address.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4_I_PORT-->
            <field>
              <name>M4_I_PORT</name>
              <description>Bit is set,When the Cortex M4 I-port AHB master is trying to access the wrong slave address.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4_D_PORT-->
            <field>
              <name>M4_D_PORT</name>
              <description>Bit is set,When the Cortex M4 D-port AHB master is trying to access the wrong slave address.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--M4_S_PORT-->
            <field>
              <name>M4_S_PORT</name>
              <description>Bit is set,When the Cortex M4 S-port AHB master is trying to access the wrong slave address.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--ICACHE-->
            <field>
              <name>ICACHE</name>
              <description>Bit is set,When the MCU Icache AHB master is trying to access the wrong slave address.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--UDMA-->
            <field>
              <name>UDMA</name>
              <description>Bit is set, When the uDMA AHB master is trying to access the wrong slave address</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--ULP_AHB_BRIDGE-->
            <field>
              <name>ULP_AHB_BRIDGE</name>
              <description>Bit is set, when ULP AHB is trying to access the wrong slave address.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--RPDMA_2-->
            <field>
              <name>RPDMA_2</name>
              <description>Bit is set,when RPDMA M2 is trying to access the wrong slave address.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!--TASS_AHB-AHB_MASTER-->
            <field>
              <name>TASS_AHB-AHB_MASTER</name>
              <description>Bit is set, when TASS AHB is trying to access the wrong slave address.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--GPDMA_M2-->
            <field>
              <name>GPDMA_M2</name>
              <description>Bit is set, When the GPDMA AHB master2 is trying to access the wrong slave address</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--NWP_AHB-AHB_MASTER-->
            <field>
              <name>NWP_AHB-AHB_MASTER</name>
              <description>Bit is set, When the NWP AHB-AHB bridge master is trying to access the wrong slave address.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_PERIPHERAL_UDMA_DMA_SEL_REG</name>
          <description>MCU DMA peripheral selection register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--USART1-->
            <field>
              <name>USART1</name>
              <description>When set, ack from udma will go to the uart1, else ack from GPDMA will go.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOT_SET</name>
                  <description>ACK from udma will go to GPDMA</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SET</name>
                  <description>ACK from udma will go to UART1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--UART2-->
            <field>
              <name>UART2</name>
              <description>When set, ack from udma will go to the uart2, else ack from GPDMA will go.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOT_SET</name>
                  <description>ACK from udma will go to GPDMA</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SET</name>
                  <description>ACK from udma will go to UART2</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--SSI_SLAVE-->
            <field>
              <name>SSI_SLAVE</name>
              <description>When set, ack from udma will go to the SSI, else ack from GPDMA will go.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOT_SET</name>
                  <description>ACK from udma will go to GPDMA</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SET</name>
                  <description>ACK from udma will go to SSI</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--SSI_MASTER-->
            <field>
              <name>SSI_MASTER</name>
              <description>	
When set, ack from udma will go to the SSI master, else ack from GPDMA will go.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOT_SET</name>
                  <description>ACK from udma will go to GPDMA</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SET</name>
                  <description>ACK from udma will go to SSI Master</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Rserved</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--I2C-->
            <field>
              <name>I2C</name>
              <description>	
When set, ack from udma will go to the I2C, else ack from GPDMA will go.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOT_SET</name>
                  <description>ACK from udma will go to GPDMA</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SET</name>
                  <description>ACK from udma will go to I2C</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_CHIP_VER_NO_REG</name>
          <description>MCU chip version ID register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0X00000000</resetValue>
          <fields>
            <!--VER_NO-->
            <field>
              <name>VER_NO</name>
              <description>Indicates the revision number of the chip.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_CHIP_DEVICE_ID_REG</name>
          <description>MCU chip device ID register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0X00009117</resetValue>
          <fields>
            <!--DEVICE_ID-->
            <field>
              <name>DEVICE_ID</name>
              <description>It gives the device ID of the chip. Device ID is 9117.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_CM_STATUS_REG</name>
          <description>MCU cortex M4 status register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0X00000000</resetValue>
          <fields>
            <!--CM_LOCKUP-->
            <field>
              <name>CM_LOCKUP</name>
              <description>When high, indicates the Cortex M4 is in LOCKUP state</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--SLEEPDEEP-->
            <field>
              <name>SLEEPDEEP</name>
              <description>When high, indicates the Cortex M4 is in deep sleep state</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--SLEEPING-->
            <field>
              <name>SLEEPING</name>
              <description>When high, indicates the Cortex M4 is in sleeping state</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_CM_CTRL_REG</name>
          <description>MCU cortex M4 control register</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--CM_RESET-->
            <field>
              <name>CM_RESET</name>
              <description>Writing 1 both POR and non regions of M4 will be under reset,writing 0 both out of reset</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--CM_RESET_POR-->
            <field>
              <name>CM_RESET_POR</name>
              <description>Status of cm_reset_por can be seen on this bit.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED</name>
              <description>reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_GENERIC_CTRL_1_REG</name>
          <description>MCU generic control register1</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>reserved</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--REGISTER_ROM_OUTPUT-->
            <field>
              <name>REGISTER_ROM_OUTPUT</name>
              <description>When set, the ready and read data from ROM will be registered. It should be asserted when MCU clock is greater than 100MHz.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[6:5]</bitRange>
              <access>read-only</access>
            </field>
            <!--PROVIDE_SOC_CLK_2x_TO_ICACHE_DRAM-->
            <field>
              <name>PROVIDE_SOC_CLK_2x_TO_ICACHE_DRAM</name>
              <description>When set, twice the frequency of soc clk will be provided to icache dram,.
When zero, normal soc_clk is given.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[13:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--HOST_PADS_GPIO_MODE-->
            <field>
              <name>HOST_PADS_GPIO_MODE</name>
              <!--#DD change desciption using enumerated values-->
              <description>Control bit for 5 pins to use it either as host pin or gpio pin. Pins from 30 to 26 are controlled by these bits respectively.</description>
              <bitRange>[18:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>HOST mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>GPIO mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--ICACHE_DRAM_POWER_SAVE_MODE-->
            <field>
              <name>ICACHE_DRAM_POWER_SAVE_MODE</name>
              <description>When this bit is set, only half performance is valid with 1x clock.(Data two cycles after clock). Full performance is valid with 2x clock to icache dram</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!--enable_icache_seq_access_ps_mode-->
            <field>
              <name>ENABLE_ICACHE_SEQ_ACESS_PS_MODE</name>
              <description>When this bit is set, power save is enabled and a icache read that is sequential to the previous cache read of the same line is saved in local buffer and accessed</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>
            <!--I2S_MASTER_SLAVE_MODE-->
            <field>
              <name>I2S_MASTER_SLAVE_MODE</name>
              <description>0 – I2S/I2S PCM act as slave,1 I2S/I2S PCM act as master</description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>reserved1</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_PCM_CTRL_CLEAR_REG</name>
          <description>MCU PCM interface control clear register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0X00000000</resetValue>
          <fields>
            <!--PCM_ENABLE_M-->
            <field>
              <name>PCM_ENABLE_M</name>
              <description>Setting bit clears the pcm_enable_m. Writing '0' has no effect</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--PCM_FSYNC_START_M-->
            <field>
              <name>PCM_FSYNC_START_M</name>
              <description>Setting bit 1 clear the pcm_fsync_start. Writing '0' has no effect</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--PCM_BIT_RES-->
            <field>
              <name>PCM_BIT_RES</name>
              <description>Setting the bits clear the pcm_bit_res. Writing '0' has no effect.</description>
              <bitRange>[4:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>reserved</description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_PCM_CTRL_SET_REG</name>
          <description>MCU PCM interface control set register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0X00000000</resetValue>
          <fields>
            <!--PCM_ENABLE_M-->
            <field>
              <name>PCM_ENABLE_M</name>
              <description>Enable/disable PCM mode of I2S interface. When PCM is enabled,I2S is disabled and vice versa</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>READ_0</name>
                  <description>PCM mode is disabled and I2S mode is enabled. This programming is in addition to the other GPIO level programming to enable I2S mode.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>READ_1</name>
                  <description>PCM mode is enabled and I2S mode is disabled. This programming is valid only when the GPIO signals are programmed for I2S mode.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>WRITE_0</name>
                  <description>has no effect on this register.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>WRITE_1</name>
                  <description>Writing a '1' to any of the bits sets the corresponding bit in the soft register</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--PCM_FSYNC_START_M-->
            <field>
              <name>PCM_FSYNC_START_M</name>
              <!--#DD change desciption using enumerated values-->
              <description>This bit has to be programmed according to when the MS bit
of the PCM data is driven w.r.t. the fsync signal of PCM.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>READ_0</name>
                  <description>The MS bit of data is driven one clock cycle after fsync goes high.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>READ_1</name>
                  <description>The MS bit of data is driven in the same clock cycle as fsync going high.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>WRITE_0</name>
                  <description>has no effect on this register.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>WRITE_1</name>
                  <description>Writing a '1' to any of the bits sets the corresponding bit in the soft register</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--PCM_BIT_RES-->
            <field>
              <name>PCM_BIT_RES</name>
              <!--#DD change desciption using enumerated values-->
              <description>The bit-resolution of the data on PCM.
3'b000 - 8-bit
3'b001 - 12-bit
3'b010 - 16-bit,
3'b011 - 24-bit
3'b1xx - 32-bit</description>
              <bitRange>[4:2]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_SW_SCRATCHPAD_CLEAR_REG</name>
          <description>MCU software scratch pad clear register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--SOFTWARE_SCRATCHPAD_CLEAR-->
            <field>
              <name>SOFTWARE_SCRATCHPAD_CLEAR</name>
              <description>This register is used by software for storing information. It does not affect anything in the hardware.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Writing_1</name>
                  <description>to any of the bits clears the corresponding bit in the soft register. </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Writing_0</name>
                  <description>has no effect on this register.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_SW_SCRATCHPAD_SET_REG</name>
          <description>MCU software scratch pad set register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--SOFTWARE_SCRATCHPAD_SET-->
            <field>
              <name>SOFTWARE_SCRATCHPAD_SET</name>
              <description>This register is used by software for storing information. It does not affect anything in the hardware.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Writing_1</name>
                  <description>To any of the bits sets the corresponding bit in the soft register.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Writing_0</name>
                  <description>has no effect on this register.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_XTAL_ON_CTRL_REG</name>
          <description>MCU Crystal Control register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0X00000092</resetValue>
          <fields>
            <!--40MNZ_XTAL_ON_FW_SEL-->
            <field>
              <name>40MNZ_XTAL_ON_FW_SEL</name>
              <description>This bit determines the source of 40MHz CRYSTAL ON indication.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>CRYSTAL ON is controlled by firmware through BIT(3) of this register.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>CRYSTAL ON is controlled by the sleep state machine and the XTAL_ON_IN coming to the chip. It is asserted whenever there is an indication from either of the clients.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--40MNZ_XTAL_ON_FW-->
            <field>
              <name>40MNZ_XTAL_ON_FW</name>
              <description>This bit drives the 40MHz crystal ON indication. This bit is considered only if the firmware based driving is enabled using BIT(0) of this register</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Crystal_On_Set</name>
                  <description>crystal ON is set</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Crystal_On_Reset</name>
                  <description>crystal ON is reset</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>reserved</description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_SDIO_STATE_REG</name>
          <description>MCU SDIO status register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--SDIO_STATE_LOWER-->
            <field>
              <name>SDIO_STATE_LOWER</name>
              <description>Lower 16-bits of the SDIO state that is to be loaded into the SDIO block.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--SDIO_STATE_UPPER-->
            <field>
              <name>SDIO_STATE_UPPER</name>
              <description>Upper 16-bits of the SDIO state that is to be loaded into the SDIO block.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_SDIO_STATE_CTRL_REG</name>
          <description>MCU SDIO state control register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--LATCH_SDIO_STATE-->
            <field>
              <name>LATCH_SDIO_STATE</name>
              <description>When this bit is set, hardware latches the SDIO state into MCR_SDIO_STATE register. This is done by firmware while going to sleep. It is used for ULP Mode State Retention.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--LOAD_SDIO_STATE-->
            <field>
              <name>LOAD_SDIO_STATE</name>
              <description>When this bit is set, hardware loads the value in MCR_SDIO_STATE register to SDIO block.

The state to be restored has to be loaded to MCR_SDIO_STATE register before setting this.

This is done by firmware after coming out of sleep. It is used for ULP Mode State Retention.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_GENERIC_CTRL_REG</name>
          <description>MCU generic control register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000100</resetValue>
          <fields>
            <!--RESERVED-->
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--AHB_Invalid_Access_Trap_Enable-->
            <field>
              <name>AHB_Invalid_Access_Trap_Enable</name>
              <description>When this bit is set, trap will be generated to processor in the case an invalid access is done on AHB.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--I2S_SSI_GPIO_Mode_Sel-->
            <field>
              <name>I2S_SSI_GPIO_Mode_Sel</name>
              <description>When set, GPIO 11,12,13 &amp; 14 are used for SSI in GPIO mode 2.Else I2S</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>For_SSI</name>
                  <description>GPIO 11,12,13,14 are used for SSI when configured in GPIO mode 2.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>For_I2S</name>
                  <description>GPIO 11,12,13,14 are used for I2S when configured in GPIO mode 2.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--HSPI_SSI_Sel-->
            <field>
              <name>HSPI_SSI_Sel</name>
              <description>Selects if Host spi interface pins are intended for SSI slave else Host SPI </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>For_SSI_Slave</name>
                  <description>Host SPI pins used for SSI slave. Host SPI inactive.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>For_Host_SPI</name>
                  <description>Host SPI active</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--Reserved-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[13:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--JTAG_Daisy_Chain_EN-->
            <field>
              <name>JTAG_Daisy_Chain_EN</name>
              <description>This bit has to be set to enable daisy chaining in JTAG</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!--ICACHE_DRAM_POWER_SAVE_MODE-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCR_AHB_BRIDGE_CTRL_REG</name>
          <description>AHB bridge Control Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <!--RESERVED-->
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Bypass_registering_for_AHB_bridge-->
            <field>
              <name>Bypass_Registering_For_AHB_Bridge</name>
              <!--#DD check discription-->
              <description>When this bit is set, bypass the AHB bus registering in AHB bridge, which is present in between MCU and NWP subsystems. It should be asserted when MCU clock is less than 100MHz</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--ICACHE_DRAM_POWER_SAVE_MODE-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--SYSRTC Register block-->
    <peripheral>
      <name>SYSRTC</name>
      <version>1.0</version>
      <description>SYSRTC Register structure</description>
      <groupName>SYSRTC</groupName>
      <baseAddress>0x24048C00</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x7c</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- IPVERSION Register-->
        <register>
          <!-- Register 1-->
          <name>SYSRTC_IPVERSION</name>
          <description>Shows SYSRTC IPVERSION</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <field>
              <name>IP_VERSION</name>
              <description>IP Version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC Enable register-->
        <register>
          <!-- Register 2-->
          <name>SYSRTC_EN</name>
          <description>SYSRTC Enable and disabling status</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>ENABLE</name>
              <description>SYSRTC Enable, Enable the SYSRTC by requesting Clock</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DISABLING</name>
              <description>Disablement busy status. Set when EN cleared and cleared when the peripheral core reset is finished</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC SWRST Register-->
        <register>
          <!-- Register 3-->
          <name>SYSRTC_SWRST</name>
          <description>SYSRTC software reset</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>SWRST</name>
              <description>Software reset command</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>RESETTING</name>
              <description>Software reset busy status</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC configuration Register-->
        <register>
          <!-- Register 4-->
          <name>SYSRTC_CFG</name>
          <description>SYSRTC configuration register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>DEBUG_RUN</name>
              <description>Debug Mode run Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC command Register-->
        <register>
          <!-- Register 5-->
          <name>SYSRTC_CMD</name>
          <description>SYSRTC start or stop command register</description>
          <addressOffset>0x010</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <field>
              <name>START</name>
              <description>Start SYSRTC</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>STOP</name>
              <description>Stop SYSRTC</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC status Register-->
        <register>
          <!-- Register 6-->
          <name>SYSRTC_STATUS</name>
          <description>SYSRTC lock or running status register</description>
          <addressOffset>0x014</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <field>
              <name>RUNNING</name>
              <description>SYSRTC running status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>LOCK_STATUS</name>
              <description>Lock status</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC counter Register-->
        <register>
          <!-- Register 7-->
          <name>SYSRTC_CNT</name>
          <description>SYSRTC counter value register</description>
          <addressOffset>0x018</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>CNT</name>
              <description>Counter value</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC sync busy Register-->
        <register>
          <!-- Register 8-->
          <name>SYSRTC_SYNCBUSY</name>
          <description>SYSRTC sync busy register</description>
          <addressOffset>0x01C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <field>
              <name>START</name>
              <description>Sync busy for START bitfield</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>STOP</name>
              <description>Sync busy for STOP bitfield</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>CNT</name>
              <description>Sync busy for CNT bitfield</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC lock key configuration Register-->
        <register>
          <!-- Register 9-->
          <name>SYSRTC_LOCK</name>
          <description>SYSRTC lock key configuration register</description>
          <addressOffset>0x020</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <field>
              <name>LOCK_KEY</name>
              <description>Configuration Lock Key</description>
              <bitRange>[15:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 0 interrupt flag register-->
        <register>
          <!-- Register 10-->
          <name>SYSRTC_GRP0_IF</name>
          <description>SYSRTC Group 0 interrupt flag register</description>
          <addressOffset>0x040</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>OVFI_IF</name>
              <description>Overflow Interrupt Flag</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_0_IF</name>
              <description>Compare 0 Interrupt Flag</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_1_IF</name>
              <description>Compare 1 Interrupt Flag</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CAP_0_IF</name>
              <description>Capture 0 Interrupt Flag</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 0 interrupt enable register-->
        <register>
          <!-- Register 11-->
          <name>SYSRTC_GRP0_IEN</name>
          <description>SYSRTC Group 0 interrupt enable register</description>
          <addressOffset>0x044</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>OVFI_EN</name>
              <description>Overflow Interrupt Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_0_EN</name>
              <description>Compare 0 Interrupt Enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_1_EN</name>
              <description>Compare 1 Interrupt Enable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CAP_0_EN</name>
              <description>Capture 0 Interrupt Enable</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 0 control register-->
        <register>
          <!-- Register 12-->
          <name>SYSRTC_GRP0_CTRL</name>
          <description>SYSRTC Group 0 control register</description>
          <addressOffset>0x048</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>CMP_0_EN</name>
              <description>Compare 0 Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_1_EN</name>
              <description>Compare 1 Enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CAP_0_EN</name>
              <description>Capture 0 Enable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_0_CM_OA</name>
              <description>Compare 0 Compare Match Output Action</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_1_CM_OA</name>
              <description>Compare 1 Compare Match Output Action</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CAP_0_EDGE</name>
              <description>Capture 0 Edge Select</description>
              <bitRange>[10:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 0 compare 0 value Register-->
        <register>
          <!-- Register 13-->
          <name>SYSRTC_GRP0_CMP0VALUE</name>
          <description>SYSRTC group 0 compare 0 value Register</description>
          <addressOffset>0x04C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>CMP_0_VALUE</name>
              <description>Compare 0 Value</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 0 compare 1 value Register-->
        <register>
          <!-- Register 14-->
          <name>SYSRTC_GRP0_CMP1VALUE</name>
          <description>SYSRTC group 0 compare 1 value Register</description>
          <addressOffset>0x050</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>CMP_1_VALUE</name>
              <description>Compare 1 Value</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 0 capture 0 value Register-->
        <register>
          <!-- Register 15-->
          <name>SYSRTC_GRP0_CAP0VALUE</name>
          <description>SYSRTC group 0 capture 0 value Register</description>
          <addressOffset>0x054</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <field>
              <name>CAP_0_VALUE</name>
              <description>Capture 0 Value</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 0 sync busy status Register-->
        <register>
          <!-- Register 16-->
          <name>SYSRTC_GRP0_SYNCBUSY</name>
          <description>SYSRTC group 0 sync busy status register</description>
          <addressOffset>0x058</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <field>
              <name>CTRL</name>
              <description>Sync busy for CTRL register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>CMP_0_VALUE</name>
              <description>Sync busy for CMP 0 VALUE register</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>CMP_1_VALUE</name>
              <description>Sync busy for CMP 1 VALUE register</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 1 interrupt flag register-->
        <register>
          <!-- Register 17-->
          <name>SYSRTC_GRP1_IF</name>
          <description>SYSRTC Group 1 interrupt flag register</description>
          <addressOffset>0x060</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>OVF_IF</name>
              <description>Overflow Interrupt Flag</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_0_IF</name>
              <description>Compare 0 Interrupt Flag</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_1_IF</name>
              <description>Compare 1 Interrupt Flag</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CAP_0_IF</name>
              <description>Capture 0 Interrupt Flag</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALTOVF_IF</name>
              <description>Alternate Overflow Interrupt Flag</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALTCMP_0_IF</name>
              <description>Alternate Compare 0 interrupt Flag</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALTCMP_1_IF</name>
              <description>Alternate Compare 1 interrupt Flag</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALTCAP_0_IF</name>
              <description>Alternate Capture 0 interrupt Flag</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 1 interrupt flag enable register-->
        <register>
          <!-- Register 18-->
          <name>SYSRTC_GRP1_IE</name>
          <description>SYSRTC Group 1 interrupt flag enable register</description>
          <addressOffset>0x064</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>OVF_IE</name>
              <description>Overflow Interrupt Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_0_IE</name>
              <description>Compare 0 Interrupt Enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_1_IE</name>
              <description>Compare 1 Interrupt Enable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CAP_0_IE</name>
              <description>Capture 0 Interrupt Enable</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALTOVF_IE</name>
              <description>Alternate Overflow Interrupt Enable</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALTCMP_0_IE</name>
              <description>Alternate Compare 0 interrupt Enable</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALTCMP_1_IE</name>
              <description>Alternate Compare 1 interrupt Enable</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALTCAP_0_IE</name>
              <description>Alternate Capture 0 interrupt Enable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 1 control register-->
        <register>
          <!-- Register 19-->
          <name>SYSRTC_GRP1_CTRL</name>
          <description>SYSRTC Group 1 control register</description>
          <addressOffset>0x068</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>CMP_0_EN</name>
              <description>Compare 0 Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_1_EN</name>
              <description>Compare 1 Enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CAP_0_EN</name>
              <description>Capture 0 Enable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_0_CM_OA</name>
              <description>Compare 0 Compare Match Output Action</description>
              <bitRange>[5:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CMP_1_CM_OA</name>
              <description>Compare 1 Compare Match Output Action</description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CAP_0_EDGE</name>
              <description>Capture 0 Edge Select</description>
              <bitRange>[10:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 1 compare 0 value Register-->
        <register>
          <!-- Register 20-->
          <name>SYSRTC_GRP1_CMP0VALUE</name>
          <description>SYSRTC group 1 compare 0 value Register</description>
          <addressOffset>0x06C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>CMP_0_VALUE</name>
              <description>Compare 0 Value</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 1 compare 1 value Register-->
        <register>
          <!-- Register 21-->
          <name>SYSRTC_GRP1_CMP1VALUE</name>
          <description>SYSRTC group 1 compare 1 value Register</description>
          <addressOffset>0x070</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>CMP_1_VALUE</name>
              <description>Compare 1 Value</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 1 capture 0 value Register-->
        <register>
          <!-- Register 22-->
          <name>SYSRTC_GRP1_CAP0VALUE</name>
          <description>SYSRTC group 1 capture 0 value Register</description>
          <addressOffset>0x074</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <field>
              <name>CAP_0_VALUE</name>
              <description>Capture 0 Value</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- SYSRTC group 1 sync busy status Register-->
        <register>
          <!-- Register 23-->
          <name>SYSRTC_GRP1_SYNCBUSY</name>
          <description>SYSRTC group 0 sync busy status register</description>
          <addressOffset>0x078</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <fields>
            <field>
              <name>CTRL</name>
              <description>Sync busy for CTRL register</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>CMP_0_VALUE</name>
              <description>Sync busy for CMP 0 VALUE register</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>CMP_1_VALUE</name>
              <description>Sync busy for CMP 1 VALUE register</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--MCUSYSRTC_REG1-->
        <register>
          <!-- Register 24-->
          <name>MCUSYSRTC_REG1</name>
          <description>Input/Output Register</description>
          <addressOffset>0x3FC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <field>
              <name>PRS_SELECT</name>
              <description>Selects whether PRS is from GPIO or register bits</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PRS_IN</name>
              <description>Input to SYSRTC module</description>
              <bitRange>[2:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>PRS_OUT</name>
              <description>Output from SYSRTC module</description>
              <bitRange>[6:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--MVP-->
    <peripheral>
      <name>MVP</name>
      <version>1.0</version>
      <description>Matrix Vector Processor Register structure</description>
      <groupName>MVP</groupName>
      <baseAddress>0x24000000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x210</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- IPVERSION Register-->
        <register>
          <name>MVP_IPVERSION</name>
          <description>MVP IPVERSION register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000002</resetValue>
          <fields>
            <field>
              <name>IP_VERSION</name>
              <description>IP Version</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--Enable Register-->
        <register>
          <name>MVP_EN</name>
          <description>Block enable register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0</resetValue>
          <fields>
            <field>
              <name>ENABLE</name>
              <description>Enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DISABLING</name>
              <description>Disablement Busy Status</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SWRST Register-->
        <register>
          <name>MVP_SWRST</name>
          <description>software reset register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0</resetValue>
          <fields>
            <field>
              <name>SWRST</name>
              <description>Software reset command</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>RESETTING</name>
              <description>Software reset busy status</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--configuration Register-->
        <register>
          <name>MVP_CFG</name>
          <description>configuration register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0</resetValue>
          <fields>
            <field>
              <name>PERFCNTEN</name>
              <description>Performance counter enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OUTCOMPRESSDIS</name>
              <description>ALU Output stream compression disable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INCACHEDIS</name>
              <description>ALU Input word cache disable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOPERRHALTDIS</name>
              <description>Loop Error Halt disable</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INFENCEDIS</name>
              <description>Fence Disable</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PERF0CNTSEL</name>
              <description>Performence counter select</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PERF1CNTSEL</name>
              <description>Performence counter select</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--MVP Sttus register-->
        <register>
          <name>MVP_STATUS</name>
          <description>Status register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000004</resetValue>
          <fields>
            <field>
              <name>RUNNING</name>
              <description>Running Status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>PAUSED</name>
              <description>Paused Status</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>IDLE</name>
              <description>Idle Status</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--PERF0CNT-->
        <register>
          <name>MVP_PERF0CNT</name>
          <description>Run counter</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>COUNT</name>
              <description>Performance counter</description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--PERF1CNT-->
        <register>
          <name>MVP_PERF1CNT</name>
          <description>Run counter</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>COUNT</name>
              <description>Performance counter</description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--MVP_IF-->
        <register>
          <name>MVP_IF</name>
          <description>Interrupt flags</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>PROGDONREIF</name>
              <description>Programme done interrupt flag</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP0DONEIF</name>
              <description>Loop done interrupt flag</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP1DONEIF</name>
              <description>Loop done interrupt flag</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP2DONEIF</name>
              <description>Loop done interrupt flag</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP3DONEIF</name>
              <description>Loop done interrupt flag</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP4DONEIF</name>
              <description>Loop done interrupt flag</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP5DONEIF</name>
              <description>Loop done interrupt flag</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP6DONEIF</name>
              <description>Loop done interrupt flag</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP7DONEIF</name>
              <description>Loop done interrupt flag</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALUNANIF</name>
              <description>Not A number interrupt flag</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>R0POSREALIF</name>
              <description>R0 Non Zero interrupt flag</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALUOFIF</name>
              <description>ALU Overflow on result</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALUUFIF</name>
              <description>ALU Underflow on result</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STORECONVERTOFIF</name>
              <description>Overflow during array store Conversion</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STORECONVERTUFIF</name>
              <description>Underflow during array store conversion</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STORECONVERTINFIF</name>
              <description>Infinity encounterd during array store conversion</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STORECONVERTNANFIF</name>
              <description>NaN encountered during array store conversion</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PERFCNT0IF</name>
              <description>Run count overflow interrupt flag</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PERFCNT1IF</name>
              <description>Stall count overflow interrupt flag</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOPFAULTIF</name>
              <description>Loop Fault interrupt flag</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BUSERRFAULTIF</name>
              <description>Bus error fault interrupt flag</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BUSALIGNFAULTIF</name>
              <description>Bus error fault interrupt flag</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALUFAULTIF</name>
              <description>ALU Fault fault interrupt flag</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ARRAYFAULTIF</name>
              <description>Array fault interrupt flag</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--MVP_IEN-->
        <register>
          <name>MVP_IEN</name>
          <description>Interrupt Enable</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>PROGDONREIE</name>
              <description>Programme done interrupt enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP0DONEIE</name>
              <description>Loop done interrupt enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP1DONEIE</name>
              <description>Loop done interrupt enable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP2DONEIE</name>
              <description>Loop done interrupt enable</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP3DONEIE</name>
              <description>Loop done interrupt enable</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP4DONEIE</name>
              <description>Loop done interrupt enable</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP5DONEIE</name>
              <description>Loop done interrupt enable</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP6DONEIE</name>
              <description>Loop done interrupt enable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOP7DONEIE</name>
              <description>Loop done interrupt enable</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALUNANIE</name>
              <description>Not a Number interrupt enable</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>R0POSREALIF</name>
              <description>R0 Non Zero Interrupt enable</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALUOFIE</name>
              <description>ALU Overflow Interrupt enable</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALUUFIE</name>
              <description>ALU Underflow Interrupt enable</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STORECONVERTOFIE</name>
              <description>store Conversion overflow interrupt enable</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STORECONVERTUFIE</name>
              <description>store conversion Underflow interrupt enable</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STORECONVERTINFIE</name>
              <description>store conversion Infinity interrupt enable</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>STORECONVERTNANFIE</name>
              <description>NaN encountered during array store conversion</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PERFCNT0IE</name>
              <description>Run count overflow interrupt enable</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PERFCNT1IE</name>
              <description>Stall count overflow interrupt enable</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOOPFAULTIE</name>
              <description>Loop Fault interrupt enable</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BUSERRFAULTIE</name>
              <description>Bus error fault interrupt enable</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BUSALIGNFAULTIE</name>
              <description>Bus error fault interrupt enable</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALUFAULTIE</name>
              <description>ALU Fault fault interrupt flag</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ARRAYFAULTIE</name>
              <description>Array fault interrupt enable</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--FAULT STATUS-->
        <register>
          <name>MVP_FAULTSTATUS</name>
          <description>Fault status register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>FAULTPC</name>
              <description>PC when fault occured</description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[7:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FAULTARRAY</name>
              <description>Array access that generated a fault</description>
              <bitRange>[10:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FAULTBUS</name>
              <description>Bus when fault occured</description>
              <bitRange>[13:12]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>FAULTLOOP</name>
              <description>Loop fault indicator</description>
              <bitRange>[19:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>reserved</description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--FAULT ADDR-->
        <register>
          <name>MVP_FAULTADDR</name>
          <description>Fault Address register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>FAULTADDR</name>
              <description>Bus Fault Address Register</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--PROGRAMSTATE-->
        <register>
          <name>MVP_PROGRAMSTATE</name>
          <description>Program state register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>PC</name>
              <description>Programme Counter</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <cluster>
          <dim>5</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>MVP_ARRAYnINDEXSTATE</name>
          <description>Array N Index State Registers</description>
          <addressOffset>0x30</addressOffset>
          <register>
            <name>MVP_ARRAY_n_INDEXSTATE</name>
            <description>Array _n_ index state register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <fields>
              <!--DIM0INDEX-->
              <field>
                <name>DIM0INDEX</name>
                <description>Current Index</description>
                <bitRange>[9:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--DIM1INDEX-->
              <field>
                <name>DIM1INDEX</name>
                <description>Current Index</description>
                <bitRange>[19:10]</bitRange>
                <access>read-write</access>
              </field>
              <!--DIM2INDEX-->
              <field>
                <name>DIM2INDEX</name>
                <description>Current Index</description>
                <bitRange>[29:20]</bitRange>
                <access>read-write</access>
              </field>
              <!-- RESERVED -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:30]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <cluster>
          <dim>8</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>MVP_LOOPnSTATE</name>
          <description>Loop N State Registers</description>
          <addressOffset>0x44</addressOffset>
          <register>
            <name>MVP_LOOP_n_STATE</name>
            <description>Loop _n_ state register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <fields>
              <!--CNT-->
              <field>
                <name>CNT</name>
                <description>Loop Counter</description>
                <bitRange>[9:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--Reserved-->
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[11:10]</bitRange>
                <access>read-write</access>
              </field>
              <!--ACTIVE-->
              <field>
                <name>ACTIVE</name>
                <description>Loop Active</description>
                <bitRange>[12:12]</bitRange>
                <access>read-write</access>
              </field>
              <!--Reserved-->
              <field>
                <name>Reserevd</name>
                <description>Reserved</description>
                <bitRange>[15:13]</bitRange>
                <access>read-write</access>
              </field>
              <!--PCBEGIN-->
              <field>
                <name>PCBEGIN</name>
                <description>Loop Start</description>
                <bitRange>[18:16]</bitRange>
                <access>read-write</access>
              </field>
              <!-- RESERVED -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:19]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <cluster>
          <dim>8</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>MVP_ALUnREGSTATE</name>
          <description>ALU N Registers State</description>
          <addressOffset>0x64</addressOffset>
          <register>
            <name>MVP_ALU_n_REGSTATE</name>
            <description>ALU _n_ register State</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <fields>
              <!--FREAL-->
              <field>
                <name>FREAL</name>
                <description>Float Real value</description>
                <bitRange>[15:0]</bitRange>
                <access>read-write</access>
              </field>
              <!--FIMAG-->
              <field>
                <name>FIMAG</name>
                <description>Float Imaginary value</description>
                <bitRange>[31:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <cluster>
          <dim>5</dim>
          <dimIncrement>0x10</dimIncrement>
          <name>MVP_ARRAYnDIMCFG</name>
          <description>Array N base address and dimension config Registers</description>
          <addressOffset>0x84</addressOffset>
          <register>
            <name>MVP_ARRAY_n_ADDRCFG</name>
            <description>Array _n_ base address register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <fields>
              <!--BASE-->
              <field>
                <name>BASE</name>
                <description>Array Base Address</description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MVP_ARRAY_n_DIM0CFG</name>
            <description>Array _n_ Dimension 0 configuration register</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00002000</resetValue>
            <fields>
              <!--SIZE-->
              <field>
                <name>SIZE</name>
                <description>Array Dimesion Size</description>
                <bitRange>[9:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserevd</name>
                <description>Reserved</description>
                <bitRange>[11:10]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>BASETYPE</name>
                <description>Element Type</description>
                <bitRange>[13:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>COMPLEX</name>
                <description>Complex Data Type</description>
                <bitRange>[14:14]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserevd</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>STRIDE</name>
                <description>Dimension stride step</description>
                <bitRange>[27:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[31:28]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MVP_ARRAY_n_DIM1CFG</name>
            <description>Array _n_ Dimension 1 configuration register</description>
            <addressOffset>0x08</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!--SIZE-->
              <field>
                <name>SIZE</name>
                <description>Array Dimesion Size</description>
                <bitRange>[9:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserevd</name>
                <description>Reserved</description>
                <bitRange>[15:10]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>STRIDE</name>
                <description>Dimension stride step</description>
                <bitRange>[27:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[31:28]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MVP_ARRAY_n_DIM2CFG</name>
            <description>Array _n_ Dimension 2 configuration register</description>
            <addressOffset>0x0C</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <fields>
              <!--SIZE-->
              <field>
                <name>SIZE</name>
                <description>Array Dimesion Size</description>
                <bitRange>[9:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserevd</name>
                <description>Reserved</description>
                <bitRange>[15:10]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>STRIDE</name>
                <description>Dimension stride step</description>
                <bitRange>[27:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[31:28]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <cluster>
          <dim>8</dim>
          <dimIncrement>0x8</dimIncrement>
          <name>MVP_LOOPnCFG_RST</name>
          <description>loop N config and reset registers</description>
          <addressOffset>0xD4</addressOffset>
          <register>
            <name>MVP_LOOP_n_CFG</name>
            <description>Loop _n_ configuration register</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <fields>
              <field>
                <name>NUMITERS</name>
                <description>Number of Iterations</description>
                <bitRange>[9:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[11:10]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY0INCRDIM0</name>
                <description>Increment Dimesion 0</description>
                <bitRange>[12:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY0INCRDIM1</name>
                <description>Increment Dimesion 1</description>
                <bitRange>[13:13]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY0INCRDIM2</name>
                <description>Increment Dimesion 2</description>
                <bitRange>[14:14]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY1INCRDIM0</name>
                <description>Increment dimension 0</description>
                <bitRange>[16:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY1INCRDIM1</name>
                <description>Increment dimension 1</description>
                <bitRange>[17:17]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY1INCRDIM2</name>
                <description>Increment dimension 2</description>
                <bitRange>[18:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[19:19]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY2INCRDIM0</name>
                <description>Increment dimension 0</description>
                <bitRange>[20:20]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY2INCRDIM1</name>
                <description>Increment dimension 1</description>
                <bitRange>[21:21]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY2INCRDIM2</name>
                <description>Increment dimension 2</description>
                <bitRange>[22:22]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[23:23]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY3INCRDIM0</name>
                <description>Increment dimension 0</description>
                <bitRange>[24:24]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY3INCRDIM1</name>
                <description>Increment dimension 1</description>
                <bitRange>[25:25]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY3INCRDIM2</name>
                <description>Increment dimension 2</description>
                <bitRange>[26:26]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserevd</name>
                <description>Reserved</description>
                <bitRange>[27:27]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY4INCRDIM0</name>
                <description>Increment dimension 0</description>
                <bitRange>[28:28]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY4INCRDIM1</name>
                <description>Increment dimension 1</description>
                <bitRange>[29:29]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY4INCRDIM2</name>
                <description>Increment dimension 2</description>
                <bitRange>[30:30]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[31:31]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MVP_LOOP_n_RST</name>
            <description>Loop _n_ reset configuration register</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <fields>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[11:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY0RESETDIM0</name>
                <description>Reset Dimesion 0</description>
                <bitRange>[12:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY0RESETDIM1</name>
                <description>Reset Dimesion 1</description>
                <bitRange>[13:13]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY0RESETDIM2</name>
                <description>Reset Dimesion 2</description>
                <bitRange>[14:14]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY1RESETDIM0</name>
                <description>Reset dimension 0</description>
                <bitRange>[16:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY1RESETDIM1</name>
                <description>Reset dimension 1</description>
                <bitRange>[17:17]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY1RESETDIM2</name>
                <description>Reset dimension 2</description>
                <bitRange>[18:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[19:19]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY2RESETDIM0</name>
                <description>Reset dimension 0</description>
                <bitRange>[20:20]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY2RESETDIM1</name>
                <description>Reset dimension 1</description>
                <bitRange>[21:21]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY2RESETDIM2</name>
                <description>Reset dimension 2</description>
                <bitRange>[22:22]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[23:23]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY3RESETDIM0</name>
                <description>Reset dimension 0</description>
                <bitRange>[24:24]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY3RESETDIM1</name>
                <description>Reset dimension 1</description>
                <bitRange>[25:25]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY3RESETDIM2</name>
                <description>Reset dimension 2</description>
                <bitRange>[26:26]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserevd</name>
                <description>Reserved</description>
                <bitRange>[27:27]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY4RESETDIM0</name>
                <description>Reset dimension 0</description>
                <bitRange>[28:28]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY4RESETDIM1</name>
                <description>Reset dimension 1</description>
                <bitRange>[29:29]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ARRAY4RESETDIM2</name>
                <description>Reset dimension 2</description>
                <bitRange>[30:30]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[31:31]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <cluster>
          <dim>8</dim>
          <dimIncrement>0xC</dimIncrement>
          <name>MVP_INSTRnCFG</name>
          <description>Instruction n word 0, 1 ,2,</description>
          <addressOffset>0x114</addressOffset>
          <register>
            <name>MVP_INSTR_n_CFG0</name>
            <description>Instruction _n_ word 0</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <fields>
              <field>
                <name>ALUIN0REGID</name>
                <description>Register Id</description>
                <bitRange>[2:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN0REALZERO</name>
                <description>Real Zero</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN0REALNEGATE</name>
                <description>Real Negate</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUINOIMAGZERO</name>
                <description>Imaginary Not Zero</description>
                <bitRange>[6:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUINOIMAGNEGATE</name>
                <description>Imaginary Negate</description>
                <bitRange>[7:7]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN1REGID</name>
                <description>Register ID</description>
                <bitRange>[10:8]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[11:11]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN1REALZERO</name>
                <description>Real Zero</description>
                <bitRange>[12:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN1REALNEGATE</name>
                <description>Real Negate</description>
                <bitRange>[13:13]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN1IMAGZERO</name>
                <description>Imaginary Not Zero</description>
                <bitRange>[14:14]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN1IMAGNEGATE</name>
                <description>Imaginary Negate</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN2REGID</name>
                <description>Register ID</description>
                <bitRange>[18:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[19:19]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN2REALZERO</name>
                <description>Real Zero</description>
                <bitRange>[20:20]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN2REALNEGATE</name>
                <description>Real Negate</description>
                <bitRange>[21:21]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN2IMAGZERO</name>
                <description>Imaginary Not Zero</description>
                <bitRange>[22:22]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUIN2IMAGNEGATE</name>
                <description>Imaginary Negate</description>
                <bitRange>[23:23]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[27:24]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUOUTREGID</name>
                <description>Regsiter ID</description>
                <bitRange>[30:28]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[31:31]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MVP_INSTR_n_CFG1</name>
            <description>Instruction _n_ word 1</description>
            <addressOffset>0x04</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <fields>
              <field>
                <name>ISTREAM0REGID</name>
                <description>Register Id</description>
                <bitRange>[2:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ISTREAM0LOAD</name>
                <description>Load Register</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ISTREAM0ARRAYID</name>
                <description>Array ID</description>
                <bitRange>[6:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ISTREAM0ARRAYINCRDIM0</name>
                <description>Increament Array Dimension 0</description>
                <bitRange>[7:7]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ISTREAM0ARRAYINCRDIM1</name>
                <description>Increament Array Dimension 1</description>
                <bitRange>[8:8]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ISTREAM0ARRAYINCRDIM2</name>
                <description>Increament Array Dimension 2</description>
                <bitRange>[9:9]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ISTREAM1REGID</name>
                <description>Register ID</description>
                <bitRange>[12:10]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ISTREAM1LOAD</name>
                <description>Load Register</description>
                <bitRange>[13:13]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ISTREAM1ARRAYID</name>
                <description>Array ID</description>
                <bitRange>[16:14]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ISTREAM1ARRAYINCRDIM0</name>
                <description>Increament Array Dimension 0</description>
                <bitRange>[17:17]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ISTREAM1ARRAYINCRDIM1</name>
                <description>Increament Array Dimension 1</description>
                <bitRange>[18:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ISTREAM1ARRAYINCRDIM2</name>
                <description>Increament Array Dimension 2</description>
                <bitRange>[19:19]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OSTREAMREGID</name>
                <description>Register ID</description>
                <bitRange>[22:20]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OSTREAMSTORE</name>
                <description>Store to Register</description>
                <bitRange>[23:23]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OSTREAMARRAYID</name>
                <description>Array ID</description>
                <bitRange>[26:24]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OSTREAMARRAYINCRDIM0</name>
                <description>Increament Array Dimension 0</description>
                <bitRange>[27:27]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OSTREAMARRAYINCRDIM1</name>
                <description>Increament Array Dimension 1</description>
                <bitRange>[28:28]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OSTREAMARRAYINCRDIM2</name>
                <description>Increament Array Dimension 2</description>
                <bitRange>[29:29]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[31:30]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MVP_INSTR_n_CFG2</name>
            <description>Instruction _n_ word 2</description>
            <addressOffset>0x08</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <fields>
              <field>
                <name>LOOP0BEGIN</name>
                <description>Loop Begin</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP0END</name>
                <description>Loop End</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP1BEGIN</name>
                <description>Loop Begin</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP1END</name>
                <description>Loop End</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP2BEGIN</name>
                <description>Loop Begin</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP2END</name>
                <description>Loop End</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP3BEGIN</name>
                <description>Loop Begin</description>
                <bitRange>[6:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP3END</name>
                <description>Loop End</description>
                <bitRange>[7:7]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP4BEGIN</name>
                <description>Loop Begin</description>
                <bitRange>[8:8]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP4END</name>
                <description>Loop End</description>
                <bitRange>[9:9]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP5BEGIN</name>
                <description>Loop Begin</description>
                <bitRange>[10:10]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP5END</name>
                <description>Loop End</description>
                <bitRange>[11:11]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP6BEGIN</name>
                <description>Loop Begin</description>
                <bitRange>[12:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP6END</name>
                <description>Loop End</description>
                <bitRange>[13:13]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP7BEGIN</name>
                <description>Loop Begin</description>
                <bitRange>[14:14]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LOOP7END</name>
                <description>Loop End</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[19:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ALUOP</name>
                <description>ALU OPcode</description>
                <bitRange>[28:20]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[30:29]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ENDPROG</name>
                <description>Reserved</description>
                <bitRange>[31:31]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>MVP_CMD</name>
          <description>Command Register</description>
          <addressOffset>0x174</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>START</name>
              <description>Start Command</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>HALT</name>
              <description>Halt Command</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>STEP</name>
              <description>Step Command</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>INIT</name>
              <description>Initialization Command/Qualifier</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:4]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MVP_DEBUGGEN</name>
          <description>Debug control register</description>
          <addressOffset>0x200</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserevd</name>
              <description>Reserevd</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTLOOP0DONE</name>
              <description>Enable Breakpoint on loop Done</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTLOOP1DONE</name>
              <description>Enable Breakpoint on loop Done</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTLOOP2DONE</name>
              <description>Enable Breakpoint on loop Done</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTLOOP3DONE</name>
              <description>Enable Breakpoint on loop Done</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTLOOP4DONE</name>
              <description>Enable Breakpoint on loop Done</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTLOOP5DONE</name>
              <description>Enable Breakpoint on loop Done</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTLOOP6DONE</name>
              <description>Enable Breakpoint on loop Done</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTLOOP7DONE</name>
              <description>Enable Breakpoint on loop Done</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTALUNAN</name>
              <description>Enable break point on ALUNAN</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTR0POSREAL</name>
              <description>Enable breakpoint on R0POSREL</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTALUOF</name>
              <description>Enable breakpoint on ALUOF</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTALUUF</name>
              <description>Enable breakpoint on ALUUF</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTSTORECONVERTOF</name>
              <description>Enable breakpoint on STORECONVERTOF</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTSTORECONVERTUF</name>
              <description>Enable breakpoint on STORECONVERTUF</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTSTORECONVERTINF</name>
              <description>Enable breakpoint on STORECONVERTINF</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>BKPTSTORECONVERTNAN</name>
              <description>Enable breakpoint on STORECONVERTNAN</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[27:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DEBUGSTEPCNTEN</name>
              <description>Debug step count enable</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DEBUGBKPTALLEN</name>
              <description>Trigger Breakpoint when ALL conditions match</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DEBUGBKPTANYEN</name>
              <description>Trigger Breakpoint when ANY conditions match</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MVP_DEBUGSTEPCNT</name>
          <description>Debug control register</description>
          <addressOffset>0x204</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>DEBUGSTEPCNT</name>
              <description>Debug Step Counter</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MVP_LOAD0ADDR</name>
          <description>Cuurent load 0 address</description>
          <addressOffset>0x208</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>ADDR</name>
              <description>Array Address</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MVP_LOAD1ADDR</name>
          <description>Cuurent load 1 address</description>
          <addressOffset>0x20C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>ADDR</name>
              <description>Array Address</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MVP_STOREADDR</name>
          <description>Cuurent store address</description>
          <addressOffset>0x210</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>ADDR</name>
              <description>Array Address</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
      <interrupt>
        <name>MVP_INTR</name>
        <value>62</value>
      </interrupt>
      <interrupt>
        <name>MVP_WAKEUP_INTR</name>
        <value>63</value>
      </interrupt>
    </peripheral>
    <!--SDC-->
    <peripheral>
      <name>SDC</name>
      <version>1.0</version>
      <description>Sensor Data Collector Register structure</description>
      <groupName>SDC</groupName>
      <baseAddress>0x24042400</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x78</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- IPVERSION Register-->
        <register>
          <name>SDC_GEN_CONFIG_0</name>
          <description>SDC general configuration 0</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>INTR_STATUS_CLEAR</name>
              <description>Writing 1 clears interrupt, reading gives SDC Interrupt status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserevd</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SDC_GEN_CONFIG_1</name>
          <description>SDC general configuration 1</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>RST_WRT_PTR</name>
              <description>Writing 1 will resets the write pointer so that new samples can be filled in Buffer.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WRT_PTR</name>
              <description>Write pointer Value</description>
              <bitRange>[4:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SAMP_THRESH</name>
              <description>Number of data sampled to be collected from Aux-ADC and stored in Buffer before interrupt is raised/wakeup is initialed</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserevd</description>
              <bitRange>[31:9]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SDC_GEN_CONFIG_2</name>
          <description>SDC general configuration 2</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SDC_SAMP_EN</name>
              <description>SDC Data Sampling mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>NUM_CH_SEL</name>
              <description>Number of Channels to be used</description>
              <bitRange>[3:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserevd</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SDC_GEN_CONFIG_3</name>
          <description>SDC general configuration 3</description>
          <addressOffset>0x12</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SAMP_TRIG_SEL</name>
              <description>select the trigger event on which AUX-ADC Data is sampled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CNT_TRIG_EVNT</name>
              <description>which trigger event AUX-ADC Data will sampled</description>
              <bitRange>[10:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SDC_CLK_DIV</name>
              <description>SDCSS clock division factor</description>
              <bitRange>[20:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserevd</description>
              <bitRange>[31:21]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SDC_AUXADC_CONFIG_1</name>
          <description>SDC AUX ADC configuration 1</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SDC_AUXADC_INPUT_P_SEL_CH1</name>
              <description>AUXADC's Positive Input Mux Select for Channel-1</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_AUXADC_INPUT_N_SEL_CH1</name>
              <description>AUXADC's Negative Input Mux Select for Channel-1</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_AUXADC_DIFF_MODE_CH1</name>
              <description>Enable Differential Mode in AUX ADC for Channel -1</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_AUXADC_EN</name>
              <description>AUXADC Enable from SDC Block</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_ADC_CONFIG_EN</name>
              <description>On Enabling this register, SDC ADC Configuration will be Applied.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserevd</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SDC_AUXDAC_CONFIG_1</name>
          <description>SDC AUX DAC configuration 1</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SDC_DAC_EN</name>
              <description>Enable signal DAC</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_DAC_OUT_MUX_EN</name>
              <description>Enable signal for Connecting DAC Output to GPIO</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_DAC_OUT_MUX_SEL</name>
              <description>Programming register for choosing GPIO in which DAC Output is connected</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_DAC_DATA</name>
              <description>SDC Aux DAC Data</description>
              <bitRange>[13:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_DAC_CONFIG_EN</name>
              <description>On Enabling this register, SDC DAC Configuration will be Applied.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserevd</description>
              <bitRange>[31:15]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SDC_AUXLDO_CONFIG</name>
          <description>SDC AUX LDO configuration</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SDC_AUXLDO_VOLT_CTRL</name>
              <description>SDC AUX LDO Voltage Control Selection</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--#DD bit four is emptyin HRM-->
            <field>
              <name>SDC_AUXLDO_BYP_EB</name>
              <description>Configure AUXLDO in Buypass mode.When Enabled, Ouput supply of LDO will be same as Input supply.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_AUXLDO_EN</name>
              <description>Turn-On AUX LDO</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_AUXLDO_CONFIG_EN</name>
              <description>SDC Aux LDO Configuration Control Enable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserevd</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SDC_AUXOPAMP_CONFIG_1</name>
          <description>SDC AUX OPAMP configuration 1</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SDC_OPAMP_EN_CH1</name>
              <description>Enable signal for turning OPAMP to used for Channel-1 Operation</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_LP_MODE</name>
              <description>Configuration of OPAMP1 Operation mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_R1_SEL</name>
              <description>Configuration for Resistor Ladder R1 of OPAMP1 for controlling it gain.</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_R2_SEL</name>
              <description>Configuration for Resistor Ladder R2 of OPAMP1 for controlling it gain.</description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_RES_BACK_EN</name>
              <description>Configuration register for controlling Resistor Bank of OPAMP</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_RES_MUX_SEL</name>
              <description>Configuration register for Connecting R1 Resistor Ladder input</description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_RES_TO_OUT_VDD</name>
              <description>Configuration register for Connecting R2 Resistor Ladder input</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_OUT_MUX_EN</name>
              <description>Configur this register to OPAMP1 Output will be connected to GPIO</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_IN_N_SEL</name>
              <description>Configuration register for selecting N Input of OPAMP1.</description>
              <bitRange>[15:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_IN_P_SEL_CH1</name>
              <description>Configuration register for selecting P Input of OPAMP1.,for CH1</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_OUT_MUX_SEL</name>
              <description>Configuration register for connecting OPAMP1 output to GPIO</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SDC_VREF_MUX_1_EN</name>
              <description>Connect Low Drive Strength voltage reference for ULP GPIO 1 For external use</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <!--#HRM #DD wrong name in hrm-->
              <name>SDC_VREF_MUX_2_EN</name>
              <description>Connect Low Drive Strength voltage reference for ULP GPIO 3 For external use</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_VREF_MUX_3_EN</name>
              <description>Connect Low Drive Strength voltage reference for ULP GPIO 4 For external use</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_VREF_MUX_4_EN</name>
              <description>Connect Low Drive Strength voltage reference for ULP GPIO 15 For external use</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!--#DD Bit 26 is empty in HRM-->
            <field>
              <name>SDC_VREF_MUX_1_SEL</name>
              <description>Selection register for choosing Voltage reference to external use on ULP_GPIO_1</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_VREF_MUX_2_SEL</name>
              <description>Selection register for choosing Voltage reference to external use on ULP_GPIO_3</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_VREF_MUX_3_SEL</name>
              <description>Selection register for choosing Voltage reference to external use on ULP_GPIO_4</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_VREF_MUX_4_SEL</name>
              <description>Selection register for choosing Voltage reference to external use on ULP_GPIO_15</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_CONFIG_EN</name>
              <description>On Enabling this register, SDC OPAMP Configuration will be Applied.</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SDC_AUXADC_CONFIG_2</name>
          <description>SDC AUX ADC configuration 2</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SDC_AUXADC_INPUT_P_SEL_CH2</name>
              <description>AUXADC's Positive Input Mux Select for Channel-2</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_AUXADC_INPUT_N_SEL_CH2</name>
              <description>AUXADC's Negative Input Mux Select for Channel-2</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_AUXADC_DIFF_MODE_CH2</name>
              <description>1-AUX ADC Differencial mode, 0 - Single Ended Mode</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserevd</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--#DD Empty in HRM from bit 10 to 31-->
          </fields>
        </register>
        <register>
          <name>SDC_AUXADC_CONFIG_3</name>
          <description>SDC AUX ADC configuration 3</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SDC_AUXADC_INPUT_P_SEL_CH3</name>
              <description>AUXADC's Positive Input Mux Select for Channel-3</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_AUXADC_INPUT_N_SEL_CH3</name>
              <description>AUXADC's Negative Input Mux Select for Channel-3</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_AUXADC_DIFF_MODE_CH3</name>
              <description>1-AUX ADC Differencial mode, 0 - Single Ended Mode</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--#DD Empty in HRM from bit 10 to 31-->
          </fields>
        </register>
        <register>
          <name>SDC_AUXADC_CONFIG_4</name>
          <description>SDC AUX ADC configuration 4</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SDC_AUXADC_INPUT_P_SEL_CH4</name>
              <description>AUXADC's Positive Input Mux Select for Channel-4</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_AUXADC_INPUT_N_SEL_CH4</name>
              <description>AUXADC's Negative Input Mux Select for Channel-4</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_AUXADC_DIFF_MODE_CH4</name>
              <description>1-AUX ADC Differencial mode, 0 - Single Ended Mode</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
            <!--#DD Empty in HRM from bit 10 to 31-->
          </fields>
        </register>
        <register>
          <name>SDC_AUXOPAMP_CONFIG_2</name>
          <description>SDC AUX OPAMP Configuration 2</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SDC_OPAMP_EN_CH2</name>
              <description>Enable signal for turning OPAMP to used for Channel-2 Operation</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_IN_P_SEL_CH2</name>
              <description>Configuration register for selecting P Input of OPAMP1 for Channel-2</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_EN_CH3</name>
              <description>Enable signal for turning OPAMP to used for Channel-4 Operation</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_IN_P_SEL_CH3</name>
              <description>Configuration register for selecting P Input of OPAMP1 for Channel-3</description>
              <bitRange>[9:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_EN_CH4</name>
              <description>Enable signal for turning OPAMP to used for Channel-4 Operation</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SDC_OPAMP_IN_P_SEL_CH4</name>
              <description>Configuration register for selecting P Input of OPAMP1 for Channel-4</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--#DD Empty in HRM from bit 15 to 31-->
          </fields>
        </register>
        <cluster>
          <dim>16</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>SDC_DATA_REGn</name>
          <description>SDC Data registers (0-15)</description>
          <addressOffset>0x38</addressOffset>
          <register>
            <name>SDC_DATA_REG_n_</name>
            <description>SDC Data register _n_</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-only</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x00000000</resetMask>
            <fields>
              <!--SDC_DATA_SAMPLE-->
              <field>
                <name>SDC_DATA_SAMPLE__n_</name>
                <description>Sample 0 collected from Sensor through Aux ADC.</description>
                <bitRange>[11:0]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>SMP_ID_CH__n_</name>
                <description>Channel iD for sample _n_</description>
                <bitRange>[13:12]</bitRange>
                <access>read-only</access>
              </field>
              <!-- RESERVED -->
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:16]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
      </registers>
    </peripheral>
    <!--PAD Configurations registers-->
    <peripheral>
      <name>PAD_SELECTION</name>
      <version>1.0</version>
      <description>PAD selection register</description>
      <groupName>PAD_SELECTION</groupName>
      <baseAddress>0x41300000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x16</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>MEM_GPIO_ACCESS_CTRL_SET</name>
          <description>Indicates the PAD Configuration Control for GPIO_25-GPIO_30.</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000020</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SZP_MCUHP_GPIO_CTRL2</name>
              <description>Write 1 enables SZP to configure GPIO_25 TO GPIO_30</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE_SZP_CONFIG_GPIO_25_TO_30</name>
                  <description>Writing 1 to this ensables SZP to configure the GPIO_25 to GPIO_30</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>No_Effect</name>
                  <description>No Effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MEM_GPIO_ACCESS_CTRL_CLEAR</name>
          <description>Indicates the PAD Configuration Control for GPIO_25-GPIO_30.</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000020</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SZP_MCUHP_GPIO_CTRL2</name>
              <description>Write 1 enables MCUHP to configure GPIO_25 TO GPIO_30</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE_MCUHP_CONFIG_GPIO_25_TO_30</name>
                  <description>Writing 1 to this ensables SZP to configure the GPIO_25 to GPIO_30</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>No_Effect</name>
                  <description>No Effect</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCUHP_PAD_SELECTION</name>
          <description>Indicates the PAD Configuration Control for GPIO_0 to GPIO_57 pads except for GPIO_25-GPIO_30.</description>
          <addressOffset>0x610</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SZP_MCUHP_GPIO_CTRL1_0_to_21</name>
              <description>PAD Configuration Controls between NWP and MCU HP.</description>
              <bitRange>[21:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>WRITE_1</name>
                  <description>Writing 1 to a particular bit enables the MCU HP to configure the corresponding PADs</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>WRITE_0</name>
                  <description>Writing 0 to a particular bit enables the SZP/NWP to configure the corresponding PADs</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[31:21]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCUHP_PAD_SELECTION_1</name>
          <description>Indicates the PAD Configuration Control for ULP_GPIO_0 to ULP_GPIO_11 pads when used as SoC GPIO function for SoC_GPIO_64 to SoC_GPIO_75</description>
          <addressOffset>0x618</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SZP_MCUHP_GPIO_CTRL1_22_to_33</name>
              <description>PAD Configuration Controls between NWP and MCU HP.</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>WRITE_1</name>
                  <description>Writing 1 to a particular bit enables the MCU HP to configure the corresponding PADs</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>WRITE_0</name>
                  <description>Writing 0 to a particular bit enables the SZP/NWP to configure the corresponding PADs</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[31:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--MCU HP GPIO PAD configurations-->
    <peripheral>
      <name>PAD_CONFIGURATIONs</name>
      <version>1.0</version>
      <description>PAD Configuration registers</description>
      <groupName>PAD_CONFIGURATION</groupName>
      <baseAddress>0x46006000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x16</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <cluster>
          <dim>64</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>MCU_HP_GPIO_PAD_CONFIGs</name>
          <description>PAD Configuration Register for GPIO_n; n = 0,1,2, ..... 63</description>
          <addressOffset>0x0</addressOffset>
          <register>
            <name>PAD_CONFIG_REG__n_</name>
            <description>PAD Configuration for _n_</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000008</resetValue>
            <resetMask>0x00000008</resetMask>
            <!--#DD Check enumerated values, reset values are different for different gpios need to see how to handle that-->
            <fields>
              <field>
                <name>PADCONFIG_E1</name>
                <description>E[2,1] – Drive strength selector, 0-2 mA / 1-4 mA / 2-8 mA / 3-12 ma</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PADCONFIG_E2</name>
                <description>E[2,1] – Drive strength selector, 0-2 mA / 1-4 mA / 2-8 mA / 3-12 ma</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PADCONFIG_POS</name>
                <description>Power-on-Start enable;</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PADCONFIG_SMT</name>
                <description>Active high Schmitt trigger (Hysteresis) select; SMT=0 – No hysteres</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PADCONFIG_REN</name>
                <description>Active high receiver enable</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PADCONFIG_SR</name>
                <description>Slew Rate Control</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PADCONFIG_P1</name>
                <description>P[2,1]–Driver disabled state control,0-Hi-Z/1-Pull-up/2-Pull-down/3-Repeater</description>
                <bitRange>[6:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PADCONFIG_P2</name>
                <description>P[2,1]–Driver disabled state control,0-Hi-Z/1-Pull-up/2-Pull-down/3-Repeater</description>
                <bitRange>[7:7]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>RESERVED1</name>
                <description>reserved1</description>
                <bitRange>[31:8]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
      </registers>
    </peripheral>
    <!--Secure Storage-->
    <peripheral>
      <name>Secure_Storage</name>
      <version>1.0</version>
      <description>Secure storage</description>
      <groupName>Secure_Storage</groupName>
      <baseAddress>0x24048500</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x24</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <cluster>
          <dim>8</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>MCU_STORAGE_REGn</name>
          <description>MCU storage registers (0-7)</description>
          <addressOffset>0x0</addressOffset>
          <register>
            <name>MCU_STORAGE_REG_n_</name>
            <description>MCU STorage register _n_</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x00000000</resetMask>
            <fields>
              <field>
                <name>MCU_STORAGE_WORD__n_</name>
                <description>This register Can be used to storing 32bits of Data.</description>
                <bitRange>[31:0]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>MCU_STORAGE_WRITE_KEY</name>
          <description>Programming the key will enable or disable access to program MCU storage register</description>
          <addressOffset>0x200</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000000</resetMask>
          <fields>
            <field>
              <name>MCU_STORAGE_KEY</name>
              <description>By default the Access to MCU storage Register is enabled</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--High Frequency PLL-->
    <peripheral>
      <name>HF_PLL_Clocks</name>
      <version>1.0</version>
      <description>High frequency PLL clocks registers</description>
      <groupName>Clock_Architecture</groupName>
      <baseAddress>0x46180000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x38</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>PLL_REF_CLK_CONFIG_REG</name>
          <description>Reference Clock Configuration Register</description>
          <addressOffset>0x004</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000000</resetMask>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[13:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>REF_CLK_SEL</name>
              <description>Specified the input reference clock for the PLL's</description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PLL_LDO_CONFIG_REG</name>
          <description>LDO Configuration Register</description>
          <addressOffset>0x008</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00009200</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>I2SPLL_LDO_PROG</name>
              <description>Specified the configuration of I2S-PLL LDO output voltage</description>
              <bitRange>[9:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTFPLL_LDO_PROG</name>
              <description>Specified the configuration of Interface-PLL LDO output voltage</description>
              <bitRange>[12:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SOCPLL_LDO_PROG</name>
              <description>Specified the configuration of SoC-PLL LDO output voltage</description>
              <bitRange>[15:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SOCPLL_CONFIG_REG1</name>
          <description>SoC-PLL Configuration Register1</description>
          <addressOffset>0x040</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00002CC9</resetValue>
          <fields>
            <field>
              <name>SOCPLL_RANGE_SEL</name>
              <description>Specifies the range for the Output frequency.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SOCPLL_CLK_EN</name>
              <description>Writing 1 enables SOC-PLL output clock ,0 disables it</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SOCPLL_PD</name>
              <description>Writing 1 disables power to SOC-PLL,1 enables it</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SOCPLL_M</name>
              <description>Specifies the SoC-PLL Multiplication Factor.</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SOCPLL_CONFIG_REG2</name>
          <description>SoC-PLL Configuration Register2</description>
          <addressOffset>0x044</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000138</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SOCPLL_N</name>
              <description>Specifies the SoC-PLL Input Division Factor</description>
              <bitRange>[8:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SOCPLL_P</name>
              <description>Specifies the SoC-PLL Output Division Factor</description>
              <bitRange>[15:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SOCPLL_CONFIG_REG3</name>
          <description>SoC-PLL Configuration Register3</description>
          <addressOffset>0x048</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SOCPLL_FCW</name>
              <description>Specifies the SoC-PLL Fractional Frequency Control Word</description>
              <bitRange>[15:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SOCPLL_STATUS_REG</name>
          <description>SoC-PLL Status Register</description>
          <addressOffset>0x070</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[14:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SOCPLL_LOCK</name>
              <description>Indicates the SoC-PLL Status 1 locked, 0 notlocked</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTFPLL_CONFIG_REG1</name>
          <description>INTF-PLL Configuration Register1</description>
          <addressOffset>0x080</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00002CC9</resetValue>
          <fields>
            <field>
              <name>INTFPLL_RANGE_SEL</name>
              <description>Specifies the range for the Output frequency.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTFPLL_CLK_EN</name>
              <description>Writing 1 enables SOC-PLL output clock ,0 disables it</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTFPLL_PD</name>
              <description>Writing 1 disables power to INTF-PLL,1 enables it</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTFPLL_M</name>
              <description>Specifies the INTF-PLL Multiplication Factor.</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTFPLL_CONFIG_REG2</name>
          <description>INTF-PLL Configuration Register2</description>
          <addressOffset>0x084</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000138</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTFPLL_N</name>
              <description>Specifies the INTF-PLL Input Division Factor</description>
              <bitRange>[8:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTFPLL_P</name>
              <description>Specifies the SoC-PLL Output Division Factor</description>
              <bitRange>[15:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTFPLL_CONFIG_REG3</name>
          <description>INTF-PLL Configuration Register3</description>
          <addressOffset>0x088</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTFPLL_FCW</name>
              <description>Specifies the INTF-PLL Fractional Frequency Control Word</description>
              <bitRange>[15:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTFPLL_STATUS_REG</name>
          <description>INTF-PLL Status Register</description>
          <addressOffset>0x0A0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[14:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTFPLL_LOCK</name>
              <description>Indicates the INTF-PLL Status 1 locked, 0 notlocked</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>I2SPLL_CONFIG_REG1</name>
          <description>I2S-PLL Configuration Register1</description>
          <addressOffset>0x0C0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00001244</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>I2SPLL_CLK_EN</name>
              <description>Writing 1 enables I2S-PLL output clock ,0 disables it</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>I2SPLL_PD</name>
              <description>Writing 1 disables power to I2S-PLL,1 enables it</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>INTFPLL_M</name>
              <description>Specifies the I2S-PLL Multiplication Factor.</description>
              <bitRange>[15:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>I2SPLL_CONFIG_REG2</name>
          <description>I2S-PLL Configuration Register2</description>
          <addressOffset>0x0C4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00005850</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>I2SPLL_N</name>
              <description>Specifies the I2S-PLL Input Division Factor</description>
              <bitRange>[7:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>I2SPLL_P2</name>
              <description>Specifies the I2S-PLL Output Division Factor</description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>I2SPLL_P1</name>
              <description>Specifies the I2S-PLL Output Division Factor</description>
              <bitRange>[15:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>I2SPLL_CONFIG_REG3</name>
          <description>I2S-PLL Configuration Register3</description>
          <addressOffset>0x0C8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000BA60</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>I2SPLL_FCW</name>
              <description>Specifies the I2SF-PLL Fractional Frequency Control Word</description>
              <bitRange>[15:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved,It is recommended to write these bits to 0.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>I2SPLL_STATUS_REG</name>
          <description>I2S-PLL Status Register</description>
          <addressOffset>0x0F0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[14:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>I2SPLL_LOCK</name>
              <description>Indicates the I2S-PLL Status 1 locked, 0 notlocked</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--Instruction cache controller-->
    <peripheral>
      <name>Instruction_Cache_Controller</name>
      <version>1.0</version>
      <description>The Instruction Cache Controller controls the instruction fetching from External Memory into Local Cache for access to the processor.</description>
      <groupName>Instruction_cache_controller</groupName>
      <baseAddress>0x20280000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x48</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>RAM_CTRL_REG</name>
          <description>Rams control register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000000</resetMask>
          <fields>
            <field>
              <name>Rams_Ownership_of_Second_set</name>
              <description>This bit controls the ownership of second set of rams when number of ways is 4 and 32k memory is enabled.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--#DD not there in HRM-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[31:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ICACHE_CTRL_REG</name>
          <description>Icache control register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000000</resetMask>
          <fields>
            <field>
              <name>icache_enable</name>
              <description>Tells if an icache is enables or not for ICC 'n'</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ICache_Enabled</name>
                  <description>Icache is enabled and cache access can take place via ICC ‘n’</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Ichache_Not_Enabled</name>
                  <description>Icache is not enabled for icc ‘n’</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>bypass_cache</name>
              <description>Tells where fectch requests are served through,valid only when ichache is enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>via_ahb</name>
                  <description>Fetch Requests are served via ahb, bypassing the cache rams</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Through_Icache_Rams</name>
                  <description>Fetch Requests are served through icache rams</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>mode32_128bit_line</name>
              <description>selects 128bit or 32 bit for AHB requests, valid only when Cache is disable</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>32_Bit</name>
                  <description>32 bit mode is enabled for icc ‘n’. AHB requests will be 32 bit</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>128_Bit</name>
                  <description>128 bit mode enabled for icc ‘n’. AHB requests will be 128 bit</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>icache_ahb_wrap_mode</name>
              <description>Enables or disables wrap mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Wrap_Enabled</name>
                  <description>wrap mode is enabled for icc ‘n’</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Wrap_Disabled</name>
                  <description>wrap mode is disabled for icc ‘n’.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>icache_line_buf_invalid</name>
              <description>Selects wheter line buffer is valid or invalid</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Invalid</name>
                  <description>line buffer invalid for icc ‘n’</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Valid</name>
                  <description>line buffer valid for icc ‘n’</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>lru_8ways</name>
              <description>Selects whether 8 ways logic is disabled or enabled in controller </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <!--#DD wrong in HRM-->
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disabled</name>
                  <description>8 ways logic is disabled in controller</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enabled</name>
                  <description>8 ways logic is enabled in controller</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>mode_256bit_line</name>
              <description>selects 1 or 2 128 bit buffer lines used </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>One_128bit_Line</name>
                  <description>One 128 bit line buffer is used. Four beat AHB transaction is initiated with the external memory</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Two_128bit_Line</name>
                  <description>Two 128 bit line buffers are used. Eight beat AHB transaction is initiated with the external memory</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>disable_fetch_256bit_lb</name>
              <description>When set, disables fetching from line buffer which is present in 256-bit mode prefetch module</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!--#DD not there in HRM-->
            <field>
              <name>Reserved</name>
              <description>Reserved</description>
              <bitRange>[30:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <cluster>
          <dim>15</dim>
          <dimIncrement>0x4</dimIncrement>
          <name>ADDR_TRANSLATE_SEGn_CTRL_REG</name>
          <description>Address Translate Value Segment Registers (1-15)</description>
          <addressOffset>0x24</addressOffset>
          <register>
            <name>ADDR_TRANSLATE_SEG_n1__CTRL_REG</name>
            <description>Address Translate Value Segment Register__n1_</description>
            <addressOffset>0x00</addressOffset>
            <size>32</size>
            <access>read-write</access>
            <resetValue>0x00000000</resetValue>
            <resetMask>0x00000000</resetMask>
            <fields>
              <field>
                <name>Reserved</name>
                <description>Reserved</description>
                <bitRange>[20:0]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>Segment_Address_Value</name>
                <description>Segment address value register</description>
                <bitRange>[31:21]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <!--#DD THREAD_WAY_ALLOCATION_VECTOR_REG not added-->
      </registers>
    </peripheral>
    <!--Data Cache Controller-->
    <peripheral>
      <name>Data_Cache_Controller</name>
      <version>1.0</version>
      <description>Data Cache controller register map</description>
      <groupName>Data_cache_controller</groupName>
      <baseAddress>0x44040000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x108</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>HWPARAMS</name>
          <description>Specifies Implementation options of the AHB Cache</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <!--#DD reset value is configuration dependent-->
          <fields>
            <field>
              <name>ENDIANNESS</name>
              <description>Endianness of the module,0 - LE, 1 - BE8 , 2 - BE32</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>XOM</name>
              <description>XOM Support ,1 - On, 2 - Off</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>XOM_SUPPORT_ON</name>
                  <description>XOM Support is on</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>XOM_SUPPORT_OFF</name>
                  <description>XOM Support is off</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SNAPSHOTTING</name>
              <description>SNAPSHOTTING Support ,1 - On, 2 - Off</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SNAPSHOTTING_SUPPORT_ON</name>
                  <description>SNAPSHOTTING Support is on</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SNAPSHOTTING_SUPPORT_OFF</name>
                  <description>SNAPSHOTTING Support is off</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>CACHE_MEM_SIZE</name>
              <description>Cache memory size in address bits.the actual size is 2 power of this value</description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>MASTER_ID</name>
              <description>The Cachegenerates transactions with this ID</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DIS_CACHE_EN_MAINT</name>
              <description>Value of the input configuration port that controls the function to turn off cache enable automatic maintenance.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DIS_CACHE_DIS_MAINT</name>
              <description>Value of the input configuration port that controls the function to turn off cache disable automatic maintenance.</description>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DIS_CACHE_DOWN_MAINT</name>
              <description>Value of the input configuration port that controls the function to turn off powerdown maintenance.</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>POWER_ON_ENABLE</name>
              <description>Value of the input configuration port that controls the function that enables the cache automatically after powerup.</description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED1</name>
              <description>RESERVED1</description>
              <bitRange>[29:28]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>APB_VIOLATION_RESP</name>
              <description>Respond with error (1) or RAZ/WI (0) to illegal APB operations.</description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>AHB_VIOLATION_RESP</name>
              <description>Respond with error (1) or RAZ/WI (0) to illegal AHB operations on XOM. Fixed to 0 if the XOM render parameter is OFF.</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CTRL</name>
          <description>Control register cache on/off</description>
          <addressOffset>0x010</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <!--#DD reset value is configuration dependent-->
          <fields>
            <field>
              <name>ENABLE</name>
              <description>Request to enable or disable cache 1- enable , 0 - disable </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FORCE_WT</name>
              <description>Forces write through policy</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[7:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DENY_POWERDOWN</name>
              <description>When set, power down LPI requests are denied. Does not affect clock LPI requests.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED_1</name>
              <description>RESERVED</description>
              <bitRange>[15:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALLOW_NSEC_ENABLE_READ</name>
              <description>Allow Non-secure software to see if the cache is enabled.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALLOW_NSEC_MAINT_LINES</name>
              <description>Allow Non-secure software to trigger maintenance (only for lines and only Non-secure views of cache lines).</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ALLOW_NSEC_NSECSTAT</name>
              <description>Allow Non-secure software to read and control Non-secure statistics counter registers and receive saturation interrupt.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED_2</name>
              <description>Reserved</description>
              <bitRange>[31:19]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>NSEC_ACCESS</name>
          <description>Non-secure access information register : Non-secure software can check its access level</description>
          <addressOffset>0x014</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>CACHE_ENABLED</name>
              <description>Shows if the cache is enabled or disabled</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESEREVED_0</name>
              <description>Reserved</description>
              <bitRange>[15:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>NSEC_ENABLE_READ_ALLOWED</name>
              <description>Non-secure software is allowed to see the cache enabled state.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>NSEC_MAINT_LINES_ALLOWED</name>
              <description>Non-secure software is allowed to trigger maintenance (only for lines).</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>NSEC_NSECSTAT_ALLOWED</name>
              <description>Non-secure software is allowed to read and control Non-secure statistics counters and receives saturation interrupt.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESEREVED_1</name>
              <description>Reserved</description>
              <bitRange>[31:19]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MAINT_CTRL_ALL</name>
          <description>Maintenance control for the entire cache register :For maintenance operations</description>
          <addressOffset>0x020</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>TRIG_CLEAN_ALL</name>
              <description>Trigger clean all maintenance. This can be used together with TRIG_INVALIDATE_ALL.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>TRIG_INVALIDATE_ALL</name>
              <description>Trigger invalidate all maintenance. It can be used together with TRIG_CLEAN_ALL. TRIG_INVALIDATE_ALL can be used even if the cache is not enabled, but only if used without clean.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MAINT_CTRL_LINES</name>
          <description>Maintenance control for individual lines register:maintenance operations for a specific address</description>
          <addressOffset>0x024</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>TRIG_CLEAN</name>
              <description>Trigger clean by address on the addressed cache line.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>TRIG_INVALIDATE</name>
              <description>Trigger invalidate by address on the addressed cache line. It can be used together with TRIG_CLEAN.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>SECURITY</name>
              <description>Cache maintenance is performed on the Secure or Non-secure view of the address</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SECURE</name>
                  <description>Secure</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Non_Secure</name>
                  <description>Non secure</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>Reserved</name>
              <description>Reserevd</description>
              <bitRange>[4:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>ADDR</name>
              <description>Address to look up in the cache and perform invalidate or cleaning on matching cache line. Use bits [31:5] of the address.</description>
              <bitRange>[31:5]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MAINT_STATUS</name>
          <description>Maintenance status for the cache register:Indicates if any maintenance is already in progress</description>
          <addressOffset>0x028</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>CACHE_ENABLED</name>
              <description>Cache enable status</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLED</name>
                  <description>Enable</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>Disable</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ONGOING_EN_DIS</name>
              <description>Ongoing enable or disable, reading 1 means cache is in progress of being enable or disable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ONGOING_MAINT</name>
              <description>Reading 1 means that a cache maintenance operation is in progress (clean, invalidate, or cache enable or cache disable).</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ONGOING_PWR_MAINT</name>
              <description>Reading 1 means low-power request automatic maintenance is in progress.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESEREVD_0</name>
              <description>Reserved</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>CACHE_IS_CLEAN</name>
              <description>Reading 1 means that the cache has no dirty data. The AHB Cache uses a simplified model to check for dirty data.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_1</name>
              <description>Reserved</description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SECIRQSTAT</name>
          <description>Secure interrupt request status register :source of a Secure interrupt</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>ENABLE_DONE</name>
              <description>The enable operation is complete. The AHB Cache is operational.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DISABLE_DONE</name>
              <description>The disable operation is complete. The AHB Cache is bypassed.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>MAINT_DONE</name>
              <description>Manual maintenance operation (either or both of clean or invalidate) started by Secure software finished.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>MAINT_IGNORED</name>
              <description>Secure software attempted maintenance or enable or disable of the cache. One of those operations was already in progress and the new request was ignored.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TR_ERR</name>
              <description>Secure transaction error on master side (any bus error, data type access to XOM)</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SECURE_CNT_SAT</name>
              <description>Secure statistics counters are saturated and stopped.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>NSECURE_CNT_SAT</name>
              <description>Non-secure statistics counters are saturated and stopped (when ALLOW_NSEC_NSECSTAT is not set).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>XOM_ERR</name>
              <description>A data, write, locked, or exclusive access was attempted to an XOM by a Secure transfer.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SECIRQSCLR</name>
          <description>Secure interrupt status clear register:clears sources for Secure interrupt.</description>
          <addressOffset>0x104</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>ENABLE_DONE</name>
              <description>Clear ENABLE_DONE interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>DISABLE_DONE</name>
              <description>clear DISABLE_DONE interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>MAINT_DONE</name>
              <description>Clear secure MAINT_DONE interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>MAINT_IGNORED</name>
              <description>clear MAINT_IGNORED interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>TR_ERR</name>
              <description>clear TR_ERR interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>SECURE_CNT_SAT</name>
              <description>clear SECURE_CNT_SAT</description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>NSECURE_CNT_SAT</name>
              <description>clear NSECURE_CNT_SAT interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>XOM_ERR</name>
              <description>clear XOM_ERR interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SECIRQEN</name>
          <description>Secure interrupt Enable register :enable sources for Secure interrupt.</description>
          <addressOffset>0x108</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>ENABLE_DONE</name>
              <description>enable ENABLE_DONE interrupt</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>DISABLE_DONE</name>
              <description>enable DISABLE_DONE interrupt</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAINT_DONE</name>
              <description>Enable secure MAINT_DONE interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAINT_IGNORED</name>
              <description>enable MAINT_IGNORED interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TR_ERR</name>
              <description>enable TR_ERR interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SECURE_CNT_SAT</name>
              <description>enable SECURE_CNT_SAT</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>NSECURE_CNT_SAT</name>
              <description>enable NSECURE_CNT_SAT interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>XOM_ERR</name>
              <description>enable XOM_ERR interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SECIRQINFO1</name>
          <description>Secure transfer error information register 1:shows the address of the operation when Secure TR_ERR interrupt occurred</description>
          <addressOffset>0x10C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>ADDR</name>
              <description>Address used by the Secure transfer that caused the Secure TR_ERR</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SECIRQINFO2</name>
          <description>Secure transfer error information register 2:contains the master ID of the operation when Secure TR_ERR interrupt occurred</description>
          <addressOffset>0x110</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>MASTER</name>
              <description>The HMASTER ID of the Secure transfer that caused the error.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ERROR_SRC</name>
              <description>Origin of the Secure transfer that received the bus error:</description>
              <bitRange>[9:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>NSECIRQSTAT</name>
          <description>Non-secure interrupt request status register:source of a Non-secure interrupt</description>
          <addressOffset>0x140</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>MAINT_DONE</name>
              <description>Manual maintenance operations (either or both of clean or invalidate) started by Non- secure software have finished.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>MAINT_IGNORED</name>
              <description>Non-secure software attempted maintenance or enabling or disabling of the cache while such an operation was already in progress and the new request was ignored.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TR_ERR</name>
              <description>Non-secure transaction error on master side. The details of the transaction are saved in the NSECIRQINFOx registers.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_1</name>
              <description>Reserved</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>NSECURE_CNT_SAT</name>
              <description>Non-secure statistics counters are saturated and stopped (when ALLOW_NSEC_NSECSTAT is not set).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>XOM_ERR</name>
              <description>A data, write, locked, or exclusive access was attempted to an XOM by a Non-secure transfer</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_2</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>NSECIRQCLR</name>
          <description>Non-secure interrupt status clear register:clear sources for Non-secure interrupt.</description>
          <addressOffset>0x144</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>MAINT_DONE</name>
              <description>Clear non secure MAINT_DONE interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>MAINT_IGNORED</name>
              <description>clear non secure MAINT_IGNORED interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>TR_ERR</name>
              <description>clear non secure TR_ERR interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>RESERVED_1</name>
              <description>Reserved</description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>NSECURE_CNT_SAT</name>
              <description>clear NSECURE_CNT_SAT interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>XOM_ERR</name>
              <description>clear non secure XOM_ERR interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>RESERVED_2</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>NSECIRQEN</name>
          <description>Non-secure interrupt enable register:enable sources for Non-secure interrupt</description>
          <addressOffset>0x148</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAINT_DONE</name>
              <description>Enable non secure MAINT_DONE interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAINT_IGNORED</name>
              <description>Enable non secure MAINT_IGNORED interrupt</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TR_ERR</name>
              <description>enable non secure TR_ERR interrupt</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED_1</name>
              <description>Reserved</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>NSECURE_CNT_SAT</name>
              <description>enable NSECURE_CNT_SAT interrupt</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>XOM_ERR</name>
              <description>enable non secure XOM_ERR interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED_2</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>NSECIRQINFO1</name>
          <description>Non-secure transfer error information register 1:address of the operation when Non-secure TR_ERR interrupt occurred</description>
          <addressOffset>0x14C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>ADDR</name>
              <description>Address used by the Non-secure transfer that caused Non-secure TR_ERR.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>NSECIRQINFO2</name>
          <description>Non-secure transfer error information register 2:master ID of the operation when Non-secure TR_ERR interrupt occurred</description>
          <addressOffset>0x150</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>MASTER</name>
              <description>The HMASTER ID of the Non-secure transfer that caused the error.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>ERROR_SRC</name>
              <description>The origin of the Non-secure transfer that received the bus error. 0 = Early write response</description>
              <bitRange>[9:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SECHIT</name>
          <description>Secure transfers hit register:displays the value of the Secure hit counter</description>
          <addressOffset>0x300</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SECHITCNT</name>
              <description>The number of Secure transfers that have hit the cache.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SECMISS</name>
          <description>Secure transfers miss register:displays the value of the Secure miss counter</description>
          <addressOffset>0x304</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SECMISSCNT</name>
              <description>The number of Secure transfers that have missed the cache.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SECSTATCTRL</name>
          <description>Secure transfers statistic counters control:provides control over the Secure counters.</description>
          <addressOffset>0x308</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>ENABLE</name>
              <description>Enable statistics counters for Secure transactions</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESET</name>
              <description>Reset statistics counters for Secure transactions.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>NSECHIT</name>
          <description>Non-secure transfers hit register:displays the value of the Non-secure hit counter</description>
          <addressOffset>0x310</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>NSECHITCNT</name>
              <description>The number of Non-secure transfers that have hit the cache.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>NSECMISS</name>
          <description>Non-secure transfers miss register:displays the value of the Non-secure miss counter.</description>
          <addressOffset>0x314</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>NSECMISSCNT</name>
              <description>The number of Non-secure transfers that have missed the cache.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>NSECSTATCTRL</name>
          <description>Non-secure transfers statistic counters control register:provides control over the Non-secure counters</description>
          <addressOffset>0x318</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>ENABLE</name>
              <description>Enable statistics counters for Non-secure transactions.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESET</name>
              <description>Reset statistics counters for Non-secure transactions</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PMSVR0</name>
          <description>saved value register 0 - Secure hit:Secure hit counter snapshot register</description>
          <addressOffset>0x600</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SCHS</name>
              <description>Secure hit counter snapshot</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PMSVR1</name>
          <description>saved value register 1 - Secure miss:Secure miss counter snapshot register</description>
          <addressOffset>0x604</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SMCS</name>
              <description>Secure miss counter snapshot</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PMSVR2</name>
          <description>saved value register 2 - non Secure hit:non Secure hit counter snapshot register</description>
          <addressOffset>0x608</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>NSHCS</name>
              <description>Non secure hit counter snapshot</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PMSVR3</name>
          <description>saved value register 3 - non Secure miss:non Secure miss counter snapshot register</description>
          <addressOffset>0x60C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>NSMCS</name>
              <description>Non secure miss counter snapshot</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PMSSR</name>
          <description>PMU snapshot status register</description>
          <addressOffset>0x680</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000001</resetValue>
          <fields>
            <field>
              <name>NC</name>
              <description>No capture. Indicates whether the PMU counters have been captured.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PMSCR</name>
          <description>PMU snapshot capture register</description>
          <addressOffset>0x6F0</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>SS</name>
              <description>Provides a mechanism for software to initiate a snapshot.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:1]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PMSSRR</name>
          <description>PMU snapshot reset register</description>
          <addressOffset>0x6F4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>RP_SHC</name>
              <description>Reset Secure hit counter when making snapshot. The miss counter copies this value.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RP_SMC</name>
              <description>Reset Secure miss counter when making snapshot. Mirrors RP_SHC as the two counters are grouped and should not be reset separately.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RP_NSHC</name>
              <description>Reset Non-secure hit counter when making snapshot. The miss counter copies this value.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RP_NSMC</name>
              <description>Reset Non-secure miss counter when making snapshot. Mirrors RP_NSHC as the two counters are grouped and should not be reset separately. </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PIDR4</name>
          <description>Peripheral ID register 4</description>
          <addressOffset>0xFD0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000004</resetValue>
          <fields>
            <field>
              <name>DES_2</name>
              <description>JEP 106 Continuation code</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>SIZE</name>
              <description>4KB Count</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PIDR5</name>
          <description>Peripheral ID register 5</description>
          <addressOffset>0xFD4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PIDR6</name>
          <description>Peripheral ID register 6</description>
          <addressOffset>0xFD8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PIDR7</name>
          <description>Peripheral ID register 7</description>
          <addressOffset>0xFDC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PIDR0</name>
          <description>Peripheral ID register 0</description>
          <addressOffset>0xFE0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000031</resetValue>
          <fields>
            <field>
              <name>PART_0</name>
              <description>Part Number [7:0]</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PIDR1</name>
          <description>Peripheral ID register 1</description>
          <addressOffset>0xFE4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x000000b8</resetValue>
          <fields>
            <field>
              <name>PART_1</name>
              <description>Part Number [11:8]</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>DES_0</name>
              <description>JEP 106 Identity Code [3:0]</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PIDR2</name>
          <description>Peripheral ID register 2</description>
          <addressOffset>0xFE8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000000b</resetValue>
          <fields>
            <field>
              <name>DES_1</name>
              <description>JEP 106 Identity Code [6:4]</description>
              <bitRange>[2:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>JEDEC</name>
              <description>JEDEC</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>REVISION</name>
              <description>Revision Code</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>PIDR3</name>
          <description>Peripheral ID register 3</description>
          <addressOffset>0xFEC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>CMOD</name>
              <description>Customer Modified</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>REVAND</name>
              <description>Manufacturer revision number</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CIDR0</name>
          <description>Component ID register 0</description>
          <addressOffset>0xFF0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000000D</resetValue>
          <fields>
            <field>
              <name>PRMBL_0</name>
              <description>Preamble</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CIDR1</name>
          <description>Component ID register 1</description>
          <addressOffset>0xFF4</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x000000F0</resetValue>
          <fields>
            <field>
              <name>PRMBL_1</name>
              <description>Preamble</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>CLASS</name>
              <description>Component Class</description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CIDR2</name>
          <description>Component ID register 2</description>
          <addressOffset>0xFF8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000005</resetValue>
          <fields>
            <field>
              <name>PRMBL_2</name>
              <description>Preamble</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CIDR3</name>
          <description>Component ID register 1</description>
          <addressOffset>0xFFC</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x000000B1</resetValue>
          <fields>
            <field>
              <name>PRMBL_3</name>
              <description>Preamble</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED_0</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--MCU VBAT Clock Architecture-->
    <peripheral>
      <name>MCU_ULP_VBAT_CLOCK_ARCHITECTURE</name>
      <version>1.0</version>
      <description>clock select registers for the ULP VBAT peripherals</description>
      <groupName>CLOCK_ARCHITECTURE</groupName>
      <baseAddress>0x24048000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x3</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>MCUULP_VBAT_LFCLK_REG</name>
          <description>Low frequency clock select register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000028</resetValue>
          <fields>
            <field>
              <name>MCUULP_VBAT_LF_CLK_SEL</name>
              <description>mcuulp vbat low frequecy clock select</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MCUULP_VBAT_LF_CLK_SWITCHED</name>
              <description>Status of NPSS Low Frequency Clock Dynamic Clock Mux</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[8:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>MCUULP_VBAT_SYS_RTC_CLK_SEL</name>
              <description>mcuulp vbat sysrtc clock select</description>
              <bitRange>[12:9]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MCUULP_VBAT_SYS_RTC_CLK_SWITCHED</name>
              <description>Status of Dynamic Clock Mux in Reference Clock Generation</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>MCUULP_VBAT_SYS_RTC_CLK_EN</name>
              <description>Writing 1 to this enables clock to SYSRTC from dynamic mux.Writing 0 to this has no effect.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[17:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MCUULP_VBAT_SYS_RTC_CLK_DIV_FAC</name>
              <description>Division factor for RC_32_MHZ_CLK</description>
              <bitRange>[23:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MCUULP_VBAT_HFCLK_REG</name>
          <description>High frequency clock select register</description>
          <addressOffset>0x118</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00008000</resetValue>
          <fields>
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>MCUULP_VBAT_HF_CLK_SEL</name>
              <description>mcuulp high frequency clock select</description>
              <bitRange>[4:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[14:5]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>MCUULP_VBAT_HF_CLK_SWITCHED</name>
              <description>Status of NPSS High Frequency Clock Dynamic Clock Mux</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--MCU ULP CLOCK oscillators-->
    <peripheral>
      <name>MCU_ULP_CLOCK_OSCILLATORS</name>
      <version>1.0</version>
      <description>ULP Clock Oscillators Control Registers</description>
      <groupName>CLOCK_ARCHITECTURE</groupName>
      <baseAddress>0x24048100</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x2</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>ULP_CLKOSC_CTRL_REG</name>
          <description>ULP Clock Oscillators Control Registers</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x008B0000</resetValue>
          <fields>
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RC_32KHZ_CLK_EN</name>
              <description>1-Enable RC 32khz clock, 0-disable RC 32 khz clock</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable RC 32khz clock</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable RC 32khz clock</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RO_32KHZ_CLK_EN</name>
              <description>1-Enable RO 32khz clock, 0-disable RO 32 khz clock</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable RO 32khz clock</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable RO 32khz clock</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>XTAL_32KHZ_CLK_EN</name>
              <description>1-Enable XTAL 32khz clock, 0-disable XTAL 32 khz clock</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable XTAL 32khz clock</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable XTAL 32khz clock</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RC_MHZ_CLK_EN</name>
              <description>1-Enable RC 32Mhz clock, 0-disable RC 32 Mhz clock</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable RC 32Mhz clock</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable RC 32Mhz clock</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RO_HF_CLK_EN</name>
              <description>1-Enable RO High Frequency clock, 0-disable RO High Frequency clock</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable RC 32Mhz clock</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable RC 32Mhz clock</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DOUBLER_CLK_EN</name>
              <description>1-Enable Doubler clock, 0-disable Doubler clock</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable Doubler clock</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable Doubler clock</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>XTAL_40MHZ_CLK_EN</name>
              <description>1-Enable XTAL 40MHz clock, 0-disable XTAL 40 MHz clock</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enable XTAL 40MHz clock</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Disable XTAL 40MHz clock</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:23]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--MCU multi channel interrupt selection registers-->
    <peripheral>
      <name>MCU_MULTI_CHANNEL_INTERRUPT_SELECT</name>
      <version>1.0</version>
      <description>MCU Multi channel interrupt select registers</description>
      <groupName>INTERRUPTS</groupName>
      <baseAddress>0x46110000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x24</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>RESERVED</name>
          <description>RESERVED</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
        </register>
        <register>
          <name>M4SS_GPDMA_INTR_SEL</name>
          <description>MCU GPDMA interrupt selection register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>dma_m_interrupt_sel</name>
              <description>This bit unmasks m th the GPDMA channel interrupt</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>UNMASKED</name>
                  <description>Interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MASKED</name>
                  <description>Interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RESERVED</name>
          <description>RESERVED</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
        </register>
        <register>
          <name>M4SS_UDMA_INTR_SEL</name>
          <description>MCU HP uDMA interrupt selection register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>udma_m_interrupt_sel</name>
              <description>This bit unmasks the m th UDMA channel interrupt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>UNMASKED</name>
                  <description>Interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MASKED</name>
                  <description>Interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>M4SS_SCT_INTR_SEL</name>
          <description>SCT interrupt selection register</description>
          <addressOffset>0x010</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <fields>
            <field>
              <name>sct_m_interrupt_sel</name>
              <description>This bit unmasks the m th SCT channel interrupt</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>UNMASKED</name>
                  <description>Interrupt is not masked</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MASKED</name>
                  <description>Interrupt is masked</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <!--#DD TASS not there in HRM-->
      </registers>
    </peripheral>
    <!--BAND GAP TOP-->
    <peripheral>
      <name>BAND_GAP_TOP</name>
      <version>1.0</version>
      <description>Band Gap Top</description>
      <groupName>BAND_GAP_TOP</groupName>
      <baseAddress>0x2405A400</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x20</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>BG_SLEEP_TIMER_REG</name>
          <description>BG sleep timer register</description>
          <addressOffset>0x094</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00290008</resetValue>
          <fields>
            <field>
              <name>bgs_clk_en</name>
              <description>bandgap sampling enable through spi</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bg_sampling_spi_sel</name>
              <description>enable bandgap sampling through spi / pin</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Through_SPI</name>
                  <description>Bandgap sampling through spi</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Through_Pin</name>
                  <description>Band gap sampling through pin(sleep_en)</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>bypass_pwrgating_combi</name>
              <description>Powergating is disabled for combi logic . It will always be ON.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bg_ctrl_auto</name>
              <description>bg_en , bg_sh_en automatically enables or take values though SPI</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>bg_en and bg_sh_en are automatically controlled</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>bg_en and sh_en take values from SPI.</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[15:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bgs_active_timer_sel</name>
              <description>Active timer select</description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mask_sw_active</name>
              <description>1: disable comp clock in between sleep duration</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bgs_active_timer_sel[0]</name>
              <description>taking one bit of bgs_active_timer_sel[17:16]</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>bgs_sleep_timer_sel</name>
              <description>	
sleep timer count is

2'd0: active_timer_count * 2^6

2'd1: active timer_count * 2^7

2'd2: active_timer_count * 2^8

2'd3: active_timer_count * 2^9</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[31:22]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>SCDC_CTRL_REG_0</name>
          <description>SCDC Control register</description>
          <addressOffset>0x098</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000F002F</resetValue>
          <fields>
            <field>
              <name>count_reset</name>
              <description>Count reset value, count threshold  will be doubler this value</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>max_mode</name>
              <description>maximum mode it can go to</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>fixed_mode</name>
              <description>fixed mode</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>fixed_trim_ro</name>
              <description>Manual trim word</description>
              <bitRange>[11:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bypass_trim_ro</name>
              <description>To program the trim value manually, irrespective of the fsm</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>fixed_curr_prog_low</name>
              <description>Current prog value to take when ext cap en is high and sel_high freq_ext_b is 1</description>
              <bitRange>[16:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>fixed_curr_prog_high</name>
              <description>Current prog value to take when ext cap en is high and sel_high freq_ext_b is 0</description>
              <bitRange>[20:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ext_cap_en</name>
              <description>To change current trim bits to high or low through spi, based on high power or low power mode.When 0, curr prog value is 0.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[31:22]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>BG_SCDC_PROG_REG_1</name>
          <description>BG SCDC programme register</description>
          <addressOffset>0x09C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00020498</resetValue>
          <fields>
            <field>
              <name>ref_sel_PMU</name>
              <description>3'd0 - 1.2V, 3'd1 - 1.15V, 3'd2 - 1.1V, 3'd3 - 1.05V        3'd4 - 1.0V   3'd5 - 0.95V,3'd6 - 0.9V,3'd7 - 0.85V</description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>an_perif_ptat_en</name>
              <description>1 - To enable ptat currents to analog peripherals</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bod_clks_ptat_en</name>
              <description>1 - To enable ptat currents to clocks and bod(cmp_npss)</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[6:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ref_sel_lp_dcdc</name>
              <description>DCDC output programming in LDO  high/low power mode</description>
              <bitRange>[9:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ref_sel_dcdc</name>
              <description>DCDC output programming  vref_1p1/vref_1p05</description>
              <bitRange>[12:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bg_sh_en</name>
              <description>bg_sh_en from spi</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bg_en</name>
              <description>bg_en from spi</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bg_r</name>
              <description>Bandgap voltage programming</description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>bg_r_ptat</name>
              <description>Bandgap voltage programming</description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[31:22]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>BG_SCDC_PROG_REG_2</name>
          <description>BG SCDC programme register 2</description>
          <addressOffset>0x0A0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000060</resetValue>
          <fields>
            <field>
              <name>scdcdc_soft_reset</name>
              <description>soft reset signal for scdcdc fsm</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>trim_clamp_hp</name>
              <description>trim value lower clamp value when sel high freq_b is 0</description>
              <bitRange>[5:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>trim_clamp_lp</name>
              <description>trim value lower clamp value when sel high freq_b is 1</description>
              <bitRange>[10:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>testmode_2_sel</name>
              <description>test mode 2 select</description>
              <bitRange>[13:11]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>testmode_2_en</name>
              <description>To enable testmux for BG_TESTMODE2</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>testmode_1_sel</name>
              <description>testmode 1 select</description>
              <bitRange>[16:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>testmode_1_en</name>
              <description>To enable test mux for BG_TESTMODE1</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>testmode_0_sel</name>
              <description>Test mode 0 select</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>testmode_0_en</name>
              <description>Enable for output on to BG_TESTMODE0</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>scdcdc_sel</name>
              <description>To switch to SCDCDC mode from LDO mode.1 - SCDC mode,0 - LDO mode</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SCDC_Mode</name>
                  <description>SCDC mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LDO_Mode</name>
                  <description>LDO mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[31:22]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>BG_LDO_REG</name>
          <description>BG LDO Register</description>
          <addressOffset>0x0A4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00021000</resetValue>
          <fields>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>test_amux_sel</name>
              <description>Select for analog mux</description>
              <bitRange>[3:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>test_amux_en</name>
              <description>Enable analog mux to test reference voltages</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[14:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LDO_0P6_ENABLE</name>
              <description>enable digital LDO</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LDO_0P6_LP_MODE</name>
              <description>enable low power mode, otherwise in high power mode</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LDO_0P6_CTRL</name>
              <description>vref for DCDC1p1_lp_500uA</description>
              <bitRange>[20:18]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LDO_0P6_BYPASS</name>
              <description>bypass signal for DCDC1p1_lp_500uA</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[31:22]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>BG_SCDC_READ_BACK</name>
          <description>BG SCDC READ BACK</description>
          <addressOffset>0x0A8</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00020000</resetValue>
          <fields>
            <field>
              <name>sync_reset_read</name>
              <description>Read back for sync reset with ro clock</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[12:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>trim_4mhz_ro</name>
              <description>Trim value for scdcdc ring oscillator</description>
              <bitRange>[17:13]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>scdcdc_curr_prog</name>
              <description>Scdcdc curr prog read back</description>
              <bitRange>[21:18]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>BLACKOUT_MON_EN_REG</name>
          <description>BLACKOUT MON EN REG</description>
          <addressOffset>0x0A8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000030</resetValue>
          <resetMask>0X003FFFFF</resetMask>
          <fields>
            <field>
              <name>bg_r</name>
              <description>Bandgap Voltage Programming</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>blackout_en</name>
              <description>Control signal for blackout monitor from SPI</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED</name>
              <description>RESERVED</description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--QSPI 2-->
    <peripheral>
      <name>QSPI_2</name>
      <version>1.0</version>
      <description>The queued serial peripheral interface module provides a serial peripheral interface with queued transfer capability
	    </description>
      <groupName>QSPI 2</groupName>
      <baseAddress>0x12040000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x184</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>QSPI_2</name>
        <value>60</value>
      </interrupt>
      <registers>
        <!-- QSPI_CLK_CONFIG : QSPI Clock Configuration Register -->
        <!-- REGISTER 1 -->
        <register>
          <name>QSPI_CLK_CONFIG</name>
          <description>QSPI Clock Configuration Register</description>
          <addressOffset>0x000</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000011F</resetValue>
          <fields>
            <!-- QSPI_auto_csn_high_cnt -->
            <field>
              <name>QSPI_AUTO_CSN_HIGH_CNT</name>
              <description>Minimum SOC clock cycles, during which QSPI auto csn should be high between consecutive CSN assertions</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_CLK_SYNC -->
            <field>
              <name>QSPI_CLK_SYNC</name>
              <description>If the clock frequency to FLASH(spi_clk) and QSPI(hclk) controller is same,this bit can be set to one to by-pass the syncros results in time consumption</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Sync logic is enabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Sync (synchros) logic is bypassed</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_CLK_EN_SCLK-->
            <field>
              <name>QSPI_CLK_EN_SCLK</name>
              <description>QSPI clock enable for sclock</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Dynamic clock gating is enabled in side QSPI controller</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Full time clock is enabled for QSPI controller.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Spi_clk_delay_val -->
            <field>
              <name>SPI_CLK_DELAY_VAL</name>
              <description>Delay value programmed to RX QSPI DLL on read side. This delay is used to delay the pad clock/DQS according to the requirement</description>
              <bitRange>[17:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Octa_mode_enable_with_dqs -->
            <field>
              <name>OCTA_MODE_ENABLE_WITH_DQS</name>
              <description>Enables SPI octa mode along with DQS in DDR mode</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_dll_enable -->
            <field>
              <name>QSPI_DLL_ENABLE</name>
              <description>Enable for RX QSPI DLL in read mode.This is used in M4SS QSPI DDR pads to delay the pad clock DQS input</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DLL is disabled/bypassed</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>DLL is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- ddr_clk_polarity_from_reg -->
            <field>
              <name>DDR_CLK_POLARITY_FROM_REG</name>
              <description>Used this bit to sample the data at posedge negedge after interface FFs with internal qspi clock</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description> Sample at negedge</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Sample at posedge</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_dll_enable_tx -->
            <field>
              <name>QSPI_DLL_ENABLE_TX</name>
              <description>Enable for TX QSPI DLL in write path. This is used in M4SS QSPI DDR pads to delay the qspi clock output.
                           0–DLL is disabled bypassed 1–DLL is enabled</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>DLL is disabled/bypassed.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description> DLL is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Spi_clk_delay_val_tx-->
            <field>
              <name>SPI_CLK_DELAY_VAL_TX</name>
              <description>Delay value programmed to TX QSPI DLL in write path. This delay is used to delay the qspi clock output according to the requirement</description>
              <bitRange>[27:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_rx_dqs_dll_calib-->
            <field>
              <name>QSPI_RX_DQS_DLL_CALIB</name>
              <description>Delay value programmed to TX QSPI DLL in write path. 
			               This delay is used to delay the qspi clock output according to the requirement</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED3 -->
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[31:29]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_BUS_MODE : QSPI Bus Mode Register  -->
        <!-- REGISTER 2 -->
        <register>
          <name>QSPI_BUS_MODE</name>
          <description>QSPI Bus Mode Register</description>
          <addressOffset>0x004</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--RESERVED-->
            <field>
              <name>RESERVED</name>
              <description>Reserved</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_MAN_MODE_CONF_CSN0 -->
            <field>
              <name>QSPI_MAN_MODE_CONF_CSN0</name>
              <description>Configures the QSPI flash for Single/Dual/Quad mode operation in manual mode</description>
              <bitRange>[2:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Single Mode</name>
                  <description>Single Mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual Mode</name>
                  <description>Dual Mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad Mode</name>
                  <description>Quad Mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--AUTO_MODE_RESET-->
            <field>
              <name>AUTO_MODE_RESET</name>
              <description>QSPI Auto controller reset. This is not a Self clearing bit</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Auto mode is active</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Auto mode is inactive(In soft-reset). Auto mode FIFO also get reset. Prefetch should be disabled while going to reset. The controller should be in normal (Not a HW_mode) Manual mode.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_PREFETCH_EN-->
            <field>
              <name>QSPI_PREFETCH_EN</name>
              <description>Pre-fetch of data from the model which is connected to QSPI, automatically with out reading on AHB and is supplied to AHB, 
when address is matched with AHB read transaction address. Note : Pre-fetch mode is common in AUTO_MODE for both Flashes connected to csn0 and csn1.		  </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Pre-fetch mode is disabled.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Pre-fetch mode is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_WRAP_EN-->
            <field>
              <name>QSPI_WRAP_EN</name>
              <description> Model wrap is considered with this bit and uses wrap instruction to read from FLASH, loaded into corresponding auto_config (csn0, csn1) register. Note : Wrap mode is common in AUTO_MODE for both Flashes connected to csn0 and csn1.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Wrap mode is disabled (AHB WRAP can be used).</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Wrap mode is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_AUTO_MODE_FRM_REG-->
            <field>
              <name>QSPI_AUTO_MODE_FRM_REG</name>
              <description>QSPI Mode of Operation. This is valid only when HW_CTRLD_QSPI_MODE_CTRL is zero.
Before switching from MANUAL to AUTO_MODE,  MANUAL should be IDLE. During transition from AUTO_MODE to MANUAL_MODE(After resetting this bit to zero) we have to make sure AUTO mode operations should be completed by checking the STATUS bit in MANUAL_STATUS register[12] (0 - Idle).</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual Mode is selected</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Auto Mode is selected.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Programmable_auto_csn_base_addr_en -->
            <field>
              <name>PROGRAMMABLE_AUTO_CSN_BASE_ADDR_EN</name>
              <description>Programmable auto csn mode enable</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Programmable auto csn mode is enabled.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Programmable auto csn mode is diabled</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_D2_OEN_CSN0-->
            <field>
              <name>QSPI_D2_OEN_CSN0</name>
              <description>Direction Control for SPI_IO2 in case of dual/single mode for chip select0 csn0.It is used both in Auto and Manual Mode</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D3_OEN_CSN0-->
            <field>
              <name>QSPI_D3_OEN_CSN0</name>
              <description>Direction Control for SPI_IO3 in case of dual/single mode for chip select0 csn0.It is used both in Auto and Manual Mode.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D2_DATA_CSN0-->
            <field>
              <name>QSPI_D2_DATA_CSN0</name>
              <description>Value of SPI_IO2 in case of dual/single mode for chip select0 csn0.It is used both in Auto and Manual Mode.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D3_DATA_CSN0-->
            <field>
              <name>QSPI_D3_DATA_CSN0</name>
              <description>Value of SPI_IO3 in case of dual/single mode for chip select0 csn0.It is used both in Auto and Manual Mode</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D2_OEN_CSN1-->
            <field>
              <name>QSPI_D2_OEN_CSN1</name>
              <description>Direction Control for SPI_IO2 in case of dual/single mode for chip select1 (cs_n1). It is used both in Auto and Manual Mode.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D3_OEN_CSN1-->
            <field>
              <name>QSPI_D3_OEN_CSN1</name>
              <description>Direction Control for SPI_IO3 in case of dual/single mode for chip select1 (cs_n1). It is used both in Auto and Manual Mode.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D2_DATA_CSN1-->
            <field>
              <name>QSPI_D2_DATA_CSN1</name>
              <description>Value of SPI_IO2 in case of dual/single mode for chip select1 (cs_n1). It is used both in Auto and Manual Mode.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D3_DATA_CSN1-->
            <field>
              <name>QSPI_D3_DATA_CSN1</name>
              <description>Value of SPI_IO3 in case of dual/single mode for chip select1 (cs_n1). It is used both in Auto and Manual Mode.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DATA_SAMPLE_EDGE-->
            <field>
              <name>QSPI_DATA_SAMPLE_EDGE</name>
              <description>Samples MISO data on clock edges. This should be ZERO for mode3 clock.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Pos edge of loop back spi_pad_clk. Use for low speed mode (sclk freq =&lt; 40 MHz)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Neg edge of loop back spi_pad_clk. Use for high speed mode (sclk freq &gt;= 40 MHz)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CLK_MODE_CSN0-->
            <field>
              <name>QSPI_CLK_MODE_CSN0</name>
              <description>QSPI Clock Mode</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mode0</name>
                  <description>Mode 0, QSPI_CLK is low when QSPI_CS is high for chip select0 csn0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode3</name>
                  <description>Mode 3, QSPI_CLK is high when QSPI_CS is high for chip select0 csn0</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CLK_MODE_CSN1-->
            <field>
              <name>QSPI_CLK_MODE_CSN1</name>
              <description>QSPI Clock Mode</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mode0</name>
                  <description>Mode 0, QSPI_CLK is low when QSPI_CS is high for chip select1 csn1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode3</name>
                  <description>Mode 3, QSPI_CLK is high when QSPI_CS is high for chip select1 csn1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CLK_MODE_CSN2-->
            <field>
              <name>QSPI_CLK_MODE_CSN2</name>
              <description>QSPI Clock Mode</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mode0</name>
                  <description>Mode 0 QSPI_CLK is low when QSPI_CS is high for chip select2 csn2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode3</name>
                  <description>Mode 3 QSPI_CLK is high when QSPI_CS is high for chip select2 csn2</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CLK_MODE_CSN3-->
            <field>
              <name>QSPI_CLK_MODE_CSN3</name>
              <description>QSPI Clock Mode</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Mode0</name>
                  <description>Mode 0, QSPI_CLK is low when QSPI_CS is high for chip select3 csn3</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Mode3</name>
                  <description>Mode 3, QSPI_CLK is high when QSPI_CS is high for chip select3 csn3</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Flash_aw_fifo_ls_en -->
            <field>
              <name>FLASH_AW_FIFO_LS_EN</name>
              <description>Qspi flash auto write fifo light sleep enable</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Flash_sec_aes_ls_en -->
            <field>
              <name>FLASH_SEC_AES_LS_EN</name>
              <description>Qspi flash auto write fifo light sleep enable</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D2_OEN_CSN2-->
            <field>
              <name>QSPI_D2_OEN_CSN2</name>
              <description>Direction Control for SPI_IO2 in case of dual/single mode for chip select2 (cs_n2). It is used both in Auto and Manual Mode.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D3_OEN_CSN2-->
            <field>
              <name>QSPI_D3_OEN_CSN2</name>
              <description>Direction Control for SPI_IO3 in case of dual/single mode for chip select2 (cs_n2). It is used both in Auto and Manual Mode.</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D2_DATA_CSN2-->
            <field>
              <name>QSPI_D2_DATA_CSN2</name>
              <description>Value of SPI_IO2 in case of dual/single mode for chip select2 (cs_n2). It is used both in Auto and Manual Mode.</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_D3_DATA_CSN2-->
            <field>
              <name>QSPI_D3_DATA_CSN2</name>
              <description>Value of SPI_IO3 in case of dual/single mode for chip select2 (cs_n2). It is used both in Auto and Manual Mode.</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_D2_OEN_CSN3-->
            <field>
              <name>QSPI_D2_OEN_CSN3</name>
              <description>Direction Control for SPI_IO2 in case of dual/single mode for chip select3 (cs_n3). It is used both in Auto and Manual Mode.</description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_D3_OEN_CSN3-->
            <field>
              <name>QSPI_D3_OEN_CSN3</name>
              <description>Direction Control for SPI_IO3 in case of dual/single mode for chip select3 (cs_n3). It is used both in Auto and Manual Mode.</description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_D2_DATA_CSN3-->
            <field>
              <name>QSPI_D2_DATA_CSN3</name>
              <description>Value of SPI_IO2 in case of dual/single mode for chip select3 (cs_n3). It is used both in Auto and Manual Mode.</description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_D3_DATA_CSN3-->
            <field>
              <name>QSPI_D3_DATA_CSN3</name>
              <description>Value of SPI_IO3 in case of dual/single mode for chip select3 (cs_n3). It is used  both in Auto and Manual Mode.</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_1: QSPI Auto Controller Configuration 1 Register -->
        <!-- REGISTER 3 -->
        <register>
          <name>QSPI_AUTO_CONFIG_1</name>
          <description>QSPI Auto Controller Configuration 1 Register</description>
          <addressOffset>0x008</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF8FFFFF</resetMask>
          <fields>
            <!-- QSPI_EXT_BYTE_MODE_CSN0 -->
            <field>
              <name>QSPI_EXT_BYTE_MODE_CSN0</name>
              <description> Mode of operation of QSPI in the extra byte phase</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DUMMY_MODE_CSN0 -->
            <field>
              <name>QSPI_DUMMY_MODE_CSN0</name>
              <description>Mode of operation of QSPI in instruction phase</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_ADDR_MODE_CSN0 -->
            <field>
              <name>QSPI_ADDR_MODE_CSN0</name>
              <description>Mode of operation of QSPI in instruction phase</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CMD_MODE_CSN0 -->
            <field>
              <name>QSPI_CMD_MODE_CSN0</name>
              <description>Mode of operation of QSPI in instruction phase</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DATA_MODE_CSN0 -->
            <field>
              <name>QSPI_DATA_MODE_CSN0</name>
              <description>Mode of operation of QSPI in DATA phase</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_EXTRA_BYTE_CSN0 -->
            <field>
              <name>QSPI_EXTRA_BYTE_CSN0</name>
              <description>Value of the extra byte to be transmitted, if the extra byte mode is enabled</description>
              <bitRange>[17:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_EXTRA_BYTE_EN_CSN0 -->
            <field>
              <name>QSPI_EXTRA_BYTE_EN_CSN0</name>
              <description>Value of the extra byte to be transmitted, if the extra byte mode is enabled</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Not transmit byte</name>
                  <description>Do not transmit extra byte.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit byte</name>
                  <description>Transmit Extra byte after address phase</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit first nibble</name>
                  <description>Transmit only first nibble of the byte and maintain Hi-Z on the IO bus for next nibble</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_wrap-size -->
            <field>
              <name>QSPI_WRAP_SIZE</name>
              <description>Qspi auto wrap size</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_PG_JUMP_CSN0 -->
            <field>
              <name>QSPI_PG_JUMP_CSN0</name>
              <description>Index Jump instruction</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not use Index jump instruction</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Use Index jump instruction specified by QSPI_PG_JUMP_INST</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DUMMY_BYTES_INCR_CSN0 -->
            <field>
              <name>QSPI_DUMMY_BYTES_INCR_CSN0</name>
              <description>Specifies the number of dummy bytes 0 to 7 for the selected SPI mode</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DUMMY_BYTES_WRAP_CSN0 -->
            <field>
              <name>QSPI_DUMMY_BYTES_WRAP_CSN0</name>
              <description>Specifies the number of dummy bytes 0  to 7 for the selected SPI mode in case of wrap instruction</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_2: QSPI Auto Controller Configuration 2 Register -->
        <!-- REGISTER 4 -->
        <register>
          <name>QSPI_AUTO_CONFIG_2</name>
          <description>QSPI Auto Controller Configuration 2 Register</description>
          <addressOffset>0x00C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000301</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_RD_DATA_SWAP_AUTO_CSN0 -->
            <field>
              <name>QSPI_RD_DATA_SWAP_AUTO_CSN0</name>
              <description>Auto read data</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not swap the read data in auto mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Swap the auto read data in auto mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_ADR_SIZE_16_BIT_AUTO_MODE_CSN0 -->
            <field>
              <name>QSPI_ADR_SIZE_16_BIT_AUTO_MODE_CSN0</name>
              <description>Bit address sent to model</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>24 bit address is sent to model</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>16 Bit address is sent to model</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CONTI_RD_EN_CSN0 -->
            <field>
              <name>QSPI_CONTI_RD_EN_CSN0</name>
              <description>Continuous read enable bit</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Continuous read disabled.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Continuous read enabled.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- DUMMY_BYTES_WR_RD_CSN0 -->
            <field>
              <name>DUMMY_BYTES_WR_RD_CSN0</name>
              <description>Dummy bytes to the model to be read or to be write</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Dummy bytes will be read</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Dummy bytes to be write.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DUMMY_BYTES_JMP_CSN0-->
            <field>
              <name>QSPI_DUMMY_BYTES_JMP_CSN0</name>
              <description>Dummy cycles to be selected in case of JUMP</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_RD_INST_CNS0_LSB-->
            <field>
              <name>QSPI_RD_INST_CNS0_LSB</name>
              <description>Read instruction LS byte to be used for the selected SPI modes and when wrap is not needed or supported.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_RD_WRAP_INT_CSN0-->
            <field>
              <name>QSPI_RD_WRAP_INT_CSN0</name>
              <description>Read instruction to be used, when wrap mode is supported by QSPI flash</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_PG_JUMP_INST_CSN0-->
            <field>
              <name>QSPI_PG_JUMP_INST_CSN0</name>
              <description>Read instruction to be used, when Page jump is to be used</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_MANUAL_CONFIG1: QSPI Manual Configuration 1 Register-->
        <!-- REGISTER 5 -->
        <register>
          <name>QSPI_MANUAL_CONFIG1</name>
          <description>QSPI Manual Configuration 1 Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00180001</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_MANUAL_CSN -->
            <field>
              <name>QSPI_MANUAL_CSN</name>
              <description>SPI CS in manual mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_MANUAL_WR -->
            <field>
              <name>QSPI_MANUAL_WR</name>
              <description>Write enable for manual mode when CS is low</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_MANUAL_RD -->
            <field>
              <name>QSPI_MANUAL_RD</name>
              <description>Read enable for manual mode when CS is low</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_MANUAL_RD_CNT[9:0]-->
            <field>
              <name>QSPI_MANUAL_RD_CNT</name>
              <description>Indicates total number of bytes to be read along with [31:27] bits of this register.Maximum length supported is 32k bytes</description>
              <bitRange>[12:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_MANUAL_CSN_SELECT-->
            <field>
              <name>QSPI_MANUAL_CSN_SELECT</name>
              <description>Indicates which CSn is valid. Can be programmable in manual mode.
Note : In auto mode csn select is decoded from the address itself, AHB_addr [25:24].</description>
              <bitRange>[14:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[18:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_MANUAL_SIZE_FRM -->
            <field>
              <name>QSPI_MANUAL_SIZE_FRM_REG</name>
              <description>Manual reads and manual writes(If take_manual_size_from_reg bit is 1)</description>
              <bitRange>[20:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1 Byte</name>
                  <description>8 – bit mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2 Bytes</name>
                  <description>16 – bit mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>3 Bytes</name>
                  <description>24 – bit mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>4 Bytes</name>
                  <description>32 – bit mode</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- TAKE_QSPI_MANUAL_WR_SIZE_FRM_REG -->
            <field>
              <name>TAKE_QSPI_MANUAL_WR_SIZE_FRM_REG</name>
              <description>QSPI take write size</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No action. Takes write size from fifo </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Take write size from Manual config register1 </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_FULL_DUPLEX_EN-->
            <field>
              <name>QSPI_FULL_DUPLEX_EN</name>
              <description>Full duplex mode enable.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Full duplex mode disabled.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Full duplex mode enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[24:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- HW_CTRLD_QSPI_MODE_CTRL-->
            <field>
              <name>HW_CTRLD_QSPI_MODE_CTRL</name>
              <description>Hardware controlled qspi mode in between AUTO and manual</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Hardware control is disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Hardware control is enabled.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_MANUAL_QSPI_MODE-->
            <field>
              <name>QSPI_MANUAL_QSPI_MODE</name>
              <description>Internally the priority is given to manual mode</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>SPI mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Host SPI mode.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_MANUAL_RD_CNT -->
            <field>
              <name>QSPI_MANUAL_RD_CNT</name>
              <description>Indicates total number of bytes or bits (depending on Qspi_manual_dummy_byte_or_bit_mode  bit) to be read along with 12:3 bits of this register. Maximum length supported is 32k bytes.</description>
              <bitRange>[31:27]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_MANUAL_CONFIG2: QSPI Manual Configuration 2 Register-->
        <!-- REGISTER 6 -->
        <register>
          <name>QSPI_MANUAL_CONFIG2</name>
          <description>QSPI Manual Configuration 2 Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000000F0</resetValue>
          <resetMask>0xFFF</resetMask>
          <fields>
            <!-- QSPI_WR_DATA_SWAP_MNL_CSN0-->
            <field>
              <name>QSPI_WR_DATA_SWAP_MNL_CSN0</name>
              <description>Swap the write data inside the QSPI controller it-self</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn0.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn0.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_WR_DATA_SWAP_MNL_CSN1-->
            <field>
              <name>QSPI_WR_DATA_SWAP_MNL_CSN1</name>
              <description>Swap the write data inside the QSPI controller it-self.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn1.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn1.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_WR_DATA_SWAP_MNL_CSN2-->
            <field>
              <name>QSPI_WR_DATA_SWAP_MNL_CSN2</name>
              <description>Swap the write data inside the QSPI controller itself.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn2.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn2.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_WR_DATA_SWAP_MNL_CSN3-->
            <field>
              <name>QSPI_WR_DATA_SWAP_MNL_CSN3</name>
              <description>Swap the write data inside the QSPI controller itself.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual write data swap is disabled for csn3.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual write data swap is enabled for csn3.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_RD_DATA_SWAP_MNL_CSN0-->
            <field>
              <name>QSPI_RD_DATA_SWAP_MNL_CSN0</name>
              <description>Swap the read data inside the QSPIcontroller it self.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn0.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn0.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_RD_DATA_SWAP_MNL_CSN1-->
            <field>
              <name>QSPI_RD_DATA_SWAP_MNL_CSN1</name>
              <description>Swap the read data inside the QSPIcontroller itself.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn1</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_RD_DATA_SWAP_MNL_CSN2-->
            <field>
              <name>QSPI_RD_DATA_SWAP_MNL_CSN2</name>
              <description>Swap the read data inside the QSPIcontroller it-self</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn2</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn2</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_RD_DATA_SWAP_MNL_CSN3-->
            <field>
              <name>QSPI_RD_DATA_SWAP_MNL_CSN3</name>
              <description>Swap the read data inside the QSPIcontroller itself</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual read data swap is disabled for csn3</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read data swap is enabled for csn3</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_MAN_MODE_CONF_CSN1 -->
            <field>
              <name>QSPI_MAN_MODE_CONF_CSN1</name>
              <description>Configures the QSPI flash for Single/Dual/Quad mode operation in manual mode for chip select1 csn1</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Single</name>
                  <description>Single</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name> Dual</name>
                  <description> Dual</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name> Quad</name>
                  <description> Quad</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_MAN_MODE_CONF_CSN2 -->
            <field>
              <name>QSPI_MAN_MODE_CONF_CSN2</name>
              <description>Configures the QSPI flash for Single or Dual or Quad mode operation in manual mode for chip select2 csn2</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Single</name>
                  <description>Single</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name> Dual</name>
                  <description> Dual</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name> Quad</name>
                  <description> Quad</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_MAN_MODE_CONF_CSN3 -->
            <field>
              <name>QSPI_MAN_MODE_CONF_CSN3</name>
              <description>Configures the QSPI flash for Single or Dual or Quad mode operation in manual mode for chip select3 csn3</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Single</name>
                  <description>Single</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name> Dual</name>
                  <description> Dual</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name> Quad</name>
                  <description> Quad</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- loop_back_mode_en  -->
            <field>
              <name>LOOP_BACK_MODE_EN</name>
              <description>Internal loop back test mode. When this is enabled, what ever data driven out will be sampled in to DOUT fifo.</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_manual_ddr_phasse  -->
            <field>
              <name>QSPI_MANUAL_DDR_PHASE</name>
              <description>DDR operations can be performed even in manual mode</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual mode DDR operation enabled.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Manual mode DDR operation disabled</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_rd_data_swap_word_lvl_mnl_csn0 -->
            <field>
              <name>QSPI_RD_DATA_SWAP_WORD_LVL_MNL_CSN0</name>
              <description>Set this bit for read data byte swapping within the word. It is valid only for octa ddr mode. It is valid for csn0.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_rd_data_swap_word_lvl_mnl_csn1 -->
            <field>
              <name>QSPI_RD_DATA_SWAP_WORD_LVL_MNL_CSN1</name>
              <description>Set this bit for read data byte swapping within the word. It is valid only for octa ddr mode. It is valid for csn1.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_rd_data_swap_word_lvl_mnl_csn2 -->
            <field>
              <name>QSPI_RD_DATA_SWAP_WORD_LVL_MNL_CSN2</name>
              <description>Set this bit for read data byte swapping within the word. It is valid only for octa ddr mode. It is valid for csn2.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!--Qspi_rd_data_swap_word_lvl_mnl_csn3-->
            <field>
              <name>QSPI_RD_DATA_SWAP_WORD_LVL_MNL_CSN3</name>
              <description>Set this bit for read data byte swapping within the word. It is valid only for octa ddr mode. It is valid for csn3.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_wr_data_swap_word_lvl_mnl_csn0 -->
            <field>
              <name>QSPI_WR_DATA_SWAP_WORD_LVL_MNL_CSN0</name>
              <description>Set this bit for write data byte swapping within the word. It is valid only for octa ddr mode. It is valid for csn0.</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_wr_data_swap_word_lvl_mnl_csn1 -->
            <field>
              <name>QSPI_WR_DATA_SWAP_WORD_LVL_MNL_CSN1</name>
              <description>Set this bit for write data byte swapping within the word. It is valid only for octa ddr mode. It is valid for csn1.</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_wr_data_swap_word_lvl_mnl_csn2 -->
            <field>
              <name>QSPI_WR_DATA_SWAP_WORD_LVL_MNL_CSN2</name>
              <description>Set this bit for write data byte swapping within the word. It is valid only for octa ddr mode. It is valid for csn2.</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_wr_data_swap_word_lvl_mnl_csn3 -->
            <field>
              <name>QSPI_WR_DATA_SWAP_WORD_LVL_MNL_CSN3</name>
              <description>Set this bit for write data byte swapping within the word. It is valid only for octa ddr mode. It is valid for csn3.</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_manual_dummy_byte_or_bit_mode -->
            <field>
              <name>QSPI_MANUAL_DUMMY_BYTE_OR_BIT_MODE</name>
              <description>Indicates qspi_manual_rd_cnt values are dummy bytes or bits in manual mode.It is used to provide proper dummy cycles in manual read mode.</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Dummy bits mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Dummy bytes mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:26]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_MANUAL_WRITE_DATA2: QSPI Manual Write Data 2 Register -->
        <!-- REGISTER 7 -->
        <register>
          <name>QSPI_MANUAL_WRITE_DATA2</name>
          <description>QSPI Manual Write Data 2 Register</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000100</resetValue>
          <resetMask>0xFF</resetMask>
          <fields>
            <!-- QSPI_MANUAL_WRITE_DATA2 -->
            <field>
              <name>QSPI_MANUAL_WRITE_DATA2</name>
              <description>Number of bits to be written in write mode</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[6:5]</bitRange>
              <access>read-write</access>
            </field>
            <!-- USE_PREV_LENGTH-->
            <field>
              <name>USE_PREV_LENGTH</name>
              <description>Use previous length.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No action</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Uses previously programmed length in [4:0] of this register for next writes</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_clk_enable_hclk -->
            <field>
              <name>QSPI_CLK_ENABLE_HCLK</name>
              <description>Static clock enable for qspi hclock</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:9]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_FIFO_THRLD: QSPI FIFO Threshold Register -->
        <!-- REGISTER 8 -->
        <register>
          <name>QSPI_FIFO_THRLD</name>
          <description>QSPI FIFO Threshold Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000C7</resetValue>
          <resetMask>0x1FF</resetMask>
          <fields>
            <!-- FIFO_AEMPTY_THRLD -->
            <field>
              <name>FIFO_AEMPTY_THRLD</name>
              <description>FIFO almost empty threshold</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- FIFO_AFULL_THRLD -->
            <field>
              <name>FIFO_AFULL_THRLD</name>
              <description>FIFO almost full threshold</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- WFIFO_RESET -->
            <field>
              <name>WFIFO_RESET</name>
              <description>Write fifo reset</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RFIFO_RESET -->
            <field>
              <name>RFIFO_RESET</name>
              <description>Read fifo reset</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_MANUAL_STATUS: QSPI Manual Status Register -->
        <!-- REGISTER 9 -->
        <register>
          <name>QSPI_MANUAL_STATUS</name>
          <description>QSPI Manual Status Register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000598</resetValue>
          <resetMask>0x7FFF</resetMask>
          <fields>
            <!-- QSPI_BUSY-->
            <field>
              <name>QSPI_BUSY</name>
              <description>State of Manual mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>QSPI controller is IDLE in Manual mode.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>A read, write or dummy cycle operation is in process in manual mode.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_S-->
            <field>
              <name>FIFO_FULL_WFIFO_S</name>
              <description>Status indication for Wfifo in manual mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_AFULL_WFIFO_S-->
            <field>
              <name>FIFO_AFULL_WFIFO_S</name>
              <description>Status indication for Wfifo in manual mode</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_EMPTY_WFIFO-->
            <field>
              <name>FIFO_EMPTY_WFIFO</name>
              <description>Status indication for Wfifo in manual mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_AEMPTY_WFIFO-->
            <field>
              <name>FIFO_AEMPTY_WFIFO</name>
              <description>Status indication for Wfifo in manual mode</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_FULL_RFIFO-->
            <field>
              <name>FIFO_FULL_RFIFO</name>
              <description>Status indication for Rfifo in manual mode</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_AFULL_RFIFO-->
            <field>
              <name>FIFO_AFULL_RFIFO</name>
              <description>Status indication for Rfifo in manual mode</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_EMPTY_RFIFO_S-->
            <field>
              <name>FIFO_EMPTY_RFIFO_S</name>
              <description>Status indication for Rfifo in manual mode</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_S-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_S</name>
              <description>Status indication for Rfifo in manual mode</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!--QSPI_MANUAL_RD_CNT-->
            <field>
              <name>QSPI_MANUAL_RD_CNT</name>
              <description>This is a result of 10 bits ORing counter</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No read transactions are in pending</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read transactions are in pending ( to be done)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- AUTO_MODE_FSM_IDLE_SCLK-->
            <field>
              <name>AUTO_MODE_FSM_IDLE_SCLK</name>
              <description>Auto mode idle signal to track auto controller is busy or idle.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Auto mode is busy  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Auto mode is idle</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_AUTO_MODE-->
            <field>
              <name>QSPI_AUTO_MODE</name>
              <description>QSPI controller status.</description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>QSPI controller is in manual mode.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>QSPI controller is in auto mode.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_AUTO_MODE_FRM_REG_SCLK-->
            <field>
              <name>QSPI_AUTO_MODE_FRM_REG_SCLK</name>
              <description>QSPI auto mode status. Valid only when HW_CTRLD_QSPI_MODE_CTRL is zero.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>QSPI controller is hot coded to manual mode operations.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>QSPI controller is hot coded to AUTO mode operations</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- HW_CTRLD_MODE_SCLK-->
            <field>
              <name>HW_CTRLD_MODE_SCLK</name>
              <description>QSPI mode status in HW_CTRLD_MODE</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>QSPI controller is in MANUAL mode.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>QSPI controller is working in AUTO MODE.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- HW_CTRLD_MODE_CTRL_SCLK-->
            <field>
              <name>HW_CTRLD_MODE_CTRL_SCLK</name>
              <description>HW_CTRLD_MODE status</description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>HW_CTRL_MODE is disabled.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>HW_CTRL_MODE is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Aw_ctrl_busy -->
            <field>
              <name>AW_CTRL_BUSY</name>
              <description>Auto write busy indication.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>
            <!--Auto_rd_busy-->
            <field>
              <name>AUTO_RD_BUSY</name>
              <description>Auto read busy indication.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:17]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_INTR_MASK: QSPI Interrupt Mask Register -->
        <!-- REGISTER 10 -->
        <register>
          <name>QSPI_INTR_MASK</name>
          <description>QSPI Interrupt Mask Register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x6F</resetMask>
          <fields>
            <!-- QSPI_INTR_MASK-->
            <field>
              <name>QSPI_INTR_MASK</name>
              <description>Interrupt Status bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>mask the qspi intr</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_MASK-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_MASK</name>
              <description>Read FIFO almost empty interrupt mask</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo almost empty intr mask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_AFULL_RFIFO_MASK-->
            <field>
              <name>FIFO_AFULL_RFIFO_MASK</name>
              <description>Read FIFO almost full interrupt mask</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>read fifo almost full intr mask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_AEMPTY_WFIFO_MASK-->
            <field>
              <name>FIFO_AEMPTY_WFIFO_MASK</name>
              <description>Write FIFO almost empty interrupt mask </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo almost empty intr mask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_AFULL_WFIFO_MASK-->
            <field>
              <name>FIFO_AFULL_WFIFO_MASK</name>
              <description>Write FIFO almost full interrupt mask</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write fifo almost full intr mask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_FULL_WFIFO_MASK-->
            <field>
              <name>FIFO_FULL_WFIFO_MASK</name>
              <description>Write FIFO full interrupt mask</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo full intr mask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_EMPTY_RFIFO_MASK-->
            <field>
              <name>FIFO_EMPTY_RFIFO_MASK</name>
              <description>Read FIFO empty interrupt mask</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo is empty intr mask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Ahb_auto_write_intr_mask -->
            <field>
              <name>AHB_AUTO_WRITE_INTR_MASK</name>
              <description>Rising interrupt for any auto write operation on AHB bus. This bit is a mask for this interrupt</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_auto_base_addr_err_intr_mask -->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_ERR_INTR_MASK</name>
              <description>Rising interrupt when no csn is selected using programmable auto base address. This bit is a mask for this interrupt.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4qspi_manual_blocked_intr_mask -->
            <field>
              <name>M4QSPI_MANUAL_BLOCKED_INTR_MASK</name>
              <description>Rising interrupt when M4 QSPI tries to do manual mode transactions in Common flash mode (3). This bit is a mask for this interrupt.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4_auto_read_out_range_intr_mask -->
            <field>
              <name>M4_AUTO_READ_OUT_RANGE_INTR_MASK</name>
              <description>Rising interrupt when M4 QSPI tries to read TA locations in Common flash mode (3). This bit is a mask for this interrupt.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_INTR_UNMASK: QSPI Interrupt Unmask Register -->
        <!-- REGISTER 11 -->
        <register>
          <name>QSPI_INTR_UNMASK</name>
          <description>QSPI Interrupt Unmask Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- QSPI_INTR_UNMASK-->
            <field>
              <name>QSPI_INTR_UNMASK</name>
              <description>Interrupt Status bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>unmask the qspi intr</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_UN-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_UN</name>
              <description>Read FIFO almost empty interrupt unamsk</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo almost empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_RFIFO_UNMASK-->
            <field>
              <name>FIFO_AFULL_RFIFO_UNMASK</name>
              <description>Read FIFO almost full interrupt unamsk</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>read fifo almost full intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_WFIFO_UNMASK-->
            <field>
              <name>FIFO_AEMPTY_WFIFO_UNMASK</name>
              <description>Write FIFO almost empty interrupt unamsk</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo almost empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_WFIFO_UNMASK-->
            <field>
              <name>FIFO_AFULL_WFIFO_UNMASK</name>
              <description>Write FIFO almost full interrupt unamsk</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write fifo almost full intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_UNMASK-->
            <field>
              <name>FIFO_FULL_WFIFO_UNMASK</name>
              <description>Write FIFO full interrupt unamsk</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo full intr unmask</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_EMPTY_RFIFO_UNMASK-->
            <field>
              <name>FIFO_EMPTY_RFIFO_UNMASK</name>
              <description>Read FIFO empty interrupt unamsk</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo is empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Ahb_auto_write_intr_unmask -->
            <field>
              <name>AHB_AUTO_WRITE_INTR_UNMASK</name>
              <description>Rising interrupt for any auto write operation on AHB bus. This bit is a unmask for this interrupt.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_auto_base_addr_err_intr_unmask-->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_ERR_INTR_UNMASK</name>
              <description>Rising interrupt when M4 QSPI tries to do manual mode transactions in Common flash mode (3). This bit is a unmask for this interrupt.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4qspi_manual_blocked_intr_unmask	 -->
            <field>
              <name>M4QSPI_MANUAL_BLOCKED_INTR_UNMASK</name>
              <description>Rising interrupt when M4 QSPI tries to do manual mode transactions in Common flash mode (3). This bit is a unmask for this interrupt.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4_auto_read_out_range_intr_unmask	 -->
            <field>
              <name>M4_AUTO_READ_OUT_RANGE_INTR_UNMASK</name>
              <description>Rising interrupt when M4 QSPI tries to read TA locations in Common flash mode (3). This bit is a unmask for this interrupt.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:11]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_INTR_STS: QSPI Interrupt Status Register -->
        <!-- REGISTER 12 -->
        <register>
          <name>QSPI_INTR_STS</name>
          <description>QSPI Interrupt Status Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- QSPI_INTR_LVL-->
            <field>
              <name>QSPI_INTR_LVL</name>
              <description>Interrupt Status bit</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>no interrupt</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>qspi raised a interrupt</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_LVL-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_LVL</name>
              <description>Read FIFO reached almost empty threshold </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Read fifo does not reached almost empty threshold</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo reached almost empty threshold</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_RFIFO_LVL-->
            <field>
              <name>FIFO_AFULL_RFIFO_LVL</name>
              <description>Read FIFO reached almost full threshold </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>read FIFO do not reached almost full threshold</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>read FIFO reached almost full threshold</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_WFIFO_LVL-->
            <field>
              <name>FIFO_AEMPTY_WFIFO_LVL</name>
              <description>Write FIFO reached almost empty threshold </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write FIFO not reached almost full threshold.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write FIFO reached almost empty threshold.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_WFIFO_LVL-->
            <field>
              <name>FIFO_AFULL_WFIFO_LVL</name>
              <description>Write FIFO reached almost full threshold </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>write FIFO not reached almost full threshold</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write FIFO reached almost full threshold</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_LVL-->
            <field>
              <name>FIFO_FULL_WFIFO_LVL</name>
              <description>Write FIFO reached full threshold </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Write fifo not got full</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo got full.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--FIFO_EMPTY_RFIFO_LVL-->
            <field>
              <name>FIFO_EMPTY_RFIFO_LVL</name>
              <description>Read FIFO reached empty threshold </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Read FIFO is not empty</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read FIFO is empty</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Ahb_auto_write_intr_lev -->
            <field>
              <name>AHB_AUTO_WRITE_INTR_LEV</name>
              <description>rising interrupt for any auto write operation on AHB bus.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>
            <!-- Qspi_auto_base_addr_err_intr_lvl -->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_ERR_INTR_LVL</name>
              <description>Rising interrupt when no csn is selected using programmable auto base address.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>
            <!-- m4qspi_manual_blocked_lvl -->
            <field>
              <name>M4QSPI_MANUAL_BLOCKED_LVL</name>
              <description>Rising interrupt when M4 QSPI tries to do manual mode transactions in Common flash mode (3).</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>
            <!-- m4_auto_read_out_range_lvl -->
            <field>
              <name>M4_AUTO_READ_OUT_RANGE_LVL</name>
              <description>Rising interrupt when M4 QSPI tries to read TA locations in Common flash mode (3).</description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:11]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_INTR_ACK: QSPI Interrupt Acknowledge Register -->
        <!-- REGISTER 13 -->
        <register>
          <name>QSPI_INTR_ACK</name>
          <description>QSPI Interrupt Acknowledge Register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x7F</resetMask>
          <fields>
            <!-- QSPI_INTR_ACK-->
            <field>
              <name>QSPI_INTR_ACK</name>
              <description>Interrupt Status bit</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>unmask the qspi intr.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_RFIFO_ACK-->
            <field>
              <name>FIFO_AEMPTY_RFIFO_ACK</name>
              <description>Read fifo almost empty interrupt unmask</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo almost empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_RFIFO_ACK-->
            <field>
              <name>FIFO_AFULL_RFIFO_ACK</name>
              <description>Read fifo almost full interrupt unmask</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>read fifo almost full intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AEMPTY_WFIFO_ACK-->
            <field>
              <name>FIFO_AEMPTY_WFIFO_ACK</name>
              <description>Write fifo almost empty interrupt unmask</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo almost empty intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_AFULL_WFIFO_ACK-->
            <field>
              <name>FIFO_AFULL_WFIFO_ACK</name>
              <description>Write fifo almost full interrupt unmask</description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Write fifo almost full intr unmask.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_FULL_WFIFO_ACK-->
            <field>
              <name>FIFO_FULL_WFIFO_ACK</name>
              <description>Write fifo full interrupt unmask</description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>write fifo full intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- FIFO_EMPTY_RFIFO_ACK-->
            <field>
              <name>FIFO_EMPTY_RFIFO_ACK</name>
              <description>Read fifo empty interrupt unmask</description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not touch</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Read fifo is empty intr unmask</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Ahb_auto_write_intr_ack -->
            <field>
              <name>AHB_AUTO_WRITE_INTR_ACK</name>
              <description>Rising interrupt for any auto write operation on AHB bus. This bit is an ack for this interrupt.</description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
            </field>
            <!-- Qspi_auto_base_addr_err_intr_ack -->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_ERR_INTR_ACK</name>
              <description>Rising interrupt when no csn is selected using programmable auto base address. This bit is an ack for this interrupt.</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>
            <!-- m4qspi_manual_blocked_intr_ack -->
            <field>
              <name>M4QSPI_MANUAL_BLOCKED_INTR_ACK</name>
              <description>Rising interrupt when M4 QSPI tries to do manual mode transactions in Common flash mode (3).This bit is an ack for this interrupt.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- m4_auto_read_out_range_intr_ack -->
            <field>
              <name>M4_AUTO_READ_OUT_RANGE_INTR_ACK</name>
              <description>Rising interrupt when M4 QSPI tries to read TA locations in Common flash mode (3). This bit is an ack for this interrupt.</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:11]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_STS_MC: QSPI State Machine Monitor Register -->
        <!-- REGISTER 14 -->
        <register>
          <name>QSPI_STS_MC</name>
          <description>QSPI State Machine Monitor Register</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x6FF</resetMask>
          <fields>
            <!-- BUS_CTRL_PSTATE-->
            <field>
              <name>BUS_CTRL_PSTATE</name>
              <description>Bus controller present state</description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--AUTO_CTRL_PSTATE-->
            <field>
              <name>AUTO_CTRL_PSTATE</name>
              <description>Auto controller present state</description>
              <bitRange>[6:4]</bitRange>
              <access>read-only</access>
            </field>
            <!--QSPI_MASTER_PSTATE-->
            <field>
              <name>QSPI_MASTER_PSTATE</name>
              <description>Qspi master present state</description>
              <bitRange>[9:7]</bitRange>
              <access>read-only</access>
            </field>
            <!--Qspi_manual_rd_cnt-->
            <field>
              <name>QSPI_MANUAL_RD_CNT</name>
              <description>Qspi manual read counter value</description>
              <bitRange>[24:10]</bitRange>
              <access>read-only</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:25]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_1_CSN1: QSPI Auto Controller Configuration 1 CSN1 Register -->
        <!-- REGISTER 15 -->
        <register>
          <name>QSPI_AUTO_CONFIG_1_CSN1</name>
          <description>QSPI Auto Controller Configuration 1 CSN1 Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x87FFFF</resetMask>
          <fields>
            <!-- QSPI_EXT_BYTE_MODE_CSN1-->
            <field>
              <name>QSPI_EXT_BYTE_MODE_CSN1</name>
              <description>Mode of operation of QSPI in instruction phase.</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DUMMY_MODE_CSN1-->
            <field>
              <name>QSPI_DUMMY_MODE_CSN1</name>
              <description>Mode of operation of QSPI in instruction phase</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_ADDR_MODE_CSN1-->
            <field>
              <name>QSPI_ADDR_MODE_CSN1</name>
              <description>Mode of operation of QSPI in instruction phase.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CMD_MODE_CSN1-->
            <field>
              <name>QSPI_CMD_MODE_CSN1</name>
              <description>Mode of operation of QSPI in instruction phase.</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DATA_MODE_CSN1-->
            <field>
              <name>QSPI_DATA_MODE_CSN1</name>
              <description>Mode of operation of QSPI in DATA phase.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI</name>
                  <description>SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_EXTRA_BYTE_CSN1-->
            <field>
              <name>QSPI_EXTRA_BYTE_CSN1</name>
              <description>Value of the extra byte to be transmitted, if the extra byte mode is enabled.</description>
              <bitRange>[17:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_EXTRA_BYTE_EN_CSN1-->
            <field>
              <name>QSPI_EXTRA_BYTE_EN_CSN1</name>
              <description>Mode of operation of QSPI in DATA phase.</description>
              <bitRange>[19:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Not transmit </name>
                  <description>Do not transmit extra byte.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit extra byte</name>
                  <description>Transmit Extra byte after address phase</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Transmit nibble</name>
                  <description>Transmit only first nibble of the byte and maintain Hi-Z on the IO bus for next nibble.</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_wrap-size -->
            <field>
              <name>QSPI_WRAP_SIZE</name>
              <description>Qspi auto wrap size</description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_PG_JUMP_CSN1-->
            <field>
              <name>QSPI_PG_JUMP_CSN1</name>
              <description>QSPI index jump instruction</description>
              <bitRange>[23:23]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Do not use Index jump instruction.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Use Index jump instruction specified by QSPI_PG_JUMP_INST</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_DUMMY_BYTES_INCR_CSN1-->
            <field>
              <name>QSPI_DUMMY_BYTES_INCR_CSN1</name>
              <description>Specifies the number of dummy bytes 0 to 7 for the selected SPI mode.</description>
              <bitRange>[27:24]</bitRange>
              <access>read-only</access>
            </field>
            <!--QSPI_DUMMY_BYTES_WRAP_CSN1-->
            <field>
              <name>QSPI_DUMMY_BYTES_WRAP_CSN1</name>
              <description>Specifies the number of dummy bytes  0 to 7 for the selected SPI mode in case of wrap instruction.</description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_2: QSPI Auto Controller Configuration 2 CSN1 Register -->
        <!-- REGISTER 16 -->
        <register>
          <name>QSPI_AUTO_CONFIG_2_CSN1</name>
          <description>QSPI Auto Controller Configuration 2 CSN1 Register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_RD_SWAP_AUTO_CSN1-->
            <field>
              <name>QSPI_RD_SWAP_AUTO_CSN1</name>
              <description>Swap the read data from the flash in byte order for chip select1 csn1 in auto mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Swap_Disable</name>
                  <description>Swap is disabled.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Swap_Enable</name>
                  <description>Swap is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_ADR_SIZE_16BIT_AUTO_MODE_CSN1-->
            <field>
              <name>QSPI_ADR_SIZE_16BIT_AUTO_MODE_CSN1</name>
              <description>Bit address sent to model</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>24 Bit address is sent to model.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>16 Bit address is sent to model</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_CONTI_RD_EN_CSN1-->
            <field>
              <name>QSPI_CONTI_RD_EN_CSN1</name>
              <description>Continuous read enable bit.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Continuous read disabled</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Continuous read enabled.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--DUMMY_BYTES_WR_RD-->
            <field>
              <name>DUMMY_BYTES_WR_RD</name>
              <description>Dummy bytes to the model to be read or to be write.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Dummy bytes will be read</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Dummy bytes to be write</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--QSPI_DUMMY_BYTES_JMP_CSN1-->
            <field>
              <name>QSPI_DUMMY_BYTES_JMP_CSN1</name>
              <description>Dummy cycles to be selected in case of JUMP</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_RD_INST_CSN1-->
            <field>
              <name>QSPI_RD_INST_CSN1</name>
              <description>Read instruction to be used for the selected SPI modes and when wrap is not needed or supported</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_RD_WRAP_INST_CSN1-->
            <field>
              <name>QSPI_RD_WRAP_INST_CSN1</name>
              <description>Read instruction to be used for the selected SPI modes and when wrap is not needed or supported</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--QSPI_PG_JMP_INST_CSN1-->
            <field>
              <name>QSPI_PG_JMP_INST_CSN1</name>
              <description>Read instruction to be used, when Page jump is to be used.</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_3_CSN0: QSPI Auto Controller Configuration 3 CSN0 Register -->
        <!-- REGISTER 17-->
        <register>
          <name>QSPI_AUTO_CONFIG_3_CSN0</name>
          <description>QSPI Auto Controller Configuration 3 CSN0 Register</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Qspi_dummy_byte_or_bit_csn0 -->
            <field>
              <name>QSPI_DUMMY_BYTE_OR_BIT_CSN0</name>
              <description>Indicates all above mention values are dummy bytes or bits in auto mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>dummy bytes mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>dummy bits mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_DUMMY_BYTES_INCR_CSN0 -->
            <field>
              <name>QSPI_DUMMY_BYTES_INCR_CSN0</name>
              <description>Specifies the number of dummy bytes  for the selected SPI mode. It contains MS nibble for byte.</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DUMMY_BYTES_WRAP_CSN0 -->
            <field>
              <name>QSPI_DUMMY_BYTES_WRAP_CSN0</name>
              <description>Specifies the number of dummy bytes for the selected SPI mode in case of wrap instruction. It contains MS nibble for byte.</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--Qspi_dummy_bytes_jmp_csn0-->
            <field>
              <name>QSPI_DUMMY_BYTES_JMP_CSN0</name>
              <description>Dummy cycles to be selected in case of JUMP. It contains MS nibble of byte.</description>
              <bitRange>[12:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_ddr_cmd_mode_csn0-->
            <field>
              <name>QSPI_DDR_ADDR_MODE_CSN0</name>
              <description>DDR Address mode. In the SPI operation (cmd, addr, extra, dummy, data)</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Address bytes are driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Address bytes are driven in DDR fashion</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_dummy_mode_csn0-->
            <field>
              <name>QSPI_DDR_DUMMY_MODE_CSN0</name>
              <description>DDR dummy byte mode.In the SPI operation (cmd, addr, extra, dummy, data)</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Extra byte is driven in SDR fashion.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Extra byte is driven in DDR fashion.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_extra_mode_csn0-->
            <field>
              <name>QSPI_DDR_EXTRA_MODE_CSN0</name>
              <description>DDR extra byte mode.In the SPI operation (cmd, addr, extra, dummy, data)</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Dummy bytes are driven in SDR fashion.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Dummy bytes are driven in DDR fashion.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_data_mode_csn0-->
            <field>
              <name>QSPI_DDR_DATA_MODE_CSN0</name>
              <description>DDR data mode.In the SPI operation (cmd, addr, extra, dummy, data)</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Data are sampled in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Data are sampled in DDR fashion</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_auto_ddr_cmd_mode_csn0-->
            <field>
              <name>QSPI_AUTO_DDR_CMD_MODE_CSN0</name>
              <description>DDR data mode.In the SPI operation (cmd, addr, extra, dummy, data)</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Command byte is driven in SDR fashion.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Command byte is driven in DDR fashion.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_cmd_size_16bit_csn0-->
            <field>
              <name>QSPI_CMD_SIZE_16BIT_CSN0</name>
              <description>Enable for 16 read cmd size for csn0.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>8 bit read command</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>16 bit read command</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- QSPI_ADR_SIZE_32BIT_AUTO_MODE-->
            <field>
              <name>QSPI_ADR_SIZE_32BIT_AUTO_MODE</name>
              <description>32 bit addressing support enable.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>24/16 Bit address is sent to model.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>32 Bit address is sent to model.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_rd_data_swap_word_lvl_auto_csn0-->
            <field>
              <name>QSPI_RD_DATA_SWAP_WORD_LVL_AUTO_CSN0</name>
              <description>Rd data swap at word level in auto mode for csn0. It is valid for octa mode.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RESERVED3</name>
              <description>reserved3</description>
              <bitRange>[23:21]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>QSPI_RD_INST_CSN0_MSB</name>
              <description>Read instruction MS byte to be used the selected SPI modes and when wrap is not needed or supported.</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_CONFIG_3_CSN0: QSPI Auto Controller Configuration 3 CSN1 Register -->
        <!-- REGISTER 18 -->
        <register>
          <name>QSPI_AUTO_CONFIG_3_CSN1</name>
          <description>QSPI Auto Controller Configuration 3 CSN1 Register</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- Qspi_dummy_byte_or_bit_csn1 -->
            <field>
              <name>QSPI_DUMMY_BYTE_OR_BIT_CSN1</name>
              <description>Indicates all above mention values are dummy bytes or bits in auto mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DUMMY_BYTES_INCR_CSN1 -->
            <field>
              <name>QSPI_DUMMY_BYTES_INCR_CSN1</name>
              <description>Specifies the number of dummy bytes  for the selected SPI mode. It contains MS nibble for byte.</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_DUMMY_BYTES_WRAP_CSN1 -->
            <field>
              <name>QSPI_DUMMY_BYTES_WRAP_CSN1</name>
              <description>Specifies the number of dummy bytes for the selected SPI mode in case of wrap instruction. It contains MS nibble for byte.</description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--Qspi_dummy_bytes_jmp_csn1-->
            <field>
              <name>QSPI_DUMMY_BYTES_JMP_CSN1</name>
              <description>Dummy cycles to be selected in case of JUMP. It contains MS nibble of byte.</description>
              <bitRange>[12:9]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_ddr_addr_mode_csn1-->
            <field>
              <name>QSPI_DDR_ADDR_MODE_CSN1</name>
              <description>DDR address mode for csn1.In the SPI operation (cmd, addr, extra, dummy, data)</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Address bytes are driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Address bytes are driven in DDR fashion</description>
                  <value>6</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_dummy_mode_csn1-->
            <field>
              <name>QSPI_DDR_DUMMY_MODE_CSN1</name>
              <description>DDR dummy byte mode for csn1.In the SPI operation (cmd, addr, extra, dummy, data)</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Extra byte is driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Extra byte is driven in DDR fashion</description>
                  <value>5</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_extra_mode_csn1-->
            <field>
              <name>QSPI_DDR_EXTRA_MODE_CSN1</name>
              <description>DDR extra byte mode for csn1.In the SPI operation (cmd, addr, extra, dummy, data)</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Dummy bytes are driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Dummy bytes are driven in DDR fashion</description>
                  <value>4</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_ddr_data_mode_csn1-->
            <field>
              <name>QSPI_DDR_DATA_MODE_CSN1</name>
              <description>DDR data mode for csn1.In the SPI operation (cmd, addr, extra, dummy, data)</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Data are sampled in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Data are sampled in DDR fashion</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_auto_ddr_cmd_mode_csn1-->
            <field>
              <name>QSPI_AUTO_DDR_CMD_MODE_CSN1</name>
              <description>DDR data mode for csn1.In the SPI operation (cmd, addr, extra, dummy, data)</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Command byte is driven in SDR fashion</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Command byte is driven in DDR fashion</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Qspi_cmd_size_16bit_csn1-->
            <field>
              <name>QSPI_CMD_SIZE_16BIT_CSN1</name>
              <description>Enable for 16 read cmd size for csn1.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>8 bit read command</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>16 bit read command</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reseerved1</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Qspi_rd_data_swap_word_lvl_auto_csn1-->
            <field>
              <name>QSPI_RD_DATA_SWAP_WORD_LVL_AUTO_CSN1</name>
              <description>Rd data swap at word level in auto mode for csn1. It is valid for octa mode.</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[23:21]</bitRange>
              <access>read-write</access>
            </field>
            <!--Qspi_rd_inst_csn1_MSB-->
            <field>
              <name>QSPI_RD_INST_CSN1_MSB</name>
              <description>Read instruction MS byte to be used the selected SPI modes and when wrap is not needed or supported.</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_BASE_ADDR_CSN0 -->
        <!-- REGISTER 19-->
        <register>
          <name>QSPI_AUTO_BASE_ADDR_CSN0</name>
          <description>QSPI Controller auto Base address configuration CSN0 Register</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AUTO_BASE_ADDR_CSN0-->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_CSN0</name>
              <description>Holds the 32 bit base address for select chip select0 in programmable auto csn mode.It is valid only programmable auto csn mode is enabled.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_BASE_ADDR_CSN1 -->
        <!-- REGISTER 20-->
        <register>
          <name>QSPI_AUTO_BASE_ADDR_CSN1</name>
          <description>QSPI Controller auto Base address configuration CSN1 Register</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AUTO_BASE_ADDR_CSN1-->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_CSN1</name>
              <description>Holds the 32 bit base address for select chip select1 in programmable auto csn mode.It is valid only programmable auto csn mode is enabled.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- OCTASPI_BUS_CONTROLLER -->
        <!-- REGISTER 21-->
        <register>
          <name>OCTASPI_BUS_CONTROLLER</name>
          <description>none</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_D7TOD4_DATA_CSN0-->
            <field>
              <name>QSPI_D7TOD4_DATA_CSN0</name>
              <description>Value of SPI_IO7,6,5 and 4 in case of quad/dual/single mode for chip select1 (cs_n0). It is used both in Auto and Manual Mode.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_OEN_CSN0-->
            <field>
              <name>QSPI_D7TOD4_OEN_CSN0</name>
              <description>Direction Control for SPI_IO 7,6,5 and 4 in case of quad/dual/single mode for chip select0 (cs_n0). It is used both in Auto and Manual Mode.</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_DATA_CSN1-->
            <field>
              <name>QSPI_D7TOD4_DATA_CSN1</name>
              <description>Value of SPI_IO7,6,5 and 4 in case of quad/dual/single mode for chip select1 (cs_n1). It is used both in Auto and Manual Mode.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_OEN_CSN1-->
            <field>
              <name>QSPI_D7TOD4_OEN_CSN1</name>
              <description>Direction Control for SPI_IO 7,6,5 and 4 in case of quad/dual/single mode for chip select1 (cs_n1). It is used both in Auto and Manual Mode.</description>
              <bitRange>[15:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_DATA_CSN2-->
            <field>
              <name>QSPI_D7TOD4_DATA_CSN2</name>
              <description>Value of SPI_IO7,6,5 and 4 in case of quad/dual/single mode for chip select2 (cs_n2). It is used both in Auto and Manual Mode.</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_OEN_CSN2-->
            <field>
              <name>QSPI_D7TOD4_OEN_CSN2</name>
              <description>Direction Control for SPI_IO 7,6,5 and 4 in case of quad/dual/single mode for chip select2 (cs_n2). It is used both in Auto and Manual Mode.</description>
              <bitRange>[23:20]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_DATA_CSN3-->
            <field>
              <name>QSPI_D7TOD4_DATA_CSN3</name>
              <description>Value of SPI_IO7,6,5 and 4 in case of quad/dual/single mode for chip select3 (cs_n3). It is used both in Auto and Manual Mode.</description>
              <bitRange>[27:24]</bitRange>
              <access>read-write</access>
            </field>
            <!-- QSPI_D7TOD4_OEN_CSN3-->
            <field>
              <name>QSPI_D7TOD4_OEN_CSN3</name>
              <description>Direction Control for SPI_IO 7,6,5 and 4 in case of quad/dual/single mode for chip select3 (cs_n3). It is used both in Auto and Manual Mode.</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_BASE_ADDR_UNMASK_CSN0 -->
        <!-- REGISTER 22-->
        <register>
          <name>QSPI_AUTO_BASE_ADDR_UNMASK_CSN0</name>
          <description> QSPI in Auto Base address mode for unmasking CSN0 Register</description>
          <addressOffset>0xB4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <fields>
            <!-- QSPI_AUTO_BASE_ADDR_UNMASK_CSN0-->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_UNMASK_CSN0</name>
              <description>Holds the 32 bit base address unmask value for select chip select0 in programmable auto csn mode. It is valid only programmable auto csn mode is enabled.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AUTO_BASE_ADDR_UNMASK_CSN1 -->
        <!-- REGISTER 23-->
        <register>
          <name>QSPI_AUTO_BASE_ADDR_UNMASK_CSN1</name>
          <description> QSPI in Auto Base address mode for unmasking CSN1 Register</description>
          <addressOffset>0xB8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFFFFFFF</resetValue>
          <fields>
            <!-- QSPI_AUTO_BASE_ADDR_UNMASK_CSN1-->
            <field>
              <name>QSPI_AUTO_BASE_ADDR_UNMASK_CSN1</name>
              <description>Holds the 32 bit base address unmask value for select chip select1 in programmable auto csn mode. It is valid only programmable auto csn mode is enabled.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- OCTASPI_BUS_CONTROLLER_2 -->
        <!-- REGISTER 24-->
        <register>
          <name>OCTASPI_BUS_CONTROLLER_2</name>
          <description>QSPI Controller2 in OCTA SPI Mode.</description>
          <addressOffset>0xC4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00020000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- SET_IP_MODE-->
            <field>
              <name>SET_IP_MODE</name>
              <description>This bit enables the qspi interface pins into HiZ mode</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AES_SEC_ENABLE-->
            <field>
              <name>AES_SEC_ENABLE</name>
              <description>This bit enables the AES security enable or not</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <!-- DUAL_MODE_EN-->
            <field>
              <name>DUAL_MODE_EN</name>
              <description>Dual flash mode enable control.
If two csns are cmnnected with the same kind of flash, QSPI can read data (4bit data each flash) from both the flashes at the same point of time (Not in TDM fashion).
If set, both the flashes are accessed at the same point time, otherwise normal operation.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Csn0_2_csn-->
            <field>
              <name>CSN0_2_CSN</name>
              <description>Map csn0 to the programmed csn. It is valid for both manual and auto modes</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOT_VALID</name>
                  <description>Not valid</description>
                  <value>00</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSN0_TO_CSN1</name>
                  <description>Map csn0 to csn1. Reads on csn0 will have data from csn1 also</description>
                  <value>13</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSN0_TO_CSN2</name>
                  <description>Map csn0 to csn2. Reads on csn0 will have data from csn2 also</description>
                  <value>14</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSN0_TO_CSN3</name>
                  <description>Map csn0 to csn3. Reads on csn0 will have data from csn3 also</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Csn1_2_csn-->
            <field>
              <name>CSN1_2_CSN</name>
              <description>Map csn1 to the programmed csn. It is valid for both manual and auto modes</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CSN1_TO_CSN0</name>
                  <description>Map csn1 to csn0. Reads on csn1 will have data from csn1 also</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NOT_VALID</name>
                  <description>Not valid</description>
                  <value>11</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSN1_TO_CSN2</name>
                  <description>Map csn1 to csn2. Reads on csn1 will have data from csn2 also</description>
                  <value>12</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSN1_TO_CSN3</name>
                  <description>Map csn1 to csn3. Reads on csn1 will have data from csn3 also</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Csn2_2_csn-->
            <field>
              <name>CSN2_2_CSN</name>
              <description>Map csn2 to the programmed csn. It is valid for both manual and auto modes</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CSN2_TO_CSN1</name>
                  <description>Map csn2 to csn1. Reads on csn2 will have data from csn0 also</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSN2_TO_CSN1</name>
                  <description>Map csn2 to csn1. Reads on csn2 will have data from csn1 also</description>
                  <value>9</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NOT_VALID</name>
                  <description>Not valid</description>
                  <value>10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSN2_TO_CSN3</name>
                  <description>Map csn2 to csn3. Reads on csn2 will have data from csn3 also.</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- Csn3_2_csn-->
            <field>
              <name>CSN3_2_CSN</name>
              <description>Map csn3 to the programmed csn. It is valid for both manual and auto modes</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CSN3_TO_CSN0</name>
                  <description>Map csn3 to csn0. Reads on csn3 will have data from csn0 also.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSN3_TO_CSN1</name>
                  <description>Map csn3 to csn1. Reads on csn3 will have data from csn0 also</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSN3_TO_CSN2</name>
                  <description>Map csn3 to csn2. Reads on csn3 will have data from csn0 also.</description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NOT_VALID</name>
                  <description>Not valid</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- AES_SEC_ENABLE_SG1-->
            <field>
              <name>AES_SEC_ENABLE_SG1</name>
              <description>This bit enables the AES security enable or not for segment 1</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AES_SEC_ENABLE_SG2-->
            <field>
              <name>AES_SEC_ENABLE_SG2</name>
              <description>This bit enables the AES security enable or not for segment 2</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AES_SEC_ENABLE_SG3-->
            <field>
              <name>AES_SEC_ENABLE_SG3</name>
              <description>This bit enables the AES security enable or not for segment 3</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
            </field>
            <!-- AES_SEC_ENABLE_SG4-->
            <field>
              <name>AES_SEC_ENABLE_SG4</name>
              <description>This bit enables the AES security enable or not for segment 4</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Dual_mode_swap_lines-->
            <field>
              <name>DUAL_MODE_SWAP_LINES</name>
              <description>This bit controls the 8 lines of qspi with 4 bit swap manner.
If this is set, upper 4 lines are swapped with lower 4 lines.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Auto_mode_in_default_en -->
            <field>
              <name>AUTO_MODE_IN_DEFAULT_EN</name>
              <description>Qspi works in auto mode if set this is bit by default.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Otp_key_load -->
            <field>
              <name>OTP_KEY_LOAD</name>
              <description>Enable to load key from OTP/KH</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
            </field>
            <!-- Dual_stage_en_manual-->
            <field>
              <name>DUAL_STAGE_EN_MANUAL</name>
              <description>Dual stage en for dual flash mode. It is valid only if dual_mode_en is set to high. This bit be one, while sending command, address, dummy bytes, and etc. It sends same command &amp; address to both flashes. It should be zero while reading or writing data into flash in dual quad flash mode.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_CONFIG -->
        <!-- REGISTER 25-->
        <register>
          <name>QSPI_AES_CONFIG</name>
          <description>QSPI Controller AES Mode, Key Size and Context switching</description>
          <addressOffset>0xC8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qspi_aes_mode-->
            <field>
              <name>QSPI_AES_MODE</name>
              <description>AES mode of decryption CTR/XTS
0x80 - XTS
0x04 - CTR
others not supported</description>
              <bitRange>[8:0]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_aes_deckeycal	-->
            <field>
              <name>QSPI_AES_DECKEYCAL</name>
              <description>Enables pre-calculation of KEY before decryption operation. Set 1 fot XTS and 0 for CTR
In encryption operations, it is 0. 1 not supported.</description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>use the input key for decryption operations.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>the pre-calculation of the key (K’=KeyExp(K)) is done before starting any data decryption operation</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- flip_key_frm_reg	-->
            <field>
              <name>FLIP_KEY_FRM_REG</name>
              <description>writing 1 to this Flips the 32-bit endian key taken from kh</description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
            </field>
            <!-- flip_key_frm_kh-->
            <field>
              <name>FLIP_KEY_FRM_KH</name>
              <description>writing 1 to this Flips the 32-bit endian key taken from kh</description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_aes_srst-->
            <field>
              <name>QSPI_AES_SRST</name>
              <description>Synchronous soft reset for AES Module. Write only bit. Reading this bit gives alway 0</description>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
            </field>
            <!--flip_lb_data-->
            <field>
              <name>FLIP_LB_DATA</name>
              <description>writing 1 to this Flips the 32-bit endian for data in standalone mode</description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
            </field>
            <!--qspi_aes_lb_decrypt-->
            <field>
              <name>QSPI_AES_LB_DECRYPT</name>
              <description>QSPI standalone mode</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Enables encryption mode in standalone mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Enables decryption mode in standalone mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--qspi_aes_lb_mode_en-->
            <field>
              <name>QSPI_AES_LB_MODE_EN</name>
              <description>QSPI AES LB mode (Standalone mode ) enable.</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Inline mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Standalone mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--key_size-->
            <field>
              <name>KEY_SIZE</name>
              <description>QSPI key size</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>124 bit key</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>256 bit key</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY_IV_VALID -->
        <!-- REGISTER 26-->
        <register>
          <name>QSPI_AES_KEY_IV_VALID</name>
          <description>QSPI Controller AES write Enables for Keys and IVs</description>
          <addressOffset>0xCC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qspi_aes_key1_valid-->
            <field>
              <name>QSPI_AES_KEY1_VALID</name>
              <description>Write enables for AES KEY 1. Denotes which bytes of key1 is valid</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--qspi_aes_lb_iv_valid-->
            <field>
              <name>QSPI_AES_LB_IV_VALID</name>
              <description>Write enables for AES IV1 in standalone mode. Denotes which bytes of IV1 is valid.</description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
            </field>
            <!-- qspi_aes_key2_valid	-->
            <field>
              <name>QSPI_AES_KEY2_VALID</name>
              <description>Write enables for AES KEY 2. Denotes which bytes of key2 is valid</description>
              <bitRange>[19:12]</bitRange>
              <access>read-write</access>
            </field>
            <!-- RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_CMNFLASH_STS -->
        <!-- REGISTER 27 -->
        <register>
          <name>QSPI_CMNFLASH_STS</name>
          <description>QSPI Status in Common flash modes</description>
          <addressOffset>0xD0</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- qspi_manual_blocked-->
            <field>
              <name>QSPI_MANUAL_BLOCKED</name>
              <description>QSPI manual transactions</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No manual transactions</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Manual read/write transaction initiated is blocked.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- auto_read_out_range	-->
            <field>
              <name>AUTO_READ_OUT_RANGE</name>
              <description>Auto read transaction of address</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Auto read transaction is in Address range</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Auto read transaction is out of M4 Address range</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- qspi_auto_rd_busy-->
            <field>
              <name>QSPI_AUTO_RD_BUSY</name>
              <description>Auto read transactions </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>No Auto read transactions</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Auto read transactions in progress.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_LB_DATA_0_3-->
        <!-- REGISTER 28-->
        <register>
          <name>QSPI_AES_LB_DATA_0_3</name>
          <description>QSPI AES in LB (Standalone mode ) for [31:0]</description>
          <addressOffset>0xD4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_LB_DIN_0_3-->
            <field>
              <name>QSPI_AES_LB_DIN_0_3</name>
              <description>write 3-0 bytes of aes standalone mode input data as 0 referred as lsb in the data in</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--QSPI_AES_LB_DOUT_0_3-->
            <field>
              <name>QSPI_AES_LB_DOUT_0_3</name>
              <description>read 3-0 bytes of aes standalone mode output data as 0 referred as lsb in the data out
Inline mode input data is loop back as out data</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_LB_DATA_4_7-->
        <!-- REGISTER 29-->
        <register>
          <name>QSPI_AES_LB_DATA_4_7</name>
          <description>QSPI AES in LB (Standalone mode ) for [63:32]</description>
          <addressOffset>0xD8</addressOffset>
          <size>32</size>
          <access>read-writeOnce</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_LB_DIN_4_7-->
            <field>
              <name>QSPI_AES_LB_DIN_4_7</name>
              <description>write 7-4 bytes of aes standalone mode input data as 0 referred as lsb in the data in</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--QSPI_AES_LB_DOUT_4_7-->
            <field>
              <name>QSPI_AES_LB_DOUT_4_7</name>
              <description>read 7-4 bytes of aes standalone mode output data as 0 referred as lsb in the data out
Inline mode input data is loop back as out data</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_LB_DATA_8_B-->
        <!-- REGISTER 30-->
        <register>
          <name>QSPI_AES_LB_DATA_8_B</name>
          <description>QSPI AES in LB (Standalone mode ) for [95:64]</description>
          <addressOffset>0xDC</addressOffset>
          <size>32</size>
          <access>read-writeOnce</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_LB_DIN_8_B-->
            <field>
              <name>QSPI_AES_LB_DIN_8_B</name>
              <description>write 11-8 bytes of aes standalone mode input data as 0 referred as lsb in the data in</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--QSPI_AES_LB_DOUT_8_B-->
            <field>
              <name>QSPI_AES_LB_DOUT_8_B</name>
              <description>read 11-8 bytes of aes standalone mode output data as 0 referred as lsb in the data out
Inline mode input data is loop back as out data</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_LB_DATA_C_F-->
        <!-- REGISTER 31-->
        <register>
          <name>QSPI_AES_LB_DATA_C_F</name>
          <description>QSPI AES in LB (Standalone mode ) for [127:96]</description>
          <addressOffset>0xE0</addressOffset>
          <size>32</size>
          <access>read-writeOnce</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_LB_DIN_C_F-->
            <field>
              <name>QSPI_AES_LB_DIN_C_F</name>
              <description>write 15-12 bytes of aes standalone mode input data as 0 referred as lsb in the data in</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--QSPI_AES_LB_DOUT_C_F-->
            <field>
              <name>QSPI_AES_LB_DOUT_C_F</name>
              <description>read 15-12 bytes of aes standalone mode output data as 0 referred as lsb in the data out
Inline mode input data is loop back as out data</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_SEC_SEG_LS_ADDR_1-->
        <!-- REGISTER 32-->
        <register>
          <name>QSPI_AES_SEC_SEG_LS_ADDR_1</name>
          <description>QSPI Controller AES lower boundary address of 1st segment</description>
          <addressOffset>0xE4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_SEC_SEG_LS_ADDR_1-->
            <field>
              <name>QSPI_AES_SEC_SEG_LS_ADDR_1</name>
              <description>This register specifies the lower boundary address of  1st segment</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_SEC_SEG_MS_ADDR_1-->
        <!-- REGISTER 33-->
        <register>
          <name>QSPI_AES_SEC_SEG_MS_ADDR_1</name>
          <description>QSPI Controller AES upper boundary address of 1st segment</description>
          <addressOffset>0xE8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_SEC_SEG_MS_ADDR_1-->
            <field>
              <name>QSPI_AES_SEC_SEG_MS_ADDR_1</name>
              <description>This register specifies the upper boundary address of  1st segment</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_SEC_SEG_LS_ADDR_2-->
        <!-- REGISTER 34-->
        <register>
          <name>QSPI_AES_SEC_SEG_LS_ADDR_2</name>
          <description>QSPI Controller AES lower boundary address of 2nd segment</description>
          <addressOffset>0xEC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_SEC_SEG_LS_ADDR_2-->
            <field>
              <name>QSPI_AES_SEC_SEG_LS_ADDR_2</name>
              <description>This register specifies the lower boundary address of  2nd  segment </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_SEC_SEG_MS_ADDR_2-->
        <!-- REGISTER 35-->
        <register>
          <name>QSPI_AES_SEC_SEG_MS_ADDR_2</name>
          <description>QSPI Controller AES upper boundary address of 2nd segment</description>
          <addressOffset>0xF0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_SEC_SEG_MS_ADDR_2-->
            <field>
              <name>QSPI_AES_SEC_SEG_MS_ADDR_2</name>
              <description>This register specifies the upper boundary address of  2nd segment </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_SEC_SEG_LS_ADDR_3-->
        <!-- REGISTER 36-->
        <register>
          <name>QSPI_AES_SEC_SEG_LS_ADDR_3</name>
          <description>QSPI Controller AES lower boundary address of 3rd segment</description>
          <addressOffset>0xF4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_SEC_SEG_LS_ADDR_3-->
            <field>
              <name>QSPI_AES_SEC_SEG_LS_ADDR_3</name>
              <description>This register specifies the lower boundary address of  3rd segment </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_SEC_SEG_MS_ADDR_3-->
        <!-- REGISTER 37-->
        <register>
          <name>QSPI_AES_SEC_SEG_MS_ADDR_3</name>
          <description>QSPI Controller AES upper boundary address of 3rd segment</description>
          <addressOffset>0xF8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_SEC_SEG_MS_ADDR_3-->
            <field>
              <name>QSPI_AES_SEC_SEG_MS_ADDR_3</name>
              <description>This register specifies the upper boundary address of  3rd segment </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_SEC_SEG_LS_ADDR_4-->
        <!-- REGISTER 38-->
        <register>
          <name>QSPI_AES_SEC_SEG_LS_ADDR_4</name>
          <description>QSPI Controller AES lower boundary address of 4th segment</description>
          <addressOffset>0xFC</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_SEC_SEG_LS_ADDR_4-->
            <field>
              <name>QSPI_AES_SEC_SEG_LS_ADDR_4</name>
              <description>This register specifies the lower boundary address of  4th segment </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_SEC_SEG_MS_ADDR_4-->
        <!-- REGISTER 39-->
        <register>
          <name>QSPI_AES_SEC_SEG_MS_ADDR_4</name>
          <description>QSPI Controller AES upper boundary address of 4th segment</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_SEC_SEG_MS_ADDR_4-->
            <field>
              <name>QSPI_AES_SEC_SEG_MS_ADDR_4</name>
              <description>This register specifies the upper boundary address of  4th  segment </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_SRAM_CTRL_CSN0_REG-->
        <!-- REGISTER 40-->
        <register>
          <name>QSPI_SRAM_CTRL_CSN0_REG</name>
          <description>SRAM CTRL register of the QSPI Controller CSN0 register</description>
          <addressOffset>0x104</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00004000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--bit_8_mode-->
            <field>
              <name>BIT_8_MODE</name>
              <description>Flash 8bit (1 byte) boundary mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Flash is not with 8bit (1 byte) boundary.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Flash is with 8bit (1 byte) boundary.</description>
                  <value>23</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--byte_32_mode-->
            <field>
              <name>BIT_32_MODE</name>
              <description>Flash 32 byte boundary mode.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Flash is not with 32 byte boundary.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Flash is with 32 byte boundary.</description>
                  <value>22</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--addr_16bit_mode-->
            <field>
              <name>ADDR_16BIT_MODE</name>
              <description>Send only lower 16bits of Address enable.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>24 address bit flash is connected.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>16 address bit flash is connected.</description>
                  <value>21</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--cmd_mode-->
            <field>
              <name>CMD_MODE</name>
              <description>writing cmd mode</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Single SPI</name>
                  <description>Single SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>19</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>20</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OCTA SPI</name>
                  <description>OCTA SPI</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--addr_mode-->
            <field>
              <name>ADDR_MODE</name>
              <description>writing address mode</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Single SPI</name>
                  <description>Single SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>17</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>18</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OCTA SPI</name>
                  <description>OCTA SPI</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--data_mode-->
            <field>
              <name>DATA_MODE</name>
              <description>writing data mode</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Single SPI</name>
                  <description>Single SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>15</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>16</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OCTA SPI</name>
                  <description>OCTA SPI</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--wr_data_swap-->
            <field>
              <name>WR_DATA_SWAP</name>
              <description>writing data swap</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>WR DATA is not swapped</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>WR DATA is swapped</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--wr_cmd-->
            <field>
              <name>WR_CMD</name>
              <description>Command to be used for writing.</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED3-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_SRAM_CTRL_CSN1_REG-->
        <!-- REGISTER 41-->
        <register>
          <name>QSPI_SRAM_CTRL_CSN1_REG</name>
          <description>SRAM CTRL register of the QSPI Controller CSN1 register</description>
          <addressOffset>0x108</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00004000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--bit_8_mode-->
            <field>
              <name>BIT_8_MODE</name>
              <description>Flash 8bit (1 byte) boundary mode.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Flash is not with 8bit (1 byte) boundary.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Flash is with 8bit (1 byte) boundary.</description>
                  <value>23</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--byte_32_mode-->
            <field>
              <name>BIT_32_MODE</name>
              <description>Flash 32 byte boundary mode.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>Flash is not with 32 byte boundary.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>Flash is with 32 byte boundary.</description>
                  <value>22</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--addr_16bit_mode-->
            <field>
              <name>ADDR_16BIT_MODE</name>
              <description>Send only lower 16bits of Address enable.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>24 address bit flash is connected.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>16 address bit flash is connected.</description>
                  <value>21</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:3]</bitRange>
              <access>read-write</access>
            </field>
            <!--cmd_mode-->
            <field>
              <name>CMD_MODE</name>
              <description>writing cmd mode</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Single SPI</name>
                  <description>Single SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>19</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>20</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OCTA SPI</name>
                  <description>OCTA SPI</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--addr_mode-->
            <field>
              <name>ADDR_MODE</name>
              <description>writing address mode</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Single SPI</name>
                  <description>Single SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>17</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>18</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OCTA SPI</name>
                  <description>OCTA SPI</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--data_mode-->
            <field>
              <name>DATA_MODE</name>
              <description>writing data mode</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Single SPI</name>
                  <description>Single SPI</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Dual SPI</name>
                  <description>Dual SPI</description>
                  <value>15</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Quad SPI</name>
                  <description>Quad SPI</description>
                  <value>16</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OCTA SPI</name>
                  <description>OCTA SPI</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--wr_data_swap-->
            <field>
              <name>WR_DATA_SWAP</name>
              <description>writing data swap</description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>WR DATA is not swapped</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>WR DATA is swapped</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
            </field>
            <!--wr_cmd-->
            <field>
              <name>WR_CMD</name>
              <description>Command to be used for writing.</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED3-->
            <field>
              <name>RESERVED3</name>
              <description>Reserved3</description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SEMI_AUTO_MODE_ADDR_REG-->
        <!-- REGISTER 42-->
        <register>
          <name>SEMI_AUTO_MODE_ADDR_REG</name>
          <description>QSPI Controller in SEMI AUTO mode for address</description>
          <addressOffset>0x11C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Semi_auto_mode_addr-->
            <field>
              <name>SEMI_AUTO_MODE_ADDR</name>
              <description>Byte address to read the data from flash in semi auto mode. It is valid only semi auto mode enable bit is asserted.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SEMI_AUTO_MODE_CONFIG_REG-->
        <!-- REGISTER 43-->
        <register>
          <name>SEMI_AUTO_MODE_CONFIG_REG</name>
          <description>QSPI Controller in SEMI AUTO mode for Configuration</description>
          <addressOffset>0x120</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000210</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--qspi_semi_auto_bsize-->
            <field>
              <name>QSPI_SEMI_AUTO_BSIZE</name>
              <description>This is burst size to read data from flash in semi auto mode. To get burst size in bytes, consider qspi_semi_auto_hsize also.
qspi_semi_auto_bsize is non-zero value. 0x00 is not supported and invalid.</description>
              <bitRange>[5:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>B_SIZE</name>
                  <description>qspi_semi_auto_bsize</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>H_SIZE</name>
                  <description>qspi_semi_auto_hsize</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <!--qspi_semi_auto_hsize-->
            <field>
              <name>QSPI_SEMI_AUTO_HSIZE</name>
              <description>Indicates number of bytes valid in each transaction.24bytes mode is not supported because this hsize to be similar to ahb ahb hsize signal.
It is valid only semi auto mode enable bit is asserted.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1_BYTE</name>
                  <description>1 byte valid</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2_BYTES</name>
                  <description>2 bytes valid</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>4_BYTES</name>
                  <description>4 bytes valid</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Reserved</name>
                  <description>Reserved</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:10]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--SEMI_AUTO_MODE_CONFIG2_REG-->
        <!-- REGISTER 44-->
        <register>
          <name>SEMI_AUTO_MODE_CONFIG2_REG</name>
          <description>QSPI Controller in SEMI AUTO mode for Configuration 2</description>
          <addressOffset>0x124</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Qspi_semi_auto_rd_cnt-->
            <field>
              <name>QSPI_SEMI_AUTO_RD_CNT</name>
              <description>Total number of bytes to be read flash continuously from the address given by SEMI_AUTO_MODE_ADDR_REG. After reading complete data according to this count,  qspi_semi_auto_rd_busy is de-asserted.</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--qspi_semi_auto_mode_en-->
            <field>
              <name>QSPI_SEMI_AUTO_MODE_EN</name>
              <description>Enable for semi auto mode read operation. Make sure manual mode read/write operation is completed before asserting this bit. Either manual mode or semi auto mode will work at a time. Don’t start any manual mode operation when this bit is asserted.

Qspi_auto_mode and semi_auto_mode share qspi bus bandwidth and work simultaneously.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--qspi_semi_auto_rd_busy-->
            <field>
              <name>QSPI_SEMI_AUTO_RD_BUSY</name>
              <description>Indicates status of semi auto mode read status. If it is high, semi auto mode read operation is progressing. It is

It is valid only semi auto mode enable bit is asserted.</description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:14]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_BUS_MODE2_REG-->
        <!-- REGISTER 45-->
        <register>
          <name>QSPI_BUS_MODE2_REG</name>
          <description>QSPI Controller Bus in mode2.</description>
          <addressOffset>0x128</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--PREFETCH_ENBLD_MSTR_ID-->
            <field>
              <name>PREFETCH_ENBLD_MSTR_ID</name>
              <description>Holds the programmable prefetch enabled AHB master ID. This is commonly used for enabling prefetch for icache master. </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--PREFETCH_EN_FOR_ICACHE_MSTR-->
            <field>
              <name>PREFETCH_EN_FOR_ICACHE_MSTR</name>
              <description>Prefetch enable for icache AHB master.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:5]</bitRange>
              <access>read-write</access>
            </field>
            <!--Qspi_prefetch_enbld_trans_bytes-->
            <field>
              <name>QSPI_PREFETCH_ENBLD_TRANS_BYTES</name>
              <description>Programmable prefetch enabled AHB master transfer bytes. Assume this is used for icache and dma ahb master access in auto mode.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_SEC_KEY_FRM_KH_REG-->
        <!-- REGISTER 46-->
        <register>
          <name>QSPI_AES_SEC_KEY_FRM_KH_REG</name>
          <description>QSPI Controller AES SEC KEY FRM_KH mode.</description>
          <addressOffset>0x12C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000012</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--Start_loading_sec_key_frm_kh-->
            <field>
              <name>START_LOADING_SEC_KEY_FRM_KH</name>
              <description>Start Security key loading from KH. It self-clear bit. After setting the key loading bit, wait for de-assertion of this bit. Hardware resets this bit after key loading done.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <!--Loading_sec_key_frm_kh-->
            <field>
              <name>LOADING_SEC_KEY_FRM_KH</name>
              <description>Indicates security key loading status from KH</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <!--Sec_key_reading_interval-->
            <field>
              <name>SEC_KEY_READING_INTERVAL</name>
              <description>Security key reading interval
KH key reading will happened at this rate, which is soc clock divided by this value. default reading rate is soc clock divided by 10.</description>
              <bitRange>[4:1]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AUTO_CONITNUE_FETCH_CTRL_REG-->
        <!-- REGISTER 47-->
        <register>
          <name>QSPI_AUTO_CONITNUE_FETCH_CTRL_REG</name>
          <description>QSPI Controller in Auto Continue Fetch mode.</description>
          <addressOffset>0x130</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000010</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--continue_fetch_wait_timeout_value_frm_reg-->
            <field>
              <name>CONTINUE_FETCH_WAIT_TIMEOUT_VALUE_FRM_REG</name>
              <description>Maximum Continue fetch wait time between two qspi auto reads. After this time out, qspi auto controller will  deassert the CSN.</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--Continue_fetch_en-->
            <field>
              <name>CONTINUE_FETCH_EN</name>
              <description>Continue fetch feature enable. If this mode is enabled &amp; consecutive address is issued, It will continue reading of data in auto mode without de-asserting CSN. It saves command, address and dummy cycles phases. It has timeout option also. If consecutive address is given in the programmable specified time or non consecutive address is given, it deassert the CSN. It is valid only for auto mode. Disable this bit before any manual mode transactions. It is taken care automatically by qspi controller in hardware controlled auto mode.

  If continuous mode is enable, clock ratio between qspi clock and soc clock should 2:1, 1:1, 1:2, 1:3, .. 1:x.</description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[31:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY1_0_3 -->
        <!-- REGISTER 48-->
        <register>
          <name>QSPI_AES_KEY1_0_3</name>
          <description>QSPI Controller AES KEY1 from 0 to 3 bytes</description>
          <addressOffset>0x134</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY1_0_3-->
            <field>
              <name>QSPI_AES_KEY1_0_3</name>
              <description>To hold first 3-0  bytes of  aes key1 as 0 referred as lsb in the key</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY1_4_7 -->
        <!-- REGISTER 49 -->
        <register>
          <name>QSPI_AES_KEY1_4_7</name>
          <description>QSPI Controller AES KEY1 from 4 to 7 bytes</description>
          <addressOffset>0x138</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY1_4_7-->
            <field>
              <name>QSPI_AES_KEY1_4_7</name>
              <description>To hold first 7-4 bytes of  aes key1 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY1_8_B -->
        <!-- REGISTER 50 -->
        <register>
          <name>QSPI_AES_KEY1_8_B</name>
          <description>QSPI Controller AES KEY1 from 8 to B bytes</description>
          <addressOffset>0x13C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY1_8_B-->
            <field>
              <name>QSPI_AES_KEY1_8_B</name>
              <description>To hold first 11-8 bytes of  aes key1 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY1_C_F -->
        <!-- REGISTER 51 -->
        <register>
          <name>QSPI_AES_KEY1_C_F</name>
          <description> QSPI Controller AES KEY1 from C to F bytes</description>
          <addressOffset>0x140</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY1_C_F-->
            <field>
              <name>QSPI_AES_KEY1_C_F</name>
              <description>To hold first 11-8 bytes of  aes key1 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_KEY1_10_13-->
        <!-- REGISTER 52-->
        <register>
          <name>QSPI_AES_KEY1_10_13</name>
          <description>QSPI Controller AES KEY1 from 10 to 13 bytes</description>
          <addressOffset>0x144</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_KEY1_10_13-->
            <field>
              <name>QSPI_AES_KEY1_10_13</name>
              <description>To hold first 19-16  bytes of  aes key1 as 0 referred as lsb in the key</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_KEY1_14_17-->
        <!-- REGISTER 53-->
        <register>
          <name>QSPI_AES_KEY1_14_17</name>
          <description> QSPI Controller AES KEY1 from 14 to 17 bytes</description>
          <addressOffset>0x148</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_KEY1_14_17-->
            <field>
              <name>QSPI_AES_KEY1_14_17</name>
              <description>To hold first 23-20 bytes of  aes key1 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_KEY1_18_1B-->
        <!-- REGISTER 54-->
        <register>
          <name>QSPI_AES_KEY1_18_1B</name>
          <description> QSPI Controller AES KEY1 from 18 to 1B bytes</description>
          <addressOffset>0x14C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_KEY1_18_1B-->
            <field>
              <name>QSPI_AES_KEY1_18_1B</name>
              <description>To hold first 27-24 bytes of  aes key1 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_KEY1_1C_1F-->
        <!-- REGISTER 55-->
        <register>
          <name>QSPI_AES_KEY1_1C_1F</name>
          <description>QSPI Controller AES KEY1 from 1C to 1F bytes</description>
          <addressOffset>0x150</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_KEY1_1C_1F-->
            <field>
              <name>QSPI_AES_KEY1_1C_1F</name>
              <description>To hold first 31-28  bytes of  aes key1 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY2_0_3 -->
        <!-- REGISTER 56 -->
        <register>
          <name>QSPI_AES_KEY2_0_3</name>
          <description>QSPI Controller AES KEY2 from 0 to 3 bytes</description>
          <addressOffset>0x154</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY2_0_3-->
            <field>
              <name>QSPI_AES_KEY2_0_3</name>
              <description>To hold first 3-0  bytes of  aes key2 as 0 referred as lsb in the key</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY2_4_7 -->
        <!-- REGISTER 57-->
        <register>
          <name>QSPI_AES_KEY2_4_7</name>
          <description>QSPI Controller AES KEY2 from 4 to 7 bytes</description>
          <addressOffset>0x158</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY2_4_7-->
            <field>
              <name>QSPI_AES_KEY2_4_7</name>
              <description>To hold first 7-4 bytes of  aes key2 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY2_8_B -->
        <!-- REGISTER 58-->
        <register>
          <name>QSPI_AES_KEY2_8_B</name>
          <description>QSPI Controller AES KEY2 from 8 to B bytes</description>
          <addressOffset>0x15C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY2_8_B-->
            <field>
              <name>QSPI_AES_KEY2_8_B</name>
              <description>To hold first 11-8 bytes of  aes key2 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- QSPI_AES_KEY2_C_F -->
        <!-- REGISTER 59-->
        <register>
          <name>QSPI_AES_KEY2_C_F</name>
          <description>QSPI Controller AES KEY2 from C to F bytes</description>
          <addressOffset>0x160</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!-- QSPI_AES_KEY2_C_F-->
            <field>
              <name>QSPI_AES_KEY2_C_F</name>
              <description>To hold first 15-12  bytes of  aes key2 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_KEY2_10_13-->
        <!-- REGISTER 60-->
        <register>
          <name>QSPI_AES_KEY2_10_13</name>
          <description> QSPI Controller AES KEY2 from 10 to 13 bytes</description>
          <addressOffset>0x164</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_KEY2_10_13-->
            <field>
              <name>QSPI_AES_KEY2_10_13</name>
              <description>To hold first 19-16  bytes of  aes KEY2 as 0 referred as lsb in the key</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_KEY2_14_17-->
        <!-- REGISTER 61-->
        <register>
          <name>QSPI_AES_KEY2_14_17</name>
          <description> QSPI Controller AES KEY2 from 14 to 17 bytes</description>
          <addressOffset>0x168</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_KEY2_14_17-->
            <field>
              <name>QSPI_AES_KEY2_14_17</name>
              <description>To hold first 23-20 bytes of  aes KEY2 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_KEY2_18_1B-->
        <!-- REGISTER 62-->
        <register>
          <name>QSPI_AES_KEY2_18_1B</name>
          <description>QSPI Controller AES KEY2 from 18 to 1B bytes</description>
          <addressOffset>0x16C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_KEY2_18_1B-->
            <field>
              <name>QSPI_AES_KEY2_18_1B</name>
              <description>To hold first 27-24 bytes of  aes KEY2 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_KEY2_1C_1F-->
        <!-- REGISTER 63-->
        <register>
          <name>QSPI_AES_KEY2_1C_1F</name>
          <description>QSPI Controller AES KEY2 from 1C to 1F bytes</description>
          <addressOffset>0x170</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_KEY2_1C_1F-->
            <field>
              <name>QSPI_AES_KEY2_1C_1F</name>
              <description>To hold first 31-28  bytes of  aes KEY2 as 0 referred as lsb</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_IV1_0_3-->
        <!-- REGISTER 64-->
        <register>
          <name>QSPI_AES_IV1_0_3</name>
          <description>QSPI Controller AES IV1 from 0 to 3 bytes in LB mode</description>
          <addressOffset>0x174</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_LB_IV-->
            <field>
              <name>QSPI_AES_LB_IV</name>
              <description>To hold first 3-0  bytes of  QSPI AES IV1 as 0 referred as lsb in the IV in stadalone mode</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_IV1_4_7-->
        <!-- REGISTER 65-->
        <register>
          <name>QSPI_AES_IV1_4_7</name>
          <description>QSPI Controller AES IV1 from 4 to 7 bytes in LB mode</description>
          <addressOffset>0x178</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_LB_IV-->
            <field>
              <name>QSPI_AES_LB_IV</name>
              <description>To hold first 7-4  bytes of  QSPI AES IV1 as 0 referred as lsb in the IV in stadalone mode</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_IV1_8_B-->
        <!-- REGISTER 66-->
        <register>
          <name>QSPI_AES_IV1_8_B</name>
          <description>QSPI Controller AES IV1 from 8 to B bytes in LB mode</description>
          <addressOffset>0x17C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_LB_IV-->
            <field>
              <name>QSPI_AES_LB_IV</name>
              <description>To hold first B-8  bytes of  QSPI AES IV1 as 0 referred as lsb in the IV in stadalone mode</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_IV1_C_F-->
        <!-- REGISTER 67-->
        <register>
          <name>QSPI_AES_IV1_C_F</name>
          <description>QSPI Controller AES IV1 from 8 to B bytes in LB mode</description>
          <addressOffset>0x180</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--QSPI_AES_LB_IV-->
            <field>
              <name>QSPI_AES_LB_IV</name>
              <description>To hold first F-C  bytes of  QSPI AES IV1 as F referred as msb in the IV in stadalone mode</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!--QSPI_AES_LB_STATUS-->
        <!-- REGISTER 68-->
        <register>
          <name>QSPI_AES_LB_STATUS</name>
          <description>QSPI Controller AES IV1 from 8 to B bytes in LB mode</description>
          <addressOffset>0x184</addressOffset>
          <size>32</size>
          <access>read-writeOnce</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <!--qspi_aes_lb_dout_ready-->
            <field>
              <name>QSPI_AES_LB_DOUT_READY</name>
              <description>Denotes the firmware is ready to read to output data.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--aes_lb_dout_valid-->
            <field>
              <name>AES_LB_DOUT_VALID</name>
              <description>Denotes validity of out data of QSPI AES in loop back mode</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <!--qspi_aes_lb_din_ready-->
            <field>
              <name>QSPI_AES_LB_DIN_READY</name>
              <description>Denotes ready status of QSPI AES in loop back mode</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <!--qspi_aes_lb_busy-->
            <field>
              <name>QSPI_AES_LB_BUSY</name>
              <description>Denotes busy status of QSPI AES in loop back mode</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <!--RESERVED1-->
            <field>
              <name>RESERVED1</name>
              <description>Reserved1</description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--qspi_aes_lb_invalid_bytes-->
            <field>
              <name>QSPI_AES_LB_INVALID_BYTES</name>
              <description>Denotes number of invalid bytes in data input in loop back mode.</description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
            </field>
            <!--RESERVED2-->
            <field>
              <name>RESERVED2</name>
              <description>Reserved2</description>
              <bitRange>[31:13]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!--Low power Domain-->
    <peripheral>
      <name>Low_Power_Domain</name>
      <version>1.0</version>
      <description>The use of this is to store some information in ULP over wake-ups to reduce wake-up time 
				   </description>
      <groupName>Low_Power_Domain</groupName>
      <baseAddress>0x24048400</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x00</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <!-- ULPSS_PWRCTRL_SET_REG:ULPSS power control set register-->
        <!-- REGISTER 1-->
        <register>
          <name>ULPSS_PWRCTRL_SET_REG</name>
          <description>ULPSS power control set register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0fec0000</resetValue>
          <fields>
            <!-- RESERVED1 -->
            <field>
              <name> RESERVED1 </name>
              <description>reserved1</description>
              <bitRange>[17:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--#changed-->
            <!--PWRGATE_EN_N_ULP_MISC-->
            <field>
              <name>PWRGATE_EN_N_ULP_MISC</name>
              <description>Enables power to the MISC.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This enables power to the MISC.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRGATE_EN_N_ULP_CAP-->
            <field>
              <name>PWRGATE_EN_N_ULP_CAP</name>
              <description>Enables power to the ULPSS CAP</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>this enables power to the ULPSS CAP.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!--#changed-->
            <!--PWRCTRL_UART-->
            <field>
              <name>PWRCTRL_UART</name>
              <description>Enables power to the UART</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>this enables power to the UART.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_SSI-->
            <field>
              <name>PWRCTRL_SSI</name>
              <description>Enables power to the SPI/SSI</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>this enables power to the SPI/SSI.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_I2S-->
            <field>
              <name>PWRCTRL_I2S</name>
              <description>Enables power to the I2S</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>this enables power to the I2S.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_I2C-->
            <field>
              <name>PWRCTRL_I2C</name>
              <description>Enables power to the I2C</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>this enables power to the I2C.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_ADC_DAC-->
            <field>
              <name>PWRCTRL_ADC_DAC</name>
              <description>Enables power to the ADC/DAC</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>this enables power to the ADC/DAC.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_IR-->
            <field>
              <name>PWRCTRL_IR</name>
              <description>Enables power to the IR</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>this enables power to the IR.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_DMA-->
            <field>
              <name>PWRCTRL_DMA</name>
              <description>Enables power to the DMA</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>this enables power to the DMA</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED3 -->
            <field>
              <name>RESERVED3</name>
              <description>RESERVED3</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ULPSS_PWRCTRL_CLEAR_REG:ULPSS power control clear register-->
        <!-- REGISTER 2-->
        <register>
          <name>ULPSS_PWRCTRL_CLEAR_REG</name>
          <description>ULPSS power control clear register</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0fec0000</resetValue>
          <fields>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[17:0]</bitRange>
              <access>read-write</access>
            </field>
            <!--#changed-->
            <!--PWRGATE_EN_N_ULP_MISC-->
            <field>
              <name>PWRGATE_EN_N_ULP_MISC</name>
              <description>Disables power to the MISC.</description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables power to the MISC</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRGATE_EN_N_ULP_CAP-->
            <field>
              <name>PWRGATE_EN_N_ULP_CAP</name>
              <description>Disables power to the ULPSS CAP.</description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables power to the ULPSS CAP</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
            </field>
            <!--#changed-->
            <!--PWRCTRL_UART-->
            <field>
              <name>PWRCTRL_UART</name>
              <description>Disables power to the UART</description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables power to the UART</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_SSI-->
            <field>
              <name>PWRCTRL_SSI</name>
              <description>Disables power to the SPI/SSI</description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables power to the SPI/SSI</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_I2S-->
            <field>
              <name>PWRCTRL_I2S</name>
              <description>Disables power to the I2S</description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables power to the I2S</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_I2C-->
            <field>
              <name>PWRCTRL_I2C</name>
              <description>Disables power to the I2C</description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables power to the I2C</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_ADC_DAC-->
            <field>
              <name>PWRCTRL_ADC_DAC</name>
              <description>Disables power to the ADC/DAC</description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables power to the ADC/DAC</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_IR-->
            <field>
              <name>PWRCTRL_IR</name>
              <description>Disables power to the IR</description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables power to the IR</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!--#changed-->
            <!--PWRCTRL_DMA-->
            <field>
              <name>PWRCTRL_DMA</name>
              <description>Disables power to the DMA</description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables power to the DMA</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED3 -->
            <field>
              <name>RESERVED3</name>
              <description>RESERVED3</description>
              <bitRange>[31:28]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ULPSS_RAM_PWRCTRL_SET_REG1:ULPSS ram power control set register1-->
        <!-- REGISTER 3-->
        <register>
          <name>ULPSS_RAM_PWRCTRL_SET_REG1</name>
          <description>ULPSS ram power control set register1</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000F</resetValue>
          <fields>
            <!--#changed-->
            <!--PWRCTRL1_ULP_SRAM-->
            <field>
              <name>PWRCTRL1_ULP_SRAM</name>
              <description>Enables power to the ULP SRAM.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>this enables power to ULP-SRAM</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ULPSS_RAM_PWRCTRL_CLEAR_REG1:ULPSS ram power control clear register1-->
        <!-- REGISTER 4-->
        <register>
          <name>ULPSS_RAM_PWRCTRL_CLEAR_REG1</name>
          <description>ULPSS ram power control clear register1</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000F</resetValue>
          <fields>
            <!--#changed-->
            <!--PWRCTRL1_ULP_SRAM-->
            <field>
              <name>PWRCTRL1_ULP_SRAM</name>
              <description>Disables power to the ULP SRAM.</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>this disables power to the ULP-SRAM</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ULPSS_RAM_PWRCTRL_SET_REG2:ULPSS ram power control set register2-->
        <!-- REGISTER 5-->
        <register>
          <name>ULPSS_RAM_PWRCTRL_SET_REG2</name>
          <description>ULPSS ram power control set register2</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000F</resetValue>
          <fields>
            <!--#changed-->
            <!--INP_ISO_SRAM-->
            <field>
              <name>INP_ISO_SRAM</name>
              <description>Input isolation control for ULPTASS SRAM</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This enables isolation to ULPTASS SRAM.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--#changed-->
            <!--DS_ULPSRAM__PROC_1-->
            <field>
              <name>DS_ULPSRAM__PROC_1</name>
              <description>Deep-Sleep control for ULPTASS SRAM</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This enables deep sleep mode ULPTASS SRAM.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ULPSS_RAM_PWRCTRL_CLEAR_REG2:ULPSS ram power control set register2-->
        <!-- REGISTER 6-->
        <register>
          <name>ULPSS_RAM_PWRCTRL_CLEAR_REG2</name>
          <description>ULPSS ram power control clear register2</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000F</resetValue>
          <fields>
            <!--#changed-->
            <!--INP_ISO_SRAM-->
            <field>
              <name>INP_ISO_SRAM</name>
              <description>Input isolation control for ULPTASS SRAM</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables isolation to ULPTASS SRAM.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name>RESERVED1</name>
              <description>reserved1</description>
              <bitRange>[15:4]</bitRange>
              <access>read-write</access>
            </field>
            <!--#changed-->
            <!--DS_ULPSRAM__PROC_1-->
            <field>
              <name>DS_ULPSRAM__PROC_1</name>
              <description>Deep-Sleep control for ULPTASS SRAM</description>
              <bitRange>[19:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables deep sleep mode ULPTASS SRAM.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED2 -->
            <field>
              <name>RESERVED2</name>
              <description>reserved2</description>
              <bitRange>[31:20]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ULPSS_RAM_PWRCTRL_SET_REG3:ULPSS ram power control set register3-->
        <!-- REGISTER 7-->
        <register>
          <name>ULPSS_RAM_PWRCTRL_SET_REG3</name>
          <description>ULPSS ram power control set register3</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000F</resetValue>
          <fields>
            <!--#changed-->
            <!--PWRCTRL_ULPTASS_SRAM_PERI_1-->
            <field>
              <name>PWRCTRL_ULPTASS_SRAM_PERI_1</name>
              <description>Power Control signal for ULPTASS SRAM Dual Rail pins</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This enables power to ULPTASS SRAM dual rail pins</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name> RESERVED1 </name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <!-- ULPSS_RAM_PWRCTRL_CLEAR_REG3:ULPSS ram power control clear register3-->
        <!-- REGISTER 8-->
        <register>
          <name>ULPSS_RAM_PWRCTRL_CLEAR_REG3</name>
          <description>ULPSS ram power control clear register3</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000F</resetValue>
          <fields>
            <!--#changed-->
            <!--PWRCTRL_ULPTASS_SRAM_PERI_1-->
            <field>
              <name>PWRCTRL_ULPTASS_SRAM_PERI_1</name>
              <description>Power Control signal for ULPTASS SRAM Dual Rail pins</description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>Disable</name>
                  <description>This has no effect.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>Enable</name>
                  <description>This disables power to ULPTASS SRAM dual rail pins</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <!-- RESERVED1 -->
            <field>
              <name> RESERVED1 </name>
              <description>reserved1</description>
              <bitRange>[31:4]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
  </peripherals>
</device>