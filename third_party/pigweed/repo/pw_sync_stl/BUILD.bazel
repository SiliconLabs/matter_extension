# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load(
    "//pw_build:pigweed.bzl",
    "pw_cc_library",
)
load(
    "//pw_build:selects.bzl",
    "TARGET_COMPATIBLE_WITH_HOST_SELECT",
)

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

pw_cc_library(
    name = "binary_semaphore_headers",
    hdrs = [
        "public/pw_sync_stl/binary_semaphore_inline.h",
        "public/pw_sync_stl/binary_semaphore_native.h",
        "public_overrides/pw_sync_backend/binary_semaphore_inline.h",
        "public_overrides/pw_sync_backend/binary_semaphore_native.h",
    ],
    includes = [
        "public",
        "public_overrides",
    ],
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = [
        "//pw_chrono:system_clock",
    ],
)

pw_cc_library(
    name = "binary_semaphore",
    srcs = [
        "binary_semaphore.cc",
    ],
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = [
        ":binary_semaphore_headers",
        "//pw_assert",
        "//pw_chrono:system_clock",
        "//pw_sync:binary_semaphore_facade",
    ],
)

pw_cc_library(
    name = "counting_semaphore_headers",
    hdrs = [
        "public/pw_sync_stl/counting_semaphore_inline.h",
        "public/pw_sync_stl/counting_semaphore_native.h",
        "public_overrides/pw_sync_backend/counting_semaphore_inline.h",
        "public_overrides/pw_sync_backend/counting_semaphore_native.h",
    ],
    includes = [
        "public",
        "public_overrides",
    ],
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = [
        "//pw_chrono:system_clock",
    ],
)

pw_cc_library(
    name = "counting_semaphore",
    srcs = [
        "counting_semaphore.cc",
    ],
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = [
        ":counting_semaphore_headers",
        "//pw_assert",
        "//pw_chrono:system_clock",
        "//pw_sync:counting_semaphore_facade",
    ],
)

pw_cc_library(
    name = "mutex_headers",
    hdrs = [
        "public/pw_sync_stl/mutex_inline.h",
        "public/pw_sync_stl/mutex_native.h",
        "public_overrides/pw_sync_backend/mutex_inline.h",
        "public_overrides/pw_sync_backend/mutex_native.h",
    ],
    includes = [
        "public",
        "public_overrides",
    ],
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = ["//pw_sync:mutex_facade"],
)

pw_cc_library(
    name = "mutex",
    srcs = ["mutex.cc"],
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = [
        ":mutex_headers",
        "//pw_assert",
        "//pw_sync:mutex_facade",
    ],
)

pw_cc_library(
    name = "timed_mutex_headers",
    hdrs = [
        "public/pw_sync_stl/timed_mutex_inline.h",
        "public_overrides/pw_sync_backend/timed_mutex_inline.h",
    ],
    includes = [
        "public",
        "public_overrides",
    ],
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = [
        "//pw_chrono:system_clock",
    ],
)

pw_cc_library(
    name = "timed_mutex",
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = [
        ":timed_mutex_headers",
        "//pw_sync:timed_mutex_facade",
    ],
)

pw_cc_library(
    name = "recursive_mutex_headers",
    hdrs = [
        "public/pw_sync_stl/recursive_mutex_inline.h",
        "public/pw_sync_stl/recursive_mutex_native.h",
        "public_overrides/pw_sync_backend/recursive_mutex_inline.h",
        "public_overrides/pw_sync_backend/recursive_mutex_native.h",
    ],
    includes = [
        "public",
        "public_overrides",
    ],
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = ["//pw_assert"],
)

pw_cc_library(
    name = "recursive_mutex",
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = [
        ":recursive_mutex_headers",
        "//pw_sync:recursive_mutex_facade",
    ],
)

pw_cc_library(
    name = "interrupt_spin_lock_headers",
    hdrs = [
        "public/pw_sync_stl/interrupt_spin_lock_inline.h",
        "public/pw_sync_stl/interrupt_spin_lock_native.h",
        "public_overrides/pw_sync_backend/interrupt_spin_lock_inline.h",
        "public_overrides/pw_sync_backend/interrupt_spin_lock_native.h",
    ],
    includes = [
        "public",
        "public_overrides",
    ],
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = [
        "//pw_sync:yield_core",
    ],
)

pw_cc_library(
    name = "interrupt_spin_lock",
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = [
        ":interrupt_spin_lock_headers",
        "//pw_sync:interrupt_spin_lock_facade",
        "//pw_sync:yield_core",
    ],
)

pw_cc_library(
    name = "condition_variable_headers",
    hdrs = [
        "public/pw_sync_stl/condition_variable_inline.h",
        "public/pw_sync_stl/condition_variable_native.h",
        "public_overrides/pw_sync_backend/condition_variable_inline.h",
        "public_overrides/pw_sync_backend/condition_variable_native.h",
    ],
    includes = [
        "public",
        "public_overrides",
    ],
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
)

pw_cc_library(
    name = "condition_variable",
    target_compatible_with = select(TARGET_COMPATIBLE_WITH_HOST_SELECT),
    deps = [
        ":condition_variable_headers",
        "//pw_sync:condition_variable_facade",
    ],
)

# TODO(b/228998350): Figure out how to conditionally enable this test like GN
# pw_cc_test(
#     name = "condition_variable_test",
#     deps = [
#         "//pw_sync:condition_variable_test",
#         "//pw_thread_stl:test_threads",
#     ]
# )
