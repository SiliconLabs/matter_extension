# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_build/facade.gni")
import("$dir_pw_docgen/docs.gni")
import("$dir_pw_unit_test/facade_test.gni")
import("$dir_pw_unit_test/test.gni")
import("backend.gni")

config("default_config") {
  include_dirs = [ "public" ]
}

config("null_config") {
  include_dirs = [ "public_overrides" ]
  visibility = [ ":*" ]
}

pw_facade("pw_trace") {
  backend = pw_trace_BACKEND
  public_configs = [ ":default_config" ]
  public = [
    "public/pw_trace/internal/trace_internal.h",
    "public/pw_trace/trace.h",
  ]
  public_deps = [ dir_pw_preprocessor ]
}

pw_source_set("null") {
  public_configs = [
    ":default_config",
    ":null_config",
  ]
  public = [ "public_overrides/pw_trace_backend/trace_backend.h" ]
  sources = [ "public/pw_trace/internal/null.h" ]
  friend = [ ":*" ]
  public_deps = [ dir_pw_preprocessor ]
}

pw_test_group("tests") {
  tests = [
    ":trace_facade_test",
    ":trace_null_test",
    ":trace_zero_backend_test",
  ]
  if (pw_trace_BACKEND != "") {
    tests += [ ":trace_backend_compile_test" ]
  }
}

pw_test("trace_facade_test") {
  configs = [ ":default_config" ]
  sources = [ "trace_facade_test.cc" ]
  public = [
    "pw_trace_test/fake_backend.h",
    "pw_trace_test/public_overrides/pw_trace_backend/trace_backend.h",
  ]
  include_dirs = [
    "pw_trace_test",
    "pw_trace_test/public_overrides",
  ]
  deps = [ ":pw_trace" ]
}

pw_test("trace_backend_compile_test") {
  enable_if = pw_trace_BACKEND != ""

  deps = [
    ":pw_trace",
    pw_trace_BACKEND,
  ]

  sources = [
    "trace_backend_compile_test.cc",
    "trace_backend_compile_test_c.c",
  ]
}

config("zero_config") {
  include_dirs = [ "pw_trace_zero/public_overrides" ]
  visibility = [ ":*" ]
}

pw_source_set("zero") {
  public_configs = [
    ":default_config",
    ":zero_config",
  ]
  public = [ "pw_trace_zero/public_overrides/pw_trace_backend/trace_backend.h" ]
}

pw_facade_test("trace_zero_backend_test") {
  build_args = {
    pw_trace_BACKEND = ":zero"
  }

  deps = [ ":pw_trace" ]

  sources = [
    "trace_backend_compile_test.cc",
    "trace_backend_compile_test_c.c",
  ]
}

pw_test("trace_null_test") {
  sources = [
    "trace_null_test.cc",
    "trace_null_test_c.c",
  ]
  deps = [ ":null" ]
}

pw_doc_group("docs") {
  sources = [ "docs.rst" ]
}

config("trace_sample_app_config") {
  include_dirs = [ "example/public" ]
}

# The trace sample app produces a variety of different trace events to help
# understand tracing.
pw_source_set("trace_sample_app") {
  deps = [ ":pw_trace" ]
  public_deps = [ "$dir_pw_ring_buffer" ]
  sources = [ "example/sample_app.cc" ]
  public_configs = [ ":trace_sample_app_config" ]
  public = [ "example/public/pw_trace/example/sample_app.h" ]
}

# Builds the trace sample app with whichever backend is connected
pw_executable("trace_example_basic") {
  deps = [
    ":trace_sample_app",
    "$dir_pw_log",
  ]
  sources = [ "example/basic.cc" ]
}
