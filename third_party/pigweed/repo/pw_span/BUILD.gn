# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_build/target_types.gni")
import("$dir_pw_docgen/docs.gni")
import("$dir_pw_span/polyfill.gni")
import("$dir_pw_toolchain/traits.gni")
import("$dir_pw_unit_test/test.gni")

config("public_config") {
  include_dirs = [ "public" ]
  visibility = [ ":*" ]
}

config("polyfill_config") {
  include_dirs = [ "internal_only_include_path_do_not_use" ]

  if (pw_span_ENABLE_STD_SPAN_POLYFILL) {
    defines = [ "_PW_SPAN_POLYFILL_ENABLED" ]
  }

  visibility = [ ":*" ]
}

# Provides "pw_span/span.h" and pw::span.
pw_source_set("pw_span") {
  public = [ "public/pw_span/span.h" ]
  public_deps = [ ":common" ]
}

# Provides <span> and std::span.
pw_source_set("polyfill") {
  public_configs = [ ":polyfill_config" ]
  public_deps = [ ":common" ]
  public = [ "internal_only_include_path_do_not_use/span" ]
  sources = [ "public/pw_span/internal/span_polyfill.h" ]

  if (pw_span_ENABLE_STD_SPAN_POLYFILL) {
    remove_public_deps = [ "*" ]
  } else {
    visibility = [ ":*" ]
  }
}

pw_source_set("common") {
  public_configs = [ ":public_config" ]
  public_deps = [ dir_pw_polyfill ]

  # Polyfill <cstddef> (std::byte) and <iterator> (std::size(), std::data) if
  # C++17 is not supported.
  if (pw_toolchain_CXX_STANDARD < pw_toolchain_STANDARD.CXX17) {
    public_deps += [
      "$dir_pw_polyfill:cstddef",
      "$dir_pw_polyfill:iterator",
    ]
  }

  sources = [ "public/pw_span/internal/span_common.inc" ]
  visibility = [ ":*" ]

  if (pw_span_ENABLE_STD_SPAN_POLYFILL) {
    remove_public_deps = [ "*" ]
  }
}

pw_test_group("tests") {
  tests = [
    ":polyfill_test",
    ":pw_span_test",
    ":compatibility_test",
  ]
}

pw_test("polyfill_test") {
  deps = [ ":polyfill" ]
  remove_configs = [ "$dir_pw_build:extra_strict_warnings" ]
  sources = [ "span_test.cc" ]
  defines = [
    "PW_SPAN_TEST_INCLUDE=<span>",
    "PW_SPAN_TEST_NAMESPACE=std",
  ]
}

pw_test("pw_span_test") {
  deps = [ ":pw_span" ]
  remove_configs = [ "$dir_pw_build:extra_strict_warnings" ]
  sources = [ "span_test.cc" ]
  defines = [
    "PW_SPAN_TEST_INCLUDE=\"pw_span/span.h\"",
    "PW_SPAN_TEST_NAMESPACE=pw",
  ]
}

pw_test("compatibility_test") {
  deps = [
    ":polyfill",
    ":pw_span",
  ]
  sources = [ "compatibility_test.cc" ]
}

pw_doc_group("docs") {
  sources = [ "docs.rst" ]
}
