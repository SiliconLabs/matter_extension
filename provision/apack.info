# Matter Provision Advanced Configurator (AC) Adapter Pack Definition
# NB: this adapter pack does not generate any resources, e.g. header files,
# so it is not a true AC. Rather it is implemented as an AC to use 
# Simplicity Studio's AC Adapter Pack framework functionality and support.

# Is used for SetupId
id=matterProvision
label=Matter Provision Advanced Configurator Adapter Pack

# Trigger file extension. No period.
uc.triggerExtension=mattpconf

# Indicate type of adapters supported
adapter_types=JLink

# Set up environments to execute provision script on Linux OS ARM
environment(provisionenv:linux.aarch64) {
  PATH=$(PATH):$(exe.commander)
  LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$(lib.libjlinkarm)
  STUDIO_PYTHONPATH=$(STUDIO_PYTHONPATH):$(this)/modules:$(studio.install)/developer/adapter_packs/cpms/site-packages
}

# Set up environments to execute provision script on Linux OS x86_64
environment(provisionenv:linux.x86_64) {
  PATH=$(PATH):$(exe.commander)
  LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$(lib.libjlinkarm)
  STUDIO_PYTHONPATH=$(STUDIO_PYTHONPATH):$(this)/modules:$(studio.install)/developer/adapter_packs/cpms/site-packages
}

# Set up environments to execute provision script on MacOS ARM
environment(provisionenv:macosx.aarch64) {
  PATH=$(PATH):$(exe.commander)
  DYLD_LIBRARY_PATH=$(DYLD_LIBRARY_PATH):$(lib.libjlinkarm)
  STUDIO_PYTHONPATH=$(STUDIO_PYTHONPATH):$(this)/modules:$(studio.install)/developer/adapter_packs/cpms/site-packages
}

# Set up environments to execute provision script on MacOS x86_64
environment(provisionenv:macosx.x86_64) {
  PATH=$(PATH):$(exe.commander)
  DYLD_LIBRARY_PATH=$(DYLD_LIBRARY_PATH):$(lib.libjlinkarm)
  STUDIO_PYTHONPATH=$(STUDIO_PYTHONPATH):$(this)/modules:$(studio.install)/developer/adapter_packs/cpms/site-packages
}

# Set up environments to execute provision script on Win OS
environment(provisionenv:win32.x86_64) {
  PATH=$(PATH);$(exe.commander);$(lib.libjlinkarm);$(studio.install)/developer/adapter_packs/cpms/applications
  STUDIO_PYTHONPATH=$(STUDIO_PYTHONPATH);$(this)/modules;$(studio.install)/developer/adapter_packs/cpms/site-packages
}

# Function to execute Matter provision script 
function(matter_provision) {
  env=$(provisionenv)
  cmd=$(python) provision.py --inputs ${configFile} --channel ${ipaddress}
}
# Generation function that generates zero resources
function(uc_generate) {
  cmd=$(python) apackGenerateNothing.py ${contentFolder} -o ${generationOutput}
}

# Upgrade function that generates empty result
function(uc_upgrade) {
  cmd=$(python) apackUpgradeEmptyResult.py -r ${results}
}